#pragma once

enum svscmd_type : __int32
{                                       // ...
    SV_CMD_CAN_IGNORE = 0x0,
    SV_CMD_RELIABLE = 0x1,
};

struct svEntity_s // sizeof=0x178
{                                       // ...
    unsigned __int16 worldSector;
    unsigned __int16 nextEntityInWorldSector; // ...
    archivedEntity_s baseline;          // ...
    int numClusters;
    int clusternums[16];                // ...
    int lastCluster;
    int linkcontents;
    float linkmin[2];
    float linkmax[2];
};

struct svscmd_info_t // sizeof=0x408
{                                       // ...
    char cmd[1024];                     // ...
    int time;
    int type;
};
struct clientSnapshot_t // sizeof=0x2F84
{                                       // ...
    playerState_s ps;                   // ...
    int num_entities;
    int num_clients;                    // ...
    int first_entity;
    int first_client;
    int messageSent;
    int messageAcked;
    int messageSize;
    int serverTime;
};

struct __declspec(align(2)) client_t // sizeof=0xA5638
{                                       // ...
    clientHeader_t header;              // ...
    const char *dropReason;
    char userinfo[1024];                // ...
    svscmd_info_t reliableCommandInfo[128]; // ...
    int reliableSequence;
    int reliableAcknowledge;
    int reliableSent;
    int messageAcknowledge;
    int gamestateMessageNum;
    int challenge;
    usercmd_s lastUsercmd;              // ...
    int lastClientCommand;
    char lastClientCommandString[1024];
    gentity_s *gentity;                 // ...
    char name[16];                      // ...
    int downloading;
    char downloadName[64];
    int download;
    int downloadSize;
    int downloadCount;
    int downloadClientBlock;
    int downloadCurrentBlock;
    int downloadXmitBlock;
    unsigned __int8 *downloadBlocks[8];
    int downloadBlockSize[8];
    int downloadEOF;
    int downloadSendTime;
    char downloadURL[256];
    int wwwOk;
    int downloadingWWW;
    int clientDownloadingWWW;
    int wwwFallback;
    int nextReliableTime;
    int lastPacketTime;
    int lastConnectTime;
    int nextSnapshotTime;
    int timeoutCount;
    clientSnapshot_t frames[32];        // ...
    int ping;                           // ...
    int rate;
    int snapshotMsec;
    int snapshotBackoffCount;
    int pureAuthentic;
    char netchanOutgoingBuffer[131072]; // ...
    char netchanIncomingBuffer[2048];
    char cdkeyHash[33];                 // ...
    // padding byte
    unsigned __int16 scriptId;          // ...
    int bIsTestClient;
    int serverId;
    VoicePacket_t voicePackets[40];     // ...
    int voicePacketCount;
    bool muteList[64];                  // ...
    bool sendVoice;                     // ...
    unsigned __int8 stats[8192];        // ...
    unsigned __int8 statPacketsReceived; // ...
    bool tempPacketDebugging;
    // padding byte
};

//sv_init_mp
void __cdecl SV_SetConfigstring(int index, char *val);
void __cdecl SV_GetConfigstring(unsigned int index, char *buffer, int bufferSize);
unsigned int __cdecl SV_GetConfigstringConst(unsigned int index);
void __cdecl SV_SetConfigValueForKey(int start, int max, char *key, char *value);
void __cdecl SV_SetUserinfo(int index, char *val);
void __cdecl SV_GetUserinfo(int index, char *buffer, int bufferSize);
void __cdecl SV_CreateBaseline();
void __cdecl SV_BoundMaxClients(int minimum);
void __cdecl SV_Startup();
void __cdecl SV_ClearServer();
void __cdecl SV_InitArchivedSnapshot();
void __cdecl SV_InitDvar();
void __cdecl SV_SpawnServer(char *server);
void SV_SaveSystemInfo();
bool __cdecl SV_Loaded();
void __cdecl SV_Init();
void __cdecl SV_DropAllClients();
void __cdecl SV_Shutdown(const char *finalmsg);
void __cdecl SV_FinalMessage(const char *message);
void __cdecl SV_CheckThread();



//sv_main_mp
struct cachedSnapshot_t // sizeof=0x1C
{                                       // ...
    int archivedFrame;
    int time;
    int num_entities;
    int first_entity;
    int num_clients;
    int first_client;
    int usesDelta;
};
struct archivedSnapshot_s // sizeof=0x8
{                                       // ...
    int start;
    int size;
};
struct cachedClient_s // sizeof=0x2FCC
{                                       // ...
    int playerStateExists;
    clientState_s cs;
    playerState_s ps;                   // ...
};
struct __declspec(align(4)) challenge_t // sizeof=0x50
{                                       // ...
    netadr_t adr;
    int challenge;                      // ...
    int time;
    int pingTime;                       // ...
    int firstTime;
    int firstPing;                      // ...
    int connected;                      // ...
    char cdkeyHash[33];                 // ...
    // padding byte
    // padding byte
    // padding byte
};
struct tempBanSlot_t // sizeof=0x24
{                                       // ...
    char cdkeyHash[32];                 // ...
    int banTime;                        // ...
};
struct __declspec(align(128)) serverStatic_t // sizeof=0xB227480
{                                       // ...
    cachedSnapshot_t cachedSnapshotFrames[512];
    archivedEntity_s cachedSnapshotEntities[16384]; // ...
    int initialized;                    // ...
    int time;                           // ...
    int snapFlagServerBit;              // ...
    client_t clients[64];               // ...
    int numSnapshotEntities;            // ...
    int numSnapshotClients;             // ...
    int nextSnapshotEntities;           // ...
    int nextSnapshotClients;            // ...
    entityState_s snapshotEntities[172032]; // ...
    clientState_s snapshotClients[131072]; // ...
    int nextArchivedSnapshotFrames;     // ...
    archivedSnapshot_s archivedSnapshotFrames[1200]; // ...
    unsigned __int8 archivedSnapshotBuffer[33554432]; // ...
    int nextArchivedSnapshotBuffer;     // ...
    int nextCachedSnapshotEntities;     // ...
    int nextCachedSnapshotClients;      // ...
    int nextCachedSnapshotFrames;       // ...
    cachedClient_s cachedSnapshotClients[4096]; // ...
    int nextHeartbeatTime;              // ...
    int nextStatusResponseTime;
    challenge_t challenges[1024];       // ...
    netadr_t redirectAddress;           // ...
    netadr_t authorizeAddress;          // ...
    int sv_lastTimeMasterServerCommunicated; // ...
    netProfileInfo_t OOBProf;           // ...
    tempBanSlot_t tempBans[16];         // ...
    float mapCenter[3];                 // ...
};
enum serverState_t : __int32
{                                       // ...
    SS_DEAD = 0x0,
    SS_LOADING = 0x1,
    SS_GAME = 0x2,
};
struct ServerProfileTimes // sizeof=0x8
{                                       // ...
    float frameTime;                    // ...
    float wallClockTime;                // ...
};
struct server_t // sizeof=0x5FC60
{                                       // ...
    serverState_t state;                // ...
    int timeResidual;                   // ...
    bool inFrame;                       // ...
    // padding byte
    // padding byte
    // padding byte
    int restarting;                     // ...
    int start_frameTime;                // ...
    int checksumFeed;                   // ...
    cmodel_t *models[512];
    unsigned __int16 emptyConfigString; // ...
    unsigned __int16 configstrings[2442]; // ...
    // padding byte
    // padding byte
    svEntity_s svEntities[1024];        // ...
    gentity_s *gentities;               // ...
    int gentitySize;                    // ...
    int num_entities;                   // ...
    playerState_s *gameClients;         // ...
    int gameClientSize;                 // ...
    int skelTimeStamp;                  // ...
    int skelMemPos;                     // ...
    int bpsWindow[20];                  // ...
    int bpsWindowSteps;                 // ...
    int bpsTotalBytes;                  // ...
    int bpsMaxBytes;                    // ...
    int ubpsWindow[20];                 // ...
    int ubpsTotalBytes;                 // ...
    int ubpsMaxBytes;                   // ...
    float ucompAve;                     // ...
    int ucompNum;                       // ...
    volatile ServerProfileTimes profile; // ...
    volatile float serverFrameTimeMin;  // ...
    volatile float serverFrameTimeMax;  // ...
    char gametype[64];                  // ...
    bool killServer;                    // ...
    // padding byte
    // padding byte
    // padding byte
    const char *killReason;             // ...
};
void __cdecl TRACK_sv_main();
char *__cdecl SV_ExpandNewlines(char *in);
void __cdecl SV_AddServerCommand(client_t *client, svscmd_type type, char *cmd);
int __cdecl SV_CanReplaceServerCommand(client_t *client, const char *cmd);
bool __cdecl SV_IsFirstTokenEqual(const char *str1, const char *str2);
void __cdecl SV_CullIgnorableServerCommands(client_t *client);
void SV_SendServerCommand(client_t *cl, svscmd_type type, const char *fmt, ...);
client_t *__cdecl SV_FindClientByAddress(netadr_t from, int qport);
void __cdecl SVC_Status(netadr_t from);
void __cdecl SVC_GameCompleteStatus(netadr_t from);
void __cdecl SVC_Info(netadr_t from);
void __cdecl SV_ConnectionlessPacket(netadr_t from, msg_t *msg);
void __cdecl SV_PacketEvent(netadr_t from, msg_t *msg);
void __cdecl SV_CalcPings();
void __cdecl SV_FreeClientScriptId(client_t *cl);
void __cdecl SV_CheckTimeouts();
int __cdecl SV_CheckPaused();
void __cdecl SV_RunFrame();
void __cdecl SV_UpdatePerformanceFrame(float time);
void __cdecl SV_BotUserMove(client_t *cl);
void __cdecl SV_UpdateBots();
void __cdecl SV_WaitServer();
void __cdecl SV_InitSnapshot();
void __cdecl SV_KillLocalServer();
void __cdecl SV_PreFrame();
int __cdecl SV_Frame(int msec);
void __cdecl SV_FrameInternal(int msec);
int SV_PostFrame();
char __cdecl SV_CheckOverflow();


// sv_net_chan_mp
bool __cdecl SV_Netchan_TransmitNextFragment(client_t *client, netchan_t *chan);
void __cdecl SV_Netchan_OutgoingSequenceIncremented(client_t *client, netchan_t *chan);
bool __cdecl SV_Netchan_Transmit(client_t *client, unsigned __int8 *data, int length);
void __cdecl SV_Netchan_AddOOBProfilePacket(int iLength);
void __cdecl SV_Netchan_UpdateProfileStats();



// sv_archive_mp
void __cdecl SV_ArchiveSnapshot(msg_t *msg);
gentity_s *__cdecl SV_GentityNumLocal(int num);
const clientState_s *__cdecl G_GetClientStateLocal(int clientNum);
int __cdecl GetFollowPlayerStateLocal(int clientNum, playerState_s *ps);
