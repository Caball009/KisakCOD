#pragma once
#include "scr_stringlist.h"
#include <cstdio> // FILE
#include <Windows.h>

// LWSS: this enum name is kinda retarded
enum Enum_t : __int32
{
    ENUM_NOP = 0x0,
    ENUM_program = 0x1,
    ENUM_assignment = 0x2,
    ENUM_unknown_variable = 0x3,
    ENUM_local_variable = 0x4,
    ENUM_local_variable_frozen = 0x5,
    ENUM_primitive_expression = 0x6,
    ENUM_integer = 0x7,
    ENUM_float = 0x8,
    ENUM_minus_integer = 0x9,
    ENUM_minus_float = 0xA,
    ENUM_string = 0xB,
    ENUM_istring = 0xC,
    ENUM_array_variable = 0xD,
    ENUM_unknown_field = 0xE,
    ENUM_field_variable = 0xF,
    ENUM_field_variable_frozen = 0x10,
    ENUM_variable = 0x11,
    ENUM_function = 0x12,
    ENUM_call_expression = 0x13,
    ENUM_local_function = 0x14,
    ENUM_far_function = 0x15,
    ENUM_function_pointer = 0x16,
    ENUM_call = 0x17,
    ENUM_method = 0x18,
    ENUM_call_expression_statement = 0x19,
    ENUM_script_call = 0x1A,
    ENUM_return = 0x1B,
    ENUM_return2 = 0x1C,
    ENUM_wait = 0x1D,
    ENUM_script_thread_call = 0x1E,
    ENUM_undefined = 0x1F,
    ENUM_self = 0x20,
    ENUM_self_frozen = 0x21,
    ENUM_level = 0x22,
    ENUM_game = 0x23,
    ENUM_anim = 0x24,
    ENUM_if = 0x25,
    ENUM_if_else = 0x26,
    ENUM_while = 0x27,
    ENUM_for = 0x28,
    ENUM_inc = 0x29,
    ENUM_dec = 0x2A,
    ENUM_binary_equals = 0x2B,
    ENUM_statement_list = 0x2C,
    ENUM_developer_statement_list = 0x2D,
    ENUM_expression_list = 0x2E,
    ENUM_bool_or = 0x2F,
    ENUM_bool_and = 0x30,
    ENUM_binary = 0x31,
    ENUM_bool_not = 0x32,
    ENUM_bool_complement = 0x33,
    ENUM_size_field = 0x34,
    ENUM_self_field = 0x35,
    ENUM_precachetree = 0x36,
    ENUM_waittill = 0x37,
    ENUM_waittillmatch = 0x38,
    ENUM_waittillFrameEnd = 0x39,
    ENUM_notify = 0x3A,
    ENUM_endon = 0x3B,
    ENUM_switch = 0x3C,
    ENUM_case = 0x3D,
    ENUM_default = 0x3E,
    ENUM_break = 0x3F,
    ENUM_continue = 0x40,
    ENUM_expression = 0x41,
    ENUM_empty_array = 0x42,
    ENUM_animation = 0x43,
    ENUM_thread = 0x44,
    ENUM_begin_developer_thread = 0x45,
    ENUM_end_developer_thread = 0x46,
    ENUM_usingtree = 0x47,
    ENUM_false = 0x48,
    ENUM_true = 0x49,
    ENUM_animtree = 0x4A,
    ENUM_breakon = 0x4B,
    ENUM_breakpoint = 0x4C,
    ENUM_prof_begin = 0x4D,
    ENUM_prof_end = 0x4E,
    ENUM_vector = 0x4F,
    ENUM_object = 0x50,
    ENUM_thread_object = 0x51,
    ENUM_local = 0x52,
    ENUM_statement = 0x53,
    ENUM_bad_expression = 0x54,
    ENUM_bad_statement = 0x55,
    ENUM_include = 0x56,
    ENUM_argument = 0x57,
};

// LWSS: Custom named enum so I'm forced to use this on EmitOpcode()
enum Opcode_t : __int32
{
    OP_End = 0x0,
    OP_Return = 0x1,
    OP_GetUndefined = 0x2,
    OP_GetZero = 0x3,
    OP_GetByte = 0x4,
    OP_GetNegByte = 0x5,
    OP_GetUnsignedShort = 0x6,
    OP_GetNegUnsignedShort = 0x7,
    OP_GetInteger = 0x8,
    OP_GetFloat = 0x9,
    OP_GetString = 0xA,
    OP_GetIString = 0xB,
    OP_GetVector = 0xC,
    OP_GetLevelObject = 0xD,
    OP_GetAnimObject = 0xE,
    OP_GetSelf = 0xF,
    OP_GetLevel = 0x10,
    OP_GetGame = 0x11,
    OP_GetAnim = 0x12,
    OP_GetAnimation = 0x13,
    OP_GetGameRef = 0x14,
    OP_GetFunction = 0x15,
    OP_CreateLocalVariable = 0x16,
    OP_RemoveLocalVariables = 0x17,
    OP_EvalLocalVariableCached0 = 0x18,
    OP_EvalLocalVariableCached1 = 0x19,
    OP_EvalLocalVariableCached2 = 0x1A,
    OP_EvalLocalVariableCached3 = 0x1B,
    OP_EvalLocalVariableCached4 = 0x1C,
    OP_EvalLocalVariableCached5 = 0x1D,
    OP_EvalLocalVariableCached = 0x1E,
    OP_EvalLocalArrayCached = 0x1F,
    OP_EvalArray = 0x20,
    OP_EvalLocalArrayRefCached0 = 0x21,
    OP_EvalLocalArrayRefCached = 0x22,
    OP_EvalArrayRef = 0x23,
    OP_ClearArray = 0x24,
    OP_EmptyArray = 0x25,
    OP_GetSelfObject = 0x26,
    OP_EvalLevelFieldVariable = 0x27,
    OP_EvalAnimFieldVariable = 0x28,
    OP_EvalSelfFieldVariable = 0x29,
    OP_EvalFieldVariable = 0x2A,
    OP_EvalLevelFieldVariableRef = 0x2B,
    OP_EvalAnimFieldVariableRef = 0x2C,
    OP_EvalSelfFieldVariableRef = 0x2D,
    OP_EvalFieldVariableRef = 0x2E,
    OP_ClearFieldVariable = 0x2F,
    OP_SafeCreateVariableFieldCached = 0x30,
    OP_SafeSetVariableFieldCached0 = 0x31,
    OP_SafeSetVariableFieldCached = 0x32,
    OP_SafeSetWaittillVariableFieldCached = 0x33,
    OP_clearparams = 0x34,
    OP_checkclearparams = 0x35,
    OP_EvalLocalVariableRefCached0 = 0x36,
    OP_EvalLocalVariableRefCached = 0x37,
    OP_SetLevelFieldVariableField = 0x38,
    OP_SetVariableField = 0x39,
    OP_SetAnimFieldVariableField = 0x3A,
    OP_SetSelfFieldVariableField = 0x3B,
    OP_SetLocalVariableFieldCached0 = 0x3C,
    OP_SetLocalVariableFieldCached = 0x3D,
    OP_CallBuiltin0 = 0x3E,
    OP_CallBuiltin1 = 0x3F,
    OP_CallBuiltin2 = 0x40,
    OP_CallBuiltin3 = 0x41,
    OP_CallBuiltin4 = 0x42,
    OP_CallBuiltin5 = 0x43,
    OP_CallBuiltin = 0x44,
    OP_CallBuiltinMethod0 = 0x45,
    OP_CallBuiltinMethod1 = 0x46,
    OP_CallBuiltinMethod2 = 0x47,
    OP_CallBuiltinMethod3 = 0x48,
    OP_CallBuiltinMethod4 = 0x49,
    OP_CallBuiltinMethod5 = 0x4A,
    OP_CallBuiltinMethod = 0x4B,
    OP_wait = 0x4C,
    OP_waittillFrameEnd = 0x4D,
    OP_PreScriptCall = 0x4E,
    OP_ScriptFunctionCall2 = 0x4F,
    OP_ScriptFunctionCall = 0x50,
    OP_ScriptFunctionCallPointer = 0x51,
    OP_ScriptMethodCall = 0x52,
    OP_ScriptMethodCallPointer = 0x53,
    OP_ScriptThreadCall = 0x54,
    OP_ScriptThreadCallPointer = 0x55,
    OP_ScriptMethodThreadCall = 0x56,
    OP_ScriptMethodThreadCallPointer = 0x57,
    OP_DecTop = 0x58,
    OP_CastFieldObject = 0x59,
    OP_EvalLocalVariableObjectCached = 0x5A,
    OP_CastBool = 0x5B,
    OP_BoolNot = 0x5C,
    OP_BoolComplement = 0x5D,
    OP_JumpOnFalse = 0x5E,
    OP_JumpOnTrue = 0x5F,
    OP_JumpOnFalseExpr = 0x60,
    OP_JumpOnTrueExpr = 0x61,
    OP_jump = 0x62,
    OP_jumpback = 0x63,
    OP_inc = 0x64,
    OP_dec = 0x65,
    OP_bit_or = 0x66,
    OP_bit_ex_or = 0x67,
    OP_bit_and = 0x68,
    OP_equality = 0x69,
    OP_inequality = 0x6A,
    OP_less = 0x6B,
    OP_greater = 0x6C,
    OP_less_equal = 0x6D,
    OP_greater_equal = 0x6E,
    OP_shift_left = 0x6F,
    OP_shift_right = 0x70,
    OP_plus = 0x71,
    OP_minus = 0x72,
    OP_multiply = 0x73,
    OP_divide = 0x74,
    OP_mod = 0x75,
    OP_size = 0x76,
    OP_waittillmatch = 0x77,
    OP_waittill = 0x78,
    OP_notify = 0x79,
    OP_endon = 0x7A,
    OP_voidCodepos = 0x7B,
    OP_switch = 0x7C,
    OP_endswitch = 0x7D,
    OP_vector = 0x7E,
    OP_NOP = 0x7F,
    OP_abort = 0x80,
    OP_object = 0x81,
    OP_thread_object = 0x82,
    OP_EvalLocalVariable = 0x83,
    OP_EvalLocalVariableRef = 0x84,
    OP_prof_begin = 0x85,
    OP_prof_end = 0x86,
    OP_breakpoint = 0x87,
    OP_assignmentBreakpoint = 0x88,
    OP_manualAndAssignmentBreakpoint = 0x89,
    OP_count = 0x8A,
};
inline Opcode_t &operator++(Opcode_t &e) {
    e = static_cast<Opcode_t>(static_cast<int>(e) + 1);
    return e;
}
inline Opcode_t &operator++(Opcode_t &e, int i)
{
    ++e;
    return e;
}

typedef struct
{
    FILE *yy_input_file;
    char *yy_ch_buf;
    char *yy_buf_pos;
    unsigned int yy_buf_size;
    int yy_n_chars;
    int yy_is_our_buffer;
    int yy_is_interactive;
    int yy_at_bol;
    int yy_fill_buffer;
    int yy_buffer_status;
} yy_buffer_state;

int __cdecl yyparse();
int __cdecl yylex();
void __cdecl TextValue(char *str, int len);
int __cdecl StringValue(char *str, int len);
void __cdecl IntegerValue(char *str);
void __cdecl FloatValue(char *str);
int __cdecl yy_get_next_buffer();
int __cdecl yy_get_previous_state();
int __cdecl yy_try_NUL_trans(int yy_current_state);
void __cdecl yy_load_buffer_state();
void __cdecl yy_flush_buffer(yy_buffer_state *b);
void __cdecl  yy_fatal_error(const char *msg);
LPVOID __cdecl yy_flex_alloc(unsigned int size);
void *__cdecl yy_flex_realloc(void *ptr, unsigned int size);
int __cdecl yyerror();
void __cdecl ScriptParse(union sval_u *parseData, unsigned __int8 user);
