// LWSS: some details here...
// https://berthub.eu/lex-yacc/cvs/lexyacc.pdf


// In the YACC file, you write your own main() function, which calls yyparse() at one point.The function
// yyparse() is created for you by YACC, and ends up in y.tab.c.
// yyparse() reads a stream of token / value pairs from yylex(), which needs to be supplied.You can code this
// function yourself, or have Lex do it for you.In our examples, we’ve chosen to leave this task to Lex.
// The yylex() as written by Lex reads characters from a FILE *file pointer called yyin.If you do not set yyin,
// it defaults to standard input.It outputs to yyout, which if unset defaults to stdout.You can also modify
// yyin in the yywrap() function which is called at the end of a file.It allows you to open another file, and
// continue parsing.
// If this is the case, have it return 0. If you want to end parsing at this file, let it return 1.
// Each call to yylex() returns an integer value which represents a token type.This tells YACC what kind of
// token it has read.The token may optionally have a value, which should be placed in the variable yylval.


// By default yylval is of type int, but you can override that from the YACC file by re#defining YYSTYPE.
// The Lexer needs to be able to access yylval.In order to do so, it must be declared in the scope of the lexer
// as an extern variable.The original YACC neglects to do this for you, so you should add the following to
// your lexter, just beneath #include <y.tab.h>:

#include "scr_yacc.h"

#include <malloc.h> // alloca
#include "scr_parsetree.h"
#include "scr_parser.h"
#include "scr_main.h"
#include <client_mp/client_mp.h>
#include "scr_compiler.h"

#pragma region YY_GLOBALS
const __int16 yydefact[262] =
{
  0,
  133,
  0,
  130,
  64,
  45,
  46,
  110,
  114,
  0,
  0,
  0,
  0,
  0,
  41,
  42,
  69,
  0,
  0,
  49,
  50,
  51,
  52,
  53,
  0,
  0,
  0,
  60,
  0,
  29,
  85,
  0,
  88,
  89,
  58,
  59,
  90,
  0,
  0,
  110,
  0,
  2,
  0,
  34,
  55,
  36,
  0,
  47,
  5,
  48,
  3,
  0,
  4,
  0,
  1,
  0,
  0,
  112,
  47,
  5,
  48,
  113,
  0,
  0,
  56,
  43,
  44,
  57,
  24,
  25,
  68,
  70,
  28,
  0,
  0,
  37,
  0,
  0,
  0,
  33,
  0,
  0,
  0,
  0,
  65,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  114,
  0,
  0,
  54,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  71,
  72,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  97,
  28,
  131,
  0,
  0,
  127,
  128,
  129,
  132,
  98,
  105,
  0,
  0,
  0,
  94,
  108,
  109,
  0,
  40,
  0,
  0,
  0,
  0,
  27,
  0,
  0,
  0,
  104,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  32,
  0,
  0,
  0,
  62,
  66,
  0,
  0,
  0,
  0,
  0,
  114,
  67,
  73,
  74,
  75,
  76,
  77,
  78,
  79,
  80,
  81,
  82,
  118,
  0,
  0,
  107,
  111,
  0,
  30,
  0,
  0,
  26,
  0,
  0,
  91,
  92,
  38,
  63,
  120,
  0,
  122,
  0,
  124,
  0,
  0,
  0,
  0,
  116,
  117,
  0,
  0,
  106,
  35,
  99,
  101,
  95,
  110,
  83,
  0,
  84,
  0,
  86,
  0,
  87,
  61,
  39,
  0,
  0,
  0,
  0,
  96,
  0,
  0,
  119,
  121,
  123,
  115,
  110,
  126,
  100,
  0,
  103,
  0,
  102,
  125,
  0,
  0,
  0
}; // idb
const __int16 yypact[262] =
{
  -15,
  32768,
  702,
  -50,
  8,
  32768,
  32768,
  32768,
  988,
  22,
  -10,
  24,
  988,
  988,
  32768,
  32768,
  988,
  988,
  18,
  32768,
  32768,
  32768,
  32768,
  32768,
  17,
  28,
  34,
  32768,
  44,
  32768,
  32768,
  43,
  32768,
  32768,
  32768,
  32768,
  32768,
  50,
  51,
  32768,
  49,
  908,
  -8,
  32768,
  32768,
  32768,
  55,
  -7,
  228,
  109,
  -19,
  27,
  32768,
  16,
  -3,
  29,
  277,
  908,
  32768,
  4,
  32768,
  36,
  63,
  988,
  32768,
  32768,
  32768,
  32768,
  32768,
  32768,
  908,
  908,
  66,
  67,
  25,
  32768,
  988,
  988,
  617,
  32768,
  988,
  74,
  82,
  362,
  32768,
  988,
  988,
  988,
  988,
  988,
  988,
  988,
  988,
  988,
  988,
  988,
  988,
  988,
  988,
  988,
  988,
  988,
  988,
  85,
  988,
  1055,
  10,
  32768,
  86,
  89,
  90,
  91,
  92,
  99,
  988,
  32768,
  32768,
  988,
  988,
  988,
  988,
  988,
  988,
  988,
  988,
  988,
  988,
  32768,
  32768,
  32768,
  102,
  103,
  32768,
  32768,
  32768,
  32768,
  32768,
  32768,
  1086,
  54,
  228,
  32768,
  32768,
  32768,
  988,
  32768,
  1265,
  110,
  1162,
  1183,
  988,
  1204,
  105,
  106,
  32768,
  1301,
  1317,
  358,
  167,
  312,
  395,
  395,
  115,
  115,
  115,
  115,
  77,
  77,
  12,
  12,
  32768,
  32768,
  32768,
  108,
  127,
  957,
  1284,
  32768,
  32768,
  988,
  988,
  988,
  988,
  988,
  988,
  908,
  908,
  908,
  908,
  908,
  908,
  908,
  908,
  908,
  908,
  908,
  142,
  156,
  1,
  32768,
  908,
  162,
  32768,
  787,
  787,
  908,
  137,
  169,
  32768,
  32768,
  32768,
  32768,
  908,
  -4,
  908,
  15,
  908,
  20,
  1225,
  1246,
  168,
  32768,
  143,
  170,
  171,
  32768,
  32768,
  132,
  32768,
  872,
  32768,
  32768,
  195,
  32768,
  988,
  32768,
  988,
  32768,
  32768,
  32768,
  196,
  197,
  165,
  787,
  32768,
  199,
  447,
  32768,
  908,
  908,
  32768,
  32768,
  32768,
  32768,
  787,
  32768,
  532,
  32768,
  32768,
  220,
  221,
  32768
}; // idb
const __int16 yytable[1348] =
{
  48,
  130,
  174,
  -93,
  47,
  72,
  231,
  83,
  72,
  52,
  113,
  1,
  105,
  2,
  177,
  105,
  49,
  -31,
  53,
  -94,
  128,
  113,
  72,
  65,
  66,
  233,
  76,
  74,
  67,
  73,
  235,
  -93,
  232,
  63,
  64,
  41,
  106,
  77,
  225,
  106,
  100,
  101,
  102,
  78,
  18,
  68,
  69,
  18,
  79,
  70,
  71,
  234,
  80,
  84,
  140,
  178,
  236,
  74,
  47,
  81,
  82,
  103,
  129,
  131,
  104,
  127,
  107,
  135,
  74,
  107,
  49,
  29,
  144,
  145,
  29,
  -31,
  140,
  -28,
  63,
  152,
  47,
  140,
  220,
  132,
  133,
  47,
  29,
  153,
  29,
  173,
  112,
  199,
  49,
  112,
  147,
  179,
  146,
  49,
  180,
  181,
  182,
  183,
  113,
  98,
  99,
  100,
  101,
  102,
  184,
  148,
  149,
  196,
  197,
  151,
  202,
  208,
  209,
  -30,
  155,
  156,
  157,
  158,
  159,
  160,
  161,
  162,
  163,
  164,
  165,
  166,
  167,
  168,
  169,
  170,
  171,
  172,
  198,
  210,
  176,
  96,
  97,
  98,
  99,
  100,
  101,
  102,
  221,
  185,
  114,
  74,
  186,
  187,
  188,
  189,
  190,
  191,
  192,
  193,
  194,
  195,
  113,
  224,
  115,
  116,
  117,
  118,
  119,
  120,
  121,
  122,
  123,
  124,
  125,
  126,
  226,
  229,
  230,
  200,
  239,
  240,
  241,
  242,
  243,
  205,
  89,
  90,
  91,
  92,
  93,
  94,
  95,
  96,
  97,
  98,
  99,
  100,
  101,
  102,
  246,
  247,
  250,
  140,
  140,
  252,
  251,
  47,
  47,
  74,
  146,
  254,
  227,
  228,
  212,
  214,
  216,
  218,
  219,
  49,
  49,
  256,
  260,
  261,
  75,
  244,
  50,
  150,
  0,
  140,
  0,
  0,
  0,
  47,
  72,
  0,
  0,
  0,
  0,
  0,
  0,
  105,
  0,
  140,
  0,
  49,
  140,
  47,
  0,
  0,
  47,
  0,
  253,
  0,
  140,
  0,
  140,
  0,
  47,
  49,
  47,
  0,
  49,
  257,
  0,
  106,
  0,
  0,
  0,
  248,
  49,
  249,
  49,
  18,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  4,
  5,
  6,
  7,
  136,
  8,
  0,
  9,
  0,
  0,
  0,
  0,
  107,
  0,
  0,
  0,
  0,
  29,
  108,
  109,
  0,
  110,
  0,
  10,
  0,
  0,
  11,
  111,
  0,
  14,
  15,
  0,
  0,
  0,
  137,
  0,
  112,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  0,
  25,
  26,
  90,
  91,
  92,
  93,
  94,
  95,
  96,
  97,
  98,
  99,
  100,
  101,
  102,
  0,
  27,
  0,
  28,
  29,
  0,
  0,
  30,
  0,
  31,
  138,
  139,
  32,
  33,
  0,
  34,
  35,
  36,
  37,
  38,
  39,
  0,
  40,
  4,
  5,
  6,
  7,
  0,
  8,
  0,
  9,
  88,
  89,
  90,
  91,
  92,
  93,
  94,
  95,
  96,
  97,
  98,
  99,
  100,
  101,
  102,
  10,
  0,
  0,
  11,
  0,
  0,
  14,
  15,
  0,
  0,
  0,
  137,
  0,
  0,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  0,
  25,
  26,
  92,
  93,
  94,
  95,
  96,
  97,
  98,
  99,
  100,
  101,
  102,
  0,
  0,
  0,
  27,
  0,
  28,
  29,
  0,
  0,
  30,
  0,
  31,
  138,
  139,
  32,
  33,
  0,
  34,
  35,
  36,
  37,
  38,
  39,
  154,
  40,
  4,
  5,
  6,
  7,
  255,
  8,
  0,
  9,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  10,
  0,
  0,
  11,
  0,
  0,
  14,
  15,
  0,
  0,
  0,
  137,
  0,
  0,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  0,
  25,
  26,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  27,
  0,
  28,
  29,
  0,
  0,
  30,
  0,
  31,
  138,
  139,
  32,
  33,
  0,
  34,
  35,
  36,
  37,
  38,
  39,
  0,
  40,
  4,
  5,
  6,
  7,
  258,
  8,
  0,
  9,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  10,
  0,
  0,
  11,
  0,
  0,
  14,
  15,
  0,
  0,
  0,
  137,
  0,
  0,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  0,
  25,
  26,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  27,
  0,
  28,
  29,
  0,
  0,
  30,
  0,
  31,
  138,
  139,
  32,
  33,
  0,
  34,
  35,
  36,
  37,
  38,
  39,
  0,
  40,
  4,
  5,
  6,
  7,
  0,
  8,
  0,
  9,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  10,
  0,
  0,
  11,
  0,
  0,
  14,
  15,
  0,
  0,
  0,
  137,
  0,
  0,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  0,
  25,
  26,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  27,
  0,
  28,
  29,
  0,
  0,
  30,
  0,
  31,
  138,
  139,
  32,
  33,
  0,
  34,
  35,
  36,
  37,
  38,
  39,
  0,
  40,
  4,
  5,
  6,
  7,
  0,
  8,
  0,
  9,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  10,
  0,
  0,
  11,
  12,
  13,
  14,
  15,
  0,
  0,
  0,
  0,
  0,
  0,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  0,
  25,
  26,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  27,
  0,
  28,
  29,
  0,
  0,
  30,
  0,
  31,
  0,
  0,
  32,
  33,
  0,
  34,
  35,
  36,
  37,
  38,
  39,
  0,
  40,
  4,
  5,
  6,
  7,
  0,
  8,
  0,
  9,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  10,
  0,
  0,
  11,
  0,
  0,
  14,
  15,
  0,
  0,
  0,
  0,
  0,
  0,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  0,
  25,
  26,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  27,
  0,
  28,
  29,
  0,
  0,
  30,
  0,
  31,
  0,
  0,
  32,
  33,
  0,
  34,
  35,
  36,
  37,
  38,
  39,
  0,
  40,
  4,
  5,
  6,
  0,
  0,
  8,
  0,
  9,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  10,
  0,
  0,
  11,
  0,
  0,
  14,
  15,
  0,
  0,
  0,
  0,
  0,
  0,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  85,
  86,
  87,
  88,
  89,
  90,
  91,
  92,
  93,
  94,
  95,
  96,
  97,
  98,
  99,
  100,
  101,
  102,
  27,
  0,
  28,
  29,
  0,
  0,
  30,
  0,
  0,
  0,
  0,
  32,
  33,
  0,
  34,
  35,
  36,
  37,
  38,
  0,
  0,
  40,
  4,
  5,
  6,
  0,
  0,
  8,
  0,
  175,
  64,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  10,
  0,
  0,
  11,
  12,
  13,
  14,
  15,
  4,
  5,
  6,
  0,
  0,
  8,
  0,
  9,
  18,
  19,
  20,
  21,
  22,
  23,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  10,
  0,
  0,
  11,
  12,
  13,
  14,
  15,
  0,
  27,
  0,
  28,
  29,
  0,
  0,
  0,
  18,
  19,
  20,
  21,
  22,
  23,
  0,
  34,
  35,
  0,
  0,
  0,
  0,
  0,
  40,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  27,
  0,
  28,
  29,
  4,
  5,
  6,
  0,
  0,
  8,
  0,
  175,
  0,
  0,
  34,
  35,
  0,
  0,
  0,
  0,
  0,
  40,
  0,
  0,
  0,
  0,
  0,
  10,
  0,
  0,
  11,
  12,
  13,
  14,
  15,
  4,
  5,
  6,
  0,
  0,
  8,
  0,
  9,
  18,
  19,
  20,
  21,
  22,
  23,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  10,
  0,
  0,
  11,
  0,
  0,
  14,
  15,
  0,
  27,
  0,
  28,
  29,
  0,
  0,
  0,
  18,
  19,
  20,
  21,
  22,
  23,
  0,
  34,
  35,
  0,
  0,
  0,
  0,
  0,
  40,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  27,
  0,
  28,
  29,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  34,
  35,
  0,
  0,
  0,
  203,
  0,
  40,
  85,
  86,
  87,
  88,
  89,
  90,
  91,
  92,
  93,
  94,
  95,
  96,
  97,
  98,
  99,
  100,
  101,
  102,
  204,
  0,
  0,
  85,
  86,
  87,
  88,
  89,
  90,
  91,
  92,
  93,
  94,
  95,
  96,
  97,
  98,
  99,
  100,
  101,
  102,
  207,
  0,
  0,
  85,
  86,
  87,
  88,
  89,
  90,
  91,
  92,
  93,
  94,
  95,
  96,
  97,
  98,
  99,
  100,
  101,
  102,
  237,
  0,
  0,
  85,
  86,
  87,
  88,
  89,
  90,
  91,
  92,
  93,
  94,
  95,
  96,
  97,
  98,
  99,
  100,
  101,
  102,
  238,
  0,
  0,
  85,
  86,
  87,
  88,
  89,
  90,
  91,
  92,
  93,
  94,
  95,
  96,
  97,
  98,
  99,
  100,
  101,
  102,
  201,
  85,
  86,
  87,
  88,
  89,
  90,
  91,
  92,
  93,
  94,
  95,
  96,
  97,
  98,
  99,
  100,
  101,
  102,
  211,
  85,
  86,
  87,
  88,
  89,
  90,
  91,
  92,
  93,
  94,
  95,
  96,
  97,
  98,
  99,
  100,
  101,
  102,
  86,
  87,
  88,
  89,
  90,
  91,
  92,
  93,
  94,
  95,
  96,
  97,
  98,
  99,
  100,
  101,
  102,
  87,
  88,
  89,
  90,
  91,
  92,
  93,
  94,
  95,
  96,
  97,
  98,
  99,
  100,
  101,
  102
}; // idb
const char yytranslate[345] =
{
  '\0',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x01',
  '\x03',
  '\x04',
  '\x05',
  '\x06',
  '\a',
  '\b',
  '\t',
  '\n',
  '\v',
  '\f',
  '\r',
  '\x0E',
  '\x0F',
  '\x10',
  '\x11',
  '\x12',
  '\x13',
  '\x14',
  '\x15',
  '\x16',
  '\x17',
  '\x18',
  '\x19',
  '\x1A',
  '\x1B',
  '\x1C',
  '\x1D',
  '\x1E',
  '\x1F',
  ' ',
  '!',
  '\"',
  '#',
  '$',
  '%',
  '&',
  '\'',
  '(',
  ')',
  '*',
  '+',
  ',',
  '-',
  '.',
  '/',
  '0',
  '1',
  '2',
  '3',
  '4',
  '5',
  '6',
  '7',
  '8',
  '9',
  ':',
  ';',
  '<',
  '=',
  '>',
  '?',
  '@',
  'A',
  'B',
  'C',
  'D',
  'E',
  'F',
  'G',
  'H',
  'I',
  'J',
  'K',
  'L',
  'M',
  'N',
  'O',
  'P',
  'Q',
  'R',
  'S',
  'T',
  'U',
  'V',
  'W',
  'X',
  'Y',
  'Z'
}; // idb
const __int16 yyr1[134] =
{
  0,
  91,
  91,
  91,
  91,
  92,
  92,
  92,
  92,
  92,
  92,
  92,
  92,
  92,
  92,
  92,
  92,
  92,
  92,
  92,
  92,
  92,
  92,
  92,
  92,
  92,
  93,
  93,
  94,
  94,
  95,
  95,
  96,
  96,
  97,
  97,
  98,
  98,
  99,
  99,
  100,
  100,
  100,
  100,
  100,
  100,
  100,
  100,
  100,
  100,
  100,
  100,
  100,
  100,
  100,
  100,
  100,
  100,
  100,
  100,
  100,
  100,
  101,
  101,
  101,
  101,
  101,
  102,
  102,
  102,
  102,
  102,
  102,
  102,
  102,
  102,
  102,
  102,
  102,
  102,
  102,
  102,
  102,
  102,
  102,
  102,
  102,
  102,
  102,
  102,
  102,
  102,
  102,
  103,
  103,
  104,
  104,
  105,
  105,
  105,
  105,
  105,
  105,
  105,
  105,
  106,
  106,
  106,
  106,
  107,
  107,
  108,
  108,
  109,
  109,
  110,
  110,
  111,
  111,
  112,
  112,
  113,
  113,
  114,
  114,
  115,
  115,
  115,
  115,
  116,
  116,
  117,
  118,
  118
}; // idb
const __int16 yyr2[134] =
{
  0,
  3,
  2,
  2,
  2,
  1,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  2,
  2,
  1,
  0,
  1,
  1,
  3,
  1,
  3,
  2,
  1,
  5,
  1,
  2,
  4,
  5,
  3,
  1,
  1,
  2,
  2,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  2,
  1,
  2,
  2,
  1,
  1,
  1,
  5,
  3,
  4,
  1,
  2,
  3,
  3,
  2,
  1,
  2,
  2,
  2,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  5,
  5,
  1,
  5,
  5,
  1,
  1,
  1,
  4,
  4,
  1,
  1,
  0,
  1,
  2,
  3,
  5,
  7,
  5,
  8,
  7,
  3,
  1,
  3,
  2,
  1,
  2,
  0,
  3,
  1,
  1,
  0,
  3,
  1,
  1,
  0,
  3,
  1,
  3,
  1,
  3,
  1,
  7,
  5,
  1,
  1,
  2,
  0,
  2,
  3,
  0
}; // idb
const __int16 yycheck[1348] =
{
  2,
  4,
  104,
  10,
  2,
  4,
  10,
  39,
  4,
  2,
  48,
  26,
  11,
  28,
  4,
  11,
  2,
  9,
  68,
  38,
  4,
  59,
  4,
  33,
  34,
  10,
  9,
  18,
  4,
  11,
  10,
  38,
  36,
  11,
  12,
  2,
  35,
  9,
  37,
  35,
  28,
  29,
  30,
  9,
  43,
  12,
  13,
  43,
  4,
  16,
  17,
  36,
  9,
  4,
  56,
  45,
  36,
  48,
  56,
  9,
  9,
  69,
  53,
  66,
  9,
  38,
  65,
  38,
  59,
  65,
  56,
  70,
  36,
  10,
  70,
  9,
  78,
  69,
  11,
  5,
  78,
  83,
  184,
  86,
  87,
  83,
  70,
  5,
  70,
  4,
  89,
  37,
  78,
  89,
  69,
  9,
  63,
  83,
  9,
  9,
  9,
  9,
  140,
  26,
  27,
  28,
  29,
  30,
  9,
  76,
  77,
  9,
  9,
  80,
  4,
  10,
  10,
  9,
  85,
  86,
  87,
  88,
  89,
  90,
  91,
  92,
  93,
  94,
  95,
  96,
  97,
  98,
  99,
  100,
  101,
  102,
  138,
  10,
  105,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  4,
  114,
  39,
  140,
  117,
  118,
  119,
  120,
  121,
  122,
  123,
  124,
  125,
  126,
  198,
  5,
  53,
  54,
  55,
  56,
  57,
  58,
  59,
  60,
  61,
  62,
  63,
  64,
  12,
  38,
  7,
  144,
  10,
  36,
  10,
  10,
  50,
  150,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  230,
  4,
  4,
  203,
  204,
  38,
  7,
  203,
  204,
  198,
  175,
  10,
  203,
  204,
  179,
  180,
  181,
  182,
  183,
  203,
  204,
  251,
  0,
  0,
  18,
  229,
  2,
  78,
  -1,
  229,
  -1,
  -1,
  -1,
  229,
  4,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  11,
  -1,
  243,
  -1,
  229,
  246,
  243,
  -1,
  -1,
  246,
  -1,
  243,
  -1,
  254,
  -1,
  256,
  -1,
  254,
  243,
  256,
  -1,
  246,
  254,
  -1,
  35,
  -1,
  -1,
  -1,
  234,
  254,
  236,
  256,
  43,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  4,
  5,
  6,
  7,
  8,
  9,
  -1,
  11,
  -1,
  -1,
  -1,
  -1,
  65,
  -1,
  -1,
  -1,
  -1,
  70,
  71,
  72,
  -1,
  74,
  -1,
  27,
  -1,
  -1,
  30,
  80,
  -1,
  33,
  34,
  -1,
  -1,
  -1,
  38,
  -1,
  89,
  41,
  42,
  43,
  44,
  45,
  46,
  47,
  48,
  49,
  -1,
  51,
  52,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  -1,
  67,
  -1,
  69,
  70,
  -1,
  -1,
  73,
  -1,
  75,
  76,
  77,
  78,
  79,
  -1,
  81,
  82,
  83,
  84,
  85,
  86,
  -1,
  88,
  4,
  5,
  6,
  7,
  -1,
  9,
  -1,
  11,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  27,
  -1,
  -1,
  30,
  -1,
  -1,
  33,
  34,
  -1,
  -1,
  -1,
  38,
  -1,
  -1,
  41,
  42,
  43,
  44,
  45,
  46,
  47,
  48,
  49,
  -1,
  51,
  52,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  -1,
  -1,
  -1,
  67,
  -1,
  69,
  70,
  -1,
  -1,
  73,
  -1,
  75,
  76,
  77,
  78,
  79,
  -1,
  81,
  82,
  83,
  84,
  85,
  86,
  87,
  88,
  4,
  5,
  6,
  7,
  8,
  9,
  -1,
  11,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  27,
  -1,
  -1,
  30,
  -1,
  -1,
  33,
  34,
  -1,
  -1,
  -1,
  38,
  -1,
  -1,
  41,
  42,
  43,
  44,
  45,
  46,
  47,
  48,
  49,
  -1,
  51,
  52,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  67,
  -1,
  69,
  70,
  -1,
  -1,
  73,
  -1,
  75,
  76,
  77,
  78,
  79,
  -1,
  81,
  82,
  83,
  84,
  85,
  86,
  -1,
  88,
  4,
  5,
  6,
  7,
  8,
  9,
  -1,
  11,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  27,
  -1,
  -1,
  30,
  -1,
  -1,
  33,
  34,
  -1,
  -1,
  -1,
  38,
  -1,
  -1,
  41,
  42,
  43,
  44,
  45,
  46,
  47,
  48,
  49,
  -1,
  51,
  52,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  67,
  -1,
  69,
  70,
  -1,
  -1,
  73,
  -1,
  75,
  76,
  77,
  78,
  79,
  -1,
  81,
  82,
  83,
  84,
  85,
  86,
  -1,
  88,
  4,
  5,
  6,
  7,
  -1,
  9,
  -1,
  11,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  27,
  -1,
  -1,
  30,
  -1,
  -1,
  33,
  34,
  -1,
  -1,
  -1,
  38,
  -1,
  -1,
  41,
  42,
  43,
  44,
  45,
  46,
  47,
  48,
  49,
  -1,
  51,
  52,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  67,
  -1,
  69,
  70,
  -1,
  -1,
  73,
  -1,
  75,
  76,
  77,
  78,
  79,
  -1,
  81,
  82,
  83,
  84,
  85,
  86,
  -1,
  88,
  4,
  5,
  6,
  7,
  -1,
  9,
  -1,
  11,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  27,
  -1,
  -1,
  30,
  31,
  32,
  33,
  34,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  41,
  42,
  43,
  44,
  45,
  46,
  47,
  48,
  49,
  -1,
  51,
  52,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  67,
  -1,
  69,
  70,
  -1,
  -1,
  73,
  -1,
  75,
  -1,
  -1,
  78,
  79,
  -1,
  81,
  82,
  83,
  84,
  85,
  86,
  -1,
  88,
  4,
  5,
  6,
  7,
  -1,
  9,
  -1,
  11,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  27,
  -1,
  -1,
  30,
  -1,
  -1,
  33,
  34,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  41,
  42,
  43,
  44,
  45,
  46,
  47,
  48,
  49,
  -1,
  51,
  52,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  67,
  -1,
  69,
  70,
  -1,
  -1,
  73,
  -1,
  75,
  -1,
  -1,
  78,
  79,
  -1,
  81,
  82,
  83,
  84,
  85,
  86,
  -1,
  88,
  4,
  5,
  6,
  -1,
  -1,
  9,
  -1,
  11,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  27,
  -1,
  -1,
  30,
  -1,
  -1,
  33,
  34,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  41,
  42,
  43,
  44,
  45,
  46,
  47,
  48,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  67,
  -1,
  69,
  70,
  -1,
  -1,
  73,
  -1,
  -1,
  -1,
  -1,
  78,
  79,
  -1,
  81,
  82,
  83,
  84,
  85,
  -1,
  -1,
  88,
  4,
  5,
  6,
  -1,
  -1,
  9,
  -1,
  11,
  12,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  27,
  -1,
  -1,
  30,
  31,
  32,
  33,
  34,
  4,
  5,
  6,
  -1,
  -1,
  9,
  -1,
  11,
  43,
  44,
  45,
  46,
  47,
  48,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  27,
  -1,
  -1,
  30,
  31,
  32,
  33,
  34,
  -1,
  67,
  -1,
  69,
  70,
  -1,
  -1,
  -1,
  43,
  44,
  45,
  46,
  47,
  48,
  -1,
  81,
  82,
  -1,
  -1,
  -1,
  -1,
  -1,
  88,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  67,
  -1,
  69,
  70,
  4,
  5,
  6,
  -1,
  -1,
  9,
  -1,
  11,
  -1,
  -1,
  81,
  82,
  -1,
  -1,
  -1,
  -1,
  -1,
  88,
  -1,
  -1,
  -1,
  -1,
  -1,
  27,
  -1,
  -1,
  30,
  31,
  32,
  33,
  34,
  4,
  5,
  6,
  -1,
  -1,
  9,
  -1,
  11,
  43,
  44,
  45,
  46,
  47,
  48,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  27,
  -1,
  -1,
  30,
  -1,
  -1,
  33,
  34,
  -1,
  67,
  -1,
  69,
  70,
  -1,
  -1,
  -1,
  43,
  44,
  45,
  46,
  47,
  48,
  -1,
  81,
  82,
  -1,
  -1,
  -1,
  -1,
  -1,
  88,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  67,
  -1,
  69,
  70,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  81,
  82,
  -1,
  -1,
  -1,
  10,
  -1,
  88,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  10,
  -1,
  -1,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  10,
  -1,
  -1,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  10,
  -1,
  -1,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  10,
  -1,
  -1,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30
}; // idb
const __int16 yy_accept[258] =
{
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  95,
  93,
  1,
  4,
  33,
  93,
  93,
  89,
  32,
  19,
  11,
  12,
  30,
  28,
  37,
  29,
  38,
  31,
  35,
  40,
  42,
  22,
  41,
  23,
  39,
  91,
  13,
  14,
  18,
  91,
  91,
  91,
  91,
  91,
  91,
  91,
  91,
  91,
  91,
  91,
  91,
  91,
  91,
  91,
  91,
  9,
  17,
  10,
  34,
  3,
  3,
  4,
  21,
  0,
  7,
  0,
  88,
  0,
  0,
  0,
  66,
  0,
  16,
  59,
  64,
  55,
  62,
  56,
  63,
  36,
  0,
  87,
  6,
  5,
  65,
  0,
  35,
  0,
  71,
  26,
  24,
  20,
  25,
  27,
  91,
  0,
  58,
  91,
  91,
  91,
  91,
  91,
  91,
  91,
  91,
  91,
  91,
  51,
  91,
  91,
  91,
  91,
  91,
  91,
  91,
  91,
  91,
  91,
  91,
  57,
  15,
  2,
  0,
  0,
  0,
  0,
  8,
  0,
  0,
  5,
  0,
  36,
  60,
  61,
  92,
  91,
  91,
  91,
  91,
  91,
  91,
  91,
  91,
  54,
  91,
  91,
  91,
  91,
  91,
  91,
  91,
  91,
  91,
  91,
  91,
  91,
  0,
  0,
  0,
  0,
  92,
  50,
  91,
  77,
  91,
  91,
  52,
  91,
  91,
  49,
  91,
  91,
  91,
  91,
  47,
  91,
  91,
  83,
  91,
  44,
  91,
  0,
  0,
  0,
  67,
  79,
  91,
  91,
  81,
  82,
  48,
  91,
  91,
  91,
  91,
  91,
  91,
  91,
  53,
  0,
  0,
  0,
  91,
  91,
  91,
  91,
  75,
  91,
  91,
  43,
  76,
  45,
  91,
  91,
  0,
  0,
  0,
  90,
  91,
  91,
  78,
  91,
  91,
  91,
  91,
  0,
  70,
  0,
  91,
  80,
  91,
  86,
  91,
  72,
  69,
  0,
  91,
  91,
  46,
  91,
  91,
  0,
  84,
  85,
  91,
  91,
  0,
  91,
  91,
  0,
  91,
  91,
  0,
  91,
  73,
  0,
  91,
  68,
  91,
  74,
  0
}; // idb
const int yy_ec[256] =
{
  0,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  2,
  3,
  1,
  1,
  2,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  2,
  4,
  5,
  6,
  7,
  8,
  9,
  1,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  18,
  18,
  18,
  18,
  18,
  18,
  18,
  18,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  1,
  25,
  25,
  25,
  25,
  26,
  25,
  25,
  25,
  25,
  25,
  25,
  25,
  25,
  25,
  25,
  25,
  25,
  25,
  25,
  25,
  25,
  25,
  25,
  25,
  25,
  25,
  27,
  28,
  29,
  30,
  31,
  1,
  32,
  33,
  34,
  35,
  36,
  37,
  38,
  39,
  40,
  25,
  41,
  42,
  43,
  44,
  45,
  46,
  25,
  47,
  48,
  49,
  50,
  51,
  52,
  25,
  53,
  54,
  55,
  56,
  57,
  58,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1
}; // idb
const int yy_meta[59] =
{
  0,
  1,
  1,
  2,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  3,
  1,
  1,
  1,
  1,
  1,
  1,
  4,
  4,
  1,
  3,
  1,
  1,
  4,
  4,
  4,
  4,
  4,
  4,
  4,
  4,
  4,
  4,
  4,
  4,
  4,
  4,
  4,
  4,
  4,
  4,
  4,
  4,
  4,
  4,
  4,
  4,
  1,
  1,
  1,
  1
}; // idb
const __int16 yy_base[266] =
{
  0,
  431,
  430,
  0,
  0,
  56,
  57,
  432,
  435,
  435,
  429,
  408,
  56,
  45,
  435,
  407,
  58,
  435,
  435,
  406,
  51,
  435,
  50,
  48,
  64,
  71,
  408,
  435,
  53,
  404,
  56,
  435,
  397,
  435,
  435,
  402,
  54,
  43,
  60,
  55,
  65,
  71,
  72,
  73,
  66,
  78,
  80,
  83,
  84,
  85,
  86,
  89,
  435,
  93,
  435,
  435,
  435,
  406,
  420,
  435,
  113,
  435,
  0,
  435,
  377,
  376,
  371,
  435,
  117,
  435,
  435,
  435,
  435,
  435,
  435,
  435,
  107,
  378,
  435,
  435,
  0,
  435,
  399,
  113,
  122,
  435,
  394,
  435,
  435,
  435,
  393,
  386,
  0,
  435,
  98,
  106,
  115,
  116,
  118,
  119,
  122,
  120,
  123,
  125,
  385,
  124,
  128,
  126,
  130,
  131,
  136,
  133,
  137,
  146,
  138,
  144,
  435,
  435,
  435,
  372,
  377,
  370,
  164,
  435,
  0,
  355,
  0,
  390,
  389,
  435,
  435,
  378,
  154,
  157,
  155,
  158,
  162,
  160,
  165,
  167,
  377,
  170,
  172,
  171,
  175,
  173,
  176,
  177,
  181,
  186,
  188,
  190,
  191,
  361,
  361,
  358,
  365,
  372,
  371,
  193,
  370,
  192,
  197,
  369,
  199,
  200,
  368,
  202,
  201,
  209,
  203,
  367,
  207,
  214,
  366,
  217,
  220,
  221,
  344,
  342,
  353,
  435,
  225,
  223,
  224,
  362,
  361,
  360,
  227,
  228,
  230,
  234,
  237,
  235,
  248,
  359,
  339,
  350,
  353,
  240,
  232,
  231,
  250,
  355,
  251,
  254,
  354,
  353,
  352,
  257,
  255,
  343,
  342,
  345,
  348,
  262,
  258,
  347,
  265,
  261,
  264,
  263,
  338,
  435,
  329,
  267,
  344,
  276,
  339,
  278,
  280,
  435,
  323,
  279,
  281,
  329,
  282,
  286,
  303,
  317,
  316,
  287,
  284,
  294,
  292,
  293,
  295,
  294,
  298,
  304,
  296,
  311,
  302,
  303,
  435,
  306,
  308,
  435,
  347,
  351,
  355,
  357,
  361,
  365,
  198,
  367
}; // idb
const __int16 yy_def[266] =
{
  0,
  258,
  258,
  257,
  3,
  259,
  259,
  257,
  257,
  257,
  257,
  257,
  260,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  261,
  257,
  257,
  257,
  261,
  261,
  261,
  261,
  261,
  261,
  261,
  261,
  261,
  261,
  261,
  261,
  261,
  261,
  261,
  261,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  260,
  257,
  260,
  257,
  257,
  257,
  257,
  257,
  262,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  263,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  261,
  264,
  257,
  261,
  261,
  261,
  261,
  261,
  261,
  261,
  261,
  261,
  261,
  261,
  261,
  261,
  261,
  261,
  261,
  261,
  261,
  261,
  261,
  261,
  261,
  257,
  257,
  257,
  257,
  257,
  257,
  262,
  257,
  262,
  257,
  263,
  257,
  257,
  257,
  257,
  265,
  261,
  261,
  261,
  261,
  261,
  261,
  261,
  261,
  261,
  261,
  261,
  261,
  261,
  261,
  261,
  261,
  261,
  261,
  261,
  261,
  261,
  257,
  257,
  257,
  257,
  265,
  261,
  261,
  261,
  261,
  261,
  261,
  261,
  261,
  261,
  261,
  261,
  261,
  261,
  261,
  261,
  261,
  261,
  261,
  261,
  261,
  257,
  257,
  257,
  257,
  261,
  261,
  261,
  261,
  261,
  261,
  261,
  261,
  261,
  261,
  261,
  261,
  261,
  261,
  257,
  257,
  257,
  261,
  261,
  261,
  261,
  261,
  261,
  261,
  261,
  261,
  261,
  261,
  261,
  257,
  257,
  257,
  261,
  261,
  261,
  261,
  261,
  261,
  261,
  261,
  257,
  257,
  257,
  261,
  261,
  261,
  261,
  261,
  261,
  257,
  257,
  261,
  261,
  261,
  261,
  261,
  257,
  261,
  261,
  261,
  261,
  257,
  261,
  261,
  257,
  261,
  261,
  257,
  261,
  261,
  257,
  261,
  257,
  261,
  261,
  0,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257
}; // idb
const __int16 yy_nxt[494] =
{
  0,
  8,
  10,
  9,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  32,
  32,
  33,
  8,
  34,
  35,
  32,
  36,
  37,
  38,
  39,
  40,
  41,
  42,
  32,
  43,
  32,
  44,
  32,
  45,
  32,
  46,
  47,
  48,
  49,
  50,
  32,
  51,
  32,
  32,
  52,
  53,
  54,
  55,
  9,
  9,
  61,
  63,
  68,
  72,
  74,
  76,
  69,
  57,
  57,
  78,
  92,
  75,
  73,
  86,
  87,
  79,
  64,
  89,
  90,
  70,
  80,
  92,
  92,
  62,
  65,
  81,
  82,
  92,
  83,
  95,
  98,
  96,
  92,
  92,
  66,
  77,
  84,
  94,
  92,
  92,
  92,
  105,
  101,
  103,
  97,
  92,
  99,
  92,
  100,
  104,
  92,
  92,
  92,
  92,
  116,
  102,
  92,
  61,
  108,
  109,
  114,
  123,
  106,
  111,
  76,
  92,
  107,
  115,
  82,
  113,
  83,
  112,
  84,
  92,
  127,
  110,
  127,
  132,
  84,
  128,
  62,
  133,
  92,
  92,
  124,
  92,
  92,
  92,
  117,
  92,
  92,
  92,
  92,
  92,
  136,
  92,
  138,
  92,
  92,
  135,
  92,
  139,
  134,
  92,
  92,
  92,
  137,
  141,
  123,
  140,
  144,
  92,
  146,
  92,
  142,
  147,
  143,
  151,
  145,
  148,
  150,
  92,
  92,
  152,
  92,
  92,
  149,
  92,
  159,
  92,
  160,
  124,
  92,
  162,
  92,
  163,
  158,
  92,
  92,
  92,
  92,
  131,
  92,
  92,
  92,
  166,
  161,
  167,
  92,
  164,
  168,
  169,
  171,
  92,
  165,
  92,
  173,
  92,
  92,
  92,
  92,
  174,
  170,
  175,
  92,
  172,
  92,
  92,
  92,
  92,
  92,
  183,
  177,
  182,
  92,
  186,
  92,
  188,
  176,
  189,
  191,
  92,
  185,
  187,
  92,
  192,
  184,
  92,
  92,
  190,
  92,
  92,
  92,
  193,
  92,
  92,
  195,
  92,
  92,
  92,
  204,
  92,
  92,
  205,
  92,
  202,
  201,
  92,
  194,
  199,
  200,
  208,
  207,
  206,
  209,
  92,
  215,
  92,
  92,
  203,
  216,
  92,
  92,
  214,
  92,
  92,
  218,
  210,
  92,
  92,
  92,
  92,
  92,
  226,
  92,
  228,
  221,
  219,
  217,
  229,
  220,
  225,
  227,
  92,
  230,
  92,
  92,
  92,
  92,
  92,
  233,
  92,
  235,
  92,
  92,
  234,
  236,
  242,
  244,
  92,
  92,
  92,
  237,
  92,
  240,
  92,
  248,
  239,
  241,
  250,
  92,
  253,
  245,
  92,
  247,
  92,
  251,
  254,
  92,
  252,
  256,
  249,
  246,
  92,
  92,
  243,
  255,
  8,
  8,
  8,
  8,
  56,
  56,
  56,
  56,
  60,
  92,
  60,
  60,
  91,
  91,
  122,
  238,
  122,
  122,
  126,
  92,
  126,
  126,
  157,
  157,
  92,
  232,
  231,
  92,
  92,
  224,
  223,
  222,
  92,
  92,
  92,
  92,
  213,
  212,
  211,
  92,
  92,
  92,
  92,
  198,
  197,
  196,
  92,
  92,
  92,
  92,
  92,
  92,
  92,
  181,
  180,
  179,
  178,
  92,
  92,
  128,
  128,
  156,
  155,
  154,
  153,
  92,
  92,
  130,
  129,
  76,
  125,
  121,
  120,
  119,
  58,
  118,
  93,
  92,
  88,
  85,
  71,
  67,
  59,
  58,
  257,
  9,
  9,
  7,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257
}; // idb
const __int16 yy_chk[494] =
{
  0,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  5,
  6,
  12,
  13,
  16,
  20,
  22,
  23,
  16,
  5,
  6,
  24,
  37,
  22,
  20,
  28,
  28,
  24,
  13,
  30,
  30,
  16,
  24,
  36,
  39,
  12,
  13,
  24,
  25,
  38,
  25,
  37,
  39,
  38,
  40,
  44,
  13,
  23,
  25,
  36,
  41,
  42,
  43,
  44,
  41,
  42,
  38,
  45,
  40,
  46,
  40,
  43,
  47,
  48,
  49,
  50,
  53,
  41,
  51,
  60,
  47,
  48,
  51,
  68,
  45,
  49,
  76,
  94,
  46,
  51,
  83,
  50,
  83,
  49,
  76,
  95,
  84,
  48,
  84,
  94,
  83,
  84,
  60,
  95,
  96,
  97,
  68,
  98,
  99,
  101,
  53,
  100,
  102,
  105,
  103,
  107,
  98,
  106,
  100,
  108,
  109,
  97,
  111,
  101,
  96,
  110,
  112,
  114,
  99,
  103,
  122,
  102,
  107,
  115,
  109,
  113,
  105,
  110,
  106,
  114,
  108,
  111,
  113,
  132,
  134,
  115,
  133,
  135,
  112,
  137,
  133,
  136,
  134,
  122,
  138,
  136,
  139,
  137,
  132,
  141,
  143,
  142,
  145,
  264,
  144,
  146,
  147,
  141,
  135,
  142,
  148,
  138,
  143,
  144,
  146,
  149,
  139,
  150,
  148,
  151,
  152,
  161,
  159,
  149,
  145,
  150,
  162,
  147,
  164,
  165,
  168,
  167,
  170,
  161,
  152,
  159,
  172,
  165,
  169,
  168,
  151,
  169,
  172,
  173,
  164,
  167,
  175,
  173,
  162,
  176,
  177,
  170,
  183,
  184,
  182,
  175,
  188,
  189,
  177,
  190,
  201,
  200,
  189,
  191,
  193,
  189,
  192,
  184,
  183,
  199,
  176,
  182,
  182,
  192,
  191,
  190,
  193,
  194,
  200,
  202,
  204,
  188,
  201,
  205,
  210,
  199,
  209,
  216,
  204,
  194,
  219,
  215,
  221,
  220,
  218,
  216,
  225,
  219,
  210,
  205,
  202,
  220,
  209,
  215,
  218,
  227,
  221,
  229,
  233,
  230,
  234,
  236,
  225,
  242,
  229,
  237,
  241,
  227,
  230,
  237,
  241,
  244,
  245,
  247,
  230,
  250,
  234,
  248,
  245,
  233,
  236,
  247,
  253,
  250,
  242,
  255,
  244,
  256,
  248,
  252,
  251,
  249,
  255,
  246,
  243,
  240,
  239,
  238,
  253,
  258,
  258,
  258,
  258,
  259,
  259,
  259,
  259,
  260,
  235,
  260,
  260,
  261,
  261,
  262,
  232,
  262,
  262,
  263,
  228,
  263,
  263,
  265,
  265,
  226,
  224,
  222,
  217,
  214,
  213,
  212,
  211,
  208,
  207,
  206,
  203,
  198,
  197,
  196,
  195,
  187,
  186,
  185,
  180,
  179,
  178,
  174,
  171,
  166,
  163,
  160,
  158,
  157,
  156,
  155,
  154,
  153,
  140,
  131,
  128,
  127,
  125,
  121,
  120,
  119,
  104,
  91,
  90,
  86,
  82,
  77,
  66,
  65,
  64,
  58,
  57,
  35,
  32,
  29,
  26,
  19,
  15,
  11,
  10,
  7,
  2,
  1,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257
}; // idb
#pragma endregion
int yy_init = 1; // idb

char *yytext;
stype_t yylval;
int yyleng;
int yychar;
int yynerrs;
FILE *yyin;
FILE *yyout;

sval_u yaccResult;

int yy_init;
int yy_start;
yy_buffer_state *yy_current_buffer;
char *yy_c_buf_p;
char yy_hold_char;

int yy_last_accepting_state;
char *yy_last_accepting_cpos;
int yy_n_chars;
unsigned int g_sourcePos;
unsigned int g_out_pos;
int yy_did_buffer_switch_on_eof;

sval_u g_dummyVal;
unsigned __int8 g_parse_user;
char ch_buf[16386];

int __cdecl yyparse()
{
    void *v1; // esp
    void *v2; // esp
    unsigned int pos; // eax
    HashEntry_unnamed_type_u v4; // eax
    HashEntry_unnamed_type_u v5; // eax
    HashEntry_unnamed_type_u v6; // eax
    HashEntry_unnamed_type_u v7; // eax
    HashEntry_unnamed_type_u v8; // eax
    HashEntry_unnamed_type_u v9; // eax
    HashEntry_unnamed_type_u v10; // eax
    HashEntry_unnamed_type_u v11; // eax
    HashEntry_unnamed_type_u v12; // eax
    HashEntry_unnamed_type_u v13; // eax
    HashEntry_unnamed_type_u v14; // eax
    HashEntry_unnamed_type_u v15; // eax
    HashEntry_unnamed_type_u v16; // eax
    const char *v17; // [esp-4h] [ebp-CD8h]
    int v18; // [esp+0h] [ebp-CD4h] BYREF
    int v19; // [esp+4h] [ebp-CD0h]
    int *v20; // [esp+8h] [ebp-CCCh]
    int *v21; // [esp+Ch] [ebp-CC8h]
    sval_u v22; // [esp+10h] [ebp-CC4h]
    sval_u v23; // [esp+14h] [ebp-CC0h]
    sval_u v24; // [esp+18h] [ebp-CBCh]
    sval_u v25; // [esp+1Ch] [ebp-CB8h]
    sval_u v26; // [esp+20h] [ebp-CB4h]
    sval_u v27; // [esp+24h] [ebp-CB0h]
    sval_u v28; // [esp+28h] [ebp-CACh]
    sval_u v29; // [esp+2Ch] [ebp-CA8h]
    sval_u v30; // [esp+30h] [ebp-CA4h]
    sval_u v31; // [esp+34h] [ebp-CA0h]
    sval_u v32; // [esp+38h] [ebp-C9Ch]
    sval_u v33; // [esp+3Ch] [ebp-C98h]
    sval_u v34; // [esp+40h] [ebp-C94h]
    sval_u v35; // [esp+44h] [ebp-C90h]
    sval_u v36; // [esp+48h] [ebp-C8Ch]
    sval_u v37; // [esp+4Ch] [ebp-C88h]
    sval_u v38; // [esp+50h] [ebp-C84h]
    sval_u v39; // [esp+54h] [ebp-C80h]
    sval_u v40; // [esp+58h] [ebp-C7Ch]
    sval_u v41; // [esp+5Ch] [ebp-C78h]
    sval_u v42; // [esp+60h] [ebp-C74h]
    sval_u v43; // [esp+64h] [ebp-C70h]
    sval_u v44; // [esp+68h] [ebp-C6Ch]
    sval_u v45; // [esp+6Ch] [ebp-C68h]
    sval_u v46; // [esp+70h] [ebp-C64h]
    sval_u v47; // [esp+74h] [ebp-C60h]
    sval_u v48; // [esp+78h] [ebp-C5Ch]
    sval_u v49; // [esp+7Ch] [ebp-C58h]
    sval_u v50; // [esp+80h] [ebp-C54h]
    sval_u v51; // [esp+84h] [ebp-C50h]
    sval_u v52; // [esp+88h] [ebp-C4Ch]
    sval_u v53; // [esp+8Ch] [ebp-C48h]
    sval_u v54; // [esp+90h] [ebp-C44h]
    sval_u v55; // [esp+94h] [ebp-C40h]
    sval_u v56; // [esp+98h] [ebp-C3Ch]
    sval_u v57; // [esp+9Ch] [ebp-C38h]
    sval_u v58; // [esp+A0h] [ebp-C34h]
    sval_u v59; // [esp+A4h] [ebp-C30h]
    sval_u v60; // [esp+A8h] [ebp-C2Ch]
    sval_u v61; // [esp+ACh] [ebp-C28h]
    sval_u v62; // [esp+B0h] [ebp-C24h]
    sval_u v63; // [esp+B4h] [ebp-C20h]
    sval_u v64; // [esp+B8h] [ebp-C1Ch]
    sval_u v65; // [esp+BCh] [ebp-C18h]
    sval_u v66; // [esp+C0h] [ebp-C14h]
    sval_u v67; // [esp+C4h] [ebp-C10h]
    sval_u v68; // [esp+C8h] [ebp-C0Ch]
    sval_u v69; // [esp+CCh] [ebp-C08h]
    sval_u v70; // [esp+D0h] [ebp-C04h]
    sval_u v71; // [esp+D4h] [ebp-C00h]
    sval_u v72; // [esp+D8h] [ebp-BFCh]
    sval_u v73; // [esp+DCh] [ebp-BF8h]
    sval_u v74; // [esp+E0h] [ebp-BF4h]
    sval_u v75; // [esp+E4h] [ebp-BF0h]
    sval_u v76; // [esp+E8h] [ebp-BECh]
    sval_u v77; // [esp+ECh] [ebp-BE8h]
    sval_u v78; // [esp+F0h] [ebp-BE4h]
    sval_u v79; // [esp+F4h] [ebp-BE0h]
    sval_u v80; // [esp+F8h] [ebp-BDCh]
    sval_u val; // [esp+FCh] [ebp-BD8h]
    sval_u v82; // [esp+100h] [ebp-BD4h]
    sval_u v83; // [esp+104h] [ebp-BD0h]
    sval_u val1; // [esp+108h] [ebp-BCCh]
    sval_u v85; // [esp+10Ch] [ebp-BC8h]
    sval_u v86; // [esp+110h] [ebp-BC4h]
    sval_u v87; // [esp+114h] [ebp-BC0h]
    sval_u v88; // [esp+118h] [ebp-BBCh]
    sval_u v89; // [esp+11Ch] [ebp-BB8h]
    sval_u v90; // [esp+120h] [ebp-BB4h]
    sval_u v91; // [esp+124h] [ebp-BB0h]
    sval_u v92; // [esp+128h] [ebp-BACh]
    sval_u v93; // [esp+12Ch] [ebp-BA8h]
    sval_u val6; // [esp+130h] [ebp-BA4h]
    sval_u v95; // [esp+134h] [ebp-BA0h]
    sval_u v96; // [esp+138h] [ebp-B9Ch]
    sval_u v97; // [esp+13Ch] [ebp-B98h]
    sval_u v98; // [esp+140h] [ebp-B94h]
    sval_u v99; // [esp+144h] [ebp-B90h]
    sval_u v100; // [esp+148h] [ebp-B8Ch]
    sval_u v101; // [esp+14Ch] [ebp-B88h]
    sval_u v102; // [esp+150h] [ebp-B84h]
    sval_u v103; // [esp+154h] [ebp-B80h]
    sval_u v104; // [esp+158h] [ebp-B7Ch]
    sval_u v105; // [esp+15Ch] [ebp-B78h]
    sval_u v106; // [esp+160h] [ebp-B74h]
    sval_u v107; // [esp+164h] [ebp-B70h]
    sval_u v108; // [esp+168h] [ebp-B6Ch]
    sval_u v109; // [esp+16Ch] [ebp-B68h]
    sval_u v110; // [esp+170h] [ebp-B64h]
    sval_u v111; // [esp+174h] [ebp-B60h]
    sval_u v112; // [esp+178h] [ebp-B5Ch]
    sval_u v113; // [esp+17Ch] [ebp-B58h]
    sval_u v114; // [esp+180h] [ebp-B54h]
    sval_u v115; // [esp+184h] [ebp-B50h]
    sval_u v116; // [esp+188h] [ebp-B4Ch]
    sval_u v117; // [esp+18Ch] [ebp-B48h]
    sval_u v118; // [esp+190h] [ebp-B44h]
    sval_u v119; // [esp+194h] [ebp-B40h]
    sval_u v120; // [esp+198h] [ebp-B3Ch]
    sval_u v121; // [esp+19Ch] [ebp-B38h]
    sval_u v122; // [esp+1A0h] [ebp-B34h]
    sval_u v123; // [esp+1A4h] [ebp-B30h]
    sval_u v124; // [esp+1A8h] [ebp-B2Ch]
    sval_u v125; // [esp+1ACh] [ebp-B28h]
    sval_u v126; // [esp+1B0h] [ebp-B24h]
    sval_u v127; // [esp+1B4h] [ebp-B20h]
    sval_u v128; // [esp+1B8h] [ebp-B1Ch]
    sval_u v129; // [esp+1BCh] [ebp-B18h]
    sval_u v130; // [esp+1C0h] [ebp-B14h]
    sval_u v131; // [esp+1C4h] [ebp-B10h]
    sval_u v132; // [esp+1C8h] [ebp-B0Ch]
    sval_u v133; // [esp+1CCh] [ebp-B08h]
    sval_u v134; // [esp+1D0h] [ebp-B04h]
    sval_u v135; // [esp+1D4h] [ebp-B00h]
    sval_u v136; // [esp+1D8h] [ebp-AFCh]
    sval_u v137; // [esp+1DCh] [ebp-AF8h]
    sval_u v138; // [esp+1E0h] [ebp-AF4h]
    sval_u v139; // [esp+1E4h] [ebp-AF0h]
    sval_u v140; // [esp+1E8h] [ebp-AECh]
    sval_u v141; // [esp+1ECh] [ebp-AE8h]
    sval_u v142; // [esp+1F0h] [ebp-AE4h]
    sval_u v143; // [esp+1F4h] [ebp-AE0h]
    sval_u v144; // [esp+1F8h] [ebp-ADCh]
    sval_u v145; // [esp+1FCh] [ebp-AD8h]
    sval_u v146; // [esp+200h] [ebp-AD4h]
    sval_u v147; // [esp+204h] [ebp-AD0h]
    sval_u v148; // [esp+208h] [ebp-ACCh]
    sval_u v149; // [esp+20Ch] [ebp-AC8h]
    sval_u v150; // [esp+210h] [ebp-AC4h]
    sval_u v151; // [esp+214h] [ebp-AC0h]
    sval_u v152; // [esp+218h] [ebp-ABCh]
    sval_u v153; // [esp+21Ch] [ebp-AB8h]
    sval_u v154; // [esp+220h] [ebp-AB4h]
    sval_u v155; // [esp+224h] [ebp-AB0h]
    sval_u v156; // [esp+228h] [ebp-AACh]
    sval_u v157; // [esp+22Ch] [ebp-AA8h]
    sval_u v158; // [esp+230h] [ebp-AA4h]
    sval_u v159; // [esp+234h] [ebp-AA0h]
    sval_u v160; // [esp+238h] [ebp-A9Ch]
    sval_u v161; // [esp+23Ch] [ebp-A98h]
    sval_u v162; // [esp+240h] [ebp-A94h]
    sval_u v163; // [esp+244h] [ebp-A90h]
    sval_u v164; // [esp+248h] [ebp-A8Ch]
    sval_u v165; // [esp+24Ch] [ebp-A88h]
    sval_u v166; // [esp+250h] [ebp-A84h]
    sval_u v167; // [esp+254h] [ebp-A80h]
    sval_u v168; // [esp+258h] [ebp-A7Ch]
    sval_u v169; // [esp+25Ch] [ebp-A78h]
    sval_u v170; // [esp+260h] [ebp-A74h]
    sval_u v171; // [esp+264h] [ebp-A70h]
    sval_u v172; // [esp+268h] [ebp-A6Ch]
    sval_u v173; // [esp+26Ch] [ebp-A68h]
    sval_u v174; // [esp+270h] [ebp-A64h]
    sval_u v175; // [esp+274h] [ebp-A60h]
    sval_u v176; // [esp+278h] [ebp-A5Ch]
    sval_u v177; // [esp+27Ch] [ebp-A58h]
    sval_u v178; // [esp+280h] [ebp-A54h]
    sval_u v179; // [esp+284h] [ebp-A50h]
    sval_u v180; // [esp+288h] [ebp-A4Ch]
    sval_u v181; // [esp+28Ch] [ebp-A48h]
    sval_u v182; // [esp+290h] [ebp-A44h]
    sval_u v183; // [esp+294h] [ebp-A40h]
    sval_u v184; // [esp+298h] [ebp-A3Ch]
    sval_u v185; // [esp+29Ch] [ebp-A38h]
    sval_u v186; // [esp+2A0h] [ebp-A34h]
    sval_u v187; // [esp+2A4h] [ebp-A30h]
    sval_u v188; // [esp+2A8h] [ebp-A2Ch]
    sval_u v189; // [esp+2ACh] [ebp-A28h]
    sval_u v190; // [esp+2B0h] [ebp-A24h]
    sval_u v191; // [esp+2B4h] [ebp-A20h]
    sval_u v192; // [esp+2B8h] [ebp-A1Ch]
    sval_u v193; // [esp+2BCh] [ebp-A18h]
    sval_u v194; // [esp+2C0h] [ebp-A14h]
    sval_u v195; // [esp+2C4h] [ebp-A10h]
    sval_u v196; // [esp+2C8h] [ebp-A0Ch]
    sval_u v197; // [esp+2CCh] [ebp-A08h]
    sval_u v198; // [esp+2D0h] [ebp-A04h]
    sval_u v199; // [esp+2D4h] [ebp-A00h]
    sval_u v200; // [esp+2D8h] [ebp-9FCh]
    sval_u v201; // [esp+2DCh] [ebp-9F8h]
    sval_u v202; // [esp+2E0h] [ebp-9F4h]
    sval_u v203; // [esp+2E4h] [ebp-9F0h]
    sval_u v204; // [esp+2E8h] [ebp-9ECh]
    sval_u v205; // [esp+2ECh] [ebp-9E8h]
    sval_u v206; // [esp+2F0h] [ebp-9E4h]
    sval_u v207; // [esp+2F4h] [ebp-9E0h]
    sval_u v208; // [esp+2F8h] [ebp-9DCh]
    sval_u v209; // [esp+2FCh] [ebp-9D8h]
    sval_u v210; // [esp+300h] [ebp-9D4h]
    sval_u v211; // [esp+304h] [ebp-9D0h]
    sval_u v212; // [esp+308h] [ebp-9CCh]
    sval_u v213; // [esp+30Ch] [ebp-9C8h]
    sval_u v214; // [esp+310h] [ebp-9C4h]
    sval_u v215; // [esp+314h] [ebp-9C0h]
    sval_u v216; // [esp+318h] [ebp-9BCh]
    sval_u v217; // [esp+31Ch] [ebp-9B8h]
    sval_u v218; // [esp+320h] [ebp-9B4h]
    sval_u v219; // [esp+324h] [ebp-9B0h]
    sval_u v220; // [esp+328h] [ebp-9ACh]
    sval_u v221; // [esp+32Ch] [ebp-9A8h]
    sval_u v222; // [esp+330h] [ebp-9A4h]
    sval_u v223; // [esp+334h] [ebp-9A0h]
    sval_u v224; // [esp+338h] [ebp-99Ch]
    sval_u v225; // [esp+33Ch] [ebp-998h]
    sval_u v226; // [esp+340h] [ebp-994h]
    sval_u v227; // [esp+344h] [ebp-990h]
    sval_u v228; // [esp+348h] [ebp-98Ch]
    sval_u v229; // [esp+34Ch] [ebp-988h]
    sval_u v230; // [esp+350h] [ebp-984h]
    sval_u v231; // [esp+354h] [ebp-980h]
    sval_u v232; // [esp+358h] [ebp-97Ch]
    sval_u v233; // [esp+35Ch] [ebp-978h]
    sval_u v234; // [esp+360h] [ebp-974h]
    sval_u v235; // [esp+364h] [ebp-970h]
    sval_u v236; // [esp+368h] [ebp-96Ch]
    sval_u v237; // [esp+36Ch] [ebp-968h]
    sval_u v238; // [esp+370h] [ebp-964h]
    sval_u v239; // [esp+374h] [ebp-960h]
    sval_u v240; // [esp+378h] [ebp-95Ch]
    sval_u v241; // [esp+37Ch] [ebp-958h]
    sval_u v242; // [esp+380h] [ebp-954h]
    sval_u v243; // [esp+384h] [ebp-950h]
    sval_u v244; // [esp+388h] [ebp-94Ch]
    sval_u v245; // [esp+38Ch] [ebp-948h]
    sval_u v246; // [esp+390h] [ebp-944h]
    sval_u v247; // [esp+394h] [ebp-940h]
    sval_u v248; // [esp+398h] [ebp-93Ch]
    sval_u v249; // [esp+39Ch] [ebp-938h]
    sval_u v250; // [esp+3A0h] [ebp-934h]
    sval_u v251; // [esp+3A4h] [ebp-930h]
    sval_u v252; // [esp+3A8h] [ebp-92Ch]
    sval_u v253; // [esp+3ACh] [ebp-928h]
    sval_u v254; // [esp+3B0h] [ebp-924h]
    sval_u v255; // [esp+3B4h] [ebp-920h]
    sval_u v256; // [esp+3B8h] [ebp-91Ch]
    sval_u v257; // [esp+3BCh] [ebp-918h]
    sval_u v258; // [esp+3C0h] [ebp-914h]
    sval_u v259; // [esp+3C4h] [ebp-910h]
    sval_u v260; // [esp+3C8h] [ebp-90Ch]
    sval_u v261; // [esp+3CCh] [ebp-908h]
    sval_u v262; // [esp+3D0h] [ebp-904h]
    sval_u v263; // [esp+3D4h] [ebp-900h]
    sval_u v264; // [esp+3D8h] [ebp-8FCh]
    sval_u v265; // [esp+3DCh] [ebp-8F8h]
    sval_u v266; // [esp+3E0h] [ebp-8F4h]
    sval_u v267; // [esp+3E4h] [ebp-8F0h]
    sval_u v268; // [esp+3E8h] [ebp-8ECh]
    sval_u v269; // [esp+3ECh] [ebp-8E8h]
    sval_u v270; // [esp+3F0h] [ebp-8E4h]
    sval_u v271; // [esp+3F4h] [ebp-8E0h]
    sval_u v272; // [esp+3F8h] [ebp-8DCh]
    sval_u v273; // [esp+3FCh] [ebp-8D8h]
    sval_u v274; // [esp+400h] [ebp-8D4h]
    sval_u v275; // [esp+404h] [ebp-8D0h]
    sval_u v276; // [esp+408h] [ebp-8CCh]
    sval_u v277; // [esp+40Ch] [ebp-8C8h]
    sval_u v278; // [esp+410h] [ebp-8C4h]
    sval_u v279; // [esp+414h] [ebp-8C0h]
    sval_u v280; // [esp+418h] [ebp-8BCh]
    sval_u v281; // [esp+41Ch] [ebp-8B8h]
    sval_u v282; // [esp+420h] [ebp-8B4h]
    sval_u v283; // [esp+424h] [ebp-8B0h]
    sval_u v284; // [esp+428h] [ebp-8ACh]
    sval_u v285; // [esp+42Ch] [ebp-8A8h]
    sval_u v286; // [esp+430h] [ebp-8A4h]
    sval_u v287; // [esp+434h] [ebp-8A0h]
    sval_u v288; // [esp+438h] [ebp-89Ch]
    sval_u v289; // [esp+43Ch] [ebp-898h]
    sval_u v290; // [esp+440h] [ebp-894h]
    sval_u v291; // [esp+444h] [ebp-890h]
    sval_u v292; // [esp+448h] [ebp-88Ch]
    sval_u v293; // [esp+44Ch] [ebp-888h]
    sval_u v294; // [esp+450h] [ebp-884h]
    sval_u v295; // [esp+454h] [ebp-880h]
    sval_u v296; // [esp+458h] [ebp-87Ch]
    sval_u v297; // [esp+45Ch] [ebp-878h]
    sval_u v298; // [esp+460h] [ebp-874h]
    sval_u v299; // [esp+464h] [ebp-870h]
    sval_u v300; // [esp+468h] [ebp-86Ch]
    sval_u v301; // [esp+46Ch] [ebp-868h]
    sval_u v302; // [esp+470h] [ebp-864h]
    sval_u v303; // [esp+474h] [ebp-860h]
    sval_u v304; // [esp+478h] [ebp-85Ch]
    sval_u v305; // [esp+47Ch] [ebp-858h]
    sval_u v306; // [esp+480h] [ebp-854h]
    sval_u v307; // [esp+484h] [ebp-850h]
    sval_u v308; // [esp+488h] [ebp-84Ch]
    sval_u v309; // [esp+48Ch] [ebp-848h]
    sval_u v310; // [esp+490h] [ebp-844h]
    sval_u val3; // [esp+494h] [ebp-840h]
    sval_u val4; // [esp+498h] [ebp-83Ch]
    sval_u val5; // [esp+49Ch] [ebp-838h]
    sval_u v314; // [esp+4A0h] [ebp-834h]
    sval_u val2; // [esp+4A4h] [ebp-830h]
    sval_u v316; // [esp+4A8h] [ebp-82Ch]
    sval_u v317; // [esp+4ACh] [ebp-828h]
    sval_u v318; // [esp+4B0h] [ebp-824h]
    sval_u v319; // [esp+4B4h] [ebp-820h]
    sval_u v320; // [esp+4B8h] [ebp-81Ch]
    int size; // [esp+4BCh] [ebp-818h]
    stype_t *yyvs1; // [esp+4C0h] [ebp-814h]
    __int16 *yyss1; // [esp+4C4h] [ebp-810h]
    int yyerrstatus; // [esp+4C8h] [ebp-80Ch]
    int yyfree_stacks; // [esp+4CCh] [ebp-808h]
    int yyn; // [esp+4D0h] [ebp-804h]
    int yystate; // [esp+4D4h] [ebp-800h]
    __int16 *yyssp; // [esp+4D8h] [ebp-7FCh] BYREF
    __int16 yyssa[200]; // [esp+4DCh] [ebp-7F8h] BYREF
    stype_t *yyvs; // [esp+674h] [ebp-660h]
    int yychar1; // [esp+678h] [ebp-65Ch]
    __int16 *yyss; // [esp+67Ch] [ebp-658h]
    stype_t yyval; // [esp+680h] [ebp-654h]
    int yylen; // [esp+688h] [ebp-64Ch]
    stype_t yyvsa[200]; // [esp+68Ch] [ebp-648h] BYREF
    stype_t *yyvsp; // [esp+CCCh] [ebp-8h]
    int yystacksize; // [esp+CD0h] [ebp-4h]

    yychar1 = 0;
    yyss = yyssa;
    yyvs = yyvsa;
    yystacksize = 200;
    yyfree_stacks = 0;
    yystate = 0;
    yyerrstatus = 0;
    yynerrs = 0;
    yyval.pos = 0;
    yychar = -2;
    yyssp = (short*)&yyssp + 1;
    yyvsp = yyvsa;
    while (1)
    {
    yynewstate:
        *++yyssp = yystate;
        if (yyssp >= &yyss[yystacksize - 1])
        {
            yyvs1 = yyvs;
            yyss1 = yyss;
            size = yyssp - yyss + 1;
            if (yystacksize >= 10000)
            {
                v17 = "parser stack overflow";
                yyerror();
                if (yyfree_stacks)
                {
                    free(yyss);
                    free(yyvs);
                }
                return 2;
            }
            yystacksize *= 2;
            if (yystacksize > 10000)
                yystacksize = 10000;
            v1 = alloca(2 * yystacksize);
            v21 = &v18;
            yyss = (short*)&v18;
            _yy_memcpy((char*)&v18, (char*)yyss1, 2 * size);
            v2 = alloca(8 * yystacksize);
            v20 = &v18;
            yyvs = (stype_t*)&v18;
            _yy_memcpy((char*)&v18, (char*)yyvs1, 8 * size);
            yyssp = &yyss[size - 1];
            yyvsp = &yyvs[size - 1];
            if (yyssp >= &yyss[yystacksize - 1])
                goto yyabortlab;
        }
        yyn = yypact[yystate];
        if (yyn == -32768)
            break;
        if (yychar == -2)
            yychar = yylex();
        if (yychar > 0)
        {
            v19 = yychar > 0x158 ? 119 : yytranslate[yychar];
            yychar1 = v19;
        }
        else
        {
            yychar1 = 0;
            yychar = 0;
        }
        yyn += yychar1;
        if (yyn >= 0x544 || yycheck[yyn] != yychar1)
            break;
        yyn = yytable[yyn];
        if (yyn >= 0)
        {
            if (!yyn)
                goto yyerrlab;
            if (yyn == 261)
                goto yyacceptlab;
            if (yychar)
                yychar = -2;
            *++yyvsp = yylval;
            if (yyerrstatus)
                --yyerrstatus;
            yystate = yyn;
        }
        else
        {
            if (yyn == -32768)
                goto yyerrlab;
            yyn = -yyn;
        yyreduce:
            yylen = yyr2[yyn];
            if (yylen > 0)
            {
                pos = yyvsp[1 - yylen].pos;
                yyval.val.type = yyvsp[1 - yylen].val.type;
                yyval.pos = pos;
            }
            v18 = yyn - 1;
            switch (yyn)
            {
            case 1:
                v320.type = node1(yyvsp[-1].val.type, yyvsp->val).type;
                yaccResult.type = v320.type;
                break;
            case 2:
                v319.type = node1(65, yyvsp->val).type;
                yaccResult.type = v319.type;
                break;
            case 3:
                v318.type = node1(83, yyvsp->val).type;
                yaccResult.type = v318.type;
                break;
            case 4:
                v317.type = node1(83, yyvsp->val).type;
                yaccResult.type = v317.type;
                break;
            case 5:
                val2.type = node1_(yyvsp->pos).xmodelPieces;
                v316.type = node2(6, yyvsp->val, val2).type;
                yyval.val = v316;
                break;
            case 6:
                val5.type = node1_(yyvsp[-1].pos).xmodelPieces;
                val4.type = node1_(yyvsp->pos).xmodelPieces;
                val3.type = node1_(yyvsp[-2].pos).xmodelPieces;
                v314.type = node5(47, yyvsp[-2].val, yyvsp->val, val3, val4, val5).type;
                yyval.val = v314;
                yyval.pos = yyvsp[-1].pos;
                break;
            case 7:
                v309.type = node1_(yyvsp[-1].pos).xmodelPieces;
                v308.type = node1_(yyvsp->pos).xmodelPieces;
                v307.type = node1_(yyvsp[-2].pos).xmodelPieces;
                v310.type = node5(48, yyvsp[-2].val, yyvsp->val, v307, v308, v309).type;
                yyval.val = v310;
                yyval.pos = yyvsp[-1].pos;
                break;
            case 8:
                v305.type = node1_(yyvsp[-1].pos).xmodelPieces;
                v304.type = node1_(0x66).xmodelPieces;
                v306.type = node4(49, yyvsp[-2].val, yyvsp->val, v304, v305).type;
                yyval.val = v306;
                yyval.pos = yyvsp[-1].pos;
                break;
            case 9:
                v302.type = node1_(yyvsp[-1].pos).xmodelPieces;
                v301.type = node1_(0x67).xmodelPieces;
                v303.type = node4(49, yyvsp[-2].val, yyvsp->val, v301, v302).type;
                yyval.val = v303;
                yyval.pos = yyvsp[-1].pos;
                break;
            case 10:
                v299.type = node1_(yyvsp[-1].pos).xmodelPieces;
                v298.type = node1_(0x68).xmodelPieces;
                v300.type = node4(49, yyvsp[-2].val, yyvsp->val, v298, v299).type;
                yyval.val = v300;
                yyval.pos = yyvsp[-1].pos;
                break;
            case 11:
                v296.type = node1_(yyvsp[-1].pos).xmodelPieces;
                v295.type = node1_(0x69).xmodelPieces;
                v297.type = node4(49, yyvsp[-2].val, yyvsp->val, v295, v296).type;
                yyval.val = v297;
                yyval.pos = yyvsp[-1].pos;
                break;
            case 12:
                v293.type = node1_(yyvsp[-1].pos).xmodelPieces;
                v292.type = node1_(0x6A).xmodelPieces;
                v294.type = node4(49, yyvsp[-2].val, yyvsp->val, v292, v293).type;
                yyval.val = v294;
                yyval.pos = yyvsp[-1].pos;
                break;
            case 13:
                v290.type = node1_(yyvsp[-1].pos).xmodelPieces;
                v289.type = node1_(0x6B).xmodelPieces;
                v291.type = node4(49, yyvsp[-2].val, yyvsp->val, v289, v290).type;
                yyval.val = v291;
                yyval.pos = yyvsp[-1].pos;
                break;
            case 14:
                v287.type = node1_(yyvsp[-1].pos).xmodelPieces;
                v286.type = node1_(0x6C).xmodelPieces;
                v288.type = node4(49, yyvsp[-2].val, yyvsp->val, v286, v287).type;
                yyval.val = v288;
                yyval.pos = yyvsp[-1].pos;
                break;
            case 15:
                v284.type = node1_(yyvsp[-1].pos).xmodelPieces;
                v283.type = node1_(0x6D).xmodelPieces;
                v285.type = node4(49, yyvsp[-2].val, yyvsp->val, v283, v284).type;
                yyval.val = v285;
                yyval.pos = yyvsp[-1].pos;
                break;
            case 16:
                v281.type = node1_(yyvsp[-1].pos).xmodelPieces;
                v280.type = node1_(0x6E).xmodelPieces;
                v282.type = node4(49, yyvsp[-2].val, yyvsp->val, v280, v281).type;
                yyval.val = v282;
                yyval.pos = yyvsp[-1].pos;
                break;
            case 17:
                v278.type = node1_(yyvsp[-1].pos).xmodelPieces;
                v277.type = node1_(0x6F).xmodelPieces;
                v279.type = node4(49, yyvsp[-2].val, yyvsp->val, v277, v278).type;
                yyval.val = v279;
                yyval.pos = yyvsp[-1].pos;
                break;
            case 18:
                v275.type = node1_(yyvsp[-1].pos).xmodelPieces;
                v274.type = node1_(0x70).xmodelPieces;
                v276.type = node4(49, yyvsp[-2].val, yyvsp->val, v274, v275).type;
                yyval.val = v276;
                yyval.pos = yyvsp[-1].pos;
                break;
            case 19:
                v272.type = node1_(yyvsp[-1].pos).xmodelPieces;
                v271.type = node1_(0x71).xmodelPieces;
                v273.type = node4(49, yyvsp[-2].val, yyvsp->val, v271, v272).type;
                yyval.val = v273;
                yyval.pos = yyvsp[-1].pos;
                break;
            case 20:
                v269.type = node1_(yyvsp[-1].pos).xmodelPieces;
                v268.type = node1_(0x72).xmodelPieces;
                v270.type = node4(49, yyvsp[-2].val, yyvsp->val, v268, v269).type;
                yyval.val = v270;
                yyval.pos = yyvsp[-1].pos;
                break;
            case 21:
                v266.type = node1_(yyvsp[-1].pos).xmodelPieces;
                v265.type = node1_(0x73).xmodelPieces;
                v267.type = node4(49, yyvsp[-2].val, yyvsp->val, v265, v266).type;
                yyval.val = v267;
                yyval.pos = yyvsp[-1].pos;
                break;
            case 22:
                v263.type = node1_(yyvsp[-1].pos).xmodelPieces;
                v262.type = node1_(0x74).xmodelPieces;
                v264.type = node4(49, yyvsp[-2].val, yyvsp->val, v262, v263).type;
                yyval.val = v264;
                yyval.pos = yyvsp[-1].pos;
                break;
            case 23:
                v260.type = node1_(yyvsp[-1].pos).xmodelPieces;
                v259.type = node1_(0x75).xmodelPieces;
                v261.type = node4(49, yyvsp[-2].val, yyvsp->val, v259, v260).type;
                yyval.val = v261;
                yyval.pos = yyvsp[-1].pos;
                break;
            case 24:
                v257.type = node1_(yyvsp->pos).xmodelPieces;
                v258.type = node2(50, yyvsp->val, v257).type;
                yyval.val = v258;
                break;
            case 25:
                v255.type = node1_(yyvsp->pos).xmodelPieces;
                v256.type = node2(51, yyvsp->val, v255).type;
                yyval.val = v256;
                break;
            case 26:
                v254.type = node1(65, yyvsp->val).type;
                yyval.val = v254;
                break;
            case 27:
                v253.type = node0(0).type;
                yyval.val = v253;
                break;
            case 28:
            case 29:
                v4.prev = LowerCase(yyvsp->val.type).prev;
                yyvsp->val.stringValue = v4.prev;
                yyval.val.type = yyvsp->val.type;
                break;
            case 30:
                v5.prev = LowerCase(yyvsp->val.type).prev;
                yyvsp->val.stringValue = v5.prev;
                v251.type = node1_(yyvsp[-2].pos).xmodelPieces;
                v252.type = node3(21, yyvsp[-2].val, yyvsp->val, v251).type;
                yyval.val = v252;
                ++scrCompilePub.far_function_count;
                break;
            case 31:
                v6.prev = LowerCase(yyvsp->val.type).prev;
                yyvsp->val.stringValue = v6.prev;
                v249.type = node1_(yyvsp->pos).xmodelPieces;
                v250.type = node2(20, yyvsp->val, v249).type;
                yyval.val = v250;
                break;
            case 32:
                v7.prev = LowerCase(yyvsp->val.type).prev;
                yyvsp->val.stringValue = v7.prev;
                v247.type = node1_(yyvsp[-2].pos).xmodelPieces;
                v248.type = node3(21, yyvsp[-2].val, yyvsp->val, v247).type;
                yyval.val = v248;
                yyval.pos = yyvsp[-1].pos;
                ++scrCompilePub.far_function_count;
                break;
            case 33:
                v8.prev = LowerCase(yyvsp->val.type).prev;
                yyvsp->val.stringValue = v8.prev;
                v245.type = node1_(yyvsp[-1].pos).xmodelPieces;
                v246.type = node2(20, yyvsp->val, v245).type;
                yyval.val = v246;
                break;
            case 34:
                v243.type = node1_(yyvsp->pos).xmodelPieces;
                v244.type = node2(18, yyvsp->val, v243).type;
                yyval.val = v244;
                break;
            case 35:
                v241.type = node1_(yyvsp[-2].pos).xmodelPieces;
                v242.type = node2(22, yyvsp[-2].val, v241).type;
                yyval.val = v242;
                break;
            case 36:
                v239.type = node1_(yyvsp->pos).xmodelPieces;
                v240.type = node2(26, yyvsp->val, v239).type;
                yyval.val = v240;
                break;
            case 37:
                v237.type = node1_(yyvsp->pos).xmodelPieces;
                v236.type = node1_(yyvsp[-1].pos).xmodelPieces;
                v238.type = node3(30, yyvsp->val, v236, v237).type;
                yyval.val = v238;
                yyval.pos = yyvsp->pos;
                break;
            case 38:
                v234.type = node1_(yyvsp[-2].pos).xmodelPieces;
                v235.type = node3(23, yyvsp[-3].val, yyvsp[-1].val, v234).type;
                yyval.val = v235;
                yyval.pos = yyvsp[-2].pos;
                break;
            case 39:
                v232.type = node1_(yyvsp[-2].pos).xmodelPieces;
                v231.type = node1_(yyvsp[-4].pos).xmodelPieces;
                v233.type = node5(24, yyvsp[-4].val, yyvsp[-3].val, yyvsp[-1].val, v231, v232).type;
                yyval.val = v233;
                yyval.pos = yyvsp[-2].pos;
                break;
            case 40:
                v229.type = node1_(yyvsp[-2].pos).xmodelPieces;
                v230.type = node2(46, yyvsp[-1].val, v229).type;
                yyval.val = v230;
                break;
            case 41:
                v227.type = node1_(yyvsp->pos).xmodelPieces;
                v228.type = node2(7, yyvsp->val, v227).type;
                yyval.val = v228;
                break;
            case 42:
                v225.type = node1_(yyvsp->pos).xmodelPieces;
                v226.type = node2(8, yyvsp->val, v225).type;
                yyval.val = v226;
                break;
            case 43:
                v223.type = node1_(yyvsp[-1].pos).xmodelPieces;
                v224.type = node2(9, yyvsp->val, v223).type;
                yyval.val = v224;
                break;
            case 44:
                v221.type = node1_(yyvsp[-1].pos).xmodelPieces;
                v222.type = node2(10, yyvsp->val, v221).type;
                yyval.val = v222;
                break;
            case 45:
                v219.type = node1_(yyvsp->pos).xmodelPieces;
                v220.type = node2(11, yyvsp->val, v219).type;
                yyval.val = v220;
                break;
            case 46:
                v217.type = node1_(yyvsp->pos).xmodelPieces;
                v218.type = node2(12, yyvsp->val, v217).type;
                yyval.val = v218;
                break;
            case 47:
                v216.type = node1(19, yyvsp->val).type;
                yyval.val = v216;
                break;
            case 48:
                v214.type = node1_(yyvsp->pos).xmodelPieces;
                v215.type = node2(17, yyvsp->val, v214).type;
                yyval.val = v215;
                break;
            case 49:
                v212.type = node1_(yyvsp->pos).xmodelPieces;
                v213.type = node1(31, v212).type;
                yyval.val = v213;
                break;
            case 50:
                v210.type = node1_(yyvsp->pos).xmodelPieces;
                v211.type = node1(32, v210).type;
                yyval.val = v211;
                break;
            case 51:
                v208.type = node1_(yyvsp->pos).xmodelPieces;
                v209.type = node1(34, v208).type;
                yyval.val = v209;
                break;
            case 52:
                v206.type = node1_(yyvsp->pos).xmodelPieces;
                v207.type = node1(35, v206).type;
                yyval.val = v207;
                break;
            case 53:
                v204.type = node1_(yyvsp->pos).xmodelPieces;
                v205.type = node1(36, v204).type;
                yyval.val = v205;
                break;
            case 54:
                v202.type = node1_(yyvsp[-1].pos).xmodelPieces;
                v203.type = node2(52, yyvsp[-1].val, v202).type;
                yyval.val = v203;
                yyval.pos = yyvsp->pos;
                break;
            case 55:
                v200.type = node1_(yyvsp->pos).xmodelPieces;
                v201.type = node2(18, yyvsp->val, v200).type;
                yyval.val = v201;
                break;
            case 56:
                v198.type = node1_(yyvsp[-1].pos).xmodelPieces;
                v199.type = node1(66, v198).type;
                yyval.val = v199;
                break;
            case 57:
                v9.prev = LowerCase(yyvsp->val.type).prev;
                yyvsp->val.stringValue = v9.prev;
                v196.type = node1_(yyvsp->pos).xmodelPieces;
                v197.type = node2(67, yyvsp->val, v196).type;
                yyval.val = v197;
                break;
            case 58:
                v194.type = node1_(yyvsp->pos).xmodelPieces;
                v195.type = node1(72, v194).type;
                yyval.val = v195;
                break;
            case 59:
                v192.type = node1_(yyvsp->pos).xmodelPieces;
                v193.type = node1(73, v192).type;
                yyval.val = v193;
                break;
            case 60:
                v190.type = node1_(yyvsp->pos).xmodelPieces;
                v191.type = node1(74, v190).type;
                yyval.val = v191;
                break;
            case 61:
                v188.type = node1_(yyvsp[-3].pos).xmodelPieces;
                v189.type = node3(75, yyvsp[-4].val, yyvsp[-1].val, v188).type;
                yyval.val = v189;
                break;
            case 62:
                v10.prev = LowerCase(yyvsp->val.type).prev;
                yyvsp->val.stringValue = v10.prev;
                v186.type = node1_(yyvsp[-2].pos).xmodelPieces;
                v187.type = node3(15, yyvsp[-2].val, yyvsp->val, v186).type;
                yyval.val = v187;
                yyval.pos = yyvsp->pos;
                break;
            case 63:
                v184.type = node1_(yyvsp[-1].pos).xmodelPieces;
                v183.type = node1_(yyvsp[-3].pos).xmodelPieces;
                v185.type = node4(13, yyvsp[-3].val, yyvsp[-1].val, v183, v184).type;
                yyval.val = v185;
                yyval.pos = yyvsp[-2].pos;
                break;
            case 64:
                v11.prev = LowerCase(yyvsp->val.type).prev;
                yyvsp->val.stringValue = v11.prev;
                v181.type = node1_(yyvsp->pos).xmodelPieces;
                v182.type = node2(4, yyvsp->val, v181).type;
                yyval.val = v182;
                break;
            case 65:
                v12.prev = LowerCase(yyvsp->val.type).prev;
                yyvsp->val.stringValue = v12.prev;
                v179.type = node1_(yyvsp[-1].pos).xmodelPieces;
                v180.type = node2(80, yyvsp->val, v179).type;
                yyval.val = v180;
                break;
            case 66:
                v177.type = node1_(yyvsp[-2].pos).xmodelPieces;
                v178.type = node2(53, yyvsp[-2].val, v177).type;
                yyval.val = v178;
                yyval.pos = yyvsp->pos;
                break;
            case 67:
                v175.type = node1_(yyvsp->pos).xmodelPieces;
                v174.type = node1_(yyvsp[-1].pos).xmodelPieces;
                v176.type = node4(2, yyvsp[-2].val, yyvsp->val, v174, v175).type;
                yyval.val = v176;
                break;
            case 68:
                v172.type = node1_(yyvsp[-1].pos).xmodelPieces;
                v173.type = node2(27, yyvsp->val, v172).type;
                yyval.val = v173;
                break;
            case 69:
                v170.type = node1_(yyvsp->pos).xmodelPieces;
                v171.type = node1(28, v170).type;
                yyval.val = v171;
                break;
            case 70:
                v168.type = node1_(yyvsp[-1].pos).xmodelPieces;
                v167.type = node1_(yyvsp->pos).xmodelPieces;
                v169.type = node3(29, yyvsp->val, v167, v168).type;
                yyval.val = v169;
                break;
            case 71:
                v165.type = node1_(yyvsp[-1].pos).xmodelPieces;
                v166.type = node2(41, yyvsp[-1].val, v165).type;
                yyval.val = v166;
                break;
            case 72:
                v163.type = node1_(yyvsp[-1].pos).xmodelPieces;
                v164.type = node2(42, yyvsp[-1].val, v163).type;
                yyval.val = v164;
                break;
            case 73:
                v161.type = node1_(yyvsp[-1].pos).xmodelPieces;
                v160.type = node1_(0x66).xmodelPieces;
                v162.type = node4(43, yyvsp[-2].val, yyvsp->val, v160, v161).type;
                yyval.val = v162;
                break;
            case 74:
                v158.type = node1_(yyvsp[-1].pos).xmodelPieces;
                v157.type = node1_(0x67).xmodelPieces;
                v159.type = node4(43, yyvsp[-2].val, yyvsp->val, v157, v158).type;
                yyval.val = v159;
                break;
            case 75:
                v155.type = node1_(yyvsp[-1].pos).xmodelPieces;
                v154.type = node1_(0x68).xmodelPieces;
                v156.type = node4(43, yyvsp[-2].val, yyvsp->val, v154, v155).type;
                yyval.val = v156;
                break;
            case 76:
                v152.type = node1_(yyvsp[-1].pos).xmodelPieces;
                v151.type = node1_(0x6F).xmodelPieces;
                v153.type = node4(43, yyvsp[-2].val, yyvsp->val, v151, v152).type;
                yyval.val = v153;
                break;
            case 77:
                v149.type = node1_(yyvsp[-1].pos).xmodelPieces;
                v148.type = node1_(0x70).xmodelPieces;
                v150.type = node4(43, yyvsp[-2].val, yyvsp->val, v148, v149).type;
                yyval.val = v150;
                break;
            case 78:
                v146.type = node1_(yyvsp[-1].pos).xmodelPieces;
                v145.type = node1_(0x71).xmodelPieces;
                v147.type = node4(43, yyvsp[-2].val, yyvsp->val, v145, v146).type;
                yyval.val = v147;
                break;
            case 79:
                v143.type = node1_(yyvsp[-1].pos).xmodelPieces;
                v142.type = node1_(0x72).xmodelPieces;
                v144.type = node4(43, yyvsp[-2].val, yyvsp->val, v142, v143).type;
                yyval.val = v144;
                break;
            case 80:
                v140.type = node1_(yyvsp[-1].pos).xmodelPieces;
                v139.type = node1_(0x73).xmodelPieces;
                v141.type = node4(43, yyvsp[-2].val, yyvsp->val, v139, v140).type;
                yyval.val = v141;
                break;
            case 81:
                v137.type = node1_(yyvsp[-1].pos).xmodelPieces;
                v136.type = node1_(0x74).xmodelPieces;
                v138.type = node4(43, yyvsp[-2].val, yyvsp->val, v136, v137).type;
                yyval.val = v138;
                break;
            case 82:
                v134.type = node1_(yyvsp[-1].pos).xmodelPieces;
                v133.type = node1_(0x75).xmodelPieces;
                v135.type = node4(43, yyvsp[-2].val, yyvsp->val, v133, v134).type;
                yyval.val = v135;
                break;
            case 83:
                v131.type = node1_(yyvsp[-3].pos).xmodelPieces;
                v130.type = node1_(yyvsp[-4].pos).xmodelPieces;
                v132.type = node4(55, yyvsp[-4].val, yyvsp[-1].val, v130, v131).type;
                yyval.val = v132;
                break;
            case 84:
                v128.type = node1_(yyvsp[-3].pos).xmodelPieces;
                v127.type = node1_(yyvsp[-4].pos).xmodelPieces;
                v129.type = node4(56, yyvsp[-4].val, yyvsp[-1].val, v127, v128).type;
                yyval.val = v129;
                break;
            case 85:
                v125.type = node1_(yyvsp->pos).xmodelPieces;
                v126.type = node1(57, v125).type;
                yyval.val = v126;
                break;
            case 86:
                v123.type = node1_(yyvsp[-3].pos).xmodelPieces;
                v122.type = node1_(yyvsp[-4].pos).xmodelPieces;
                v124.type = node4(58, yyvsp[-4].val, yyvsp[-1].val, v122, v123).type;
                yyval.val = v124;
                break;
            case 87:
                v120.type = node1_(yyvsp[-1].pos).xmodelPieces;
                v119.type = node1_(yyvsp[-4].pos).xmodelPieces;
                v121.type = node4(59, yyvsp[-4].val, yyvsp[-1].val, v119, v120).type;
                yyval.val = v121;
                break;
            case 88:
                v117.type = node1_(yyvsp->pos).xmodelPieces;
                v118.type = node1(63, v117).type;
                yyval.val = v118;
                break;
            case 89:
                v115.type = node1_(yyvsp->pos).xmodelPieces;
                v116.type = node1(64, v115).type;
                yyval.val = v116;
                break;
            case 90:
                v113.type = node1_(yyvsp->pos).xmodelPieces;
                v114.type = node1(76, v113).type;
                yyval.val = v114;
                break;
            case 91:
                v111.type = node1_(yyvsp[-3].pos).xmodelPieces;
                v112.type = node2(77, yyvsp[-1].val, v111).type;
                yyval.val = v112;
                break;
            case 92:
                v109.type = node1_(yyvsp[-3].pos).xmodelPieces;
                v110.type = node2(78, yyvsp[-1].val, v109).type;
                yyval.val = v110;
                break;
            case 93:
                v108.type = node1(25, yyvsp->val).type;
                yyval.val = v108;
                break;
            case 95:
                v107.type = node0(0).type;
                yyval.val = v107;
                break;
            case 98:
                v105.type = node1_(yyvsp->pos).xmodelPieces;
                v104.type = node1_(yyvsp[-2].pos).xmodelPieces;
                v106.type = node3(44, yyvsp[-1].val, v104, v105).type;
                yyval.val = v106;
                break;
            case 99:
                v102.type = node1_(yyvsp[-2].pos).xmodelPieces;
                v103.type = node4(37, yyvsp[-2].val, yyvsp->val, v102, g_dummyVal).type;
                yyval.val = v103;
                break;
            case 100:
                v100.type = node1_(yyvsp[-1].pos).xmodelPieces;
                v99.type = node1_(yyvsp[-4].pos).xmodelPieces;
                v101.type = node7(38, yyvsp[-4].val, yyvsp[-2].val, yyvsp->val, v99, v100, g_dummyVal, g_dummyVal).type;
                yyval.val = v101;
                break;
            case 101:
                v97.type = node1_(yyvsp[-4].pos).xmodelPieces;
                v96.type = node1_(yyvsp[-2].pos).xmodelPieces;
                v98.type = node5(39, yyvsp[-2].val, yyvsp->val, v96, v97, g_dummyVal).type;
                yyval.val = v98;
                break;
            case 102:
                val6.type = node1_(yyvsp[-7].pos).xmodelPieces;
                v93.type = node1_(yyvsp[-4].pos).xmodelPieces;
                v95.type = node8(
                    40,
                    yyvsp[-5].val,
                    yyvsp[-4].val,
                    yyvsp[-2].val,
                    yyvsp->val,
                    v93,
                    val6,
                    g_dummyVal,
                    g_dummyVal).type;
                yyval.val = v95;
                break;
            case 103:
                v91.type = node1_(yyvsp[-4].pos).xmodelPieces;
                v92.type = node3(60, yyvsp[-4].val, yyvsp[-1].val, v91).type;
                yyval.val = v92;
                break;
            case 104:
                v89.type = node1_(yyvsp[-2].pos).xmodelPieces;
                v90.type = node3(45, yyvsp[-1].val, v89, g_dummyVal).type;
                yyval.val = v90;
                break;
            case 105:
                v88.type = node0(0).type;
                yyval.val = v88;
                break;
            case 106:
                v86.type = node1_(yyvsp[-2].pos).xmodelPieces;
                v87.type = node3(61, yyvsp[-1].val, v86, g_dummyVal).type;
                yyval.val = v87;
                break;
            case 107:
                val1.type = node1_(yyvsp[-1].pos).xmodelPieces;
                v85.type = node2(62, val1, g_dummyVal).type;
                yyval.val = v85;
                break;
            case 109:
                v83.type = append_node(yyvsp[-1].val, yyvsp->val).type;
                yyval.val = v83;
                break;
            case 110:
                val.type = node0(0).type;
                v82.type = linked_list_end(val)->type;
                yyval.val = v82;
                break;
            case 111:
                v78.type = node1_(yyvsp->pos).xmodelPieces;
                v79.type = node1(yyvsp->val.type, v78).type;
                v80.type = prepend_node(v79, yyvsp[-2].val).type;
                yyval.val = v80;
                break;
            case 112:
                v76.type = node0(0).type;
                v74.type = node1_(yyvsp->pos).xmodelPieces;
                v75.type = node1(yyvsp->val.type, v74).type;
                v77.type = prepend_node(v75, v76).type;
                yyval.val = v77;
                break;
            case 114:
                v73.type = node0(0).type;
                yyval.val = v73;
                break;
            case 115:
                v13.prev = LowerCase(yyvsp->val.type).prev;
                yyvsp->val.stringValue = v13.prev;
                v70.type = node1_(yyvsp->pos).xmodelPieces;
                v71.type = node1(yyvsp->val.type, v70).type;
                v72.type = append_node(yyvsp[-2].val, v71).type;
                yyval.val = v72;
                break;
            case 116:
                v14.prev = LowerCase(yyvsp->val.type).prev;
                yyvsp->val.stringValue = v14.prev;
                v67.type = node1_(yyvsp->pos).xmodelPieces;
                v68.type = node1(yyvsp->val.type, v67).type;
                v65.type = node0(0).type;
                v66.type = linked_list_end(v65)->type;
                v69.type = append_node(v66, v68).type;
                yyval.val = v69;
                break;
            case 118:
                v63.type = node0(0).type;
                v64.type = linked_list_end(v63)->type;
                yyval.val = v64;
                break;
            case 119:
                v15.prev = LowerCase(yyvsp->val.type).prev;
                yyvsp->val.stringValue = v15.prev;
                v60.type = node1_(yyvsp->pos).xmodelPieces;
                v61.type = node1(yyvsp->val.type, v60).type;
                v62.type = append_node(yyvsp[-2].val, v61).type;
                yyval.val = v62;
                break;
            case 120:
                v57.type = node1_(yyvsp->pos).xmodelPieces;
                v58.type = node1(yyvsp->val.type, v57).type;
                v55.type = node0(0).type;
                v56.type = linked_list_end(v55)->type;
                v59.type = append_node(v56, v58).type;
                yyval.val = v59;
                break;
            case 121:
                v52.type = node1_(yyvsp->pos).xmodelPieces;
                v53.type = node1(yyvsp->val.type, v52).type;
                v54.type = append_node(yyvsp[-2].val, v53).type;
                yyval.val = v54;
                break;
            case 122:
                v49.type = node1_(yyvsp->pos).xmodelPieces;
                v50.type = node1(yyvsp->val.type, v49).type;
                v47.type = node0(0).type;
                v48.type = linked_list_end(v47)->type;
                v51.type = append_node(v48, v50).type;
                yyval.val = v51;
                break;
            case 123:
                v44.type = node1_(yyvsp->pos).xmodelPieces;
                v45.type = node1(yyvsp->val.type, v44).type;
                v46.type = prepend_node(v45, yyvsp[-2].val).type;
                yyval.val = v46;
                break;
            case 124:
                v42.type = node0(0).type;
                v40.type = node1_(yyvsp->pos).xmodelPieces;
                v41.type = node1(yyvsp->val.type, v40).type;
                v43.type = prepend_node(v41, v42).type;
                yyval.val = v43;
                break;
            case 125:
                v16.prev = LowerCase(yyvsp[-6].val.stringValue).prev;
                yyvsp[-6].val.stringValue = v16.prev;
                v38.type = node1_(yyvsp->pos).xmodelPieces;
                v37.type = node1_(yyvsp[-6].pos).xmodelPieces;
                v39.type = node6(68, yyvsp[-6].val, yyvsp[-4].val, yyvsp[-1].val, v37, v38, g_dummyVal).type;
                yyval.val = v39;
                break;
            case 126:
                v35.type = node1_(yyvsp[-2].pos).xmodelPieces;
                v34.type = node1_(yyvsp[-4].pos).xmodelPieces;
                v36.type = node3(71, yyvsp[-2].val, v34, v35).type;
                yyval.val = v36;
                break;
            case 127:
                v32.type = node1_(yyvsp->pos).xmodelPieces;
                v33.type = node1(69, v32).type;
                yyval.val = v33;
                break;
            case 128:
                v30.type = node1_(yyvsp->pos).xmodelPieces;
                v31.type = node1(70, v30).type;
                yyval.val = v31;
                break;
            case 129:
                v29.type = append_node(yyvsp[-1].val, yyvsp->val).type;
                yyval.val = v29;
                break;
            case 130:
                v27.type = node0(0).type;
                v28.type = linked_list_end(v27)->type;
                yyval.val = v28;
                break;
            case 131:
                v25.type = node1_(yyvsp[-1].pos).xmodelPieces;
                v26.type = node2(86, yyvsp->val, v25).type;
                yyval.val = v26;
                ++scrCompilePub.far_function_count;
                break;
            case 132:
                v24.type = append_node(yyvsp[-2].val, yyvsp[-1].val).type;
                yyval.val = v24;
                break;
            case 133:
                v22.type = node0(0).type;
                v23.type = linked_list_end(v22)->type;
                yyval.val = v23;
                break;
            default:
                break;
            }
            yyvsp -= yylen;
            yyssp -= yylen;
            *++yyvsp = yyval;
            yyn = yyr1[yyn];
            yystate = *yyssp + yypact[yyn + 171];
            if (yystate < 0x544 && yycheck[yystate] == *yyssp)
                yystate = yytable[yystate];
            else
                yystate = yydefact[yyn + 171];
        }
    }
    yyn = yydefact[yystate];
    if (yyn)
        goto yyreduce;
yyerrlab:
    if (!yyerrstatus)
    {
        ++yynerrs;
        v17 = "parse error";
        yyerror();
    }
    if (yyerrstatus == 3)
    {
        if (!yychar)
        {
        yyabortlab:
            if (yyfree_stacks)
            {
                free(yyss);
                free(yyvs);
            }
            return 1;
        }
        yychar = -2;
    }
    yyerrstatus = 3;
    while (2)
    {
        yyn = yypact[yystate];
        if (yyn == -32768)
            goto yyerrpop;
        if (++yyn >= 0x544 || yycheck[yyn] != 1)
            goto yyerrpop;
        yyn = yytable[yyn];
        if (yyn < 0)
        {
            if (yyn != -32768)
            {
                yyn = -yyn;
                goto yyreduce;
            }
            goto yyerrpop;
        }
        if (!yyn)
        {
        yyerrpop:
            if (yyssp == yyss)
                goto yyabortlab;
            --yyvsp;
            yystate = *--yyssp;
            continue;
        }
        break;
    }
    if (yyn != 261)
    {
        *++yyvsp = yylval;
        yystate = yyn;
        goto yynewstate;
    }
yyacceptlab:
    if (yyfree_stacks)
    {
        free(yyss);
        free(yyvs);
    }
    return 0;
}

HashEntry_unnamed_type_u __cdecl LowerCase(unsigned int stringValue)
{
    return SL_ConvertToLowercase(stringValue, g_parse_user, 14);
}

void __cdecl _yy_memcpy(char *to, char *from, unsigned int count)
{
    int v3; // eax

    while (1)
    {
        v3 = count--;
        if (v3 <= 0)
            break;
        *to++ = *from++;
    }
}

int __cdecl yylex()
{
    int next_buffer; // [esp+0h] [ebp-24h]
    int yy_next_state; // [esp+8h] [ebp-1Ch]
    int yy_amount_of_matched_text; // [esp+Ch] [ebp-18h]
    unsigned __int8 yy_c; // [esp+13h] [ebp-11h]
    char *yy_bp; // [esp+14h] [ebp-10h]
    int yy_current_state; // [esp+18h] [ebp-Ch]
    int yy_act; // [esp+1Ch] [ebp-8h]
    char *yy_cp; // [esp+20h] [ebp-4h]

    if (yy_init)
    {
        yy_init = 0;
        if (!yy_start)
            yy_start = 1;
        if (!yyin)
        {
            //yyin = __iob_func(); // KISAK HACK
            yyin = stdout;
        }
        if (!yyout)
        {
            //yyout = __iob_func() + 1; // KISAK HACK
            yyout = stdout;
        }
        if (!yy_current_buffer)
            yy_current_buffer = yy_create_buffer(yyin, 0x4000u);
        yy_load_buffer_state();
    }
    while (1)
    {
    LABEL_11:
        yy_cp = yy_c_buf_p;
        *yy_c_buf_p = yy_hold_char;
        yy_bp = yy_cp;
        yy_current_state = yy_start;
        do
        {
        yy_match:
            yy_c = yy_ec[*yy_cp];
            if (yy_accept[yy_current_state])
            {
                yy_last_accepting_state = yy_current_state;
                yy_last_accepting_cpos = yy_cp;
            }
            while (yy_chk[yy_c + yy_base[yy_current_state]] != yy_current_state)
            {
                yy_current_state = yy_def[yy_current_state];
                if (yy_current_state >= 258)
                    yy_c = yy_meta[yy_c];
            }
            yy_current_state = yy_nxt[yy_c + yy_base[yy_current_state]];
            ++yy_cp;
        } while (yy_base[yy_current_state] != 435);
        while (2)
        {
            yy_act = yy_accept[yy_current_state];
            if (!yy_accept[yy_current_state])
            {
                yy_cp = yy_last_accepting_cpos;
                yy_act = yy_accept[yy_last_accepting_state];
            }
            yytext = yy_bp;
            yyleng = yy_cp - yy_bp;
            yy_hold_char = *yy_cp;
            *yy_cp = 0;
            yy_c_buf_p = yy_cp;
        do_action:
            switch (yy_act)
            {
            case 0:
                *yy_cp = yy_hold_char;
                yy_cp = yy_last_accepting_cpos;
                yy_current_state = yy_last_accepting_state;
                continue;
            case 1:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                goto LABEL_11;
            case 2:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                yy_start = 3;
                goto LABEL_11;
            case 3:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                goto LABEL_11;
            case 4:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                goto LABEL_11;
            case 5:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                goto LABEL_11;
            case 6:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                yy_start = 5;
                goto LABEL_11;
            case 7:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return StringValue(yytext + 1, yyleng - 2) != 0 ? 259 : 257;
            case 8:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return StringValue(yytext + 2, yyleng - 3) != 0 ? 260 : 257;
            case 9:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 261;
            case 10:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 262;
            case 11:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 263;
            case 12:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 264;
            case 13:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 265;
            case 14:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 266;
            case 15:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 267;
            case 16:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 268;
            case 17:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 269;
            case 18:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 270;
            case 19:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 271;
            case 20:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 272;
            case 21:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 273;
            case 22:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 274;
            case 23:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 275;
            case 24:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 276;
            case 25:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 277;
            case 26:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 278;
            case 27:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 279;
            case 28:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 280;
            case 29:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 281;
            case 30:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 282;
            case 31:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 283;
            case 32:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 284;
            case 33:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 285;
            case 34:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 286;
            case 35:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                IntegerValue(yytext);
                return 287;
            case 36:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                FloatValue(yytext);
                return 288;
            case 37:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 290;
            case 38:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 289;
            case 39:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 294;
            case 40:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 291;
            case 41:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 293;
            case 42:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 292;
            case 43:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 295;
            case 44:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 296;
            case 45:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 297;
            case 46:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 298;
            case 47:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 299;
            case 48:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 300;
            case 49:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 301;
            case 50:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 302;
            case 51:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 303;
            case 52:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 304;
            case 53:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 305;
            case 54:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 306;
            case 55:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 307;
            case 56:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 308;
            case 57:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 309;
            case 58:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 310;
            case 59:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 311;
            case 60:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 312;
            case 61:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 313;
            case 62:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 314;
            case 63:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 315;
            case 64:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 316;
            case 65:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 317;
            case 66:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 318;
            case 67:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 319;
            case 68:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 320;
            case 69:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 321;
            case 70:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 322;
            case 71:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 323;
            case 72:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 325;
            case 73:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 326;
            case 74:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 327;
            case 75:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 328;
            case 76:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 329;
            case 77:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 330;
            case 78:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 331;
            case 79:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 332;
            case 80:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 333;
            case 81:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 334;
            case 82:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 335;
            case 83:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 336;
            case 84:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 337;
            case 85:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 338;
            case 86:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 339;
            case 87:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 340;
            case 88:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 341;
            case 89:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 342;
            case 90:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 343;
            case 91:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                TextValue(yytext, yyleng);
                return 258;
            case 92:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                TextValue(yytext, yyleng);
                return 324;
            case 93:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                CompileError(g_sourcePos, "bad token '%s'", yytext);
                return 257;
            case 94:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                fwrite(yytext, yyleng, 1u, yyout);
                goto LABEL_11;
            case 95:
                yy_amount_of_matched_text = yy_cp - yytext - 1;
                *yy_cp = yy_hold_char;
                if (!yy_current_buffer->yy_buffer_status)
                {
                    yy_n_chars = yy_current_buffer->yy_n_chars;
                    yy_current_buffer->yy_input_file = yyin;
                    yy_current_buffer->yy_buffer_status = 1;
                }
                if (yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars])
                {
                    yy_c_buf_p = &yytext[yy_amount_of_matched_text];
                    yy_current_state = yy_get_previous_state();
                    yy_next_state = yy_try_NUL_trans(yy_current_state);
                    yy_bp = yytext;
                    if (yy_next_state)
                    {
                        yy_cp = ++yy_c_buf_p;
                        yy_current_state = yy_next_state;
                        goto yy_match;
                    }
                    yy_cp = yy_c_buf_p;
                    continue;
                }
                next_buffer = yy_get_next_buffer();
                if (!next_buffer)
                {
                    yy_c_buf_p = &yytext[yy_amount_of_matched_text];
                    yy_current_state = yy_get_previous_state();
                    yy_cp = yy_c_buf_p;
                    yy_bp = yytext;
                    goto yy_match;
                }
                if (next_buffer != 1)
                {
                    if (next_buffer != 2)
                        goto LABEL_11;
                    yy_c_buf_p = &yy_current_buffer->yy_ch_buf[yy_n_chars];
                    yy_current_state = yy_get_previous_state();
                    yy_cp = yy_c_buf_p;
                    yy_bp = yytext;
                    continue;
                }
                yy_did_buffer_switch_on_eof = 0;
                if (CL_GetLocalClientActiveCount())
                {
                    yy_c_buf_p = yytext;
                    yy_act = (yy_start - 1) / 2 + 96;
                    goto do_action;
                }
                if (!yy_did_buffer_switch_on_eof)
                    yyrestart(yyin);
                break;
            case 96:
            case 97:
            case 98:
                return 0;
            default:
                yy_fatal_error("fatal flex scanner internal error--no action found");
            }
            break;
        }
    }
}

void __cdecl TextValue(char *str, int len)
{
    yylval.val.stringValue = SL_GetStringOfSize(str, 0, len + 1, 14).prev;
}

int __cdecl StringValue(char *str, int len)
{
    char v3; // [esp+0h] [ebp-200Ch]
    char stra[8192]; // [esp+4h] [ebp-2008h] BYREF
    char *v5; // [esp+2008h] [ebp-4h]
    char *v6; // [esp+2014h] [ebp+8h]
    int v7; // [esp+2018h] [ebp+Ch]

    if (len < 0x2000)
    {
        v5 = stra;
        while (len)
        {
            if (*str == 92)
            {
                v7 = len - 1;
                if (!v7)
                    break;
                v6 = str + 1;
                v3 = *v6;
                if (*v6 == 110)
                {
                    *v5++ = 10;
                }
                else if (v3 == 114)
                {
                    *v5++ = 13;
                }
                else
                {
                    if (v3 == 116)
                        *v5 = 9;
                    else
                        *v5 = *v6;
                    ++v5;
                }
                len = v7 - 1;
                str = v6 + 1;
            }
            else
            {
                --len;
                *v5++ = *str++;
            }
        }
        *v5 = 0;
        yylval.val.stringValue = SL_GetString_(stra, g_parse_user, 14);
        return 1;
    }
    else
    {
        CompileError(g_sourcePos, "max string length exceeded: \"%s\"", str);
        return 0;
    }
}

void __cdecl IntegerValue(char *str)
{
    sscanf(str, "%d", &yylval);
}

void __cdecl FloatValue(char *str)
{
    sscanf(str, "%f", &yylval);
}

int __cdecl yy_get_next_buffer()
{
    int yy_c_buf_p_offset; // [esp+4h] [ebp-20h]
    yy_buffer_state *b; // [esp+8h] [ebp-1Ch]
    signed int num_to_read; // [esp+Ch] [ebp-18h]
    char *source; // [esp+10h] [ebp-14h]
    int ret_val; // [esp+14h] [ebp-10h]
    char *dest; // [esp+18h] [ebp-Ch]
    int number_to_move; // [esp+1Ch] [ebp-8h]
    int i; // [esp+20h] [ebp-4h]

    dest = yy_current_buffer->yy_ch_buf;
    source = yytext;
    if (yy_c_buf_p > &dest[yy_n_chars + 1])
        yy_fatal_error("fatal flex scanner internal error--end of buffer missed");
    if (yy_current_buffer->yy_fill_buffer)
    {
        number_to_move = yy_c_buf_p - yytext - 1;
        for (i = 0; i < number_to_move; ++i)
            *dest++ = *source++;
        if (yy_current_buffer->yy_buffer_status == 2)
        {
            yy_n_chars = 0;
            yy_current_buffer->yy_n_chars = 0;
        }
        else
        {
            for (num_to_read = yy_current_buffer->yy_buf_size - number_to_move - 1;
                num_to_read <= 0;
                num_to_read = yy_current_buffer->yy_buf_size - number_to_move - 1)
            {
                b = yy_current_buffer;
                yy_c_buf_p_offset = yy_c_buf_p - yy_current_buffer->yy_ch_buf;
                if (yy_current_buffer->yy_is_our_buffer)
                {
                    if ((2 * yy_current_buffer->yy_buf_size) > 0)
                        yy_current_buffer->yy_buf_size *= 2;
                    else
                        yy_current_buffer->yy_buf_size += yy_current_buffer->yy_buf_size >> 3;
                    b->yy_ch_buf = (char*)yy_flex_realloc(b->yy_ch_buf, b->yy_buf_size + 2);
                }
                else
                {
                    yy_current_buffer->yy_ch_buf = 0;
                }
                if (!b->yy_ch_buf)
                    yy_fatal_error("fatal error - scanner input buffer overflow");
                yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];
            }
            if (num_to_read > 0x2000)
                num_to_read = 0x2000;
            yy_n_chars = Scr_ScanFile(&yy_current_buffer->yy_ch_buf[number_to_move], num_to_read);
            yy_current_buffer->yy_n_chars = yy_n_chars;
        }
        if (yy_n_chars)
        {
            ret_val = 0;
        }
        else if (number_to_move)
        {
            ret_val = 2;
            yy_current_buffer->yy_buffer_status = 2;
        }
        else
        {
            ret_val = 1;
            yyrestart(yyin);
        }
        yy_n_chars += number_to_move;
        yy_current_buffer->yy_ch_buf[yy_n_chars] = 0;
        yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = 0;
        yytext = yy_current_buffer->yy_ch_buf;
        return ret_val;
    }
    else if (yy_c_buf_p - yytext == 1)
    {
        return 1;
    }
    else
    {
        return 2;
    }
}

int __cdecl yy_get_previous_state()
{
    int v1; // [esp+0h] [ebp-10h]
    unsigned __int8 yy_c; // [esp+7h] [ebp-9h]
    int yy_current_state; // [esp+8h] [ebp-8h]
    char *yy_cp; // [esp+Ch] [ebp-4h]

    yy_current_state = yy_start;
    for (yy_cp = yytext; yy_cp < yy_c_buf_p; ++yy_cp)
    {
        if (*yy_cp)
            v1 = yy_ec[*yy_cp];
        else
            LOBYTE(v1) = 1;
        yy_c = v1;
        if (yy_accept[yy_current_state])
        {
            yy_last_accepting_state = yy_current_state;
            yy_last_accepting_cpos = yy_cp;
        }
        while (yy_chk[yy_c + yy_base[yy_current_state]] != yy_current_state)
        {
            yy_current_state = yy_def[yy_current_state];
            if (yy_current_state >= 258)
                yy_c = yy_meta[yy_c];
        }
        yy_current_state = yy_nxt[yy_c + yy_base[yy_current_state]];
    }
    return yy_current_state;
}

int __cdecl yy_try_NUL_trans(int yy_current_state)
{
    unsigned __int8 yy_c; // [esp+7h] [ebp-5h]
    int yy_current_statea; // [esp+14h] [ebp+8h]

    yy_c = 1;
    if (yy_accept[yy_current_state])
    {
        yy_last_accepting_state = yy_current_state;
        yy_last_accepting_cpos = yy_c_buf_p;
    }
    while (yy_chk[yy_c + yy_base[yy_current_state]] != yy_current_state)
    {
        yy_current_state = yy_def[yy_current_state];
        if (yy_current_state >= 258)
            yy_c = yy_meta[yy_c];
    }
    yy_current_statea = yy_nxt[yy_c + yy_base[yy_current_state]];
    return yy_current_statea != 257 ? yy_current_statea : 0;
}

void __cdecl yyrestart(FILE *input_file)
{
    if (!yy_current_buffer)
        yy_current_buffer = yy_create_buffer(yyin, 0x4000u);
    yy_init_buffer(yy_current_buffer, input_file);
    yy_load_buffer_state();
}

void __cdecl yy_load_buffer_state()
{
    yy_n_chars = yy_current_buffer->yy_n_chars;
    yy_c_buf_p = yy_current_buffer->yy_buf_pos;
    yytext = yy_c_buf_p;
    yyin = yy_current_buffer->yy_input_file;
    yy_hold_char = *yy_c_buf_p;
}

yy_buffer_state *__cdecl yy_create_buffer(FILE *file, unsigned int size)
{
    yy_buffer_state *b; // [esp+0h] [ebp-4h]

    b = (yy_buffer_state*)yy_flex_alloc(0x28u);
    if (!b)
        yy_fatal_error("out of dynamic memory in yy_create_buffer()");
    b->yy_buf_size = size;
    b->yy_ch_buf = (char*)yy_flex_alloc(b->yy_buf_size + 2);
    if (!b->yy_ch_buf)
        yy_fatal_error("out of dynamic memory in yy_create_buffer()");
    b->yy_is_our_buffer = 1;
    yy_init_buffer(b, file);
    return b;
}

void __cdecl yy_init_buffer(yy_buffer_state *b, FILE *file)
{
    yy_flush_buffer(b);
    b->yy_input_file = file;
    b->yy_fill_buffer = 1;
    b->yy_is_interactive = 0;
}

void __cdecl yy_flush_buffer(yy_buffer_state *b)
{
    if (b)
    {
        b->yy_n_chars = 0;
        *b->yy_ch_buf = 0;
        b->yy_ch_buf[1] = 0;
        b->yy_buf_pos = b->yy_ch_buf;
        b->yy_at_bol = 1;
        b->yy_buffer_status = 0;
        if (b == yy_current_buffer)
            yy_load_buffer_state();
    }
}

void __cdecl  yy_fatal_error(const char *msg)
{
    FILE *v1; // eax

    //v1 = __iob_func();
    v1 = stdout; // KISAK HACK
    fprintf(v1 + 2, "%s\n", msg);
    exit(2);
}

LPVOID __cdecl yy_flex_alloc(unsigned int size)
{
    return malloc(size);
}

void *__cdecl yy_flex_realloc(void *ptr, unsigned int size)
{
    return realloc(ptr, size);
}

int __cdecl yyerror()
{
    if (yychar)
    {
        if (yychar != 257)
            CompileError(g_sourcePos, "bad syntax");
    }
    else
    {
        CompileError(g_sourcePos, "unexpected end of file found");
    }
    return 0;
}

void __cdecl ScriptParse(sval_u *parseData, unsigned __int8 user)
{
    yy_buffer_state buffer_state; // [esp+0h] [ebp-28h] BYREF

    g_out_pos = -1;
    g_sourcePos = 0;
    g_parse_user = user;
    g_dummyVal.type = 0;
    yy_init = 1;
    buffer_state.yy_buf_size = 0x4000;
    buffer_state.yy_ch_buf = ch_buf;
    buffer_state.yy_is_our_buffer = 0;
    yy_init_buffer(&buffer_state, 0);
    yy_current_buffer = &buffer_state;
    yy_start = 3;
    yyparse();
    parseData->type = yaccResult.type;
}

