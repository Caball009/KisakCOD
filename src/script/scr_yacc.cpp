#include <stdafx.h>

// LWSS: some details here...
// https://berthub.eu/lex-yacc/cvs/lexyacc.pdf


// In the YACC file, you write your own main() function, which calls yyparse() at one point.The function
// yyparse() is created for you by YACC, and ends up in y.tab.c.
// yyparse() reads a stream of token / value pairs from yylex(), which needs to be supplied.You can code this
// function yourself, or have Lex do it for you.In our examples, we’ve chosen to leave this task to Lex.
// The yylex() as written by Lex reads characters from a FILE *file pointer called yyin.If you do not set yyin,
// it defaults to standard input.It outputs to yyout, which if unset defaults to stdout.You can also modify
// yyin in the yywrap() function which is called at the end of a file.It allows you to open another file, and
// continue parsing.
// If this is the case, have it return 0. If you want to end parsing at this file, let it return 1.
// Each call to yylex() returns an integer value which represents a token type.This tells YACC what kind of
// token it has read.The token may optionally have a value, which should be placed in the variable yylval.


// By default yylval is of type int, but you can override that from the YACC file by re#defining YYSTYPE.
// The Lexer needs to be able to access yylval.In order to do so, it must be declared in the scope of the lexer
// as an extern variable.The original YACC neglects to do this for you, so you should add the following to
// your lexter, just beneath #include <y.tab.h>:

#include <Windows.h>

#include <script/scr_vm.h>
#include "scr_yacc.h"

#include <malloc.h> // alloca
#include "scr_parsetree.h"
#include "scr_parser.h"
#include "scr_main.h"
#include <client_mp/client_mp.h>
#include "scr_compiler.h"

struct stype_t // sizeof=0x8
{                                       // ...
    sval_u val;                         // ...
    unsigned int pos;                   // ...
};

// KISAKTODO ICF'd function that just returns first arg. 
sval_u __cdecl node1_(unsigned int pool)
{
    return pool;
}

void __cdecl _yy_memcpy(char *to, char *from, unsigned int count)
{
    int v3; // eax

    while (1)
    {
        v3 = count--;
        if (v3 <= 0)
            break;
        *to++ = *from++;
    }
}

#pragma region YY_GLOBALS
const __int16 yydefact[262] =
{
  0,
  133,
  0,
  130,
  64,
  45,
  46,
  110,
  114,
  0,
  0,
  0,
  0,
  0,
  41,
  42,
  69,
  0,
  0,
  49,
  50,
  51,
  52,
  53,
  0,
  0,
  0,
  60,
  0,
  29,
  85,
  0,
  88,
  89,
  58,
  59,
  90,
  0,
  0,
  110,
  0,
  2,
  0,
  34,
  55,
  36,
  0,
  47,
  5,
  48,
  3,
  0,
  4,
  0,
  1,
  0,
  0,
  112,
  47,
  5,
  48,
  113,
  0,
  0,
  56,
  43,
  44,
  57,
  24,
  25,
  68,
  70,
  28,
  0,
  0,
  37,
  0,
  0,
  0,
  33,
  0,
  0,
  0,
  0,
  65,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  114,
  0,
  0,
  54,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  71,
  72,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  97,
  28,
  131,
  0,
  0,
  127,
  128,
  129,
  132,
  98,
  105,
  0,
  0,
  0,
  94,
  108,
  109,
  0,
  40,
  0,
  0,
  0,
  0,
  27,
  0,
  0,
  0,
  104,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  32,
  0,
  0,
  0,
  62,
  66,
  0,
  0,
  0,
  0,
  0,
  114,
  67,
  73,
  74,
  75,
  76,
  77,
  78,
  79,
  80,
  81,
  82,
  118,
  0,
  0,
  107,
  111,
  0,
  30,
  0,
  0,
  26,
  0,
  0,
  91,
  92,
  38,
  63,
  120,
  0,
  122,
  0,
  124,
  0,
  0,
  0,
  0,
  116,
  117,
  0,
  0,
  106,
  35,
  99,
  101,
  95,
  110,
  83,
  0,
  84,
  0,
  86,
  0,
  87,
  61,
  39,
  0,
  0,
  0,
  0,
  96,
  0,
  0,
  119,
  121,
  123,
  115,
  110,
  126,
  100,
  0,
  103,
  0,
  102,
  125,
  0,
  0,
  0
}; // idb
const __int16 yypact[262] =
{
  -15,
  32768,
  702,
  -50,
  8,
  32768,
  32768,
  32768,
  988,
  22,
  -10,
  24,
  988,
  988,
  32768,
  32768,
  988,
  988,
  18,
  32768,
  32768,
  32768,
  32768,
  32768,
  17,
  28,
  34,
  32768,
  44,
  32768,
  32768,
  43,
  32768,
  32768,
  32768,
  32768,
  32768,
  50,
  51,
  32768,
  49,
  908,
  -8,
  32768,
  32768,
  32768,
  55,
  -7,
  228,
  109,
  -19,
  27,
  32768,
  16,
  -3,
  29,
  277,
  908,
  32768,
  4,
  32768,
  36,
  63,
  988,
  32768,
  32768,
  32768,
  32768,
  32768,
  32768,
  908,
  908,
  66,
  67,
  25,
  32768,
  988,
  988,
  617,
  32768,
  988,
  74,
  82,
  362,
  32768,
  988,
  988,
  988,
  988,
  988,
  988,
  988,
  988,
  988,
  988,
  988,
  988,
  988,
  988,
  988,
  988,
  988,
  988,
  85,
  988,
  1055,
  10,
  32768,
  86,
  89,
  90,
  91,
  92,
  99,
  988,
  32768,
  32768,
  988,
  988,
  988,
  988,
  988,
  988,
  988,
  988,
  988,
  988,
  32768,
  32768,
  32768,
  102,
  103,
  32768,
  32768,
  32768,
  32768,
  32768,
  32768,
  1086,
  54,
  228,
  32768,
  32768,
  32768,
  988,
  32768,
  1265,
  110,
  1162,
  1183,
  988,
  1204,
  105,
  106,
  32768,
  1301,
  1317,
  358,
  167,
  312,
  395,
  395,
  115,
  115,
  115,
  115,
  77,
  77,
  12,
  12,
  32768,
  32768,
  32768,
  108,
  127,
  957,
  1284,
  32768,
  32768,
  988,
  988,
  988,
  988,
  988,
  988,
  908,
  908,
  908,
  908,
  908,
  908,
  908,
  908,
  908,
  908,
  908,
  142,
  156,
  1,
  32768,
  908,
  162,
  32768,
  787,
  787,
  908,
  137,
  169,
  32768,
  32768,
  32768,
  32768,
  908,
  -4,
  908,
  15,
  908,
  20,
  1225,
  1246,
  168,
  32768,
  143,
  170,
  171,
  32768,
  32768,
  132,
  32768,
  872,
  32768,
  32768,
  195,
  32768,
  988,
  32768,
  988,
  32768,
  32768,
  32768,
  196,
  197,
  165,
  787,
  32768,
  199,
  447,
  32768,
  908,
  908,
  32768,
  32768,
  32768,
  32768,
  787,
  32768,
  532,
  32768,
  32768,
  220,
  221,
  32768
}; // idb
const __int16 yytable[1348] =
{
  48,
  130,
  174,
  -93,
  47,
  72,
  231,
  83,
  72,
  52,
  113,
  1,
  105,
  2,
  177,
  105,
  49,
  -31,
  53,
  -94,
  128,
  113,
  72,
  65,
  66,
  233,
  76,
  74,
  67,
  73,
  235,
  -93,
  232,
  63,
  64,
  41,
  106,
  77,
  225,
  106,
  100,
  101,
  102,
  78,
  18,
  68,
  69,
  18,
  79,
  70,
  71,
  234,
  80,
  84,
  140,
  178,
  236,
  74,
  47,
  81,
  82,
  103,
  129,
  131,
  104,
  127,
  107,
  135,
  74,
  107,
  49,
  29,
  144,
  145,
  29,
  -31,
  140,
  -28,
  63,
  152,
  47,
  140,
  220,
  132,
  133,
  47,
  29,
  153,
  29,
  173,
  112,
  199,
  49,
  112,
  147,
  179,
  146,
  49,
  180,
  181,
  182,
  183,
  113,
  98,
  99,
  100,
  101,
  102,
  184,
  148,
  149,
  196,
  197,
  151,
  202,
  208,
  209,
  -30,
  155,
  156,
  157,
  158,
  159,
  160,
  161,
  162,
  163,
  164,
  165,
  166,
  167,
  168,
  169,
  170,
  171,
  172,
  198,
  210,
  176,
  96,
  97,
  98,
  99,
  100,
  101,
  102,
  221,
  185,
  114,
  74,
  186,
  187,
  188,
  189,
  190,
  191,
  192,
  193,
  194,
  195,
  113,
  224,
  115,
  116,
  117,
  118,
  119,
  120,
  121,
  122,
  123,
  124,
  125,
  126,
  226,
  229,
  230,
  200,
  239,
  240,
  241,
  242,
  243,
  205,
  89,
  90,
  91,
  92,
  93,
  94,
  95,
  96,
  97,
  98,
  99,
  100,
  101,
  102,
  246,
  247,
  250,
  140,
  140,
  252,
  251,
  47,
  47,
  74,
  146,
  254,
  227,
  228,
  212,
  214,
  216,
  218,
  219,
  49,
  49,
  256,
  260,
  261,
  75,
  244,
  50,
  150,
  0,
  140,
  0,
  0,
  0,
  47,
  72,
  0,
  0,
  0,
  0,
  0,
  0,
  105,
  0,
  140,
  0,
  49,
  140,
  47,
  0,
  0,
  47,
  0,
  253,
  0,
  140,
  0,
  140,
  0,
  47,
  49,
  47,
  0,
  49,
  257,
  0,
  106,
  0,
  0,
  0,
  248,
  49,
  249,
  49,
  18,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  4,
  5,
  6,
  7,
  136,
  8,
  0,
  9,
  0,
  0,
  0,
  0,
  107,
  0,
  0,
  0,
  0,
  29,
  108,
  109,
  0,
  110,
  0,
  10,
  0,
  0,
  11,
  111,
  0,
  14,
  15,
  0,
  0,
  0,
  137,
  0,
  112,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  0,
  25,
  26,
  90,
  91,
  92,
  93,
  94,
  95,
  96,
  97,
  98,
  99,
  100,
  101,
  102,
  0,
  27,
  0,
  28,
  29,
  0,
  0,
  30,
  0,
  31,
  138,
  139,
  32,
  33,
  0,
  34,
  35,
  36,
  37,
  38,
  39,
  0,
  40,
  4,
  5,
  6,
  7,
  0,
  8,
  0,
  9,
  88,
  89,
  90,
  91,
  92,
  93,
  94,
  95,
  96,
  97,
  98,
  99,
  100,
  101,
  102,
  10,
  0,
  0,
  11,
  0,
  0,
  14,
  15,
  0,
  0,
  0,
  137,
  0,
  0,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  0,
  25,
  26,
  92,
  93,
  94,
  95,
  96,
  97,
  98,
  99,
  100,
  101,
  102,
  0,
  0,
  0,
  27,
  0,
  28,
  29,
  0,
  0,
  30,
  0,
  31,
  138,
  139,
  32,
  33,
  0,
  34,
  35,
  36,
  37,
  38,
  39,
  154,
  40,
  4,
  5,
  6,
  7,
  255,
  8,
  0,
  9,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  10,
  0,
  0,
  11,
  0,
  0,
  14,
  15,
  0,
  0,
  0,
  137,
  0,
  0,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  0,
  25,
  26,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  27,
  0,
  28,
  29,
  0,
  0,
  30,
  0,
  31,
  138,
  139,
  32,
  33,
  0,
  34,
  35,
  36,
  37,
  38,
  39,
  0,
  40,
  4,
  5,
  6,
  7,
  258,
  8,
  0,
  9,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  10,
  0,
  0,
  11,
  0,
  0,
  14,
  15,
  0,
  0,
  0,
  137,
  0,
  0,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  0,
  25,
  26,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  27,
  0,
  28,
  29,
  0,
  0,
  30,
  0,
  31,
  138,
  139,
  32,
  33,
  0,
  34,
  35,
  36,
  37,
  38,
  39,
  0,
  40,
  4,
  5,
  6,
  7,
  0,
  8,
  0,
  9,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  10,
  0,
  0,
  11,
  0,
  0,
  14,
  15,
  0,
  0,
  0,
  137,
  0,
  0,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  0,
  25,
  26,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  27,
  0,
  28,
  29,
  0,
  0,
  30,
  0,
  31,
  138,
  139,
  32,
  33,
  0,
  34,
  35,
  36,
  37,
  38,
  39,
  0,
  40,
  4,
  5,
  6,
  7,
  0,
  8,
  0,
  9,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  10,
  0,
  0,
  11,
  12,
  13,
  14,
  15,
  0,
  0,
  0,
  0,
  0,
  0,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  0,
  25,
  26,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  27,
  0,
  28,
  29,
  0,
  0,
  30,
  0,
  31,
  0,
  0,
  32,
  33,
  0,
  34,
  35,
  36,
  37,
  38,
  39,
  0,
  40,
  4,
  5,
  6,
  7,
  0,
  8,
  0,
  9,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  10,
  0,
  0,
  11,
  0,
  0,
  14,
  15,
  0,
  0,
  0,
  0,
  0,
  0,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  0,
  25,
  26,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  27,
  0,
  28,
  29,
  0,
  0,
  30,
  0,
  31,
  0,
  0,
  32,
  33,
  0,
  34,
  35,
  36,
  37,
  38,
  39,
  0,
  40,
  4,
  5,
  6,
  0,
  0,
  8,
  0,
  9,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  10,
  0,
  0,
  11,
  0,
  0,
  14,
  15,
  0,
  0,
  0,
  0,
  0,
  0,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  85,
  86,
  87,
  88,
  89,
  90,
  91,
  92,
  93,
  94,
  95,
  96,
  97,
  98,
  99,
  100,
  101,
  102,
  27,
  0,
  28,
  29,
  0,
  0,
  30,
  0,
  0,
  0,
  0,
  32,
  33,
  0,
  34,
  35,
  36,
  37,
  38,
  0,
  0,
  40,
  4,
  5,
  6,
  0,
  0,
  8,
  0,
  175,
  64,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  10,
  0,
  0,
  11,
  12,
  13,
  14,
  15,
  4,
  5,
  6,
  0,
  0,
  8,
  0,
  9,
  18,
  19,
  20,
  21,
  22,
  23,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  10,
  0,
  0,
  11,
  12,
  13,
  14,
  15,
  0,
  27,
  0,
  28,
  29,
  0,
  0,
  0,
  18,
  19,
  20,
  21,
  22,
  23,
  0,
  34,
  35,
  0,
  0,
  0,
  0,
  0,
  40,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  27,
  0,
  28,
  29,
  4,
  5,
  6,
  0,
  0,
  8,
  0,
  175,
  0,
  0,
  34,
  35,
  0,
  0,
  0,
  0,
  0,
  40,
  0,
  0,
  0,
  0,
  0,
  10,
  0,
  0,
  11,
  12,
  13,
  14,
  15,
  4,
  5,
  6,
  0,
  0,
  8,
  0,
  9,
  18,
  19,
  20,
  21,
  22,
  23,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  10,
  0,
  0,
  11,
  0,
  0,
  14,
  15,
  0,
  27,
  0,
  28,
  29,
  0,
  0,
  0,
  18,
  19,
  20,
  21,
  22,
  23,
  0,
  34,
  35,
  0,
  0,
  0,
  0,
  0,
  40,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  27,
  0,
  28,
  29,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  34,
  35,
  0,
  0,
  0,
  203,
  0,
  40,
  85,
  86,
  87,
  88,
  89,
  90,
  91,
  92,
  93,
  94,
  95,
  96,
  97,
  98,
  99,
  100,
  101,
  102,
  204,
  0,
  0,
  85,
  86,
  87,
  88,
  89,
  90,
  91,
  92,
  93,
  94,
  95,
  96,
  97,
  98,
  99,
  100,
  101,
  102,
  207,
  0,
  0,
  85,
  86,
  87,
  88,
  89,
  90,
  91,
  92,
  93,
  94,
  95,
  96,
  97,
  98,
  99,
  100,
  101,
  102,
  237,
  0,
  0,
  85,
  86,
  87,
  88,
  89,
  90,
  91,
  92,
  93,
  94,
  95,
  96,
  97,
  98,
  99,
  100,
  101,
  102,
  238,
  0,
  0,
  85,
  86,
  87,
  88,
  89,
  90,
  91,
  92,
  93,
  94,
  95,
  96,
  97,
  98,
  99,
  100,
  101,
  102,
  201,
  85,
  86,
  87,
  88,
  89,
  90,
  91,
  92,
  93,
  94,
  95,
  96,
  97,
  98,
  99,
  100,
  101,
  102,
  211,
  85,
  86,
  87,
  88,
  89,
  90,
  91,
  92,
  93,
  94,
  95,
  96,
  97,
  98,
  99,
  100,
  101,
  102,
  86,
  87,
  88,
  89,
  90,
  91,
  92,
  93,
  94,
  95,
  96,
  97,
  98,
  99,
  100,
  101,
  102,
  87,
  88,
  89,
  90,
  91,
  92,
  93,
  94,
  95,
  96,
  97,
  98,
  99,
  100,
  101,
  102
}; // idb
const char yytranslate[345] =
{
  '\0',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x02',
  '\x01',
  '\x03',
  '\x04',
  '\x05',
  '\x06',
  '\a',
  '\b',
  '\t',
  '\n',
  '\v',
  '\f',
  '\r',
  '\x0E',
  '\x0F',
  '\x10',
  '\x11',
  '\x12',
  '\x13',
  '\x14',
  '\x15',
  '\x16',
  '\x17',
  '\x18',
  '\x19',
  '\x1A',
  '\x1B',
  '\x1C',
  '\x1D',
  '\x1E',
  '\x1F',
  ' ',
  '!',
  '\"',
  '#',
  '$',
  '%',
  '&',
  '\'',
  '(',
  ')',
  '*',
  '+',
  ',',
  '-',
  '.',
  '/',
  '0',
  '1',
  '2',
  '3',
  '4',
  '5',
  '6',
  '7',
  '8',
  '9',
  ':',
  ';',
  '<',
  '=',
  '>',
  '?',
  '@',
  'A',
  'B',
  'C',
  'D',
  'E',
  'F',
  'G',
  'H',
  'I',
  'J',
  'K',
  'L',
  'M',
  'N',
  'O',
  'P',
  'Q',
  'R',
  'S',
  'T',
  'U',
  'V',
  'W',
  'X',
  'Y',
  'Z'
}; // idb
const __int16 yyr1[134] =
{
  0,
  91,
  91,
  91,
  91,
  92,
  92,
  92,
  92,
  92,
  92,
  92,
  92,
  92,
  92,
  92,
  92,
  92,
  92,
  92,
  92,
  92,
  92,
  92,
  92,
  92,
  93,
  93,
  94,
  94,
  95,
  95,
  96,
  96,
  97,
  97,
  98,
  98,
  99,
  99,
  100,
  100,
  100,
  100,
  100,
  100,
  100,
  100,
  100,
  100,
  100,
  100,
  100,
  100,
  100,
  100,
  100,
  100,
  100,
  100,
  100,
  100,
  101,
  101,
  101,
  101,
  101,
  102,
  102,
  102,
  102,
  102,
  102,
  102,
  102,
  102,
  102,
  102,
  102,
  102,
  102,
  102,
  102,
  102,
  102,
  102,
  102,
  102,
  102,
  102,
  102,
  102,
  102,
  103,
  103,
  104,
  104,
  105,
  105,
  105,
  105,
  105,
  105,
  105,
  105,
  106,
  106,
  106,
  106,
  107,
  107,
  108,
  108,
  109,
  109,
  110,
  110,
  111,
  111,
  112,
  112,
  113,
  113,
  114,
  114,
  115,
  115,
  115,
  115,
  116,
  116,
  117,
  118,
  118
}; // idb
const __int16 yyr2[134] =
{
  0,
  3,
  2,
  2,
  2,
  1,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  2,
  2,
  1,
  0,
  1,
  1,
  3,
  1,
  3,
  2,
  1,
  5,
  1,
  2,
  4,
  5,
  3,
  1,
  1,
  2,
  2,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  2,
  1,
  2,
  2,
  1,
  1,
  1,
  5,
  3,
  4,
  1,
  2,
  3,
  3,
  2,
  1,
  2,
  2,
  2,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  5,
  5,
  1,
  5,
  5,
  1,
  1,
  1,
  4,
  4,
  1,
  1,
  0,
  1,
  2,
  3,
  5,
  7,
  5,
  8,
  7,
  3,
  1,
  3,
  2,
  1,
  2,
  0,
  3,
  1,
  1,
  0,
  3,
  1,
  1,
  0,
  3,
  1,
  3,
  1,
  3,
  1,
  7,
  5,
  1,
  1,
  2,
  0,
  2,
  3,
  0
}; // idb
const __int16 yycheck[1348] =
{
  2,
  4,
  104,
  10,
  2,
  4,
  10,
  39,
  4,
  2,
  48,
  26,
  11,
  28,
  4,
  11,
  2,
  9,
  68,
  38,
  4,
  59,
  4,
  33,
  34,
  10,
  9,
  18,
  4,
  11,
  10,
  38,
  36,
  11,
  12,
  2,
  35,
  9,
  37,
  35,
  28,
  29,
  30,
  9,
  43,
  12,
  13,
  43,
  4,
  16,
  17,
  36,
  9,
  4,
  56,
  45,
  36,
  48,
  56,
  9,
  9,
  69,
  53,
  66,
  9,
  38,
  65,
  38,
  59,
  65,
  56,
  70,
  36,
  10,
  70,
  9,
  78,
  69,
  11,
  5,
  78,
  83,
  184,
  86,
  87,
  83,
  70,
  5,
  70,
  4,
  89,
  37,
  78,
  89,
  69,
  9,
  63,
  83,
  9,
  9,
  9,
  9,
  140,
  26,
  27,
  28,
  29,
  30,
  9,
  76,
  77,
  9,
  9,
  80,
  4,
  10,
  10,
  9,
  85,
  86,
  87,
  88,
  89,
  90,
  91,
  92,
  93,
  94,
  95,
  96,
  97,
  98,
  99,
  100,
  101,
  102,
  138,
  10,
  105,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  4,
  114,
  39,
  140,
  117,
  118,
  119,
  120,
  121,
  122,
  123,
  124,
  125,
  126,
  198,
  5,
  53,
  54,
  55,
  56,
  57,
  58,
  59,
  60,
  61,
  62,
  63,
  64,
  12,
  38,
  7,
  144,
  10,
  36,
  10,
  10,
  50,
  150,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  230,
  4,
  4,
  203,
  204,
  38,
  7,
  203,
  204,
  198,
  175,
  10,
  203,
  204,
  179,
  180,
  181,
  182,
  183,
  203,
  204,
  251,
  0,
  0,
  18,
  229,
  2,
  78,
  -1,
  229,
  -1,
  -1,
  -1,
  229,
  4,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  11,
  -1,
  243,
  -1,
  229,
  246,
  243,
  -1,
  -1,
  246,
  -1,
  243,
  -1,
  254,
  -1,
  256,
  -1,
  254,
  243,
  256,
  -1,
  246,
  254,
  -1,
  35,
  -1,
  -1,
  -1,
  234,
  254,
  236,
  256,
  43,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  4,
  5,
  6,
  7,
  8,
  9,
  -1,
  11,
  -1,
  -1,
  -1,
  -1,
  65,
  -1,
  -1,
  -1,
  -1,
  70,
  71,
  72,
  -1,
  74,
  -1,
  27,
  -1,
  -1,
  30,
  80,
  -1,
  33,
  34,
  -1,
  -1,
  -1,
  38,
  -1,
  89,
  41,
  42,
  43,
  44,
  45,
  46,
  47,
  48,
  49,
  -1,
  51,
  52,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  -1,
  67,
  -1,
  69,
  70,
  -1,
  -1,
  73,
  -1,
  75,
  76,
  77,
  78,
  79,
  -1,
  81,
  82,
  83,
  84,
  85,
  86,
  -1,
  88,
  4,
  5,
  6,
  7,
  -1,
  9,
  -1,
  11,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  27,
  -1,
  -1,
  30,
  -1,
  -1,
  33,
  34,
  -1,
  -1,
  -1,
  38,
  -1,
  -1,
  41,
  42,
  43,
  44,
  45,
  46,
  47,
  48,
  49,
  -1,
  51,
  52,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  -1,
  -1,
  -1,
  67,
  -1,
  69,
  70,
  -1,
  -1,
  73,
  -1,
  75,
  76,
  77,
  78,
  79,
  -1,
  81,
  82,
  83,
  84,
  85,
  86,
  87,
  88,
  4,
  5,
  6,
  7,
  8,
  9,
  -1,
  11,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  27,
  -1,
  -1,
  30,
  -1,
  -1,
  33,
  34,
  -1,
  -1,
  -1,
  38,
  -1,
  -1,
  41,
  42,
  43,
  44,
  45,
  46,
  47,
  48,
  49,
  -1,
  51,
  52,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  67,
  -1,
  69,
  70,
  -1,
  -1,
  73,
  -1,
  75,
  76,
  77,
  78,
  79,
  -1,
  81,
  82,
  83,
  84,
  85,
  86,
  -1,
  88,
  4,
  5,
  6,
  7,
  8,
  9,
  -1,
  11,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  27,
  -1,
  -1,
  30,
  -1,
  -1,
  33,
  34,
  -1,
  -1,
  -1,
  38,
  -1,
  -1,
  41,
  42,
  43,
  44,
  45,
  46,
  47,
  48,
  49,
  -1,
  51,
  52,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  67,
  -1,
  69,
  70,
  -1,
  -1,
  73,
  -1,
  75,
  76,
  77,
  78,
  79,
  -1,
  81,
  82,
  83,
  84,
  85,
  86,
  -1,
  88,
  4,
  5,
  6,
  7,
  -1,
  9,
  -1,
  11,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  27,
  -1,
  -1,
  30,
  -1,
  -1,
  33,
  34,
  -1,
  -1,
  -1,
  38,
  -1,
  -1,
  41,
  42,
  43,
  44,
  45,
  46,
  47,
  48,
  49,
  -1,
  51,
  52,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  67,
  -1,
  69,
  70,
  -1,
  -1,
  73,
  -1,
  75,
  76,
  77,
  78,
  79,
  -1,
  81,
  82,
  83,
  84,
  85,
  86,
  -1,
  88,
  4,
  5,
  6,
  7,
  -1,
  9,
  -1,
  11,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  27,
  -1,
  -1,
  30,
  31,
  32,
  33,
  34,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  41,
  42,
  43,
  44,
  45,
  46,
  47,
  48,
  49,
  -1,
  51,
  52,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  67,
  -1,
  69,
  70,
  -1,
  -1,
  73,
  -1,
  75,
  -1,
  -1,
  78,
  79,
  -1,
  81,
  82,
  83,
  84,
  85,
  86,
  -1,
  88,
  4,
  5,
  6,
  7,
  -1,
  9,
  -1,
  11,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  27,
  -1,
  -1,
  30,
  -1,
  -1,
  33,
  34,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  41,
  42,
  43,
  44,
  45,
  46,
  47,
  48,
  49,
  -1,
  51,
  52,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  67,
  -1,
  69,
  70,
  -1,
  -1,
  73,
  -1,
  75,
  -1,
  -1,
  78,
  79,
  -1,
  81,
  82,
  83,
  84,
  85,
  86,
  -1,
  88,
  4,
  5,
  6,
  -1,
  -1,
  9,
  -1,
  11,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  27,
  -1,
  -1,
  30,
  -1,
  -1,
  33,
  34,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  41,
  42,
  43,
  44,
  45,
  46,
  47,
  48,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  67,
  -1,
  69,
  70,
  -1,
  -1,
  73,
  -1,
  -1,
  -1,
  -1,
  78,
  79,
  -1,
  81,
  82,
  83,
  84,
  85,
  -1,
  -1,
  88,
  4,
  5,
  6,
  -1,
  -1,
  9,
  -1,
  11,
  12,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  27,
  -1,
  -1,
  30,
  31,
  32,
  33,
  34,
  4,
  5,
  6,
  -1,
  -1,
  9,
  -1,
  11,
  43,
  44,
  45,
  46,
  47,
  48,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  27,
  -1,
  -1,
  30,
  31,
  32,
  33,
  34,
  -1,
  67,
  -1,
  69,
  70,
  -1,
  -1,
  -1,
  43,
  44,
  45,
  46,
  47,
  48,
  -1,
  81,
  82,
  -1,
  -1,
  -1,
  -1,
  -1,
  88,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  67,
  -1,
  69,
  70,
  4,
  5,
  6,
  -1,
  -1,
  9,
  -1,
  11,
  -1,
  -1,
  81,
  82,
  -1,
  -1,
  -1,
  -1,
  -1,
  88,
  -1,
  -1,
  -1,
  -1,
  -1,
  27,
  -1,
  -1,
  30,
  31,
  32,
  33,
  34,
  4,
  5,
  6,
  -1,
  -1,
  9,
  -1,
  11,
  43,
  44,
  45,
  46,
  47,
  48,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  27,
  -1,
  -1,
  30,
  -1,
  -1,
  33,
  34,
  -1,
  67,
  -1,
  69,
  70,
  -1,
  -1,
  -1,
  43,
  44,
  45,
  46,
  47,
  48,
  -1,
  81,
  82,
  -1,
  -1,
  -1,
  -1,
  -1,
  88,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  67,
  -1,
  69,
  70,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  81,
  82,
  -1,
  -1,
  -1,
  10,
  -1,
  88,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  10,
  -1,
  -1,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  10,
  -1,
  -1,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  10,
  -1,
  -1,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  10,
  -1,
  -1,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30
}; // idb
const __int16 yy_accept[258] =
{
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  95,
  93,
  1,
  4,
  33,
  93,
  93,
  89,
  32,
  19,
  11,
  12,
  30,
  28,
  37,
  29,
  38,
  31,
  35,
  40,
  42,
  22,
  41,
  23,
  39,
  91,
  13,
  14,
  18,
  91,
  91,
  91,
  91,
  91,
  91,
  91,
  91,
  91,
  91,
  91,
  91,
  91,
  91,
  91,
  91,
  9,
  17,
  10,
  34,
  3,
  3,
  4,
  21,
  0,
  7,
  0,
  88,
  0,
  0,
  0,
  66,
  0,
  16,
  59,
  64,
  55,
  62,
  56,
  63,
  36,
  0,
  87,
  6,
  5,
  65,
  0,
  35,
  0,
  71,
  26,
  24,
  20,
  25,
  27,
  91,
  0,
  58,
  91,
  91,
  91,
  91,
  91,
  91,
  91,
  91,
  91,
  91,
  51,
  91,
  91,
  91,
  91,
  91,
  91,
  91,
  91,
  91,
  91,
  91,
  57,
  15,
  2,
  0,
  0,
  0,
  0,
  8,
  0,
  0,
  5,
  0,
  36,
  60,
  61,
  92,
  91,
  91,
  91,
  91,
  91,
  91,
  91,
  91,
  54,
  91,
  91,
  91,
  91,
  91,
  91,
  91,
  91,
  91,
  91,
  91,
  91,
  0,
  0,
  0,
  0,
  92,
  50,
  91,
  77,
  91,
  91,
  52,
  91,
  91,
  49,
  91,
  91,
  91,
  91,
  47,
  91,
  91,
  83,
  91,
  44,
  91,
  0,
  0,
  0,
  67,
  79,
  91,
  91,
  81,
  82,
  48,
  91,
  91,
  91,
  91,
  91,
  91,
  91,
  53,
  0,
  0,
  0,
  91,
  91,
  91,
  91,
  75,
  91,
  91,
  43,
  76,
  45,
  91,
  91,
  0,
  0,
  0,
  90,
  91,
  91,
  78,
  91,
  91,
  91,
  91,
  0,
  70,
  0,
  91,
  80,
  91,
  86,
  91,
  72,
  69,
  0,
  91,
  91,
  46,
  91,
  91,
  0,
  84,
  85,
  91,
  91,
  0,
  91,
  91,
  0,
  91,
  91,
  0,
  91,
  73,
  0,
  91,
  68,
  91,
  74,
  0
}; // idb
const int yy_ec[256] =
{
  0,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  2,
  3,
  1,
  1,
  2,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  2,
  4,
  5,
  6,
  7,
  8,
  9,
  1,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  18,
  18,
  18,
  18,
  18,
  18,
  18,
  18,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  1,
  25,
  25,
  25,
  25,
  26,
  25,
  25,
  25,
  25,
  25,
  25,
  25,
  25,
  25,
  25,
  25,
  25,
  25,
  25,
  25,
  25,
  25,
  25,
  25,
  25,
  25,
  27,
  28,
  29,
  30,
  31,
  1,
  32,
  33,
  34,
  35,
  36,
  37,
  38,
  39,
  40,
  25,
  41,
  42,
  43,
  44,
  45,
  46,
  25,
  47,
  48,
  49,
  50,
  51,
  52,
  25,
  53,
  54,
  55,
  56,
  57,
  58,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1
}; // idb
const int yy_meta[59] =
{
  0,
  1,
  1,
  2,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  3,
  1,
  1,
  1,
  1,
  1,
  1,
  4,
  4,
  1,
  3,
  1,
  1,
  4,
  4,
  4,
  4,
  4,
  4,
  4,
  4,
  4,
  4,
  4,
  4,
  4,
  4,
  4,
  4,
  4,
  4,
  4,
  4,
  4,
  4,
  4,
  4,
  1,
  1,
  1,
  1
}; // idb
const __int16 yy_base[266] =
{
  0,
  431,
  430,
  0,
  0,
  56,
  57,
  432,
  435,
  435,
  429,
  408,
  56,
  45,
  435,
  407,
  58,
  435,
  435,
  406,
  51,
  435,
  50,
  48,
  64,
  71,
  408,
  435,
  53,
  404,
  56,
  435,
  397,
  435,
  435,
  402,
  54,
  43,
  60,
  55,
  65,
  71,
  72,
  73,
  66,
  78,
  80,
  83,
  84,
  85,
  86,
  89,
  435,
  93,
  435,
  435,
  435,
  406,
  420,
  435,
  113,
  435,
  0,
  435,
  377,
  376,
  371,
  435,
  117,
  435,
  435,
  435,
  435,
  435,
  435,
  435,
  107,
  378,
  435,
  435,
  0,
  435,
  399,
  113,
  122,
  435,
  394,
  435,
  435,
  435,
  393,
  386,
  0,
  435,
  98,
  106,
  115,
  116,
  118,
  119,
  122,
  120,
  123,
  125,
  385,
  124,
  128,
  126,
  130,
  131,
  136,
  133,
  137,
  146,
  138,
  144,
  435,
  435,
  435,
  372,
  377,
  370,
  164,
  435,
  0,
  355,
  0,
  390,
  389,
  435,
  435,
  378,
  154,
  157,
  155,
  158,
  162,
  160,
  165,
  167,
  377,
  170,
  172,
  171,
  175,
  173,
  176,
  177,
  181,
  186,
  188,
  190,
  191,
  361,
  361,
  358,
  365,
  372,
  371,
  193,
  370,
  192,
  197,
  369,
  199,
  200,
  368,
  202,
  201,
  209,
  203,
  367,
  207,
  214,
  366,
  217,
  220,
  221,
  344,
  342,
  353,
  435,
  225,
  223,
  224,
  362,
  361,
  360,
  227,
  228,
  230,
  234,
  237,
  235,
  248,
  359,
  339,
  350,
  353,
  240,
  232,
  231,
  250,
  355,
  251,
  254,
  354,
  353,
  352,
  257,
  255,
  343,
  342,
  345,
  348,
  262,
  258,
  347,
  265,
  261,
  264,
  263,
  338,
  435,
  329,
  267,
  344,
  276,
  339,
  278,
  280,
  435,
  323,
  279,
  281,
  329,
  282,
  286,
  303,
  317,
  316,
  287,
  284,
  294,
  292,
  293,
  295,
  294,
  298,
  304,
  296,
  311,
  302,
  303,
  435,
  306,
  308,
  435,
  347,
  351,
  355,
  357,
  361,
  365,
  198,
  367
}; // idb
const __int16 yy_def[266] =
{
  0,
  258,
  258,
  257,
  3,
  259,
  259,
  257,
  257,
  257,
  257,
  257,
  260,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  261,
  257,
  257,
  257,
  261,
  261,
  261,
  261,
  261,
  261,
  261,
  261,
  261,
  261,
  261,
  261,
  261,
  261,
  261,
  261,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  260,
  257,
  260,
  257,
  257,
  257,
  257,
  257,
  262,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  263,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  261,
  264,
  257,
  261,
  261,
  261,
  261,
  261,
  261,
  261,
  261,
  261,
  261,
  261,
  261,
  261,
  261,
  261,
  261,
  261,
  261,
  261,
  261,
  261,
  261,
  257,
  257,
  257,
  257,
  257,
  257,
  262,
  257,
  262,
  257,
  263,
  257,
  257,
  257,
  257,
  265,
  261,
  261,
  261,
  261,
  261,
  261,
  261,
  261,
  261,
  261,
  261,
  261,
  261,
  261,
  261,
  261,
  261,
  261,
  261,
  261,
  261,
  257,
  257,
  257,
  257,
  265,
  261,
  261,
  261,
  261,
  261,
  261,
  261,
  261,
  261,
  261,
  261,
  261,
  261,
  261,
  261,
  261,
  261,
  261,
  261,
  261,
  257,
  257,
  257,
  257,
  261,
  261,
  261,
  261,
  261,
  261,
  261,
  261,
  261,
  261,
  261,
  261,
  261,
  261,
  257,
  257,
  257,
  261,
  261,
  261,
  261,
  261,
  261,
  261,
  261,
  261,
  261,
  261,
  261,
  257,
  257,
  257,
  261,
  261,
  261,
  261,
  261,
  261,
  261,
  261,
  257,
  257,
  257,
  261,
  261,
  261,
  261,
  261,
  261,
  257,
  257,
  261,
  261,
  261,
  261,
  261,
  257,
  261,
  261,
  261,
  261,
  257,
  261,
  261,
  257,
  261,
  261,
  257,
  261,
  261,
  257,
  261,
  257,
  261,
  261,
  0,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257
}; // idb
const __int16 yy_nxt[494] =
{
  0,
  8,
  10,
  9,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  32,
  32,
  33,
  8,
  34,
  35,
  32,
  36,
  37,
  38,
  39,
  40,
  41,
  42,
  32,
  43,
  32,
  44,
  32,
  45,
  32,
  46,
  47,
  48,
  49,
  50,
  32,
  51,
  32,
  32,
  52,
  53,
  54,
  55,
  9,
  9,
  61,
  63,
  68,
  72,
  74,
  76,
  69,
  57,
  57,
  78,
  92,
  75,
  73,
  86,
  87,
  79,
  64,
  89,
  90,
  70,
  80,
  92,
  92,
  62,
  65,
  81,
  82,
  92,
  83,
  95,
  98,
  96,
  92,
  92,
  66,
  77,
  84,
  94,
  92,
  92,
  92,
  105,
  101,
  103,
  97,
  92,
  99,
  92,
  100,
  104,
  92,
  92,
  92,
  92,
  116,
  102,
  92,
  61,
  108,
  109,
  114,
  123,
  106,
  111,
  76,
  92,
  107,
  115,
  82,
  113,
  83,
  112,
  84,
  92,
  127,
  110,
  127,
  132,
  84,
  128,
  62,
  133,
  92,
  92,
  124,
  92,
  92,
  92,
  117,
  92,
  92,
  92,
  92,
  92,
  136,
  92,
  138,
  92,
  92,
  135,
  92,
  139,
  134,
  92,
  92,
  92,
  137,
  141,
  123,
  140,
  144,
  92,
  146,
  92,
  142,
  147,
  143,
  151,
  145,
  148,
  150,
  92,
  92,
  152,
  92,
  92,
  149,
  92,
  159,
  92,
  160,
  124,
  92,
  162,
  92,
  163,
  158,
  92,
  92,
  92,
  92,
  131,
  92,
  92,
  92,
  166,
  161,
  167,
  92,
  164,
  168,
  169,
  171,
  92,
  165,
  92,
  173,
  92,
  92,
  92,
  92,
  174,
  170,
  175,
  92,
  172,
  92,
  92,
  92,
  92,
  92,
  183,
  177,
  182,
  92,
  186,
  92,
  188,
  176,
  189,
  191,
  92,
  185,
  187,
  92,
  192,
  184,
  92,
  92,
  190,
  92,
  92,
  92,
  193,
  92,
  92,
  195,
  92,
  92,
  92,
  204,
  92,
  92,
  205,
  92,
  202,
  201,
  92,
  194,
  199,
  200,
  208,
  207,
  206,
  209,
  92,
  215,
  92,
  92,
  203,
  216,
  92,
  92,
  214,
  92,
  92,
  218,
  210,
  92,
  92,
  92,
  92,
  92,
  226,
  92,
  228,
  221,
  219,
  217,
  229,
  220,
  225,
  227,
  92,
  230,
  92,
  92,
  92,
  92,
  92,
  233,
  92,
  235,
  92,
  92,
  234,
  236,
  242,
  244,
  92,
  92,
  92,
  237,
  92,
  240,
  92,
  248,
  239,
  241,
  250,
  92,
  253,
  245,
  92,
  247,
  92,
  251,
  254,
  92,
  252,
  256,
  249,
  246,
  92,
  92,
  243,
  255,
  8,
  8,
  8,
  8,
  56,
  56,
  56,
  56,
  60,
  92,
  60,
  60,
  91,
  91,
  122,
  238,
  122,
  122,
  126,
  92,
  126,
  126,
  157,
  157,
  92,
  232,
  231,
  92,
  92,
  224,
  223,
  222,
  92,
  92,
  92,
  92,
  213,
  212,
  211,
  92,
  92,
  92,
  92,
  198,
  197,
  196,
  92,
  92,
  92,
  92,
  92,
  92,
  92,
  181,
  180,
  179,
  178,
  92,
  92,
  128,
  128,
  156,
  155,
  154,
  153,
  92,
  92,
  130,
  129,
  76,
  125,
  121,
  120,
  119,
  58,
  118,
  93,
  92,
  88,
  85,
  71,
  67,
  59,
  58,
  257,
  9,
  9,
  7,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257
}; // idb
const __int16 yy_chk[494] =
{
  0,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  5,
  6,
  12,
  13,
  16,
  20,
  22,
  23,
  16,
  5,
  6,
  24,
  37,
  22,
  20,
  28,
  28,
  24,
  13,
  30,
  30,
  16,
  24,
  36,
  39,
  12,
  13,
  24,
  25,
  38,
  25,
  37,
  39,
  38,
  40,
  44,
  13,
  23,
  25,
  36,
  41,
  42,
  43,
  44,
  41,
  42,
  38,
  45,
  40,
  46,
  40,
  43,
  47,
  48,
  49,
  50,
  53,
  41,
  51,
  60,
  47,
  48,
  51,
  68,
  45,
  49,
  76,
  94,
  46,
  51,
  83,
  50,
  83,
  49,
  76,
  95,
  84,
  48,
  84,
  94,
  83,
  84,
  60,
  95,
  96,
  97,
  68,
  98,
  99,
  101,
  53,
  100,
  102,
  105,
  103,
  107,
  98,
  106,
  100,
  108,
  109,
  97,
  111,
  101,
  96,
  110,
  112,
  114,
  99,
  103,
  122,
  102,
  107,
  115,
  109,
  113,
  105,
  110,
  106,
  114,
  108,
  111,
  113,
  132,
  134,
  115,
  133,
  135,
  112,
  137,
  133,
  136,
  134,
  122,
  138,
  136,
  139,
  137,
  132,
  141,
  143,
  142,
  145,
  264,
  144,
  146,
  147,
  141,
  135,
  142,
  148,
  138,
  143,
  144,
  146,
  149,
  139,
  150,
  148,
  151,
  152,
  161,
  159,
  149,
  145,
  150,
  162,
  147,
  164,
  165,
  168,
  167,
  170,
  161,
  152,
  159,
  172,
  165,
  169,
  168,
  151,
  169,
  172,
  173,
  164,
  167,
  175,
  173,
  162,
  176,
  177,
  170,
  183,
  184,
  182,
  175,
  188,
  189,
  177,
  190,
  201,
  200,
  189,
  191,
  193,
  189,
  192,
  184,
  183,
  199,
  176,
  182,
  182,
  192,
  191,
  190,
  193,
  194,
  200,
  202,
  204,
  188,
  201,
  205,
  210,
  199,
  209,
  216,
  204,
  194,
  219,
  215,
  221,
  220,
  218,
  216,
  225,
  219,
  210,
  205,
  202,
  220,
  209,
  215,
  218,
  227,
  221,
  229,
  233,
  230,
  234,
  236,
  225,
  242,
  229,
  237,
  241,
  227,
  230,
  237,
  241,
  244,
  245,
  247,
  230,
  250,
  234,
  248,
  245,
  233,
  236,
  247,
  253,
  250,
  242,
  255,
  244,
  256,
  248,
  252,
  251,
  249,
  255,
  246,
  243,
  240,
  239,
  238,
  253,
  258,
  258,
  258,
  258,
  259,
  259,
  259,
  259,
  260,
  235,
  260,
  260,
  261,
  261,
  262,
  232,
  262,
  262,
  263,
  228,
  263,
  263,
  265,
  265,
  226,
  224,
  222,
  217,
  214,
  213,
  212,
  211,
  208,
  207,
  206,
  203,
  198,
  197,
  196,
  195,
  187,
  186,
  185,
  180,
  179,
  178,
  174,
  171,
  166,
  163,
  160,
  158,
  157,
  156,
  155,
  154,
  153,
  140,
  131,
  128,
  127,
  125,
  121,
  120,
  119,
  104,
  91,
  90,
  86,
  82,
  77,
  66,
  65,
  64,
  58,
  57,
  35,
  32,
  29,
  26,
  19,
  15,
  11,
  10,
  7,
  2,
  1,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257,
  257
}; // idb
#pragma endregion
int yy_init = 1; // idb

char *yytext;
stype_t yylval;
int yyleng;
int yychar;
int yynerrs;
FILE *yyin;
FILE *yyout;

sval_u yaccResult;

int yy_start;
yy_buffer_state *yy_current_buffer = NULL;
char *yy_c_buf_p;
char yy_hold_char;

int yy_last_accepting_state;
char *yy_last_accepting_cpos;
int yy_n_chars;
unsigned int g_sourcePos;
unsigned int g_out_pos;
int yy_did_buffer_switch_on_eof;

sval_u g_dummyVal;
unsigned __int8 g_parse_user;
char ch_buf[16386];

void *RETURN_ARG1(void *crap)
{
    return crap;
}

Enum_t RETURN_ARG1(int crap)
{
	return (Enum_t)crap;
}

HashEntry_unnamed_type_u __cdecl LowerCase(unsigned int stringValue)
{
    return SL_ConvertToLowercase(stringValue, g_parse_user, 14);
}

int __cdecl yyparse()
{
    void *v1; // esp
    void *v2; // esp
    unsigned int pos; // eax
    HashEntry_unnamed_type_u v4; // eax
    HashEntry_unnamed_type_u v5; // eax
    HashEntry_unnamed_type_u v6; // eax
    HashEntry_unnamed_type_u v7; // eax
    HashEntry_unnamed_type_u v8; // eax
    HashEntry_unnamed_type_u v9; // eax
    HashEntry_unnamed_type_u v10; // eax
    HashEntry_unnamed_type_u v11; // eax
    HashEntry_unnamed_type_u v12; // eax
    HashEntry_unnamed_type_u v13; // eax
    HashEntry_unnamed_type_u v14; // eax
    HashEntry_unnamed_type_u v15; // eax
    HashEntry_unnamed_type_u v16; // eax
    const char *v17; // [esp-4h] [ebp-CD8h]
    //int v18; // [esp+0h] [ebp-CD4h] BYREF
    int v19; // [esp+4h] [ebp-CD0h]
    int *v20; // [esp+8h] [ebp-CCCh]
    //int *v21; // [esp+Ch] [ebp-CC8h]
    sval_u val6[280]; // [esp+10h] [ebp-CC4h]
    sval_u v23; // [esp+470h] [ebp-864h]
    sval_u v24; // [esp+474h] [ebp-860h]
    sval_u v25; // [esp+478h] [ebp-85Ch]
    sval_u val4; // [esp+47Ch] [ebp-858h]
    sval_u v27; // [esp+480h] [ebp-854h]
    sval_u val3; // [esp+484h] [ebp-850h]
    sval_u valstack[6]; // [esp+488h] [ebp-84Ch]
    sval_u v30; // [esp+4A0h] [ebp-834h]
    sval_u val2; // [esp+4A4h] [ebp-830h]
    sval_u v32; // [esp+4A8h] [ebp-82Ch]
    sval_u v33; // [esp+4ACh] [ebp-828h]
    sval_u v34; // [esp+4B0h] [ebp-824h]
    sval_u v35; // [esp+4B4h] [ebp-820h]
    sval_u v36; // [esp+4B8h] [ebp-81Ch]
    int v37; // [esp+4BCh] [ebp-818h]
    stype_t *yyvs1; // [esp+4C0h] [ebp-814h]
    __int16 *yyss1; // [esp+4C4h] [ebp-810h]
    int yyerrstatus; // [esp+4C8h] [ebp-80Ch]
    int yyfree_stacks; // [esp+4CCh] [ebp-808h]
    int yyn; // [esp+4D0h] [ebp-804h]
    int yystate; // [esp+4D4h] [ebp-800h]
    __int16 *yyssp; // [esp+4D8h] [ebp-7FCh] BYREF
    __int16 yyssa[200]; // [esp+4DCh] [ebp-7F8h] BYREF
    stype_t *yyvs; // [esp+674h] [ebp-660h]
    int yychar1; // [esp+678h] [ebp-65Ch]
    __int16 *yyss; // [esp+67Ch] [ebp-658h]
    stype_t yyval; // [esp+680h] [ebp-654h]
    int yylen; // [esp+688h] [ebp-64Ch]
    stype_t yyvsa[200]; // [esp+68Ch] [ebp-648h] BYREF
    stype_t *yyvsp; // [esp+CCCh] [ebp-8h]
    int yystacksize; // [esp+CD0h] [ebp-4h]

    yychar1 = 0;
    yyss = yyssa;
    yyvs = yyvsa;
    yystacksize = 200;
    yyfree_stacks = 0;
    yystate = 0;
    yyerrstatus = 0;
    yynerrs = 0;
    yyval.pos = 0;
    yychar = -2;
    //yyssp = &yyssp + 1;
    //yyvsp = yyvsa;
    yyssp = yyss;
    yyvsp = yyvs;
    while (1)
    {
    yynewstate:
        *++yyssp = (short)yystate;
        if (yyssp >= &yyss[yystacksize - 1])
        {
            yyvs1 = yyvs;
            yyss1 = yyss;
            v37 = yyssp - yyss + 1;
            if (yystacksize >= 10000)
            {
                v17 = "parser stack overflow";
                yyerror();
                if (yyfree_stacks)
                {
                    free(yyss);
                    free(yyvs);
                }
                return 2;
            }
            yystacksize *= 2;
            if (yystacksize > 10000)
                yystacksize = 10000;

            //v1 = alloca(2 * yystacksize);
            //v21 = &v18;
            //yyss = &v18;
            //_yy_memcpy(&v18, yyss1, 2 * v37);
            yyss = (short *)alloca(sizeof(short) *yystacksize);
            memcpy(yyss, yyss1, sizeof(short) * yystacksize);

            yyvs = (stype_t *)alloca(sizeof(stype_t) * yystacksize);
            memcpy(yyvs, yyvs1, sizeof(stype_t) * yystacksize);
            //v2 = alloca(8 * yystacksize);
            //v20 = &v18;
            //yyvs = &v18;
            //_yy_memcpy(&v18, yyvs1, 8 * v37);

            yyssp = &yyss[v37 - 1];
            yyvsp = &yyvs[v37 - 1];
            if (yyssp >= &yyss[yystacksize - 1])
                goto yyabortlab;
        }
        yyn = yypact[yystate];
        if (yyn == -32768)
            break;
        if (yychar == -2)
            yychar = yylex();
        if (yychar > 0)
        {
            v19 = yychar > '\x01X' ? 'w' : yytranslate[yychar];
            yychar1 = v19;
        }
        else
        {
            yychar1 = 0;
            yychar = 0;
        }
        yyn += yychar1;
        if (yyn >= 0x544 || yycheck[yyn] != yychar1)
            break;
        yyn = yytable[yyn];
        if (yyn >= 0)
        {
            if (!yyn)
                goto yyerrlab;
            if (yyn == 261)
                goto yyacceptlab;
            if (yychar)
                yychar = -2;
            *++yyvsp = yylval;
            if (yyerrstatus)
                --yyerrstatus;
            yystate = yyn;
        }
        else
        {
            if (yyn == -32768)
                goto yyerrlab;
            yyn = -yyn;
        yyreduce:
            yylen = yyr2[yyn];
            if (yylen > 0)
            {
                pos = yyvsp[1 - yylen].pos;
                yyval.val.type = yyvsp[1 - yylen].val.type;
                yyval.pos = pos;
            }
            //v18 = yyn - 1;
            //switch (yyn)
            switch(yyn - 1)
            {
            case 1:
                v36.type = node1(yyvsp[-1].val.type, yyvsp->val).type;
                yaccResult.type = v36.type;
                break;
            case 2:
                v35.type = node1(ENUM_expression, yyvsp->val).type;
                yaccResult.type = v35.type;
                break;
            case 3:
                v34.type = node1(ENUM_statement, yyvsp->val).type;
                yaccResult.type = v34.type;
                break;
            case 4:
                v33.type = node1(ENUM_statement, yyvsp->val).type;
                yaccResult.type = v33.type;
                break;
            case 5:
                val2.sourcePosValue = yyvsp->pos;
                v32.type = node2(ENUM_primitive_expression, yyvsp->val, val2).type;
                yyval.val = v32;
                break;
            case 6:
                valstack[5].sourcePosValue = yyvsp[-1].pos;
                valstack[4].sourcePosValue = yyvsp->pos;
                valstack[3].sourcePosValue = yyvsp[-2].pos;
                v30.type = node5(ENUM_bool_or, yyvsp[-2].val, yyvsp->val, valstack[3], valstack[4], valstack[5]).type;
                yyval.val = v30;
                yyval.pos = yyvsp[-1].pos;
                break;
            case 7:
                valstack[1].sourcePosValue = yyvsp[-1].pos;
                valstack[0].sourcePosValue = yyvsp->pos;
                val3.sourcePosValue = yyvsp[-2].pos;
                valstack[2] = node5(ENUM_bool_and, yyvsp[-2].val, yyvsp->val, val3, valstack[0], valstack[1]);
                yyval.val = valstack[2];
                yyval.pos = yyvsp[-1].pos;
                break;
            case 8:
                val4.sourcePosValue = yyvsp[-1].pos;
                v25.intValue = OP_bit_or;
                v27.type = node4(ENUM_binary, yyvsp[-2].val, yyvsp->val, v25, val4).type;
                yyval.val = v27;
                yyval.pos = yyvsp[-1].pos;
                break;
            case 9:
                v23.type = RETURN_ARG1(yyvsp[-1].pos);
                val6[279].type = RETURN_ARG1(0x67);
                v24.type = node4(ENUM_binary, yyvsp[-2].val, yyvsp->val, val6[279], v23).type;
                yyval.val = v24;
                yyval.pos = yyvsp[-1].pos;
                break;
            case 10:
                val6[277].type = RETURN_ARG1(yyvsp[-1].pos);
                val6[276].type = RETURN_ARG1(0x68);
                val6[278] = node4(ENUM_binary, yyvsp[-2].val, yyvsp->val, val6[276], val6[277]);
                yyval.val = val6[278];
                yyval.pos = yyvsp[-1].pos;
                break;
            case 11:
                val6[274].type = RETURN_ARG1(yyvsp[-1].pos);
                val6[273].type = RETURN_ARG1(0x69);
                val6[275] = node4(ENUM_binary, yyvsp[-2].val, yyvsp->val, val6[273], val6[274]);
                yyval.val = val6[275];
                yyval.pos = yyvsp[-1].pos;
                break;
            case 12:
                val6[271].type = RETURN_ARG1(yyvsp[-1].pos);
                val6[270].type = RETURN_ARG1(0x6A);
                val6[272] = node4(ENUM_binary, yyvsp[-2].val, yyvsp->val, val6[270], val6[271]);
                yyval.val = val6[272];
                yyval.pos = yyvsp[-1].pos;
                break;
            case 13:
                val6[268].type = RETURN_ARG1(yyvsp[-1].pos);
                val6[267].type = RETURN_ARG1(0x6B);
                val6[269] = node4(ENUM_binary, yyvsp[-2].val, yyvsp->val, val6[267], val6[268]);
                yyval.val = val6[269];
                yyval.pos = yyvsp[-1].pos;
                break;
            case 14:
                val6[265].type = RETURN_ARG1(yyvsp[-1].pos);
                val6[264].type = RETURN_ARG1(0x6C);
                val6[266] = node4(ENUM_binary, yyvsp[-2].val, yyvsp->val, val6[264], val6[265]);
                yyval.val = val6[266];
                yyval.pos = yyvsp[-1].pos;
                break;
            case 15:
                val6[262].type = RETURN_ARG1(yyvsp[-1].pos);
                val6[261].type = RETURN_ARG1(0x6D);
                val6[263] = node4(ENUM_binary, yyvsp[-2].val, yyvsp->val, val6[261], val6[262]);
                yyval.val = val6[263];
                yyval.pos = yyvsp[-1].pos;
                break;
            case 16:
                val6[259].type = RETURN_ARG1(yyvsp[-1].pos);
                val6[258].type = RETURN_ARG1(0x6E);
                val6[260] = node4(ENUM_binary, yyvsp[-2].val, yyvsp->val, val6[258], val6[259]);
                yyval.val = val6[260];
                yyval.pos = yyvsp[-1].pos;
                break;
            case 17:
                val6[256].type = RETURN_ARG1(yyvsp[-1].pos);
                val6[255].type = RETURN_ARG1(0x6F);
                val6[257] = node4(ENUM_binary, yyvsp[-2].val, yyvsp->val, val6[255], val6[256]);
                yyval.val = val6[257];
                yyval.pos = yyvsp[-1].pos;
                break;
            case 18:
                val6[253].type = RETURN_ARG1(yyvsp[-1].pos);
                val6[252].type = RETURN_ARG1(0x70);
                val6[254] = node4(ENUM_binary, yyvsp[-2].val, yyvsp->val, val6[252], val6[253]);
                yyval.val = val6[254];
                yyval.pos = yyvsp[-1].pos;
                break;
            case 19:
                val6[250].type = RETURN_ARG1(yyvsp[-1].pos);
                val6[249].type = RETURN_ARG1(0x71);
                val6[251] = node4(ENUM_binary, yyvsp[-2].val, yyvsp->val, val6[249], val6[250]);
                yyval.val = val6[251];
                yyval.pos = yyvsp[-1].pos;
                break;
            case 20:
                val6[247].type = RETURN_ARG1(yyvsp[-1].pos);
                val6[246].type = RETURN_ARG1(0x72);
                val6[248] = node4(ENUM_binary, yyvsp[-2].val, yyvsp->val, val6[246], val6[247]);
                yyval.val = val6[248];
                yyval.pos = yyvsp[-1].pos;
                break;
            case 21:
                val6[244].type = RETURN_ARG1(yyvsp[-1].pos);
                val6[243].type = RETURN_ARG1(0x73);
                val6[245] = node4(ENUM_binary, yyvsp[-2].val, yyvsp->val, val6[243], val6[244]);
                yyval.val = val6[245];
                yyval.pos = yyvsp[-1].pos;
                break;
            case 22:
                val6[241].type = RETURN_ARG1(yyvsp[-1].pos);
                val6[240].type = RETURN_ARG1(0x74);
                val6[242] = node4(ENUM_binary, yyvsp[-2].val, yyvsp->val, val6[240], val6[241]);
                yyval.val = val6[242];
                yyval.pos = yyvsp[-1].pos;
                break;
            case 23:
                val6[238].type = RETURN_ARG1(yyvsp[-1].pos);
                val6[237].type = RETURN_ARG1(0x75);
                val6[239] = node4(ENUM_binary, yyvsp[-2].val, yyvsp->val, val6[237], val6[238]);
                yyval.val = val6[239];
                yyval.pos = yyvsp[-1].pos;
                break;
            case 24:
                val6[235].type = RETURN_ARG1(yyvsp->pos);
                val6[236] = node2(ENUM_bool_not, yyvsp->val, val6[235]);
                yyval.val = val6[236];
                break;
            case 25:
                val6[233].type = RETURN_ARG1(yyvsp->pos);
                val6[234] = node2(ENUM_bool_complement, yyvsp->val, val6[233]);
                yyval.val = val6[234];
                break;
            case 26:
                val6[232] = node1(ENUM_expression, yyvsp->val);
                yyval.val = val6[232];
                break;
            case 27:
                val6[231] = node0(ENUM_NOP);
                yyval.val = val6[231];
                break;
            case 28:
            case 29:
                v4.prev = LowerCase(yyvsp->val.type).prev;
                yyvsp->val.stringValue = v4.prev;
                yyval.val.type = yyvsp->val.type;
                break;
            case 30:
                v5.prev = LowerCase(yyvsp->val.type).prev;
                yyvsp->val.stringValue = v5.prev;
                val6[229].type = RETURN_ARG1(yyvsp[-2].pos);
                val6[230] = node3(ENUM_far_function, yyvsp[-2].val, yyvsp->val, val6[229]);
                yyval.val = val6[230];
                ++scrCompilePub.far_function_count;
                break;
            case 31:
                v6.prev = LowerCase(yyvsp->val.type).prev;
                yyvsp->val.stringValue = v6.prev;
                val6[227].type = RETURN_ARG1(yyvsp->pos);
                val6[228] = node2(ENUM_local_function, yyvsp->val, val6[227]);
                yyval.val = val6[228];
                break;
            case 32:
                v7.prev = LowerCase(yyvsp->val.type).prev;
                yyvsp->val.stringValue = v7.prev;
                val6[225].type = RETURN_ARG1(yyvsp[-2].pos);
                val6[226] = node3(ENUM_far_function, yyvsp[-2].val, yyvsp->val, val6[225]);
                yyval.val = val6[226];
                yyval.pos = yyvsp[-1].pos;
                ++scrCompilePub.far_function_count;
                break;
            case 33:
                v8.prev = LowerCase(yyvsp->val.type).prev;
                yyvsp->val.stringValue = v8.prev;
                val6[223].type = RETURN_ARG1(yyvsp[-1].pos);
                val6[224] = node2(ENUM_local_function, yyvsp->val, val6[223]);
                yyval.val = val6[224];
                break;
            case 34:
                val6[221].type = RETURN_ARG1(yyvsp->pos);
                val6[222] = node2(ENUM_function, yyvsp->val, val6[221]);
                yyval.val = val6[222];
                break;
            case 35:
                val6[219].type = RETURN_ARG1(yyvsp[-2].pos);
                val6[220] = node2(ENUM_function_pointer, yyvsp[-2].val, val6[219]);
                yyval.val = val6[220];
                break;
            case 36:
                val6[217].type = RETURN_ARG1(yyvsp->pos);
                val6[218] = node2(ENUM_script_call, yyvsp->val, val6[217]);
                yyval.val = val6[218];
                break;
            case 37:
                val6[215].type = RETURN_ARG1(yyvsp->pos);
                val6[214].type = RETURN_ARG1(yyvsp[-1].pos);
                val6[216] = node3(ENUM_script_thread_call, yyvsp->val, val6[214], val6[215]);
                yyval.val = val6[216];
                yyval.pos = yyvsp->pos;
                break;
            case 38:
                val6[212].type = RETURN_ARG1(yyvsp[-2].pos);
                val6[213] = node3(ENUM_call, yyvsp[-3].val, yyvsp[-1].val, val6[212]);
                yyval.val = val6[213];
                yyval.pos = yyvsp[-2].pos;
                break;
            case 39:
                val6[210].type = RETURN_ARG1(yyvsp[-2].pos);
                val6[209].type = RETURN_ARG1(yyvsp[-4].pos);
                val6[211] = node5(ENUM_method, yyvsp[-4].val, yyvsp[-3].val, yyvsp[-1].val, val6[209], val6[210]);
                yyval.val = val6[211];
                yyval.pos = yyvsp[-2].pos;
                break;
            case 40:
                val6[207].type = RETURN_ARG1(yyvsp[-2].pos);
                val6[208] = node2(ENUM_expression_list, yyvsp[-1].val, val6[207]);
                yyval.val = val6[208];
                break;
            case 41:
                val6[205].type = RETURN_ARG1(yyvsp->pos);
                val6[206] = node2(ENUM_integer, yyvsp->val, val6[205]);
                yyval.val = val6[206];
                break;
            case 42:
                val6[203].type = RETURN_ARG1(yyvsp->pos);
                val6[204] = node2(ENUM_float, yyvsp->val, val6[203]);
                yyval.val = val6[204];
                break;
            case 43:
                val6[201].type = RETURN_ARG1(yyvsp[-1].pos);
                val6[202] = node2(ENUM_minus_integer, yyvsp->val, val6[201]);
                yyval.val = val6[202];
                break;
            case 44:
                val6[199].type = RETURN_ARG1(yyvsp[-1].pos);
                val6[200] = node2(ENUM_minus_float, yyvsp->val, val6[199]);
                yyval.val = val6[200];
                break;
            case 45:
                val6[197].type = RETURN_ARG1(yyvsp->pos);
                val6[198] = node2(ENUM_string, yyvsp->val, val6[197]);
                yyval.val = val6[198];
                break;
            case 46:
                val6[195].type = RETURN_ARG1(yyvsp->pos);
                val6[196] = node2(ENUM_istring, yyvsp->val, val6[195]);
                yyval.val = val6[196];
                break;
            case 47:
                val6[194] = node1(ENUM_call_expression, yyvsp->val);
                yyval.val = val6[194];
                break;
            case 48:
                val6[192].type = RETURN_ARG1(yyvsp->pos);
                val6[193] = node2(ENUM_variable, yyvsp->val, val6[192]);
                yyval.val = val6[193];
                break;
            case 49:
                val6[190].type = RETURN_ARG1(yyvsp->pos);
                val6[191] = node1(ENUM_undefined, val6[190]);
                yyval.val = val6[191];
                break;
            case 50:
                val6[188].type = RETURN_ARG1(yyvsp->pos);
                val6[189] = node1(ENUM_self, val6[188]);
                yyval.val = val6[189];
                break;
            case 51:
                val6[186].type = RETURN_ARG1(yyvsp->pos);
                val6[187] = node1(ENUM_level, val6[186]);
                yyval.val = val6[187];
                break;
            case 52:
                val6[184].type = RETURN_ARG1(yyvsp->pos);
                val6[185] = node1(ENUM_game, val6[184]);
                yyval.val = val6[185];
                break;
            case 53:
                val6[182].type = RETURN_ARG1(yyvsp->pos);
                val6[183] = node1(ENUM_anim, val6[182]);
                yyval.val = val6[183];
                break;
            case 54:
                val6[180].type = RETURN_ARG1(yyvsp[-1].pos);
                val6[181] = node2(ENUM_size_field, yyvsp[-1].val, val6[180]);
                yyval.val = val6[181];
                yyval.pos = yyvsp->pos;
                break;
            case 55:
                val6[178].type = RETURN_ARG1(yyvsp->pos);
                val6[179] = node2(ENUM_function, yyvsp->val, val6[178]);
                yyval.val = val6[179];
                break;
            case 56:
                val6[176].type = RETURN_ARG1(yyvsp[-1].pos);
                val6[177] = node1(ENUM_empty_array, val6[176]);
                yyval.val = val6[177];
                break;
            case 57:
                v9.prev = LowerCase(yyvsp->val.type).prev;
                yyvsp->val.stringValue = v9.prev;
                val6[174].type = RETURN_ARG1(yyvsp->pos);
                val6[175] = node2(ENUM_animation, yyvsp->val, val6[174]);
                yyval.val = val6[175];
                break;
            case 58:
                val6[172].type = RETURN_ARG1(yyvsp->pos);
                val6[173] = node1(ENUM_false, val6[172]);
                yyval.val = val6[173];
                break;
            case 59:
                val6[170].type = RETURN_ARG1(yyvsp->pos);
                val6[171] = node1(ENUM_true, val6[170]);
                yyval.val = val6[171];
                break;
            case 60:
                val6[168].type = RETURN_ARG1(yyvsp->pos);
                val6[169] = node1(ENUM_animtree, val6[168]);
                yyval.val = val6[169];
                break;
            case 61:
                val6[166].type = RETURN_ARG1(yyvsp[-3].pos);
                val6[167] = node3(ENUM_breakon, yyvsp[-4].val, yyvsp[-1].val, val6[166]);
                yyval.val = val6[167];
                break;
            case 62:
                v10.prev = LowerCase(yyvsp->val.type).prev;
                yyvsp->val.stringValue = v10.prev;
                val6[164].type = RETURN_ARG1(yyvsp[-2].pos);
                val6[165] = node3(ENUM_field_variable, yyvsp[-2].val, yyvsp->val, val6[164]);
                yyval.val = val6[165];
                yyval.pos = yyvsp->pos;
                break;
            case 63:
                val6[162].type = RETURN_ARG1(yyvsp[-1].pos);
                val6[161].type = RETURN_ARG1(yyvsp[-3].pos);
                val6[163] = node4(ENUM_array_variable, yyvsp[-3].val, yyvsp[-1].val, val6[161], val6[162]);
                yyval.val = val6[163];
                yyval.pos = yyvsp[-2].pos;
                break;
            case 64:
                v11.prev = LowerCase(yyvsp->val.type).prev;
                yyvsp->val.stringValue = v11.prev;
                val6[159].type = RETURN_ARG1(yyvsp->pos);
                val6[160] = node2(ENUM_local_variable, yyvsp->val, val6[159]);
                yyval.val = val6[160];
                break;
            case 65:
                v12.prev = LowerCase(yyvsp->val.type).prev;
                yyvsp->val.stringValue = v12.prev;
                val6[157].type = RETURN_ARG1(yyvsp[-1].pos);
                val6[158] = node2(ENUM_object, yyvsp->val, val6[157]);
                yyval.val = val6[158];
                break;
            case 66:
                val6[155].type = RETURN_ARG1(yyvsp[-2].pos);
                val6[156] = node2(ENUM_self_field, yyvsp[-2].val, val6[155]);
                yyval.val = val6[156];
                yyval.pos = yyvsp->pos;
                break;
            case 67:
                val6[153].type = RETURN_ARG1(yyvsp->pos);
                val6[152].type = RETURN_ARG1(yyvsp[-1].pos);
                val6[154] = node4(ENUM_assignment, yyvsp[-2].val, yyvsp->val, val6[152], val6[153]);
                yyval.val = val6[154];
                break;
            case 68:
                val6[150].type = RETURN_ARG1(yyvsp[-1].pos);
                val6[151] = node2(ENUM_return, yyvsp->val, val6[150]);
                yyval.val = val6[151];
                break;
            case 69:
                val6[148].type = RETURN_ARG1(yyvsp->pos);
                val6[149] = node1(ENUM_return2, val6[148]);
                yyval.val = val6[149];
                break;
            case 70:
                val6[146].type = RETURN_ARG1(yyvsp[-1].pos);
                val6[145].type = RETURN_ARG1(yyvsp->pos);
                val6[147] = node3(ENUM_wait, yyvsp->val, val6[145], val6[146]);
                yyval.val = val6[147];
                break;
            case 71:
                val6[143].type = RETURN_ARG1(yyvsp[-1].pos);
                val6[144] = node2(ENUM_inc, yyvsp[-1].val, val6[143]);
                yyval.val = val6[144];
                break;
            case 72:
                val6[141].type = RETURN_ARG1(yyvsp[-1].pos);
                val6[142] = node2(ENUM_dec, yyvsp[-1].val, val6[141]);
                yyval.val = val6[142];
                break;
            case 73:
                val6[139].type = RETURN_ARG1(yyvsp[-1].pos);
                val6[138].type = RETURN_ARG1(0x66);
                val6[140] = node4(ENUM_binary_equals, yyvsp[-2].val, yyvsp->val, val6[138], val6[139]);
                yyval.val = val6[140];
                break;
            case 74:
                val6[136].type = RETURN_ARG1(yyvsp[-1].pos);
                val6[135].type = RETURN_ARG1(0x67);
                val6[137] = node4(ENUM_binary_equals, yyvsp[-2].val, yyvsp->val, val6[135], val6[136]);
                yyval.val = val6[137];
                break;
            case 75:
                val6[133].type = RETURN_ARG1(yyvsp[-1].pos);
                val6[132].type = RETURN_ARG1(0x68);
                val6[134] = node4(ENUM_binary_equals, yyvsp[-2].val, yyvsp->val, val6[132], val6[133]);
                yyval.val = val6[134];
                break;
            case 76:
                val6[130].type = RETURN_ARG1(yyvsp[-1].pos);
                val6[129].type = RETURN_ARG1(0x6F);
                val6[131] = node4(ENUM_binary_equals, yyvsp[-2].val, yyvsp->val, val6[129], val6[130]);
                yyval.val = val6[131];
                break;
            case 77:
                val6[127].type = RETURN_ARG1(yyvsp[-1].pos);
                val6[126].type = RETURN_ARG1(0x70);
                val6[128] = node4(ENUM_binary_equals, yyvsp[-2].val, yyvsp->val, val6[126], val6[127]);
                yyval.val = val6[128];
                break;
            case 78:
                val6[124].type = RETURN_ARG1(yyvsp[-1].pos);
                val6[123].type = RETURN_ARG1(0x71);
                val6[125] = node4(ENUM_binary_equals, yyvsp[-2].val, yyvsp->val, val6[123], val6[124]);
                yyval.val = val6[125];
                break;
            case 79:
                val6[121].type = RETURN_ARG1(yyvsp[-1].pos);
                val6[120].type = RETURN_ARG1(0x72);
                val6[122] = node4(ENUM_binary_equals, yyvsp[-2].val, yyvsp->val, val6[120], val6[121]);
                yyval.val = val6[122];
                break;
            case 80:
                val6[118].type = RETURN_ARG1(yyvsp[-1].pos);
                val6[117].type = RETURN_ARG1(0x73);
                val6[119] = node4(ENUM_binary_equals, yyvsp[-2].val, yyvsp->val, val6[117], val6[118]);
                yyval.val = val6[119];
                break;
            case 81:
                val6[115].type = RETURN_ARG1(yyvsp[-1].pos);
                val6[114].type = RETURN_ARG1(0x74);
                val6[116] = node4(ENUM_binary_equals, yyvsp[-2].val, yyvsp->val, val6[114], val6[115]);
                yyval.val = val6[116];
                break;
            case 82:
                val6[112].type = RETURN_ARG1(yyvsp[-1].pos);
                val6[111].type = RETURN_ARG1(0x75);
                val6[113] = node4(ENUM_binary_equals, yyvsp[-2].val, yyvsp->val, val6[111], val6[112]);
                yyval.val = val6[113];
                break;
            case 83:
                val6[109].type = RETURN_ARG1(yyvsp[-3].pos);
                val6[108].type = RETURN_ARG1(yyvsp[-4].pos);
                val6[110] = node4(ENUM_waittill, yyvsp[-4].val, yyvsp[-1].val, val6[108], val6[109]);
                yyval.val = val6[110];
                break;
            case 84:
                val6[106].type = RETURN_ARG1(yyvsp[-3].pos);
                val6[105].type = RETURN_ARG1(yyvsp[-4].pos);
                val6[107] = node4(ENUM_waittillmatch, yyvsp[-4].val, yyvsp[-1].val, val6[105], val6[106]);
                yyval.val = val6[107];
                break;
            case 85:
                val6[103].type = RETURN_ARG1(yyvsp->pos);
                val6[104] = node1(ENUM_waittillFrameEnd, val6[103]);
                yyval.val = val6[104];
                break;
            case 86:
                val6[101].type = RETURN_ARG1(yyvsp[-3].pos);
                val6[100].type = RETURN_ARG1(yyvsp[-4].pos);
                val6[102] = node4(ENUM_notify, yyvsp[-4].val, yyvsp[-1].val, val6[100], val6[101]);
                yyval.val = val6[102];
                break;
            case 87:
                val6[98].type = RETURN_ARG1(yyvsp[-1].pos);
                val6[97].type = RETURN_ARG1(yyvsp[-4].pos);
                val6[99] = node4(ENUM_endon, yyvsp[-4].val, yyvsp[-1].val, val6[97], val6[98]);
                yyval.val = val6[99];
                break;
            case 88:
                val6[95].type = RETURN_ARG1(yyvsp->pos);
                val6[96] = node1(ENUM_break, val6[95]);
                yyval.val = val6[96];
                break;
            case 89:
                val6[93].type = RETURN_ARG1(yyvsp->pos);
                val6[94] = node1(ENUM_continue, val6[93]);
                yyval.val = val6[94];
                break;
            case 90:
                val6[91].type = RETURN_ARG1(yyvsp->pos);
                val6[92] = node1(ENUM_breakpoint, val6[91]);
                yyval.val = val6[92];
                break;
            case 91:
                val6[89].type = RETURN_ARG1(yyvsp[-3].pos);
                val6[90] = node2(ENUM_prof_begin, yyvsp[-1].val, val6[89]);
                yyval.val = val6[90];
                break;
            case 92:
                val6[87].type = RETURN_ARG1(yyvsp[-3].pos);
                val6[88] = node2(ENUM_prof_end, yyvsp[-1].val, val6[87]);
                yyval.val = val6[88];
                break;
            case 93:
                val6[86] = node1(ENUM_call_expression_statement, yyvsp->val);
                yyval.val = val6[86];
                break;
            case 95:
                val6[85] = node0(ENUM_NOP);
                yyval.val = val6[85];
                break;
            case 98:
                val6[83].type = RETURN_ARG1(yyvsp->pos);
                val6[82].type = RETURN_ARG1(yyvsp[-2].pos);
                val6[84] = node3(ENUM_statement_list, yyvsp[-1].val, val6[82], val6[83]);
                yyval.val = val6[84];
                break;
            case 99:
                val6[80].type = RETURN_ARG1(yyvsp[-2].pos);
                val6[81] = node4(ENUM_if, yyvsp[-2].val, yyvsp->val, val6[80], g_dummyVal);
                yyval.val = val6[81];
                break;
            case 100:
                val6[78].type = RETURN_ARG1(yyvsp[-1].pos);
                val6[77].type = RETURN_ARG1(yyvsp[-4].pos);
                val6[79] = node7(
                    ENUM_if_else,
                    yyvsp[-4].val,
                    yyvsp[-2].val,
                    yyvsp->val,
                    val6[77],
                    val6[78],
                    g_dummyVal,
                    g_dummyVal);
                yyval.val = val6[79];
                break;
            case 101:
                val6[75].type = RETURN_ARG1(yyvsp[-4].pos);
                val6[74].type = RETURN_ARG1(yyvsp[-2].pos);
                val6[76] = node5(ENUM_while, yyvsp[-2].val, yyvsp->val, val6[74], val6[75], g_dummyVal);
                yyval.val = val6[76];
                break;
            case 102:
                val6[72].type = RETURN_ARG1(yyvsp[-7].pos);
                val6[71].type = RETURN_ARG1(yyvsp[-4].pos);
                val6[73] = node8(
                    ENUM_for,
                    yyvsp[-5].val,
                    yyvsp[-4].val,
                    yyvsp[-2].val,
                    yyvsp->val,
                    val6[71],
                    val6[72],
                    g_dummyVal,
                    g_dummyVal);
                yyval.val = val6[73];
                break;
            case 103:
                val6[69].type = RETURN_ARG1(yyvsp[-4].pos);
                val6[70] = node3(ENUM_switch, yyvsp[-4].val, yyvsp[-1].val, val6[69]);
                yyval.val = val6[70];
                break;
            case 104:
                val6[67].type = RETURN_ARG1(yyvsp[-2].pos);
                val6[68] = node3(ENUM_developer_statement_list, yyvsp[-1].val, val6[67], g_dummyVal);
                yyval.val = val6[68];
                break;
            case 105:
                val6[66] = node0(ENUM_NOP);
                yyval.val = val6[66];
                break;
            case 106:
                val6[64].type = RETURN_ARG1(yyvsp[-2].pos);
                val6[65] = node3(ENUM_case, yyvsp[-1].val, val6[64], g_dummyVal);
                yyval.val = val6[65];
                break;
            case 107:
                val6[62].type = RETURN_ARG1(yyvsp[-1].pos);
                val6[63] = node2(ENUM_default, val6[62], g_dummyVal);
                yyval.val = val6[63];
                break;
            case 109:
                val6[61] = append_node(yyvsp[-1].val, yyvsp->val);
                yyval.val = val6[61];
                break;
            case 110:
                val6[59] = node0(0);
                val6[60] = linked_list_end(val6[59]);
                yyval.val = val6[60];
                break;
            case 111:
                val6[56].type = RETURN_ARG1(yyvsp->pos);
                val6[57] = node1(yyvsp->val.type, val6[56]);
                val6[58] = prepend_node(val6[57], yyvsp[-2].val);
                yyval.val = val6[58];
                break;
            case 112:
                val6[54] = node0(ENUM_NOP);
                val6[52].type = RETURN_ARG1(yyvsp->pos);
                val6[53] = node1(yyvsp->val.type, val6[52]);
                val6[55] = prepend_node(val6[53], val6[54]);
                yyval.val = val6[55];
                break;
            case 114:
                val6[51] = node0(ENUM_NOP);
                yyval.val = val6[51];
                break;
            case 115:
                v13.prev = LowerCase(yyvsp->val.type).prev;
                yyvsp->val.stringValue = v13.prev;
                val6[48].type = RETURN_ARG1(yyvsp->pos);
                val6[49] = node1(yyvsp->val.type, val6[48]);
                val6[50] = append_node(yyvsp[-2].val, val6[49]);
                yyval.val = val6[50];
                break;
            case 116:
                v14.prev = LowerCase(yyvsp->val.type).prev;
                yyvsp->val.stringValue = v14.prev;
                val6[45].sourcePosValue = yyvsp->pos;
                val6[46] = node1(yyvsp->val.type, val6[45]);
                val6[43] = node0(ENUM_NOP);
                val6[44] = linked_list_end(val6[43]);
                val6[47] = append_node(val6[44], val6[46]);
                yyval.val = val6[47];
                break;
            case 118:
                val6[41] = node0(ENUM_NOP);
                val6[42] = linked_list_end(val6[41]);
                yyval.val = val6[42];
                break;
            case 119:
                v15.prev = LowerCase(yyvsp->val.type).prev;
                yyvsp->val.stringValue = v15.prev;
                val6[38].type = RETURN_ARG1(yyvsp->pos);
                val6[39] = node1(yyvsp->val.type, val6[38]);
                val6[40] = append_node(yyvsp[-2].val, val6[39]);
                yyval.val = val6[40];
                break;
            case 120:
                val6[35].sourcePosValue = yyvsp->pos;
                val6[36] = node1(yyvsp->val.type, val6[35]);
                val6[33] = node0(ENUM_NOP);
                val6[34] = linked_list_end(val6[33]);
                val6[37] = append_node(val6[34], val6[36]);
                yyval.val = val6[37];
                break;
            case 121:
                val6[30].type = RETURN_ARG1(yyvsp->pos);
                val6[31] = node1(yyvsp->val.type, val6[30]);
                val6[32] = append_node(yyvsp[-2].val, val6[31]);
                yyval.val = val6[32];
                break;
            case 122:
                val6[27].type = RETURN_ARG1(yyvsp->pos);
                val6[28] = node1(yyvsp->val.type, val6[27]);
                val6[25] = node0(ENUM_NOP);
                val6[26] = linked_list_end(val6[25]);
                val6[29] = append_node(val6[26], val6[28]);
                yyval.val = val6[29];
                break;
            case 123:
                val6[22].type = RETURN_ARG1(yyvsp->pos);
                val6[23] = node1(yyvsp->val.type, val6[22]);
                val6[24] = prepend_node(val6[23], yyvsp[-2].val);
                yyval.val = val6[24];
                break;
            case 124:
                val6[20] = node0(0);
                val6[18].type = RETURN_ARG1(yyvsp->pos);
                val6[19] = node1(yyvsp->val.type, val6[18]);
                val6[21] = prepend_node(val6[19], val6[20]);
                yyval.val = val6[21];
                break;
            case 125:
                v16.prev = LowerCase(yyvsp[-6].val.stringValue).prev;
                yyvsp[-6].val.stringValue = v16.prev;
                val6[16].type = RETURN_ARG1(yyvsp->pos);
                val6[15].type = RETURN_ARG1(yyvsp[-6].pos);
                val6[17] = node6(ENUM_thread, yyvsp[-6].val, yyvsp[-4].val, yyvsp[-1].val, val6[15], val6[16], g_dummyVal);
                yyval.val = val6[17];
                break;
            case 126:
                val6[13].type = RETURN_ARG1(yyvsp[-2].pos);
                val6[12].type = RETURN_ARG1(yyvsp[-4].pos);
                val6[14] = node3(ENUM_usingtree, yyvsp[-2].val, val6[12], val6[13]);
                yyval.val = val6[14];
                break;
            case 127:
                val6[10].type = RETURN_ARG1(yyvsp->pos);
                val6[11] = node1(ENUM_begin_developer_thread, val6[10]);
                yyval.val = val6[11];
                break;
            case 128:
                val6[8].type = RETURN_ARG1(yyvsp->pos);
                val6[9] = node1(ENUM_end_developer_thread, val6[8]);
                yyval.val = val6[9];
                break;
            case 129:
                val6[7] = append_node(yyvsp[-1].val, yyvsp->val);
                yyval.val = val6[7];
                break;
            case 130:
                val6[5] = node0(ENUM_NOP);
                val6[6] = linked_list_end(val6[5]);
                yyval.val = val6[6];
                break;
            case 131:
                val6[3].type = RETURN_ARG1(yyvsp[-1].pos);
                val6[4] = node2(86, yyvsp->val, val6[3]);
                yyval.val = val6[4];
                ++scrCompilePub.far_function_count;
                break;
            case 132:
                val6[2] = append_node(yyvsp[-2].val, yyvsp[-1].val);
                yyval.val = val6[2];
                break;
            case 133:
                val6[0] = node0(0);
                val6[1] = linked_list_end(val6[0]);
                yyval.val = val6[1];
                break;
            default:
                break;
            }
            yyvsp -= yylen;
            yyssp -= yylen;
            *++yyvsp = yyval;
            yyn = yyr1[yyn];
            yystate = *yyssp + yypact[yyn + 171];
            if (yystate < 0x544 && yycheck[yystate] == *yyssp)
                yystate = yytable[yystate];
            else
                yystate = yydefact[yyn + 171];
        }
    }
    yyn = yydefact[yystate];
    if (yyn)
        goto yyreduce;
yyerrlab:
    if (!yyerrstatus)
    {
        ++yynerrs;
        v17 = "parse error";
        yyerror();
    }
    if (yyerrstatus == 3)
    {
        if (!yychar)
        {
        yyabortlab:
            if (yyfree_stacks)
            {
                free(yyss);
                free(yyvs);
            }
            return 1;
        }
        yychar = -2;
    }
    yyerrstatus = 3;
    while (2)
    {
        yyn = yypact[yystate];
        if (yyn == -32768)
            goto yyerrpop;
        if (++yyn >= 0x544 || yycheck[yyn] != 1)
            goto yyerrpop;
        yyn = yytable[yyn];
        if (yyn < 0)
        {
            if (yyn != -32768)
            {
                yyn = -yyn;
                goto yyreduce;
            }
            goto yyerrpop;
        }
        if (!yyn)
        {
        yyerrpop:
            if (yyssp == yyss)
                goto yyabortlab;
            --yyvsp;
            yystate = *--yyssp;
            continue;
        }
        break;
    }
    if (yyn != 261)
    {
        *++yyvsp = yylval;
        yystate = yyn;
        goto yynewstate;
    }
yyacceptlab:
    if (yyfree_stacks)
    {
        free(yyss);
        free(yyvs);
    }
    return 0;
}

int __cdecl yylex()
{
    int next_buffer; // [esp+0h] [ebp-24h]
    int yy_next_state; // [esp+8h] [ebp-1Ch]
    int yy_amount_of_matched_text; // [esp+Ch] [ebp-18h]
    unsigned __int8 yy_c; // [esp+13h] [ebp-11h]
    char *yy_bp; // [esp+14h] [ebp-10h]
    int yy_current_state; // [esp+18h] [ebp-Ch]
    int yy_act; // [esp+1Ch] [ebp-8h]
    char *yy_cp; // [esp+20h] [ebp-4h]

    if (yy_init)
    {
        yy_init = 0;
        if (!yy_start)
            yy_start = 1;
        if (!yyin)
        {
            yyin = stdin;
        }
        if (!yyout)
        {
            yyout = stdout;
        }
        if (!yy_current_buffer)
            yy_current_buffer = yy_create_buffer(yyin, 0x4000u);
        yy_load_buffer_state();
    }
    while (1)
    {
    LABEL_11:
        yy_cp = yy_c_buf_p;
        *yy_c_buf_p = yy_hold_char;
        yy_bp = yy_cp;
        yy_current_state = yy_start;
        do
        {
        yy_match:
            yy_c = yy_ec[*yy_cp];
            if (yy_accept[yy_current_state])
            {
                yy_last_accepting_state = yy_current_state;
                yy_last_accepting_cpos = yy_cp;
            }
            while (yy_chk[yy_c + yy_base[yy_current_state]] != yy_current_state)
            {
                yy_current_state = yy_def[yy_current_state];
                if (yy_current_state >= 258)
                    yy_c = yy_meta[yy_c];
            }
            yy_current_state = yy_nxt[yy_c + yy_base[yy_current_state]];
            ++yy_cp;
        } while (yy_base[yy_current_state] != 435);
        while (2)
        {
            yy_act = yy_accept[yy_current_state];
            if (!yy_accept[yy_current_state])
            {
                yy_cp = yy_last_accepting_cpos;
                yy_act = yy_accept[yy_last_accepting_state];
            }
            yytext = yy_bp;
            yyleng = yy_cp - yy_bp;
            yy_hold_char = *yy_cp;
            *yy_cp = 0;
            yy_c_buf_p = yy_cp;
        do_action:
            switch (yy_act)
            {
            case 0:
                *yy_cp = yy_hold_char;
                yy_cp = yy_last_accepting_cpos;
                yy_current_state = yy_last_accepting_state;
                continue;
            case 1:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                goto LABEL_11;
            case 2:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                yy_start = 3;
                goto LABEL_11;
            case 3:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                goto LABEL_11;
            case 4:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                goto LABEL_11;
            case 5:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                goto LABEL_11;
            case 6:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                yy_start = 5;
                goto LABEL_11;
            case 7:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return StringValue(yytext + 1, yyleng - 2) != 0 ? 259 : 257;
            case 8:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return StringValue(yytext + 2, yyleng - 3) != 0 ? 260 : 257;
            case 9:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 261;
            case 10:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 262;
            case 11:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 263;
            case 12:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 264;
            case 13:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 265;
            case 14:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 266;
            case 15:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 267;
            case 16:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 268;
            case 17:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 269;
            case 18:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 270;
            case 19:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 271;
            case 20:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 272;
            case 21:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 273;
            case 22:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 274;
            case 23:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 275;
            case 24:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 276;
            case 25:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 277;
            case 26:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 278;
            case 27:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 279;
            case 28:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 280;
            case 29:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 281;
            case 30:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 282;
            case 31:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 283;
            case 32:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 284;
            case 33:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 285;
            case 34:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 286;
            case 35:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                IntegerValue(yytext);
                return 287;
            case 36:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                FloatValue(yytext);
                return 288;
            case 37:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 290;
            case 38:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 289;
            case 39:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 294;
            case 40:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 291;
            case 41:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 293;
            case 42:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 292;
            case 43:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 295;
            case 44:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 296;
            case 45:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 297;
            case 46:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 298;
            case 47:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 299;
            case 48:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 300;
            case 49:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 301;
            case 50:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 302;
            case 51:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 303;
            case 52:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 304;
            case 53:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 305;
            case 54:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 306;
            case 55:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 307;
            case 56:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 308;
            case 57:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 309;
            case 58:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 310;
            case 59:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 311;
            case 60:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 312;
            case 61:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 313;
            case 62:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 314;
            case 63:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 315;
            case 64:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 316;
            case 65:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 317;
            case 66:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 318;
            case 67:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 319;
            case 68:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 320;
            case 69:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 321;
            case 70:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 322;
            case 71:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 323;
            case 72:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 325;
            case 73:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 326;
            case 74:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 327;
            case 75:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 328;
            case 76:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 329;
            case 77:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 330;
            case 78:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 331;
            case 79:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 332;
            case 80:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 333;
            case 81:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 334;
            case 82:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 335;
            case 83:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 336;
            case 84:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 337;
            case 85:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 338;
            case 86:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 339;
            case 87:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 340;
            case 88:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 341;
            case 89:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 342;
            case 90:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                return 343;
            case 91:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                TextValue(yytext, yyleng);
                return 258;
            case 92:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                TextValue(yytext, yyleng);
                return 324;
            case 93:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                CompileError(g_sourcePos, "bad token '%s'", yytext);
                return 257;
            case 94:
                yylval.pos = g_out_pos;
                g_sourcePos = g_out_pos;
                g_out_pos += yyleng;
                fwrite(yytext, yyleng, 1u, yyout);
                goto LABEL_11;
            case 95:
                yy_amount_of_matched_text = yy_cp - yytext - 1;
                *yy_cp = yy_hold_char;
                if (!yy_current_buffer->yy_buffer_status)
                {
                    yy_n_chars = yy_current_buffer->yy_n_chars;
                    yy_current_buffer->yy_input_file = yyin;
                    yy_current_buffer->yy_buffer_status = 1;
                }
                if (yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars])
                {
                    yy_c_buf_p = &yytext[yy_amount_of_matched_text];
                    yy_current_state = yy_get_previous_state();
                    yy_next_state = yy_try_NUL_trans(yy_current_state);
                    yy_bp = yytext;
                    if (yy_next_state)
                    {
                        yy_cp = ++yy_c_buf_p;
                        yy_current_state = yy_next_state;
                        goto yy_match;
                    }
                    yy_cp = yy_c_buf_p;
                    continue;
                }
                next_buffer = yy_get_next_buffer();
                if (!next_buffer)
                {
                    yy_c_buf_p = &yytext[yy_amount_of_matched_text];
                    yy_current_state = yy_get_previous_state();
                    yy_cp = yy_c_buf_p;
                    yy_bp = yytext;
                    goto yy_match;
                }
                if (next_buffer != 1)
                {
                    if (next_buffer != 2)
                        goto LABEL_11;
                    yy_c_buf_p = &yy_current_buffer->yy_ch_buf[yy_n_chars];
                    yy_current_state = yy_get_previous_state();
                    yy_cp = yy_c_buf_p;
                    yy_bp = yytext;
                    continue;
                }
                yy_did_buffer_switch_on_eof = 0;
                if (CL_GetLocalClientActiveCount())
                {
                    yy_c_buf_p = yytext;
                    yy_act = (yy_start - 1) / 2 + 96;
                    goto do_action;
                }
                if (!yy_did_buffer_switch_on_eof)
                    yyrestart(yyin);
                break;
            case 96:
            case 97:
            case 98:
                return 0;
            default:
                yy_fatal_error("fatal flex scanner internal error--no action found");
            }
            break;
        }
    }
}

void __cdecl TextValue(char *str, int len)
{
    yylval.val.stringValue = SL_GetStringOfSize(str, 0, len + 1, 14).prev;
}

int __cdecl StringValue(char *str, int len)
{
    char v3; // [esp+0h] [ebp-200Ch]
    char stra[8192]; // [esp+4h] [ebp-2008h] BYREF
    char *v5; // [esp+2008h] [ebp-4h]
    char *v6; // [esp+2014h] [ebp+8h]
    int v7; // [esp+2018h] [ebp+Ch]

    if (len < 0x2000)
    {
        v5 = stra;
        while (len)
        {
            if (*str == 92)
            {
                v7 = len - 1;
                if (!v7)
                    break;
                v6 = str + 1;
                v3 = *v6;
                if (*v6 == 110)
                {
                    *v5++ = 10;
                }
                else if (v3 == 114)
                {
                    *v5++ = 13;
                }
                else
                {
                    if (v3 == 116)
                        *v5 = 9;
                    else
                        *v5 = *v6;
                    ++v5;
                }
                len = v7 - 1;
                str = v6 + 1;
            }
            else
            {
                --len;
                *v5++ = *str++;
            }
        }
        *v5 = 0;
        yylval.val.stringValue = SL_GetString_(stra, g_parse_user, 14);
        return 1;
    }
    else
    {
        CompileError(g_sourcePos, "max string length exceeded: \"%s\"", str);
        return 0;
    }
}

void __cdecl IntegerValue(char *str)
{
    sscanf(str, "%d", &yylval);
}

void __cdecl FloatValue(char *str)
{
    sscanf(str, "%f", &yylval);
}

int __cdecl yy_get_next_buffer()
{
    int yy_c_buf_p_offset; // [esp+4h] [ebp-20h]
    yy_buffer_state *b; // [esp+8h] [ebp-1Ch]
    signed int num_to_read; // [esp+Ch] [ebp-18h]
    char *source; // [esp+10h] [ebp-14h]
    int ret_val; // [esp+14h] [ebp-10h]
    char *dest; // [esp+18h] [ebp-Ch]
    int number_to_move; // [esp+1Ch] [ebp-8h]
    int i; // [esp+20h] [ebp-4h]

    dest = yy_current_buffer->yy_ch_buf;
    source = yytext;
    if (yy_c_buf_p > &dest[yy_n_chars + 1])
        yy_fatal_error("fatal flex scanner internal error--end of buffer missed");
    if (yy_current_buffer->yy_fill_buffer)
    {
        number_to_move = yy_c_buf_p - yytext - 1;
        for (i = 0; i < number_to_move; ++i)
            *dest++ = *source++;
        if (yy_current_buffer->yy_buffer_status == 2)
        {
            yy_n_chars = 0;
            yy_current_buffer->yy_n_chars = 0;
        }
        else
        {
            for (num_to_read = yy_current_buffer->yy_buf_size - number_to_move - 1;
                num_to_read <= 0;
                num_to_read = yy_current_buffer->yy_buf_size - number_to_move - 1)
            {
                b = yy_current_buffer;
                yy_c_buf_p_offset = yy_c_buf_p - yy_current_buffer->yy_ch_buf;
                if (yy_current_buffer->yy_is_our_buffer)
                {
                    if ((2 * yy_current_buffer->yy_buf_size) > 0)
                        yy_current_buffer->yy_buf_size *= 2;
                    else
                        yy_current_buffer->yy_buf_size += yy_current_buffer->yy_buf_size >> 3;
                    b->yy_ch_buf = (char*)yy_flex_realloc(b->yy_ch_buf, b->yy_buf_size + 2);
                }
                else
                {
                    yy_current_buffer->yy_ch_buf = 0;
                }
                if (!b->yy_ch_buf)
                    yy_fatal_error("fatal error - scanner input buffer overflow");
                yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];
            }
            if (num_to_read > 0x2000)
                num_to_read = 0x2000;
            yy_n_chars = Scr_ScanFile(&yy_current_buffer->yy_ch_buf[number_to_move], num_to_read);
            yy_current_buffer->yy_n_chars = yy_n_chars;
        }
        if (yy_n_chars)
        {
            ret_val = 0;
        }
        else if (number_to_move)
        {
            ret_val = 2;
            yy_current_buffer->yy_buffer_status = 2;
        }
        else
        {
            ret_val = 1;
            yyrestart(yyin);
        }
        yy_n_chars += number_to_move;
        yy_current_buffer->yy_ch_buf[yy_n_chars] = 0;
        yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = 0;
        yytext = yy_current_buffer->yy_ch_buf;
        return ret_val;
    }
    else if (yy_c_buf_p - yytext == 1)
    {
        return 1;
    }
    else
    {
        return 2;
    }
}

int __cdecl yy_get_previous_state()
{
    int v1; // [esp+0h] [ebp-10h]
    unsigned __int8 yy_c; // [esp+7h] [ebp-9h]
    int yy_current_state; // [esp+8h] [ebp-8h]
    char *yy_cp; // [esp+Ch] [ebp-4h]

    yy_current_state = yy_start;
    for (yy_cp = yytext; yy_cp < yy_c_buf_p; ++yy_cp)
    {
        if (*yy_cp)
            v1 = yy_ec[*yy_cp];
        else
            LOBYTE(v1) = 1;
        yy_c = v1;
        if (yy_accept[yy_current_state])
        {
            yy_last_accepting_state = yy_current_state;
            yy_last_accepting_cpos = yy_cp;
        }
        while (yy_chk[yy_c + yy_base[yy_current_state]] != yy_current_state)
        {
            yy_current_state = yy_def[yy_current_state];
            if (yy_current_state >= 258)
                yy_c = yy_meta[yy_c];
        }
        yy_current_state = yy_nxt[yy_c + yy_base[yy_current_state]];
    }
    return yy_current_state;
}

int __cdecl yy_try_NUL_trans(int yy_current_state)
{
    unsigned __int8 yy_c; // [esp+7h] [ebp-5h]
    int yy_current_statea; // [esp+14h] [ebp+8h]

    yy_c = 1;
    if (yy_accept[yy_current_state])
    {
        yy_last_accepting_state = yy_current_state;
        yy_last_accepting_cpos = yy_c_buf_p;
    }
    while (yy_chk[yy_c + yy_base[yy_current_state]] != yy_current_state)
    {
        yy_current_state = yy_def[yy_current_state];
        if (yy_current_state >= 258)
            yy_c = yy_meta[yy_c];
    }
    yy_current_statea = yy_nxt[yy_c + yy_base[yy_current_state]];
    return yy_current_statea != 257 ? yy_current_statea : 0;
}

void __cdecl yyrestart(FILE *input_file)
{
    if (!yy_current_buffer)
        yy_current_buffer = yy_create_buffer(yyin, 0x4000u);
    yy_init_buffer(yy_current_buffer, input_file);
    yy_load_buffer_state();
}

void __cdecl yy_load_buffer_state()
{
    yy_n_chars = yy_current_buffer->yy_n_chars;
    yy_c_buf_p = yy_current_buffer->yy_buf_pos;
    yytext = yy_c_buf_p;
    yyin = yy_current_buffer->yy_input_file;
    yy_hold_char = *yy_c_buf_p;
}

yy_buffer_state *__cdecl yy_create_buffer(FILE *file, unsigned int size)
{
    yy_buffer_state *b; // [esp+0h] [ebp-4h]

    b = (yy_buffer_state*)yy_flex_alloc(0x28u);
    if (!b)
        yy_fatal_error("out of dynamic memory in yy_create_buffer()");
    b->yy_buf_size = size;
    b->yy_ch_buf = (char*)yy_flex_alloc(b->yy_buf_size + 2);
    if (!b->yy_ch_buf)
        yy_fatal_error("out of dynamic memory in yy_create_buffer()");
    b->yy_is_our_buffer = 1;
    yy_init_buffer(b, file);
    return b;
}

void __cdecl yy_init_buffer(yy_buffer_state *b, FILE *file)
{
    yy_flush_buffer(b);
    b->yy_input_file = file;
    b->yy_fill_buffer = 1;
    b->yy_is_interactive = 0;
}

void __cdecl yy_flush_buffer(yy_buffer_state *b)
{
    if (b)
    {
        b->yy_n_chars = 0;
        *b->yy_ch_buf = 0;
        b->yy_ch_buf[1] = 0;
        b->yy_buf_pos = b->yy_ch_buf;
        b->yy_at_bol = 1;
        b->yy_buffer_status = 0;
        if (b == yy_current_buffer)
            yy_load_buffer_state();
    }
}

void __cdecl  yy_fatal_error(const char *msg)
{
    FILE *v1; // eax

    //v1 = __iob_func();
    v1 = stdout; // KISAK HACK
    fprintf(v1 + 2, "%s\n", msg);
    exit(2);
}

LPVOID __cdecl yy_flex_alloc(unsigned int size)
{
    return malloc(size);
}

void *__cdecl yy_flex_realloc(void *ptr, unsigned int size)
{
    return realloc(ptr, size);
}

int __cdecl yyerror()
{
    if (yychar)
    {
        if (yychar != 257)
            CompileError(g_sourcePos, "bad syntax");
    }
    else
    {
        CompileError(g_sourcePos, "unexpected end of file found");
    }
    return 0;
}

void __cdecl ScriptParse(sval_u *parseData, unsigned __int8 user)
{
    yy_buffer_state buffer_state; // [esp+0h] [ebp-28h] BYREF

    g_out_pos = -1;
    g_sourcePos = 0;
    g_parse_user = user;
    g_dummyVal.node = NULL;
    yy_init = 1;
    buffer_state.yy_buf_size = 0x4000;
    buffer_state.yy_ch_buf = ch_buf;
    buffer_state.yy_is_our_buffer = 0;
    yy_init_buffer(&buffer_state, 0);
    yy_current_buffer = &buffer_state;
    yy_start = 3;
    yyparse();
    parseData->type = yaccResult.type;
}

