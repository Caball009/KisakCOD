#pragma once

#include "client_mp/client_mp.h"

#include "r_gfx.h"
#include "r_bsp.h"
#include "r_rendercmds.h"
#include "r_image.h"

#include <Windows.h>
#include <d3d9.h>

enum GfxRenderer : __int32
{                                       // ...
    GFX_RENDERER_SHADER_2 = 0x0,
    GFX_RENDERER_SHADER_3 = 0x1,
    GFX_RENDERER_COUNT = 0x2,
    GFX_RENDERER_UNSPECIFIED = 0x2,
};

struct GfxAssets // sizeof=0x4
{                                       // ...
    IDirect3DQuery9 *pixelCountQuery;   // ...
};

struct GfxMetrics // sizeof=0x28
{                                       // ...
    unsigned __int16 cubemapShotRes;    // ...
    unsigned __int16 cubemapShotPixelBorder; // ...
    unsigned __int16 feedbackWidth;
    unsigned __int16 feedbackHeight;
    bool hasAnisotropicMinFilter;       // ...
    bool hasAnisotropicMagFilter;       // ...
    // padding byte
    // padding byte
    int maxAnisotropy;                  // ...
    int maxClipPlanes;                  // ...
    bool hasHardwareShadowmap;          // ...
    // padding byte
    // padding byte
    // padding byte
    _D3DFORMAT shadowmapFormatPrimary;  // ...
    _D3DFORMAT shadowmapFormatSecondary; // ...
    MaterialTechniqueType shadowmapBuildTechType; // ...
    unsigned __int8 shadowmapSamplerState; // ...
    bool slopeScaleDepthBias;           // ...
    bool canMipCubemaps;                // ...
    bool hasTransparencyMsaa;           // ...
};

struct GfxWindowParms // sizeof=0x28
{                                       // ...
    HWND__ *hwnd;                       // ...
    int hz;                             // ...
    bool fullscreen;                    // ...
    // padding byte
    // padding byte
    // padding byte
    int x;                              // ...
    int y;                              // ...
    int sceneWidth;                     // ...
    int sceneHeight;                    // ...
    int displayWidth;                   // ...
    int displayHeight;                  // ...
    int aaSamples;                      // ...
};

struct GfxGammaRamp // sizeof=0x200
{                                       // ...
    unsigned __int16 entries[256];      // ...
};

struct trStatistics_t // sizeof=0x28
{                                       // ...
    int c_indexes;                      // ...
    int c_fxIndexes;                    // ...
    int c_viewIndexes;                  // ...
    int c_shadowIndexes;                // ...
    int c_vertexes;
    int c_batches;                      // ...
    float dc;
    Image_MemUsage c_imageUsage;        // ...
};

struct GfxWorld;
struct __declspec(align(128)) r_global_permanent_t // sizeof=0x2180
{                                       // ...
    Material *sortedMaterials[2048];    // ...
    int needSortMaterials;              // ...
    int materialCount;                  // ...
    GfxImage *whiteImage;               // ...
    GfxImage *blackImage;               // ...
    GfxImage *blackImage3D;             // ...
    GfxImage *blackImageCube;           // ...
    GfxImage *grayImage;                // ...
    GfxImage *identityNormalMapImage;   // ...
    GfxImage *specularityImage;
    GfxImage *outdoorImage;
    GfxImage *pixelCostColorCodeImage;  // ...
    GfxLightDef *dlightDef;             // ...
    Material *defaultMaterial;          // ...
    Material *whiteMaterial;            // ...
    Material *additiveMaterial;         // ...
    Material *pointMaterial;            // ...
    Material *lineMaterial;             // ...
    Material *lineMaterialNoDepth;      // ...
    Material *clearAlphaStencilMaterial; // ...
    Material *shadowClearMaterial;      // ...
    Material *shadowCookieOverlayMaterial; // ...
    Material *shadowCookieBlurMaterial; // ...
    Material *shadowCasterMaterial;     // ...
    Material *shadowOverlayMaterial;    // ...
    Material *depthPrepassMaterial;     // ...
    Material *glareBlindMaterial;       // ...
    Material *pixelCostAddDepthAlwaysMaterial; // ...
    Material *pixelCostAddDepthDisableMaterial; // ...
    Material *pixelCostAddDepthEqualMaterial; // ...
    Material *pixelCostAddDepthLessMaterial; // ...
    Material *pixelCostAddDepthWriteMaterial; // ...
    Material *pixelCostAddNoDepthWriteMaterial; // ...
    Material *pixelCostColorCodeMaterial; // ...
    Material *stencilShadowMaterial;    // ...
    Material *stencilDisplayMaterial;   // ...
    Material *floatZDisplayMaterial;    // ...
    Material *colorChannelMixerMaterial; // ...
    Material *frameColorDebugMaterial;  // ...
    Material *frameAlphaDebugMaterial;  // ...
    GfxImage *rawImage;                 // ...
    GfxWorld *world;                    // ...
    Material *feedbackReplaceMaterial;  // ...
    Material *feedbackBlendMaterial;    // ...
    Material *feedbackFilmBlendMaterial; // ...
    Material *cinematicMaterial;        // ...
    Material *dofDownsampleMaterial;    // ...
    Material *dofNearCocMaterial;       // ...
    Material *smallBlurMaterial;        // ...
    Material *postFxDofMaterial;        // ...
    Material *postFxDofColorMaterial;   // ...
    Material *postFxColorMaterial;      // ...
    Material *postFxMaterial;           // ...
    Material *symmetricFilterMaterial[8]; // ...
    Material *shellShockBlurredMaterial; // ...
    Material *shellShockFlashedMaterial; // ...
    Material *glowConsistentSetupMaterial; // ...
    Material *glowApplyBloomMaterial;   // ...
    int savedScreenTimes[4];            // ...
    // LWSS: lots of padding
};

struct VertUsage // sizeof=0x8
{
    int index;
    VertUsage *next;
};

struct MaterialUsage // sizeof=0xC
{                                       // ...
    int memory;
    VertUsage *verts;                   // ...
    Material *material;
};

struct GfxLodRamp // sizeof=0x8
{                                       // ...
    float scale;                        // ...
    float bias;                         // ...
};
struct GfxLodParms // sizeof=0x20
{                                       // ...
    float origin[3];                    // ...
    GfxLodRamp ramp[2];                 // ...
    bool valid;                         // ...
    // padding byte
    // padding byte
    // padding byte
};

struct __declspec(align(8)) r_globals_t // sizeof=0x8310
{                                       // ...
    GfxViewParms identityViewParms;     // ...
    bool inFrame;                       // ...
    bool registered;                    // ...
    bool forbidDelayLoadImages;
    bool ignorePrecacheErrors;
    float viewOrg[3];                   // ...
    float viewDir[3];                   // ...
    unsigned int frontEndFrameCount;    // ...
    int totalImageMemory;
    Material *materialHashTable[2048];  // ...
    MaterialUsage materialUsage[2048];  // ...
    GfxFog fogSettings[5];              // ...
    int fogIndex;                       // ...
    GfxColor color_axis;                // ...
    GfxColor color_allies;              // ...
    int team;                           // ...
    trStatistics_t *stats;              // ...
    GfxLodParms lodParms;               // ...
    GfxLodParms correctedLodParms;      // ...
    bool hasAnyImageOverrides;          // ...
    bool useSunLightOverride;           // ...
    bool useSunDirOverride;             // ...
    bool useSunDirLerp;                 // ...
    float sunLightOverride[3];          // ...
    float sunDirOverride[3];            // ...
    float sunDirOverrideTarget[3];      // ...
    int sunDirLerpBeginTime;            // ...
    int sunDirLerpEndTime;              // ...
    GfxScaledPlacement identityPlacement; // ...
    const GfxViewParms *debugViewParms; // ...
    int endTime;                        // ...
    bool distortion;                    // ...
    bool drawWorld;                     // ...
    bool drawSModels;                   // ...
    bool drawXModels;                   // ...
    bool drawBModels;                   // ...
    // padding byte
    // padding byte
    // padding byte
    const char *codeImageNames[27];     // ...
    unsigned int viewInfoCount;         // ...
    int sunShadowFull;                  // ...
    float sunShadowmapScale;            // ...
    float sunShadowmapScaleNum;         // ...
    unsigned int sunShadowSize;         // ...
    float sunShadowPartitionRatio;      // ...
    int drawSunShadow;                  // ...
    int skinnedCacheReachedThreshold;   // ...
    float waterFloatTime;               // ...
    // padding byte
    // padding byte
    // padding byte
    // padding byte
};

struct GfxWindowTarget // sizeof=0x10
{                                       // ...
    HWND__ *hwnd;                       // ...
    IDirect3DSwapChain9 *swapChain;     // ...
    int width;                          // ...
    int height;                         // ...
};

struct __declspec(align(8)) DxGlobals // sizeof=0x2CE0
{                                       // ...
    HINSTANCE__ *hinst;
    IDirect3D9 *d3d9;                   // ...
    IDirect3DDevice9 *device;           // ...
    unsigned int adapterIndex;          // ...
    bool adapterNativeIsValid;          // ...
    // padding byte
    // padding byte
    // padding byte
    int adapterNativeWidth;             // ...
    int adapterNativeHeight;            // ...
    int adapterFullscreenWidth;         // ...
    int adapterFullscreenHeight;        // ...
    _D3DFORMAT depthStencilFormat;      // ...
    unsigned int displayModeCount;      // ...
    _D3DDISPLAYMODE displayModes[256];  // ...
    const char *resolutionNameTable[257]; // ...
    const char *refreshRateNameTable[257]; // ...
    char modeText[5120];                // ...
    IDirect3DQuery9 *fencePool[8];      // ...
    unsigned int nextFence;             // ...
    int gpuSync;                        // ...
    _D3DMULTISAMPLE_TYPE multiSampleType; // ...
    unsigned int multiSampleQuality;    // ...
    int sunSpriteSamples;               // ...
    IDirect3DSurface9 *singleSampleDepthStencilSurface; // ...
    bool deviceLost;                    // ...
    bool inScene;                       // ...
    // padding byte
    // padding byte
    int targetWindowIndex;              // ...
    int windowCount;                    // ...
    GfxWindowTarget windows[1];         // ...
    int flushGpuQueryCount;             // ...
    IDirect3DQuery9 *flushGpuQuery;     // ...
    unsigned __int64 gpuSyncDelay;      // ...
    unsigned __int64 gpuSyncStart;      // ...
    unsigned __int64 gpuSyncEnd;        // ...
    bool flushGpuQueryIssued;           // ...
    // padding byte
    // padding byte
    // padding byte
    _D3DTEXTUREFILTERTYPE linearNonMippedMinFilter;
    _D3DTEXTUREFILTERTYPE linearNonMippedMagFilter;
    _D3DTEXTUREFILTERTYPE linearMippedMinFilter;
    _D3DTEXTUREFILTERTYPE linearMippedMagFilter;
    _D3DTEXTUREFILTERTYPE anisotropicMinFilter;
    _D3DTEXTUREFILTERTYPE anisotropicMagFilter;
    int linearMippedAnisotropy;
    int anisotropyFor2x;
    int anisotropyFor4x;
    int mipFilterMode;
    unsigned int mipBias;               // ...
    IDirect3DQuery9 *swapFence;         // ...
    // padding byte
    // padding byte
    // padding byte
    // padding byte
};

struct GfxGlobals // sizeof=0x10
{                                       // ...
    bool haveThreadOwnership;           // ...
    bool startedRenderThread;           // ...
    bool isRenderingRemoteUpdate;       // ...
    // padding byte
    volatile int screenUpdateNotify;    // ...
    volatile int remoteScreenUpdateNesting; // ...
    int backEndFrameCount;              // ...
};

void __cdecl TRACK_r_init();
const char *__stdcall DXGetErrorDescription9A(int a1);
void __cdecl R_SyncGpu(int(__cdecl *WorkCallback)(unsigned __int64));
bool __cdecl R_IsUsingAdaptiveGpuSync();
void __cdecl  R_FatalInitError(const char *msg);
void __cdecl  R_FatalLockError(HRESULT hr);
const char *__cdecl R_ErrorDescription(HRESULT hr);
void __cdecl R_SetColorMappings();
void __cdecl R_CalcGammaRamp(GfxGammaRamp *gammaRamp);
void __cdecl R_GammaCorrect(unsigned __int8 *buffer, int bufSize);
void __cdecl SetGfxConfig(const GfxConfiguration *config);
void __cdecl R_InitThreads();
void __cdecl R_ShutdownStreams();
void __cdecl R_ShutdownMaterialUsage();
void __cdecl R_Shutdown(int destroyWindow);
void R_ShutdownDirect3D();
void R_ReleaseForShutdownOrReset();
void __cdecl R_UnloadWorld();
void __cdecl R_BeginRegistration(vidConfig_t *vidConfigOut);
void R_Init();
void R_InitGraphicsApi();
void R_InitSystems();
char __cdecl R_PreCreateWindow();
void __cdecl R_StoreDirect3DCaps(unsigned int adapterIndex);
void __cdecl R_GetDirect3DCaps(unsigned int adapterIndex, _D3DCAPS9 *caps);
void __cdecl R_SetShadowmapFormats_DX(unsigned int adapterIndex);
unsigned int __cdecl R_ChooseAdapter();
void __cdecl Sys_HideSplashWindow();
void __cdecl Sys_DestroySplashWindow();
char __cdecl R_CreateGameWindow(GfxWindowParms *wndParms);
char __cdecl R_InitHardware(const GfxWindowParms *wndParms);
void __cdecl R_StoreWindowSettings(const GfxWindowParms *wndParms);
void R_InitGamma();
char __cdecl R_CreateForInitOrReset();
IDirect3DQuery9 *__cdecl RB_HW_AllocOcclusionQuery();
char __cdecl R_CreateDevice(const GfxWindowParms *wndParms);
void __cdecl R_SetD3DPresentParameters(_D3DPRESENT_PARAMETERS_ *d3dpp, const GfxWindowParms *wndParms);
void __cdecl R_SetupAntiAliasing(const GfxWindowParms *wndParms);
HRESULT __cdecl R_CreateDeviceInternal(HWND__ *hwnd, unsigned int behavior, _D3DPRESENT_PARAMETERS_ *d3dpp);
int __cdecl R_GetDeviceType();
void __cdecl R_SetWndParms(GfxWindowParms *wndParms);
void R_Register();
void R_InitGlobalStructs();
void __cdecl R_EndRegistration();
void __cdecl R_TrackStatistics(trStatistics_t *stats);
void __cdecl R_UpdateTeamColors(int team, const float *color_allies, const float *color_axis);
void __cdecl R_ConfigureRenderer(const GfxConfiguration *config);
void __cdecl R_ComErrorCleanup();
bool R_CheckLostDevice();
void __cdecl R_MakeDedicated(const GfxConfiguration *config);

void __cdecl R_UpdateGpuSyncType();

extern DxGlobals dx;
extern r_global_permanent_t rgp;
extern int g_disableRendering;
extern r_globals_t rg;
extern vidConfig_t vidConfig;
extern GfxConfiguration gfxCfg;
extern GfxAssets gfxAssets;
extern GfxGlobals r_glob;
extern GfxMetrics gfxMetrics;
extern bool g_allocateMinimalResources;
