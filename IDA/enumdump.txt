 enum vehicleRideSlots_t : __int32
 {
     VEHICLE_RIDESLOT_DRIVER    = 0x0,
     VEHICLE_RIDESLOT_PASSENGER = 0x1,
     VEHICLE_RIDESLOT_GUNNER    = 0x2,
     VEHICLE_RIDESLOTS_COUNT    = 0x3,
 };
 enum statIndex_t : __int32
 {
     STAT_HEALTH           = 0x0,
     STAT_DEAD_YAW         = 0x1,
     STAT_MAX_HEALTH       = 0x2,
     STAT_IDENT_CLIENT_NUM = 0x3,
     STAT_SPAWN_COUNT      = 0x4,
     MAX_STATS             = 0x5,
 };
 enum $C32DA671A31131557419CF33BE0831E5 : __int32
 {
     ASSERT_TYPE_ASSERT     = 0x0,
     ASSERT_TYPE_SANITY     = 0x1,
     ASSERT_TYPE_STACKTRACE = 0x2,
 };
 enum $65AEE202EBAC5EBB59E32721A37948FE : __int32
 {
     TRACK_DEBUG                 = 0x0,
     TRACK_FREE                  = 0x1,
     TRACK_BINARIES              = 0x2,
     TRACK_MISC_SWAP             = 0x3,
     TRACK_DELIMITER1            = 0x4,
     TRACK_AI                    = 0x5,
     TRACK_AI_NODES              = 0x6,
     TRACK_SCRIPT                = 0x7,
     TRACK_FX                    = 0x8,
     TRACK_NETWORK_ENTITY        = 0x9,
     TRACK_MISC                  = 0xA,
     TRACK_ANIMATION             = 0xB,
     TRACK_WORLD_GLOBALS         = 0xC,
     TRACK_SOUND_GLOBALS         = 0xD,
     TRACK_MINSPEC_SOUND_GLOBALS = 0xE,
     TRACK_SOUND                 = 0xF,
     TRACK_MINSPEC_SOUND         = 0x10,
     TRACK_DELIMITER2            = 0x11,
     TRACK_RENDERER_GLOBALS      = 0x12,
     TRACK_RENDERER_IMAGES       = 0x13,
     TRACK_RENDERER_WORLD        = 0x14,
     TRACK_RENDERER_MODELS       = 0x15,
     TRACK_RENDERER_MISC         = 0x16,
     TRACK_RENDERER_TOTAL        = 0x17,
     TRACK_DELIMITER3            = 0x18,
     TRACK_COLLISION_MISC        = 0x19,
     TRACK_COLLISION_BRUSH       = 0x1A,
     TRACK_COLLISION_MODEL_TRI   = 0x1B,
     TRACK_COLLISION_TERRAIN     = 0x1C,
     TRACK_COLLISION_TOTAL       = 0x1D,
     TRACK_MAP_ENTS              = 0x1E,
     TRACK_TEMP                  = 0x1F,
     TRACK_DELIMITER4            = 0x20,
     TRACK_LOCALIZATION          = 0x21,
     TRACK_UI                    = 0x22,
     TRACK_MINSPEC_IMAGES        = 0x23,
     TRACK_DELIMITER5            = 0x24,
     TRACK_COUNT                 = 0x25,
 };
 enum vc_attributes::YesNoMaybe : __int32
 {                                       // ...
     No    = 0xFFF0001,
     Maybe = 0xFFF0010,
     Yes   = 0xFFF0100,
 };
 enum vc_attributes::AccessType : __int32
 {                                       // ...
     NoAccess  = 0x0,
     Read      = 0x1,
     Write     = 0x2,
     ReadWrite = 0x3,
 };
 enum trType_t : __int32
 {                                       // ...
     TR_STATIONARY          = 0x0,
     TR_INTERPOLATE         = 0x1,
     TR_LINEAR              = 0x2,
     TR_LINEAR_STOP         = 0x3,
     TR_SINE                = 0x4,
     TR_GRAVITY             = 0x5,
     TR_ACCELERATE          = 0x6,
     TR_DECELERATE          = 0x7,
     TR_PHYSICS             = 0x8,
     TR_FIRST_RAGDOLL       = 0x9,
     TR_RAGDOLL             = 0x9,
     TR_RAGDOLL_GRAVITY     = 0xA,
     TR_RAGDOLL_INTERPOLATE = 0xB,
     TR_LAST_RAGDOLL        = 0xB,
 };
 enum team_t : __int32
 {                                       // ...
     TEAM_FREE      = 0x0,
     TEAM_AXIS      = 0x1,
     TEAM_ALLIES    = 0x2,
     TEAM_SPECTATOR = 0x3,
     TEAM_NUM_TEAMS = 0x4,
 };
 enum $6ABDC6367E3229B6421BFD1B2626A094 : __int32
 {
     CON_CHANNEL_DONT_FILTER   = 0x0,
     CON_CHANNEL_ERROR         = 0x1,
     CON_CHANNEL_GAMENOTIFY    = 0x2,
     CON_CHANNEL_BOLDGAME      = 0x3,
     CON_CHANNEL_SUBTITLE      = 0x4,
     CON_CHANNEL_OBITUARY      = 0x5,
     CON_CHANNEL_LOGFILEONLY   = 0x6,
     CON_CHANNEL_CONSOLEONLY   = 0x7,
     CON_CHANNEL_GFX           = 0x8,
     CON_CHANNEL_SOUND         = 0x9,
     CON_CHANNEL_FILES         = 0xA,
     CON_CHANNEL_DEVGUI        = 0xB,
     CON_CHANNEL_PROFILE       = 0xC,
     CON_CHANNEL_UI            = 0xD,
     CON_CHANNEL_CLIENT        = 0xE,
     CON_CHANNEL_SERVER        = 0xF,
     CON_CHANNEL_SYSTEM        = 0x10,
     CON_CHANNEL_PLAYERWEAP    = 0x11,
     CON_CHANNEL_AI            = 0x12,
     CON_CHANNEL_ANIM          = 0x13,
     CON_CHANNEL_PHYS          = 0x14,
     CON_CHANNEL_FX            = 0x15,
     CON_CHANNEL_LEADERBOARDS  = 0x16,
     CON_CHANNEL_PARSERSCRIPT  = 0x17,
     CON_CHANNEL_SCRIPT        = 0x18,
     CON_BUILTIN_CHANNEL_COUNT = 0x19,
 };
 enum SND_EQTYPE : __int32
 {                                       // ...
     SND_EQTYPE_FIRST     = 0x0,
     SND_EQTYPE_LOWPASS   = 0x0,
     SND_EQTYPE_HIGHPASS  = 0x1,
     SND_EQTYPE_LOWSHELF  = 0x2,
     SND_EQTYPE_HIGHSHELF = 0x3,
     SND_EQTYPE_BELL      = 0x4,
     SND_EQTYPE_LAST      = 0x4,
     SND_EQTYPE_COUNT     = 0x5,
     SND_EQTYPE_INVALID   = 0x5,
 };
 enum snd_stopsounds_arg_t : __int32
 {                                       // ...
     SND_STOP_ALL               = 0x0,
     SND_KEEP_REVERB            = 0x1,
     SND_KEEP_MUSIC             = 0x2,
     SND_KEEP_AMBIENT           = 0x4,
     SND_KEEP_MUSIC_AND_AMBIENT = 0x6,
     SND_STOP_STREAMED          = 0x8,
     SND_KEEP_CHANNEL_VOLUMES   = 0x10,
 };
 enum HELICOPTER_STAGES : __int32
 {
     HELICOPTER_ONFIRE     = 0x0,
     HELICOPTER_HEAVYSMOKE = 0x1,
     HELICOPTER_SMOKING    = 0x2,
     HELICOPTER_FULLHEALTH = 0x3,
     NUM_HELICOPTERSTAGES  = 0x4,
 };
 enum OffhandSecondaryClass : __int32
 {                                       // ...
     PLAYER_OFFHAND_SECONDARY_SMOKE   = 0x0,
     PLAYER_OFFHAND_SECONDARY_FLASH   = 0x1,
     PLAYER_OFFHAND_SECONDARIES_TOTAL = 0x2,
 };
 enum ViewLockTypes : __int32
 {                                       // ...
     PLAYERVIEWLOCK_NONE         = 0x0,
     PLAYERVIEWLOCK_FULL         = 0x1,
     PLAYERVIEWLOCK_WEAPONJITTER = 0x2,
     PLAYERVIEWLOCKCOUNT         = 0x3,
 };
 enum ActionSlotType : __int32
 {                                       // ...
     ACTIONSLOTTYPE_DONOTHING       = 0x0,
     ACTIONSLOTTYPE_SPECIFYWEAPON   = 0x1,
     ACTIONSLOTTYPE_ALTWEAPONTOGGLE = 0x2,
     ACTIONSLOTTYPE_NIGHTVISION     = 0x3,
     ACTIONSLOTTYPECOUNT            = 0x4,
 };
 enum $443524DA9796D695A12936773653F018 : __int32
 {
     XAOUTPUT_STEREO = 0x0,
     XAOUTPUT_51     = 0x1,
     XAOUTPUT_COUNT  = 0x2,
 };
 enum $7D3AEF6510FBD1EA5382AEC6F50C144B : __int32
 {
     SND_TRACK_MUSIC               = 0x0,
     SND_TRACK_AMBIENT_PRIMARY_0   = 0x1,
     SND_TRACK_AMBIENT_SECONDARY_0 = 0x2,
     SND_TRACK_AMBIENT_PRIMARY_1   = 0x3,
     SND_TRACK_AMBIENT_SECONDARY_1 = 0x4,
     SND_TRACK_COUNT               = 0x5,
 };
 enum $7750782190E2FC1D8823C628DB2DF5C2 : __int32
 {
     FS_LOOK_IN_MAIN      = 0x1,
     FS_LOOK_IN_DEV       = 0x2,
     FS_LOOK_IN_TEMP      = 0x4,
     FS_LOOK_IN_RAW       = 0x8,
     FS_LOOK_IN_RAWSHARED = 0x10,
     FS_LOOK_IN_DEVRAW    = 0x20,
     FS_LOOK_IN_ALL       = 0x3F,
 };
 enum _tagPARSEACTION : __int32
 {
     PARSE_CANONICALIZE    = 0x1,
     PARSE_FRIENDLY        = 0x2,
     PARSE_SECURITY_URL    = 0x3,
     PARSE_ROOTDOCUMENT    = 0x4,
     PARSE_DOCUMENT        = 0x5,
     PARSE_ANCHOR          = 0x6,
     PARSE_ENCODE          = 0x7,
     PARSE_DECODE          = 0x8,
     PARSE_PATH_FROM_URL   = 0x9,
     PARSE_URL_FROM_PATH   = 0xA,
     PARSE_MIME            = 0xB,
     PARSE_SERVER          = 0xC,
     PARSE_SCHEMA          = 0xD,
     PARSE_SITE            = 0xE,
     PARSE_DOMAIN          = 0xF,
     PARSE_LOCATION        = 0x10,
     PARSE_SECURITY_DOMAIN = 0x11,
     PARSE_ESCAPE          = 0x12,
     PARSE_UNESCAPE        = 0x13,
 };
 enum tagDESCKIND : __int32
 {
     DESCKIND_NONE           = 0x0,
     DESCKIND_FUNCDESC       = 0x1,
     DESCKIND_VARDESC        = 0x2,
     DESCKIND_TYPECOMP       = 0x3,
     DESCKIND_IMPLICITAPPOBJ = 0x4,
     DESCKIND_MAX            = 0x5,
 };
 enum _tagPSUACTION : __int32
 {
     PSU_DEFAULT           = 0x1,
     PSU_SECURITY_URL_ONLY = 0x2,
 };
 enum _tagQUERYOPTION : __int32
 {
     QUERY_EXPIRATION_DATE     = 0x1,
     QUERY_TIME_OF_LAST_CHANGE = 0x2,
     QUERY_CONTENT_ENCODING    = 0x3,
     QUERY_CONTENT_TYPE        = 0x4,
     QUERY_REFRESH             = 0x5,
     QUERY_RECOMBINE           = 0x6,
     QUERY_CAN_NAVIGATE        = 0x7,
     QUERY_USES_NETWORK        = 0x8,
     QUERY_IS_CACHED           = 0x9,
     QUERY_IS_INSTALLEDENTRY   = 0xA,
     QUERY_IS_CACHED_OR_MAPPED = 0xB,
     QUERY_USES_CACHE          = 0xC,
     QUERY_IS_SECURE           = 0xD,
     QUERY_IS_SAFE             = 0xE,
     QUERY_USES_HISTORYFOLDER  = 0xF,
 };
 enum GfxLightType : __int32
 {
     GFX_LIGHT_TYPE_NONE           = 0x0,
     GFX_LIGHT_TYPE_DIR            = 0x1,
     GFX_LIGHT_TYPE_SPOT           = 0x2,
     GFX_LIGHT_TYPE_OMNI           = 0x3,
     GFX_LIGHT_TYPE_COUNT          = 0x4,
     GFX_LIGHT_TYPE_DIR_SHADOWMAP  = 0x4,
     GFX_LIGHT_TYPE_SPOT_SHADOWMAP = 0x5,
     GFX_LIGHT_TYPE_OMNI_SHADOWMAP = 0x6,
     GFX_LIGHT_TYPE_COUNT_WITH_SHADOWMAP_VERSIONS = 0x7,
 };
 enum tagDOMNodeType : __int32
 {
     NODE_INVALID                = 0x0,
     NODE_ELEMENT                = 0x1,
     NODE_ATTRIBUTE              = 0x2,
     NODE_TEXT                   = 0x3,
     NODE_CDATA_SECTION          = 0x4,
     NODE_ENTITY_REFERENCE       = 0x5,
     NODE_ENTITY                 = 0x6,
     NODE_PROCESSING_INSTRUCTION = 0x7,
     NODE_COMMENT                = 0x8,
     NODE_DOCUMENT               = 0x9,
     NODE_DOCUMENT_TYPE          = 0xA,
     NODE_DOCUMENT_FRAGMENT      = 0xB,
     NODE_NOTATION               = 0xC,
 };
 enum tagXMLEMEM_TYPE : __int32
 {
     XMLELEMTYPE_ELEMENT  = 0x0,
     XMLELEMTYPE_TEXT     = 0x1,
     XMLELEMTYPE_COMMENT  = 0x2,
     XMLELEMTYPE_DOCUMENT = 0x3,
     XMLELEMTYPE_DTD      = 0x4,
     XMLELEMTYPE_PI       = 0x5,
     XMLELEMTYPE_OTHER    = 0x6,
 };
 enum TrisType : __int32
 {                                       // ...
     TRIS_TYPE_LAYERED = 0x0,
     TRIS_TYPE_SIMPLE  = 0x1,
     TRIS_TYPE_COUNT   = 0x2,
 };
 enum XAssetType : __int32
 {                                       // ...
     ASSET_TYPE_XMODELPIECES      = 0x0,
     ASSET_TYPE_PHYSPRESET        = 0x1,
     ASSET_TYPE_XANIMPARTS        = 0x2,
     ASSET_TYPE_XMODEL            = 0x3,
     ASSET_TYPE_MATERIAL          = 0x4,
     ASSET_TYPE_TECHNIQUE_SET     = 0x5,
     ASSET_TYPE_IMAGE             = 0x6,
     ASSET_TYPE_SOUND             = 0x7,
     ASSET_TYPE_SOUND_CURVE       = 0x8,
     ASSET_TYPE_LOADED_SOUND      = 0x9,
     ASSET_TYPE_CLIPMAP           = 0xA,
     ASSET_TYPE_CLIPMAP_PVS       = 0xB,
     ASSET_TYPE_COMWORLD          = 0xC,
     ASSET_TYPE_GAMEWORLD_SP      = 0xD,
     ASSET_TYPE_GAMEWORLD_MP      = 0xE,
     ASSET_TYPE_MAP_ENTS          = 0xF,
     ASSET_TYPE_GFXWORLD          = 0x10,
     ASSET_TYPE_LIGHT_DEF         = 0x11,
     ASSET_TYPE_UI_MAP            = 0x12,
     ASSET_TYPE_FONT              = 0x13,
     ASSET_TYPE_MENULIST          = 0x14,
     ASSET_TYPE_MENU              = 0x15,
     ASSET_TYPE_LOCALIZE_ENTRY    = 0x16,
     ASSET_TYPE_WEAPON            = 0x17,
     ASSET_TYPE_SNDDRIVER_GLOBALS = 0x18,
     ASSET_TYPE_FX                = 0x19,
     ASSET_TYPE_IMPACT_FX         = 0x1A,
     ASSET_TYPE_AITYPE            = 0x1B,
     ASSET_TYPE_MPTYPE            = 0x1C,
     ASSET_TYPE_CHARACTER         = 0x1D,
     ASSET_TYPE_XMODELALIAS       = 0x1E,
     ASSET_TYPE_RAWFILE           = 0x1F,
     ASSET_TYPE_STRINGTABLE       = 0x20,
     ASSET_TYPE_COUNT             = 0x21,
     ASSET_TYPE_STRING            = 0x21,
     ASSET_TYPE_ASSETLIST         = 0x22,
 };
 enum tagURLZONE : __int32
 {
     URLZONE_INVALID        = 0xFFFFFFFF,
     URLZONE_PREDEFINED_MIN = 0x0,
     URLZONE_LOCAL_MACHINE  = 0x0,
     URLZONE_INTRANET       = 0x1,
     URLZONE_TRUSTED        = 0x2,
     URLZONE_INTERNET       = 0x3,
     URLZONE_UNTRUSTED      = 0x4,
     URLZONE_PREDEFINED_MAX = 0x3E7,
     URLZONE_USER_MIN       = 0x3E8,
     URLZONE_USER_MAX       = 0x2710,
 };
 enum SAMPLESTAGE : __int32
 {                                       // ...
     SP_ASI_DECODER    = 0x0,
     SP_FILTER         = 0x1,
     SP_FILTER_0       = 0x1,
     SP_FILTER_1       = 0x2,
     SP_FILTER_2       = 0x3,
     SP_FILTER_3       = 0x4,
     SP_FILTER_4       = 0x5,
     SP_FILTER_5       = 0x6,
     SP_FILTER_6       = 0x7,
     SP_FILTER_7       = 0x8,
     SP_MERGE          = 0x9,
     N_SAMPLE_STAGES   = 0xA,
     SP_OUTPUT         = 0xA,
     SAMPLE_ALL_STAGES = 0xB,
 };
 enum ReplacesCorHdrNumericDefines : __int32
 {
     COMIMAGE_FLAGS_ILONLY           = 0x1,
     COMIMAGE_FLAGS_32BITREQUIRED    = 0x2,
     COMIMAGE_FLAGS_IL_LIBRARY       = 0x4,
     COMIMAGE_FLAGS_STRONGNAMESIGNED = 0x8,
     COMIMAGE_FLAGS_TRACKDEBUGDATA   = 0x10000,
     COR_VERSION_MAJOR_V2            = 0x2,
     COR_VERSION_MAJOR               = 0x2,
     COR_VERSION_MINOR               = 0x0,
     COR_DELETED_NAME_LENGTH         = 0x8,
     COR_VTABLEGAP_NAME_LENGTH       = 0x8,
     NATIVE_TYPE_MAX_CB              = 0x1,
     COR_ILMETHOD_SECT_SMALL_MAX_DATASIZE = 0xFF,
     IMAGE_COR_MIH_METHODRVA         = 0x1,
     IMAGE_COR_MIH_EHRVA             = 0x2,
     IMAGE_COR_MIH_BASICBLOCK        = 0x8,
     COR_VTABLE_32BIT                = 0x1,
     COR_VTABLE_64BIT                = 0x2,
     COR_VTABLE_FROM_UNMANAGED       = 0x4,
     COR_VTABLE_FROM_UNMANAGED_RETAIN_APPDOMAIN = 0x8,
     COR_VTABLE_CALL_MOST_DERIVED    = 0x10,
     IMAGE_COR_EATJ_THUNK_SIZE       = 0x20,
     MAX_CLASS_NAME                  = 0x400,
     MAX_PACKAGE_NAME                = 0x400,
 };
 enum errorParm_t : __int32
 {                                       // ...
     ERR_FATAL               = 0x0,
     ERR_DROP                = 0x1,
     ERR_SERVERDISCONNECT    = 0x2,
     ERR_DISCONNECT          = 0x3,
     ERR_SCRIPT              = 0x4,
     ERR_SCRIPT_DROP         = 0x5,
     ERR_LOCALIZATION        = 0x6,
     ERR_MAPLOADERRORSUMMARY = 0x7,
 };
 enum DIGDRVSTAGE : __int32
 {
     DP_FLUSH          = 0x0,
     DP_DEFAULT_FILTER = 0x1,
     DP_DEFAULT_MERGE  = 0x2,
     DP_COPY           = 0x3,
     DP_MC_COPY        = 0x4,
     DP_ADPCM_DECODE   = 0x5,
     N_DIGDRV_STAGES   = 0x6,
     DIGDRV_ALL_STAGES = 0x7,
 };
 enum tagBINDSTATUS : __int32
 {
     BINDSTATUS_FINDINGRESOURCE       = 0x1,
     BINDSTATUS_CONNECTING            = 0x2,
     BINDSTATUS_REDIRECTING           = 0x3,
     BINDSTATUS_BEGINDOWNLOADDATA     = 0x4,
     BINDSTATUS_DOWNLOADINGDATA       = 0x5,
     BINDSTATUS_ENDDOWNLOADDATA       = 0x6,
     BINDSTATUS_BEGINDOWNLOADCOMPONENTS = 0x7,
     BINDSTATUS_INSTALLINGCOMPONENTS  = 0x8,
     BINDSTATUS_ENDDOWNLOADCOMPONENTS = 0x9,
     BINDSTATUS_USINGCACHEDCOPY       = 0xA,
     BINDSTATUS_SENDINGREQUEST        = 0xB,
     BINDSTATUS_CLASSIDAVAILABLE      = 0xC,
     BINDSTATUS_MIMETYPEAVAILABLE     = 0xD,
     BINDSTATUS_CACHEFILENAMEAVAILABLE = 0xE,
     BINDSTATUS_BEGINSYNCOPERATION    = 0xF,
     BINDSTATUS_ENDSYNCOPERATION      = 0x10,
     BINDSTATUS_BEGINUPLOADDATA       = 0x11,
     BINDSTATUS_UPLOADINGDATA         = 0x12,
     BINDSTATUS_ENDUPLOADDATA         = 0x13,
     BINDSTATUS_PROTOCOLCLASSID       = 0x14,
     BINDSTATUS_ENCODING              = 0x15,
     BINDSTATUS_VERIFIEDMIMETYPEAVAILABLE = 0x16,
     BINDSTATUS_CLASSINSTALLLOCATION  = 0x17,
     BINDSTATUS_DECODING              = 0x18,
     BINDSTATUS_LOADINGMIMEHANDLER    = 0x19,
     BINDSTATUS_CONTENTDISPOSITIONATTACH = 0x1A,
     BINDSTATUS_FILTERREPORTMIMETYPE  = 0x1B,
     BINDSTATUS_CLSIDCANINSTANTIATE   = 0x1C,
     BINDSTATUS_IUNKNOWNAVAILABLE     = 0x1D,
     BINDSTATUS_DIRECTBIND            = 0x1E,
     BINDSTATUS_RAWMIMETYPE           = 0x1F,
     BINDSTATUS_PROXYDETECTING        = 0x20,
     BINDSTATUS_ACCEPTRANGES          = 0x21,
     BINDSTATUS_COOKIE_SENT           = 0x22,
     BINDSTATUS_COMPACT_POLICY_RECEIVED = 0x23,
     BINDSTATUS_COOKIE_SUPPRESSED     = 0x24,
     BINDSTATUS_COOKIE_STATE_UNKNOWN  = 0x25,
     BINDSTATUS_COOKIE_STATE_ACCEPT   = 0x26,
     BINDSTATUS_COOKIE_STATE_REJECT   = 0x27,
     BINDSTATUS_COOKIE_STATE_PROMPT   = 0x28,
     BINDSTATUS_COOKIE_STATE_LEASH    = 0x29,
     BINDSTATUS_COOKIE_STATE_DOWNGRADE = 0x2A,
     BINDSTATUS_POLICY_HREF           = 0x2B,
     BINDSTATUS_P3P_HEADER            = 0x2C,
     BINDSTATUS_SESSION_COOKIE_RECEIVED = 0x2D,
     BINDSTATUS_PERSISTENT_COOKIE_RECEIVED = 0x2E,
     BINDSTATUS_SESSION_COOKIES_ALLOWED = 0x2F,
     BINDSTATUS_CACHECONTROL          = 0x30,
     BINDSTATUS_CONTENTDISPOSITIONFILENAME = 0x31,
     BINDSTATUS_MIMETEXTPLAINMISMATCH = 0x32,
     BINDSTATUS_PUBLISHERAVAILABLE    = 0x33,
     BINDSTATUS_DISPLAYNAMEAVAILABLE  = 0x34,
     BINDSTATUS_SSLUX_NAVBLOCKED      = 0x35,
 };
 enum _URLZONEREG : __int32
 {
     URLZONEREG_DEFAULT = 0x0,
     URLZONEREG_HKLM    = 0x1,
     URLZONEREG_HKCU    = 0x2,
 };
 enum tagSYSKIND : __int32
 {                                       // ...
     SYS_WIN16 = 0x0,
     SYS_WIN32 = 0x1,
     SYS_MAC   = 0x2,
     SYS_WIN64 = 0x3,
 };
 enum tagTYPEKIND : __int32
 {                                       // ...
     TKIND_ENUM      = 0x0,
     TKIND_RECORD    = 0x1,
     TKIND_MODULE    = 0x2,
     TKIND_INTERFACE = 0x3,
     TKIND_DISPATCH  = 0x4,
     TKIND_COCLASS   = 0x5,
     TKIND_ALIAS     = 0x6,
     TKIND_UNION     = 0x7,
     TKIND_MAX       = 0x8,
 };
 enum netsrc_t : __int32
 {                                       // ...
     NS_CLIENT1    = 0x0,
     NS_SERVER     = 0x1,
     NS_MAXCLIENTS = 0x1,
     NS_PACKET     = 0x2,
 };
 enum __MIDL_ICodeInstall_0001 : __int32
 {
     CIP_DISK_FULL                 = 0x0,
     CIP_ACCESS_DENIED             = 0x1,
     CIP_NEWER_VERSION_EXISTS      = 0x2,
     CIP_OLDER_VERSION_EXISTS      = 0x3,
     CIP_NAME_CONFLICT             = 0x4,
     CIP_TRUST_VERIFICATION_COMPONENT_MISSING = 0x5,
     CIP_EXE_SELF_REGISTERATION_TIMEOUT = 0x6,
     CIP_UNSAFE_TO_ABORT           = 0x7,
     CIP_NEED_REBOOT               = 0x8,
     CIP_NEED_REBOOT_UI_PERMISSION = 0x9,
 };
 enum tagCHANGEKIND : __int32
 {
     CHANGEKIND_ADDMEMBER        = 0x0,
     CHANGEKIND_DELETEMEMBER     = 0x1,
     CHANGEKIND_SETNAMES         = 0x2,
     CHANGEKIND_SETDOCUMENTATION = 0x3,
     CHANGEKIND_GENERAL          = 0x4,
     CHANGEKIND_INVALIDATE       = 0x5,
     CHANGEKIND_CHANGEFAILED     = 0x6,
     CHANGEKIND_MAX              = 0x7,
 };
 enum VARENUM : __int32
 {
     VT_EMPTY            = 0x0,
     VT_NULL             = 0x1,
     VT_I2               = 0x2,
     VT_I4               = 0x3,
     VT_R4               = 0x4,
     VT_R8               = 0x5,
     VT_CY               = 0x6,
     VT_DATE             = 0x7,
     VT_BSTR             = 0x8,
     VT_DISPATCH         = 0x9,
     VT_ERROR            = 0xA,
     VT_BOOL             = 0xB,
     VT_VARIANT          = 0xC,
     VT_UNKNOWN          = 0xD,
     VT_DECIMAL          = 0xE,
     VT_I1               = 0x10,
     VT_UI1              = 0x11,
     VT_UI2              = 0x12,
     VT_UI4              = 0x13,
     VT_I8               = 0x14,
     VT_UI8              = 0x15,
     VT_INT              = 0x16,
     VT_UINT             = 0x17,
     VT_VOID             = 0x18,
     VT_HRESULT          = 0x19,
     VT_PTR              = 0x1A,
     VT_SAFEARRAY        = 0x1B,
     VT_CARRAY           = 0x1C,
     VT_USERDEFINED      = 0x1D,
     VT_LPSTR            = 0x1E,
     VT_LPWSTR           = 0x1F,
     VT_RECORD           = 0x24,
     VT_INT_PTR          = 0x25,
     VT_UINT_PTR         = 0x26,
     VT_FILETIME         = 0x40,
     VT_BLOB             = 0x41,
     VT_STREAM           = 0x42,
     VT_STORAGE          = 0x43,
     VT_STREAMED_OBJECT  = 0x44,
     VT_STORED_OBJECT    = 0x45,
     VT_BLOB_OBJECT      = 0x46,
     VT_CF               = 0x47,
     VT_CLSID            = 0x48,
     VT_VERSIONED_STREAM = 0x49,
     VT_BSTR_BLOB        = 0xFFF,
     VT_VECTOR           = 0x1000,
     VT_ARRAY            = 0x2000,
     VT_BYREF            = 0x4000,
     VT_RESERVED         = 0x8000,
     VT_ILLEGAL          = 0xFFFF,
     VT_ILLEGALMASKED    = 0xFFF,
     VT_TYPEMASK         = 0xFFF,
 };
 enum tagCALLCONV : __int32
 {                                       // ...
     CC_FASTCALL   = 0x0,
     CC_CDECL      = 0x1,
     CC_MSCPASCAL  = 0x2,
     CC_PASCAL     = 0x2,
     CC_MACPASCAL  = 0x3,
     CC_STDCALL    = 0x4,
     CC_FPFASTCALL = 0x5,
     CC_SYSCALL    = 0x6,
     CC_MPWCDECL   = 0x7,
     CC_MPWPASCAL  = 0x8,
     CC_MAX        = 0x9,
 };
 enum tagVARKIND : __int32
 {                                       // ...
     VAR_PERINSTANCE = 0x0,
     VAR_STATIC      = 0x1,
     VAR_CONST       = 0x2,
     VAR_DISPATCH    = 0x3,
 };
 enum tagTYSPEC : __int32
 {
     TYSPEC_CLSID       = 0x0,
     TYSPEC_FILEEXT     = 0x1,
     TYSPEC_MIMETYPE    = 0x2,
     TYSPEC_FILENAME    = 0x3,
     TYSPEC_PROGID      = 0x4,
     TYSPEC_PACKAGENAME = 0x5,
     TYSPEC_OBJECTID    = 0x6,
 };
 enum tagShutdownType : __int32
 {
     IdleShutdown   = 0x0,
     ForcedShutdown = 0x1,
 };
 enum tagBINDSTRING : __int32
 {
     BINDSTRING_HEADERS             = 0x1,
     BINDSTRING_ACCEPT_MIMES        = 0x2,
     BINDSTRING_EXTRA_URL           = 0x3,
     BINDSTRING_LANGUAGE            = 0x4,
     BINDSTRING_USERNAME            = 0x5,
     BINDSTRING_PASSWORD            = 0x6,
     BINDSTRING_UA_PIXELS           = 0x7,
     BINDSTRING_UA_COLOR            = 0x8,
     BINDSTRING_OS                  = 0x9,
     BINDSTRING_USER_AGENT          = 0xA,
     BINDSTRING_ACCEPT_ENCODINGS    = 0xB,
     BINDSTRING_POST_COOKIE         = 0xC,
     BINDSTRING_POST_DATA_MIME      = 0xD,
     BINDSTRING_URL                 = 0xE,
     BINDSTRING_IID                 = 0xF,
     BINDSTRING_FLAG_BIND_TO_OBJECT = 0x10,
     BINDSTRING_PTR_BIND_CONTEXT    = 0x11,
 };
 enum SND_CHANNELVOLPRIO : __int32
 {
     SND_CHANNELVOLPRIO_NONE       = 0x0,
     SND_CHANNELVOLPRIO_HOLDBREATH = 0x1,
     SND_CHANNELVOLPRIO_PAIN       = 0x2,
     SND_CHANNELVOLPRIO_SHELLSHOCK = 0x3,
     SND_CHANNELVOLPRIO_COUNT      = 0x4,
 };
 enum $ADB19D7C698DEEE7E4993F5FA810E6C2 : __int32
 {
     XASOURCE_MONO   = 0x0,
     XASOURCE_STEREO = 0x1,
     XASOURCE_COUNT  = 0x2,
 };
 enum SndFileLoadingState : __int32
 {                                       // ...
     SFLS_UNLOADED = 0x0,
     SFLS_LOADING  = 0x1,
     SFLS_LOADED   = 0x2,
 };
 enum SndLengthId : __int32
 {                                       // ...
     SndLengthNotify_Script   = 0x0,
     SndLengthNotify_Subtitle = 0x1,
     SndLengthNotifyCount     = 0x2,
 };
 enum snd_alias_system_t : __int32
 {                                       // ...
     SASYS_UI    = 0x0,
     SASYS_CGAME = 0x1,
     SASYS_GAME  = 0x2,
     SASYS_COUNT = 0x3,
 };
 enum tagFUNCKIND : __int32
 {                                       // ...
     FUNC_VIRTUAL     = 0x0,
     FUNC_PUREVIRTUAL = 0x1,
     FUNC_NONVIRTUAL  = 0x2,
     FUNC_STATIC      = 0x3,
     FUNC_DISPATCH    = 0x4,
 };
 enum __bitmask tagINVOKEKIND : __int32
 {                                       // ...
     INVOKE_FUNC           = 0x1,
     INVOKE_PROPERTYGET    = 0x2,
     INVOKE_PROPERTYPUT    = 0x4,
     INVOKE_PROPERTYPUTREF = 0x8,
 };
 enum tagApplicationType : __int32
 {
     ServerApplication  = 0x0,
     LibraryApplication = 0x1,
 };
 enum PIDMSI_STATUS_VALUE : __int32
 {
     PIDMSI_STATUS_NORMAL     = 0x0,
     PIDMSI_STATUS_NEW        = 0x1,
     PIDMSI_STATUS_PRELIM     = 0x2,
     PIDMSI_STATUS_DRAFT      = 0x3,
     PIDMSI_STATUS_INPROGRESS = 0x4,
     PIDMSI_STATUS_EDIT       = 0x5,
     PIDMSI_STATUS_REVIEW     = 0x6,
     PIDMSI_STATUS_PROOF      = 0x7,
     PIDMSI_STATUS_FINAL      = 0x8,
     PIDMSI_STATUS_OTHER      = 0x7FFF,
 };
 enum SND_ENVEFFECTPRIO : __int32
 {
     SND_ENVEFFECTPRIO_NONE       = 0x0,
     SND_ENVEFFECTPRIO_LEVEL      = 0x1,
     SND_ENVEFFECTPRIO_SHELLSHOCK = 0x2,
     SND_ENVEFFECTPRIO_COUNT      = 0x3,
 };
 enum TraceHitType : __int32
 {                                       // ...
     TRACE_HITTYPE_NONE         = 0x0,
     TRACE_HITTYPE_ENTITY       = 0x1,
     TRACE_HITTYPE_DYNENT_MODEL = 0x2,
     TRACE_HITTYPE_DYNENT_BRUSH = 0x3,
 };
 enum $2379E46643886BF9997CF5B36A55B9D9 : __int32
 {
     THREAD_VALUE_PROF_STACK = 0x0,
     THREAD_VALUE_VA         = 0x1,
     THREAD_VALUE_COM_ERROR  = 0x2,
     THREAD_VALUE_TRACE      = 0x3,
     THREAD_VALUE_COUNT      = 0x4,
 };
 enum $C15A5588E915B6036BD955C44CEC191A : __int32
 {                                       // ...
     THREAD_CONTEXT_MAIN         = 0x0,
     THREAD_CONTEXT_BACKEND      = 0x1,
     THREAD_CONTEXT_WORKER0      = 0x2,
     THREAD_CONTEXT_WORKER1      = 0x3,
     THREAD_CONTEXT_TRACE_COUNT  = 0x4,
     THREAD_CONTEXT_TRACE_LAST   = 0x3,
     THREAD_CONTEXT_CINEMATIC    = 0x4,
     THREAD_CONTEXT_TITLE_SERVER = 0x5,
     THREAD_CONTEXT_DATABASE     = 0x6,
     THREAD_CONTEXT_COUNT        = 0x7,
 };
 enum aistateEnum_t : __int32
 {                                       // ...
     AISTATE_COMBAT = 0x0,
     MAX_AISTATES   = 0x1,
 };
 enum $4EB129B90C5D52AEC7E812C77CC65277 : __int32
 {
     VAR_UNDEFINED         = 0x0,
     VAR_BEGIN_REF         = 0x1,
     VAR_POINTER           = 0x1,
     VAR_STRING            = 0x2,
     VAR_ISTRING           = 0x3,
     VAR_VECTOR            = 0x4,
     VAR_END_REF           = 0x5,
     VAR_FLOAT             = 0x5,
     VAR_INTEGER           = 0x6,
     VAR_CODEPOS           = 0x7,
     VAR_PRECODEPOS        = 0x8,
     VAR_FUNCTION          = 0x9,
     VAR_STACK             = 0xA,
     VAR_ANIMATION         = 0xB,
     VAR_DEVELOPER_CODEPOS = 0xC,
     VAR_INCLUDE_CODEPOS   = 0xD,
     VAR_THREAD            = 0xE,
     VAR_NOTIFY_THREAD     = 0xF,
     VAR_TIME_THREAD       = 0x10,
     VAR_CHILD_THREAD      = 0x11,
     VAR_OBJECT            = 0x12,
     VAR_DEAD_ENTITY       = 0x13,
     VAR_ENTITY            = 0x14,
     VAR_ARRAY             = 0x15,
     VAR_DEAD_THREAD       = 0x16,
     VAR_COUNT             = 0x17,
     VAR_THREAD_LIST       = 0x18,
     VAR_ENDON_LIST        = 0x19,
 };
 enum scriptAnimMoveTypes_t : __int32
 {                                       // ...
     ANIM_MT_UNUSED                  = 0x0,
     ANIM_MT_IDLE                    = 0x1,
     ANIM_MT_IDLECR                  = 0x2,
     ANIM_MT_IDLEPRONE               = 0x3,
     ANIM_MT_WALK                    = 0x4, // ...
     ANIM_MT_WALKBK                  = 0x5, // ...
     ANIM_MT_WALKCR                  = 0x6, // ...
     ANIM_MT_WALKCRBK                = 0x7, // ...
     ANIM_MT_WALKPRONE               = 0x8, // ...
     ANIM_MT_WALKPRONEBK             = 0x9, // ...
     ANIM_MT_RUN                     = 0xA, // ...
     ANIM_MT_RUNBK                   = 0xB, // ...
     ANIM_MT_RUNCR                   = 0xC, // ...
     ANIM_MT_RUNCRBK                 = 0xD, // ...
     ANIM_MT_TURNRIGHT               = 0xE,
     ANIM_MT_TURNLEFT                = 0xF,
     ANIM_MT_TURNRIGHTCR             = 0x10,
     ANIM_MT_TURNLEFTCR              = 0x11,
     ANIM_MT_CLIMBUP                 = 0x12,
     ANIM_MT_CLIMBDOWN               = 0x13,
     ANIM_MT_SPRINT                  = 0x14,
     ANIM_MT_MANTLE_ROOT             = 0x15,
     ANIM_MT_MANTLE_UP_57            = 0x16,
     ANIM_MT_MANTLE_UP_51            = 0x17,
     ANIM_MT_MANTLE_UP_45            = 0x18,
     ANIM_MT_MANTLE_UP_39            = 0x19,
     ANIM_MT_MANTLE_UP_33            = 0x1A,
     ANIM_MT_MANTLE_UP_27            = 0x1B,
     ANIM_MT_MANTLE_UP_21            = 0x1C,
     ANIM_MT_MANTLE_OVER_HIGH        = 0x1D,
     ANIM_MT_MANTLE_OVER_MID         = 0x1E,
     ANIM_MT_MANTLE_OVER_LOW         = 0x1F,
     ANIM_MT_FLINCH_FORWARD          = 0x20,
     ANIM_MT_FLINCH_BACKWARD         = 0x21,
     ANIM_MT_FLINCH_LEFT             = 0x22,
     ANIM_MT_FLINCH_RIGHT            = 0x23,
     ANIM_MT_STUMBLE_FORWARD         = 0x24, // ...
     ANIM_MT_STUMBLE_BACKWARD        = 0x25, // ...
     ANIM_MT_STUMBLE_WALK_FORWARD    = 0x26, // ...
     ANIM_MT_STUMBLE_WALK_BACKWARD   = 0x27, // ...
     ANIM_MT_STUMBLE_CROUCH_FORWARD  = 0x28, // ...
     ANIM_MT_STUMBLE_CROUCH_BACKWARD = 0x29, // ...
     ANIM_MT_STUMBLE_SPRINT_FORWARD  = 0x2A,
     NUM_ANIM_MOVETYPES              = 0x2B,
 };
 enum $863F5B9E0CD5FCC67F61AA1DCD3D8FCC : __int32
 {
     FIRST_OBJECT           = 0xE,
     FIRST_CLEARABLE_OBJECT = 0x12,
     LAST_NONENTITY_OBJECT  = 0x12,
     FIRST_ENTITY_OBJECT    = 0x14,
     FIRST_NONFIELD_OBJECT  = 0x15,
     FIRST_DEAD_OBJECT      = 0x16,
 };
 enum scriptAnimEventTypes_t : __int32
 {                                       // ...
     ANIM_ET_PAIN               = 0x0,
     ANIM_ET_DEATH              = 0x1,
     ANIM_ET_FIREWEAPON         = 0x2,
     ANIM_ET_JUMP               = 0x3,
     ANIM_ET_JUMPBK             = 0x4,
     ANIM_ET_LAND               = 0x5,
     ANIM_ET_DROPWEAPON         = 0x6,
     ANIM_ET_RAISEWEAPON        = 0x7,
     ANIM_ET_CLIMB_MOUNT        = 0x8,
     ANIM_ET_CLIMB_DISMOUNT     = 0x9,
     ANIM_ET_RELOAD             = 0xA,
     ANIM_ET_CROUCH_TO_PRONE    = 0xB,
     ANIM_ET_PRONE_TO_CROUCH    = 0xC,
     ANIM_ET_STAND_TO_CROUCH    = 0xD,
     ANIM_ET_CROUCH_TO_STAND    = 0xE,
     ANIM_ET_STAND_TO_PRONE     = 0xF,
     ANIM_ET_PRONE_TO_STAND     = 0x10,
     ANIM_ET_MELEEATTACK        = 0x11,
     ANIM_ET_KNIFE_MELEE        = 0x12,
     ANIM_ET_KNIFE_MELEE_CHARGE = 0x13,
     ANIM_ET_SHELLSHOCK         = 0x14,
     NUM_ANIM_EVENTTYPES        = 0x15,
 };
 enum $AA89F05AB2B3171A2BDA21648F09F117 : __int32
 {
     IMGF_MIPMAPS          = 0x1,
     IMGF_ALLOWPICMIP      = 0x2,
     IMGF_CHARACTERMIP     = 0x4,
     IMGF_LIGHTMAP         = 0x8,
     IMGF_CLAMP_S          = 0x10,
     IMGF_CLAMP_T          = 0x20,
     IMGF_HEIGHTMAP        = 0x40,
     IMGF_DELAYLOAD        = 0x80,
     IMGF_NOOPT            = 0x100,
     IMGF_SCREENDEPTH      = 0x200,
     IMGF_TEXTURENAME      = 0x400,
     IMGF_SHEET_KEEP_FLAGS = 0x1,
 };
 enum scriptAnimConditions_t : __int32
 {
     ANIM_COND_PLAYERANIMTYPE  = 0x0,
     ANIM_COND_WEAPONCLASS     = 0x1,
     ANIM_COND_MOUNTED         = 0x2,
     ANIM_COND_MOVETYPE        = 0x3,
     ANIM_COND_UNDERHAND       = 0x4,
     ANIM_COND_CROUCHING       = 0x5,
     ANIM_COND_FIRING          = 0x6,
     ANIM_COND_WEAPON_POSITION = 0x7,
     ANIM_COND_STRAFING        = 0x8,
     ANIM_COND_PERK            = 0x9,
     NUM_ANIM_CONDITIONS       = 0xA,
 };
 enum snd_alias_type_t : __int32
 {                                       // ...
     SAT_UNKNOWN  = 0x0,
     SAT_LOADED   = 0x1,
     SAT_STREAMED = 0x2,
     SAT_COUNT    = 0x3,
 };
 enum MaterialTechniqueType : __int32
 {                                       // ...
     TECHNIQUE_DEPTH_PREPASS         = 0x0,
     TECHNIQUE_BUILD_FLOAT_Z         = 0x1,
     TECHNIQUE_BUILD_SHADOWMAP_DEPTH = 0x2,
     TECHNIQUE_BUILD_SHADOWMAP_COLOR = 0x3,
     TECHNIQUE_UNLIT                 = 0x4,
     TECHNIQUE_EMISSIVE              = 0x5,
     TECHNIQUE_EMISSIVE_SHADOW       = 0x6,
     TECHNIQUE_LIT_BEGIN             = 0x7,
     TECHNIQUE_LIT                   = 0x7,
     TECHNIQUE_LIT_SUN               = 0x8,
     TECHNIQUE_LIT_SUN_SHADOW        = 0x9,
     TECHNIQUE_LIT_SPOT              = 0xA,
     TECHNIQUE_LIT_SPOT_SHADOW       = 0xB,
     TECHNIQUE_LIT_OMNI              = 0xC,
     TECHNIQUE_LIT_OMNI_SHADOW       = 0xD,
     TECHNIQUE_LIT_INSTANCED         = 0xE,
     TECHNIQUE_LIT_INSTANCED_SUN     = 0xF,
     TECHNIQUE_LIT_INSTANCED_SUN_SHADOW = 0x10,
     TECHNIQUE_LIT_INSTANCED_SPOT    = 0x11,
     TECHNIQUE_LIT_INSTANCED_SPOT_SHADOW = 0x12,
     TECHNIQUE_LIT_INSTANCED_OMNI    = 0x13,
     TECHNIQUE_LIT_INSTANCED_OMNI_SHADOW = 0x14,
     TECHNIQUE_LIT_END               = 0x15,
     TECHNIQUE_LIGHT_SPOT            = 0x15,
     TECHNIQUE_LIGHT_OMNI            = 0x16,
     TECHNIQUE_LIGHT_SPOT_SHADOW     = 0x17,
     TECHNIQUE_FAKELIGHT_NORMAL      = 0x18,
     TECHNIQUE_FAKELIGHT_VIEW        = 0x19,
     TECHNIQUE_SUNLIGHT_PREVIEW      = 0x1A,
     TECHNIQUE_CASE_TEXTURE          = 0x1B,
     TECHNIQUE_WIREFRAME_SOLID       = 0x1C,
     TECHNIQUE_WIREFRAME_SHADED      = 0x1D,
     TECHNIQUE_SHADOWCOOKIE_CASTER   = 0x1E,
     TECHNIQUE_SHADOWCOOKIE_RECEIVER = 0x1F,
     TECHNIQUE_DEBUG_BUMPMAP         = 0x20,
     TECHNIQUE_DEBUG_BUMPMAP_INSTANCED = 0x21,
     TECHNIQUE_COUNT                 = 0x22,
     TECHNIQUE_TOTAL_COUNT           = 0x23,
     TECHNIQUE_NONE                  = 0x24,
 };
 enum $DB857BC06DF6FFF7FB95B801DDEA9D30 : __int32
 {
     CONTROL_ANGLES_BACK_LOW = 0x0,
     CONTROL_ANGLES_BACK_MID = 0x1,
     CONTROL_ANGLES_BACK_UP  = 0x2,
     CONTROL_ANGLES_NECK     = 0x3,
     CONTROL_ANGLES_HEAD     = 0x4,
     CONTROL_ANGLES_PELVIS   = 0x5,
     CONTROL_ANGLES_COUNT    = 0x6,
 };
 enum weaponstate_t : __int32
 {                                       // ...
     WEAPON_READY                 = 0x0,
     WEAPON_RAISING               = 0x1,
     WEAPON_RAISING_ALTSWITCH     = 0x2,
     WEAPON_DROPPING              = 0x3,
     WEAPON_DROPPING_QUICK        = 0x4,
     WEAPON_FIRING                = 0x5,
     WEAPON_RECHAMBERING          = 0x6,
     WEAPON_RELOADING             = 0x7,
     WEAPON_RELOADING_INTERUPT    = 0x8,
     WEAPON_RELOAD_START          = 0x9,
     WEAPON_RELOAD_START_INTERUPT = 0xA,
     WEAPON_RELOAD_END            = 0xB,
     WEAPON_MELEE_INIT            = 0xC,
     WEAPON_MELEE_FIRE            = 0xD,
     WEAPON_MELEE_END             = 0xE,
     WEAPON_OFFHAND_INIT          = 0xF,
     WEAPON_OFFHAND_PREPARE       = 0x10,
     WEAPON_OFFHAND_HOLD          = 0x11,
     WEAPON_OFFHAND_START         = 0x12,
     WEAPON_OFFHAND               = 0x13,
     WEAPON_OFFHAND_END           = 0x14,
     WEAPON_DETONATING            = 0x15,
     WEAPON_SPRINT_RAISE          = 0x16,
     WEAPON_SPRINT_LOOP           = 0x17,
     WEAPON_SPRINT_DROP           = 0x18,
     WEAPON_NIGHTVISION_WEAR      = 0x19,
     WEAPON_NIGHTVISION_REMOVE    = 0x1A,
     WEAPONSTATES_NUM             = 0x1B,
 };
 enum snd_overlay_type_t : __int32
 {                                       // ...
     SND_OVERLAY_NONE   = 0x0,
     SND_OVERLAY_3D     = 0x1,
     SND_OVERLAY_STREAM = 0x2,
     SND_OVERLAY_2D     = 0x3,
 };
 enum $914E07610D54AB66E119C6EDB58C8DDE : __int32
 {
     SAVE_SEGMENT_START      = 0x0,
     SAVE_SEGMENT_WEAPONS    = 0x1,
     SAVE_SEGMENT_MAIN       = 0x2,
     SAVE_SEGMENT_NORMAL     = 0x3,
     SAVE_SEGMENT_SCRIPT     = 0x4,
     SAVE_SEGMENT_ANIMTREE   = 0x5,
     SAVE_SEGMENT_SOUND      = 0x6,
     SAVE_SEGMENT_POST_SOUND = 0x7,
     SAVE_SEGMENT_COUNT      = 0x8,
     SAVE_SEGMENT_NONE       = 0xFFFFFFFF,
 };
 enum $113B4FCE379168E83062AF5E5801E25C : __int32
 {
     PROF_BLANK                       = 0x0,
     PROF_Probe1                      = 0x1,
     PROF_Probe2                      = 0x2,
     PROF_Probe3                      = 0x3,
     PROF_Probe4                      = 0x4,
     PROF_Probe5                      = 0x5,
     PROF_GProbe1                     = 0x6,
     PROF_GProbe2                     = 0x7,
     PROF_GProbe3                     = 0x8,
     PROF_GProbe4                     = 0x9,
     PROF_GProbe5                     = 0xA,
     PROF_CG_ProcessSnapshots         = 0xB,
     PROF_CG_UpdateEntInfo            = 0xC,
     PROF_CG_DrawActiveFrame          = 0xD,
     PROF_R_RenderScene               = 0xE,
     PROF_R_IssueRenderCommands       = 0xF,
     PROF_CL_Frame                    = 0x10,
     PROF_CL_RunOncePerFrame          = 0x11,
     PROF_SCR_UpdateFrame             = 0x12,
     PROF_CL_BeginFrame               = 0x13,
     PROF_CL_DrawFrame                = 0x14,
     PROF_CL_EndFrame                 = 0x15,
     PROF_CG_DAF_UpdateEffects        = 0x16,
     PROF_CG_DAF_AddLocalEntities     = 0x17,
     PROF_CG_DAF_SmoothFrame          = 0x18,
     PROF_CG_DrawActive               = 0x19,
     PROF_CG_Pmove                    = 0x1A,
     PROF_G_Pmove                     = 0x1B,
     PROF_CbufExecute                 = 0x1C,
     PROF_Com_ClientPacketEvent       = 0x1D,
     PROF_Com_ServerPacketEvent       = 0x1E,
     PROF_SV_BuildAndSendClientSnapshot = 0x1F,
     PROF_NetworkRead                 = 0x20,
     PROF_NetworkWrite                = 0x21,
     PROF_SCR_UpdateScreen            = 0x22,
     PROF_CM_TerrainTrace             = 0x23,
     PROF_CM_CurveTrace               = 0x24,
     PROF_SV_Trace                    = 0x25,
     PROF_SV_TracePassed              = 0x26,
     PROF_CM_Trace                    = 0x27,
     PROF_CM_SightTrace               = 0x28,
     PROF_CM_AreaEntities             = 0x29,
     PROF_CM_LinkEntity               = 0x2A,
     PROF_CM_PointSightTraceToEntities = 0x2B,
     PROF_CM_ClipSightTraceToEntities = 0x2C,
     PROF_CM_TraceBrush               = 0x2D,
     PROF_CM_TraceTerrain             = 0x2E,
     PROF_CM_SightBrush               = 0x2F,
     PROF_CM_SightTerrain             = 0x30,
     PROF_CG_UnlinkEntity             = 0x31,
     PROF_CG_LinkEntity               = 0x32,
     PROF_CG_LocationalTrace          = 0x33,
     PROF_CG_TraceCapsule             = 0x34,
     PROF_CG_Trace                    = 0x35,
     PROF_CG_ClipMoveToEntities       = 0x36,
     PROF_CG_ClipMoveToEntity         = 0x37,
     PROF_CG_PointTraceToEntities     = 0x38,
     PROF_CG_PointTraceToEntity       = 0x39,
     PROF_AimTarget_ProcessEntity     = 0x3A,
     PROF_AimTarget_IsTargetValid     = 0x3B,
     PROF_AimTarget_IsTargetVisible   = 0x3C,
     PROF_AimTarget_CreateTarget      = 0x3D,
     PROF_AimAssist_UpdateGamePadInput = 0x3E,
     PROF_AimAssist_UpdateMouseInput  = 0x3F,
     PROF_AimAssist_UpdateScreenTargets = 0x40,
     PROF_R_EmitDrawSurfList          = 0x41,
     PROF_R_DrawSunShadowPartition    = 0x42,
     PROF_R_BoundScene                = 0x43,
     PROF_R_BoundAndPartitionScene    = 0x44,
     PROF_R_AddEntitySurfaces         = 0x45,
     PROF_R_DoesDrawSurfListInfoNeedFloatz = 0x46,
     PROF_R_AddWorldSurfacesDpvs      = 0x47,
     PROF_R_AddShadowSurfacesDpvs     = 0x48,
     PROF_GenerateSunShadow           = 0x49,
     PROF_EmitSpotShadow              = 0x4A,
     PROF_EmitSunShadow               = 0x4B,
     PROF_R_SunShadowMaps             = 0x4C,
     PROF_R_DepthPrepass              = 0x4D,
     PROF_R_StreamUpdate              = 0x4E,
     PROF_R_StreamUpdateStatic        = 0x4F,
     PROF_R_StreamUpdateDynamicModels = 0x50,
     PROF_RB_StreamExecuteQueuedCommands = 0x51,
     PROF_R_StreamAlloc_Alloc         = 0x52,
     PROF_R_StreamAlloc_RunOptimizationTask = 0x53,
     PROF_R_ConvexHull                = 0x54,
     PROF_R_GetStaticLights           = 0x55,
     PROF_R_PickFinalLights           = 0x56,
     PROF_R_LightCacheTrace           = 0x57,
     PROF_R_SortDrawSurfs             = 0x58,
     PROF_R_SkinXModel                = 0x59,
     PROF_RB_DrawTechnique            = 0x5A,
     PROF_RB_SetSampler               = 0x5B,
     PROF_RB_SetVertexShaderConstant  = 0x5C,
     PROF_RB_SetPixelShaderConstant   = 0x5D,
     PROF_RB_SetVertexDeclaration     = 0x5E,
     PROF_RB_SetVertexShader          = 0x5F,
     PROF_RB_SetPixelShader           = 0x60,
     PROF_RB_SetParticleCloudConstants = 0x61,
     PROF_R_DrawSurfs                 = 0x62,
     PROF_rb_surfaceTable             = 0x63,
     PROF_TessCodeMesh                = 0x64,
     PROF_TessCloud                   = 0x65,
     PROF_TessXModSkin                = 0x66,
     PROF_TessXModSkinCach            = 0x67,
     PROF_TessXModSkinUncach          = 0x68,
     PROF_TessXModRigid               = 0x69,
     PROF_TessStaticModel             = 0x6A,
     PROF_TessStaticModelCached       = 0x6B,
     PROF_TessTriangles               = 0x6C,
     PROF_TessBModel                  = 0x6D,
     PROF_TessSharedShadowCaster      = 0x6E,
     PROF_SkinXSurfaceWeight          = 0x6F,
     PROF_EndSurface                  = 0x70,
     PROF_EndSurface_Optimized        = 0x71,
     PROF_EndSurface_Standard         = 0x72,
     PROF_RB_ProcessPostEffects       = 0x73,
     PROF_RB_ApplyPostEffects         = 0x74,
     PROF_RB_UpdateAverageSceneBrightnessImage = 0x75,
     PROF_RB_GlowEffect               = 0x76,
     PROF_RB_UploadWaterTexture       = 0x77,
     PROF_RB_DrawSunQuerySprite       = 0x78,
     PROF_R_SyncGpu                   = 0x79,
     PROF_FrequenciesAtTime           = 0x7A,
     PROF_AmplitudesFromFrequencies   = 0x7B,
     PROF_PixelsFromAmplitudes        = 0x7C,
     PROF_ProcessImage                = 0x7D,
     PROF_UploadImage                 = 0x7E,
     PROF_GenerateMipMaps             = 0x7F,
     PROF_Present                     = 0x80,
     PROF_DrawIndexedPrimitive        = 0x81,
     PROF_DrawIndexedPrimitiveUP      = 0x82,
     PROF_SetVertexShaderConstant     = 0x83,
     PROF_SetPixelShaderConstant      = 0x84,
     PROF_WaitRenderer                = 0x85,
     PROF_WaitFX                      = 0x86,
     PROF_WaitSpotLightFX             = 0x87,
     PROF_WaitDepFX                   = 0x88,
     PROF_WaitRenderSwap              = 0x89,
     PROF_WaitUpdateEvent             = 0x8A,
     PROF_WaitOtherThread             = 0x8B,
     PROF_RB_DrawProfileCmd           = 0x8C,
     PROF_RB_Draw3D                   = 0x8D,
     PROF_R_SetupPass                 = 0x8E,
     PROF_WaitWater                   = 0x8F,
     PROF_R_Cinematic_UpdateFrame     = 0x90,
     PROF_R_Cinematic_Advance         = 0x91,
     PROF_BinkDoFrame                 = 0x92,
     PROF_BinkNextFrame               = 0x93,
     PROF_BinkWait                    = 0x94,
     PROF_RB_LimitQueuedFrames        = 0x95,
     PROF_SC_FindCasters              = 0x96,
     PROF_SC_AddReceivers             = 0x97,
     PROF_SC_DrawCaster               = 0x98,
     PROF_SC_FindReceivers            = 0x99,
     PROF_SC_DrawReceivers            = 0x9A,
     PROF_SC_SkinXModel               = 0x9B,
     PROF_RB_SetIndexData             = 0x9C,
     PROF_LockIndexBufferDiscard      = 0x9D,
     PROF_LockIndexBufferNoOverwrite  = 0x9E,
     PROF_LockSkinnedCache            = 0x9F,
     PROF_UnlockSkinnedCache          = 0xA0,
     PROF_RB_SetVertexData            = 0xA1,
     PROF_LockIndexBuffer             = 0xA2,
     PROF_LockVertexBuffer            = 0xA3,
     PROF_LockSModelBuffer            = 0xA4,
     PROF_BindTexture                 = 0xA5,
     PROF_R_memcpy                    = 0xA6,
     PROF_RB_memcpy                   = 0xA7,
     PROF_RB_memcpy_it                = 0xA8,
     PROF_RB_memcpy_vt                = 0xA9,
     PROF_RB_memcpy_ib                = 0xAA,
     PROF_RB_memcpy_vb                = 0xAB,
     PROF_RendererSleep               = 0xAC,
     PROF_FrontEndSleep               = 0xAD,
     PROF_WorkerThread                = 0xAE,
     PROF_WaitForWorkerCmd            = 0xAF,
     PROF_WaitWorkerCmds              = 0xB0,
     PROF_ProcessWorkerCmds           = 0xB1,
     PROF_PixelShaderSurfs            = 0xB2,
     PROF_PixelShader                 = 0xB3,
     PROF_StaticCull                  = 0xB4,
     PROF_SceneEntCull                = 0xB5,
     PROF_DynModelCull                = 0xB6,
     PROF_DynBrushCull                = 0xB7,
     PROF_R_DrawStaticModelCmd        = 0xB8,
     PROF_R_DrawXModelCmd             = 0xB9,
     PROF_R_DrawTrianglesCmd          = 0xBA,
     PROF_SaveWriteThread             = 0xBB,
     PROF_R_VisitPortals              = 0xBC,
     PROF_ExecuteRenderCmds           = 0xBD,
     PROF_RB_memcpy_smc               = 0xBE,
     PROF_RB_memcpy_tris              = 0xBF,
     PROF_RB_memcpy_shadow            = 0xC0,
     PROF_FX_Update                   = 0xC1,
     PROF_FX_UpdateOrigin             = 0xC2,
     PROF_FX_EndUpdate                = 0xC3,
     PROF_FX_GenerateVerts            = 0xC4,
     PROF_FX_GenElemVerts             = 0xC5,
     PROF_FX_EvalVisState             = 0xC6,
     PROF_FX_Sort                     = 0xC7,
     PROF_FX_Draw                     = 0xC8,
     PROF_FX_DrawElems                = 0xC9,
     PROF_FX_DrawSortedElems          = 0xCA,
     PROF_FX_Trace                    = 0xCB,
     PROF_FX_CreateImpactMark         = 0xCC,
     PROF_FX_ImpactMark_World         = 0xCD,
     PROF_FX_ImpactMark_Models        = 0xCE,
     PROF_FX_ImpactMark_Generate_AddEntityModels = 0xCF,
     PROF_FX_FreeLruMark              = 0xD0,
     PROF_FX_GenMarkVertsStaticModel  = 0xD1,
     PROF_FX_GenMarkVertsEnt          = 0xD2,
     PROF_FX_GenMarkVertsWorld        = 0xD3,
     PROF_FX_GetVisibility            = 0xD4,
     PROF_FX_StopEffect               = 0xD5,
     PROF_SV_FX_GetVisibility         = 0xD6,
     PROF_R_BoxStaticModels           = 0xD7,
     PROF_R_MarkFragments_SceneDObjs  = 0xD8,
     PROF_R_MarkUtil_GetDObjAnimMatAndHideParts = 0xD9,
     PROF_R_MarkFragments_AnimatedXModel = 0xDA,
     PROF_R_MarkFragments_AnimatedXModel_VertList = 0xDB,
     PROF_AIThink                     = 0xDC,
     PROF_AIPhysics                   = 0xDD,
     PROF_AIPhysicsTrace              = 0xDE,
     PROF_AISightTrace                = 0xDF,
     PROF_AITurretSightTrace          = 0xE0,
     PROF_AIUpdateEyeInfo             = 0xE1,
     PROF_AIUpdateSight               = 0xE2,
     PROF_AIPathSearch                = 0xE3,
     PROF_AINearestNode               = 0xE4,
     PROF_AILookAhead                 = 0xE5,
     PROF_G_RunFrame                  = 0xE6,
     PROF_AITurretThink               = 0xE7,
     PROF_AIShoot                     = 0xE8,
     PROF_SV_SightTrace               = 0xE9,
     PROF_AIGetMuzzleInfo             = 0xEA,
     PROF_Turret_Fire_Lead            = 0xEB,
     PROF_AIAnimscript                = 0xEC,
     PROF_AIAnimscriptNonBuiltIn      = 0xED,
     PROF_G_WriteGame                 = 0xEE,
     PROF_G_SaveFileAccess            = 0xEF,
     PROF_G_LoadGame                  = 0xF0,
     PROF_G_LoadFileAccess            = 0xF1,
     PROF_G_FreeEntity                = 0xF2,
     PROF_G_FindConfigstringIndex     = 0xF3,
     PROF_G_ModelIndex                = 0xF4,
     PROF_G_EntAttach                 = 0xF5,
     PROF_G_EntDetach                 = 0xF6,
     PROF_G_DObjUpdate                = 0xF7,
     PROF_G_UpdateTagInfoOfChildren   = 0xF8,
     PROF_G_EntDetachAll              = 0xF9,
     PROF_G_EntLinkTo                 = 0xFA,
     PROF_G_EntUnlink                 = 0xFB,
     PROF_G_UpdateTagInfo             = 0xFC,
     PROF_FS_GetDataForFile           = 0xFD,
     PROF_SV_GetArchivedPlayerState   = 0xFE,
     PROF_SV_Frame                    = 0xFF,
     PROF_SV_RunFrame                 = 0x100,
     PROF_SV_SendClientMessages       = 0x101,
     PROF_SV_ArchiveSnapshot          = 0x102,
     PROF_G_UpdateDvars               = 0x103,
     PROF_G_RunFrameForEntity         = 0x104,
     PROF_G_RunThink                  = 0x105,
     PROF_G_RunMover                  = 0x106,
     PROF_G_UpdateObjectiveToClients  = 0x107,
     PROF_G_UpdateHudElemsToClients   = 0x108,
     PROF_ClientEndFrame              = 0x109,
     PROF_ClientEvents                = 0x10A,
     PROF_ClientImpacts               = 0x10B,
     PROF_IntermissionThink           = 0x10C,
     PROF_SpectatorThink              = 0x10D,
     PROF_G_UpdateClientInfo          = 0x10E,
     PROF_G_TriggerChecks             = 0x10F,
     PROF_G_TriggerCheckScripts       = 0x110,
     PROF_IntermissionClientEndFrame  = 0x111,
     PROF_SpectatorClientEndFrame     = 0x112,
     PROF_ClientSpawn                 = 0x113,
     PROF_Player_UpdateCursorHints    = 0x114,
     PROF_G_PlayerStateToEntityStateExtrapolate = 0x115,
     PROF_BG_PlayerStateToEntityState = 0x116,
     PROF_G_GetNonPVSPlayerInfo       = 0x117,
     PROF_BG_PlayerAnimation          = 0x118,
     PROF_BG_UpdatePlayerDObj         = 0x119,
     PROF_SV_UserMove                 = 0x11A,
     PROF_PmoveSingle                 = 0x11B,
     PROF_PM_Move                     = 0x11C,
     PROF_PM_Weapon                   = 0x11D,
     PROF_PM_GroundTrace              = 0x11E,
     PROF_PM_Footsteps                = 0x11F,
     PROF_PM_FoliageSounds            = 0x120,
     PROF_Mantle_Check                = 0x121,
     PROF_SV_BuildClientSnapshot      = 0x122,
     PROF_SV_PacketDataIsType         = 0x123,
     PROF_WriteDeltaPlayerstate       = 0x124,
     PROF_EmitPacketEntities          = 0x125,
     PROF_EmitPacketClients           = 0x126,
     PROF_SV_SendMessageToClient      = 0x127,
     PROF_SV_TrackFieldChange         = 0x128,
     PROF_SV_TrackPacketData          = 0x129,
     PROF_WriteEntity                 = 0x12A,
     PROF_SendPacket                  = 0x12B,
     PROF_dwSendTo                    = 0x12C,
     PROF_dwRecvFrom                  = 0x12D,
     PROF_SV_SendClientSnapshot       = 0x12E,
     PROF_SV_UpdateBots               = 0x12F,
     PROF_SV_CalcPings                = 0x130,
     PROF_SV_CheckTimeouts            = 0x131,
     PROF_FakeLag_Frame               = 0x132,
     PROF_xdelta                      = 0x133,
     PROF_xtiming                     = 0x134,
     PROF_xanim                       = 0x135,
     PROF_xskel                       = 0x136,
     PROF_xtrace                      = 0x137,
     PROF_staticModelTrace            = 0x138,
     PROF_G_CalcTagParentAxis         = 0x139,
     PROF_G_DObjGetLocalTagMatrix     = 0x13A,
     PROF_CG_DObjGetLocalTagMatrix    = 0x13B,
     PROF_CM_PointTraceToEntities     = 0x13C,
     PROF_CM_ClipMoveToEntities       = 0x13D,
     PROF_R_DObjCalcPose              = 0x13E,
     PROF_FX_GetBoneOrientation       = 0x13F,
     PROF_G_XAnimUpdate               = 0x140,
     PROF_CG_AddPacketEntities        = 0x141,
     PROF_CG_PredictPlayerState       = 0x142,
     PROF_CG_DoControllers            = 0x143,
     PROF_XAnimSetModel               = 0x144,
     PROF_DObjCreateDuplicateParts    = 0x145,
     PROF_DObjCreate                  = 0x146,
     PROF_DObjFree                    = 0x147,
     PROF_XAnimSetGoalWeight          = 0x148,
     PROF_DObjGetHierarchyBits        = 0x149,
     PROF_DObjCompleteHierarchyBits   = 0x14A,
     PROF_code_notify                 = 0x14B,
     PROF_threads                     = 0x14C,
     PROF_scriptVariable              = 0x14D,
     PROF_scriptString                = 0x14E,
     PROF_scriptMemory                = 0x14F,
     PROF_SND_init_sample             = 0x150,
     PROF_SND_set_3d_sample_info      = 0x151,
     PROF_SND_open_stream             = 0x152,
     PROF_SND_Update                  = 0x153,
     PROF_SND_UpdateStream            = 0x154,
     PROF_SND_spatialization          = 0x155,
     PROF_SND_x3daudiocalculate       = 0x156,
     PROF_SoundThread                 = 0x157,
     PROF_SND_entityeq                = 0x158,
     PROF_DebugOverlays               = 0x159,
     PROF_CG_Draw2D                   = 0x15A,
     PROF_Actor_Grenade_GetTossPositionsFromHints = 0x15B,
     PROF_Actor_Grenade_CheckGrenadeHintToss = 0x15C,
     PROF_Actor_Grenade_CheckDesperateToss = 0x15D,
     PROF_G_TouchTriggers             = 0x15E,
     PROF_G_DoTouchTriggers           = 0x15F,
     PROF_Actor_GetPotentialNodeList  = 0x160,
     PROF_Actor_BadPlace_FindSafeNodeOutsideBadPlace = 0x161,
     PROF_VEH_VerifyPosition          = 0x162,
     PROF_SwitchToLocalClient         = 0x163,
     PROF_InactivePlayersSwitch       = 0x164,
     PROF_CL_VoiceFrame               = 0x165,
     PROF_SubmitChatData              = 0x166,
     PROF_GetChatData                 = 0x167,
     PROF_MainThread                  = 0x168,
     PROF_MaxFPSSpin                  = 0x169,
     PROF_Live_Frame                  = 0x16A,
     PROF_Phys_RunToTime              = 0x16B,
     PROF_Phys_Traces                 = 0x16C,
     PROF_Phys_RunServerFrame         = 0x16D,
     PROF_Phys_Collide                = 0x16E,
     PROF_Phys_NearCallback           = 0x16F,
     PROF_Phys_WorldCollision         = 0x170,
     PROF_Phys_WrldCollPt1            = 0x171,
     PROF_Phys_WrldCollPt2            = 0x172,
     PROF_Phys_OPCODE                 = 0x173,
     PROF_Phys_BoxTriColl             = 0x174,
     PROF_Phys_BoxBoxColl             = 0x175,
     PROF_Phys_BoxBrushColl           = 0x176,
     PROF_Phys_BrushBrushColl         = 0x177,
     PROF_Phys_BrushTriColl           = 0x178,
     PROF_Phys_CylinderBrushColl      = 0x179,
     PROF_Phys_CylinderTriColl        = 0x17A,
     PROF_Phys_CapsuleBrushColl       = 0x17B,
     PROF_Phys_CapsuleTriColl         = 0x17C,
     PROF_BldWndingsForBrsh           = 0x17D,
     PROF_Phys_Step                   = 0x17E,
     PROF_Phys_PostStep               = 0x17F,
     PROF_Phys_ReduceContacts         = 0x180,
     PROF_Phys_ODE_SOR_LCP            = 0x181,
     PROF_DynEntCl_ProcessEntities    = 0x182,
     PROF_DynEntCl_PhysRunToTime      = 0x183,
     PROF_DynEntCl_DrawEntities       = 0x184,
     PROF_DynEntCl_DrawModelEntity    = 0x185,
     PROF_DynEntCl_DrawBrushEntity    = 0x186,
     PROF_DynEntCl_PointTrace         = 0x187,
     PROF_DynEntCl_ClipMoveTrace      = 0x188,
     PROF_DynEntCl_AreaEntities       = 0x189,
     PROF_DynEntCl_AddBreakableDrawSurfs = 0x18A,
     PROF_DynEntSv_PointTrace         = 0x18B,
     PROF_DynEntSv_ClipMoveTrace      = 0x18C,
     PROF_DynEntSv_AreaEntities       = 0x18D,
     PROF_Ragdoll_GetDObjLocalBoneMatrix = 0x18E,
     PROF_Ragdoll_UpdateRigidConstraint = 0x18F,
     PROF_Ragdoll_Update              = 0x190,
     PROF_ServerDemo_SaveHistory      = 0x191,
     PROF_ServerDemo_CacheHistory     = 0x192,
     PROF_FMOD_Release                = 0x193,
     PROF_FMOD_Update                 = 0x194,
     PROF_FMOD_Codec                  = 0x195,
     PROF_FMOD_FileRead               = 0x196,
     PROF_DrawDynEnt                  = 0x197,
     PROF_BspSurfaces                 = 0x198,
     PROF_BspSurfacesShadow           = 0x199,
     PROF_SModelSurfaces              = 0x19A,
     PROF_SModelSurfacesShadow        = 0x19B,
     PROF_SModelLighting              = 0x19C,
     PROF_SceneEntSurfaces            = 0x19D,
     PROF_SortSceneEntSurfaces        = 0x19E,
     PROF_SceneEntSurfacesShadow      = 0x19F,
     PROF_R_GetLightSurfs             = 0x1A0,
     PROF_FMOD_System_Lock            = 0x1A1,
     PROF_WaitServer                  = 0x1A2,
     PROF_WaitSnapshot                = 0x1A3,
     PROF_WaitReceiveMsg              = 0x1A4,
     PROF_SoundCrit                   = 0x1A5,
     PROF_SoundOpen                   = 0x1A6,
     PROF_CodecOpen                   = 0x1A7,
     PROF_SoundMisc                   = 0x1A8,
     PROF_SoundReallyOpen             = 0x1A9,
     PROF_SoundAlloc                  = 0x1AA,
     PROF_WaitBackendEvent            = 0x1AB,
     PROF_PS3_SpeexDecode             = 0x1AC,
     PROF_PS3_SpeexEncode             = 0x1AD,
     PROF_PS3_VoiceDecoder            = 0x1AE,
     PROF_PS3_VoiceMix                = 0x1AF,
     PROF_ENUM_COUNT                  = 0x1B0,
 };
 enum $D3408213E9A510CD73DF54FC0DA7EA89 : __int32
 {
     DOBJ_MAX_PARTS     = 0x80,
     DOBJ_MAX_PART_BITS = 0x4,
     MAX_LODS           = 0x4,
 };
 enum $7B978A8EAF4AE2627C6F063D7A9BDEE5 : __int32
 {
     MARK_MODEL_TYPE_WORLD_BRUSH = 0x0,
     MARK_MODEL_TYPE_WORLD_MODEL = 0x40,
     MARK_MODEL_TYPE_ENT_BRUSH   = 0x80,
     MARK_MODEL_TYPE_ENT_MODEL   = 0xC0,
     MARK_MODEL_TYPE_MASK        = 0xC0,
     MARK_MODEL_SURF_MASK        = 0x3F,
 };
 enum $C2D64A5C68CD67A3D33FF78F5B5E7685 : __int32
 {
     CS_GAME_VERSION           = 0x2,
     CS_MESSAGE                = 0x3,
     CS_SCORES1                = 0x4,
     CS_SCORES2                = 0x5,
     CS_CULLDIST               = 0x6,
     CS_SUNLIGHT               = 0x7,
     CS_SUNDIR                 = 0x8,
     CS_FOGVARS                = 0x9,
     CS_MOTD                   = 0xA,
     CS_GAMEENDTIME            = 0xB,
     CS_MAPCENTER              = 0xC,
     CS_VOTE_TIME              = 0xD,
     CS_VOTE_STRING            = 0xE,
     CS_VOTE_YES               = 0xF,
     CS_VOTE_NO                = 0x10,
     CS_VOTE_MAPNAME           = 0x11,
     CS_VOTE_GAMETYPE          = 0x12,
     CS_MULTI_MAPWINNER        = 0x13,
     CS_CODINFO                = 0x14,
     CS_CODINFO_LAST           = 0x93,
     CS_CODINFO_VALUE          = 0x94,
     CS_CODINFO_VALUE_LAST     = 0x113,
     CS_ENEMY_CROSSHAIR        = 0x114,
     CS_USE_TRIG_STRINGS       = 0x115,
     CS_USE_TRIG_STRINGS_LAST  = 0x134,
     CS_LOCALIZED_STRINGS      = 0x135,
     CS_LOCALIZED_STRINGS_LAST = 0x334,
     CS_CASE_INSENSITIVE_BEGIN = 0x335,
     CS_AMBIENT                = 0x335,
     CS_NORTHYAW               = 0x336,
     CS_MINIMAP                = 0x337,
     CS_VISIONSET_NAKED        = 0x338,
     CS_VISIONSET_NIGHT        = 0x339,
     CS_NIGHTVISION            = 0x33A,
     CS_LOC_SEL_MTLS           = 0x33B,
     CS_LOC_SEL_MTLS_LAST      = 0x33D,
     CS_MODELS                 = 0x33E,
     CS_MODELS_LAST            = 0x53D,
     CS_SOUNDALIASES           = 0x53E,
     CS_SOUNDALIASES_LAST      = 0x63D,
     CS_EFFECT_NAMES           = 0x63E,
     CS_EFFECT_NAMES_LAST      = 0x6A1,
     CS_EFFECT_TAGS            = 0x6A2,
     CS_EFFECT_TAGS_LAST       = 0x7A1,
     CS_SHELLSHOCKS            = 0x7A2,
     CS_SHELLSHOCKS_LAST       = 0x7B1,
     CS_SCRIPT_MENUS           = 0x7B2,
     CS_SCRIPT_MENUS_LAST      = 0x7D1,
     CS_SERVER_MATERIALS       = 0x7D2,
     CS_SERVER_MATERIALS_LAST  = 0x8D1,
     CS_WEAPONFILES            = 0x8D2,
     CS_STATUS_ICONS           = 0x8D3,
     CS_STATUS_ICONS_LAST      = 0x8DA,
     CS_HEAD_ICONS             = 0x8DB,
     CS_HEAD_ICONS_LAST        = 0x8E9,
     CS_TAGS                   = 0x8EA,
     CS_TAGS_LAST              = 0x909,
     CS_ITEMS                  = 0x90A,
     CS_MAX                    = 0x90B,
 };
 enum $864CC3947BEAD984B4780E201C13ADFE : __int32
 {
     PROF_CLKS       = 0x0,
     PROF_ATOM_COUNT = 0x1,
 };
 enum $1A0051E006B0CE232622289CC200D5ED : __int32
 {
     FX_FLESHTYPE_BODY_NONFATAL = 0x0,
     FX_FLESHTYPE_BODY_FATAL    = 0x1,
     FX_FLESHTYPE_HEAD_NONFATAL = 0x2,
     FX_FLESHTYPE_HEAD_FATAL    = 0x3,
     FX_FLESHTYPE_COUNT         = 0x4,
 };
 enum perksEnum : __int32
 {
     PERK_JAMRADAR        = 0x0,
     PERK_ACCURACY        = 0x1,
     PERK_FASTRELOAD      = 0x2,
     PERK_RATEOFFIRE      = 0x3,
     PERK_EXTRABREATH     = 0x4,
     PERK_EXTRABP         = 0x5,
     PERK_GRENADEDEATH    = 0x6,
     PERK_PISTOLDEATH     = 0x7,
     PERK_QUIETMOVE       = 0x8,
     PERK_PARABOLIC       = 0x9,
     PERK_LONGERSPRINT    = 0xA,
     PERK_DETECTEXPLOSIVE = 0xB,
     PERK_EXPLOSIVEDMG    = 0xC,
     PERK_EXPOSEENEMY     = 0xD,
     PERK_BULLETDMG       = 0xE,
     PERK_EXTRAAMMO       = 0xF,
     PERK_TWOPRIMARIES    = 0x10,
     PERK_ARMORVEST       = 0x11,
     PERK_FRAGGRENADE     = 0x12,
     PERK_SPECIALGRENADE  = 0x13,
     PERK_COUNT           = 0x14,
     PERK_UNKNOWN         = 0x14,
 };
 enum CriticalSection : __int32
 {                                       // ...
     CRITSECT_CONSOLE                 = 0x0,
     CRITSECT_DEBUG_SOCKET            = 0x1,
     CRITSECT_COM_ERROR               = 0x2,
     CRITSECT_STATMON                 = 0x3,
     CRITSECT_DEBUG_LINE              = 0x4,
     CRITSECT_ALLOC_MARK              = 0x5,
     CRITSECT_SCRIPT_STRING           = 0x6,
     CRITSECT_MEMORY_TREE             = 0x7,
     CRITSECT_ASSERT                  = 0x8,
     CRITSECT_RD_BUFFER               = 0x9,
     CRITSECT_SYS_EVENT_QUEUE         = 0xA,
     CRITSECT_GPU_FENCE               = 0xB,
     CRITSECT_FATAL_ERROR             = 0xC,
     CRITSECT_SCRIPT_DEBUGGER_ALLOC   = 0xD,
     CRITSECT_MISSING_ASSET           = 0xE,
     CRITSECT_PHYSICS                 = 0xF,
     CRITSECT_LIVE                    = 0x10,
     CRITSECT_AUDIO_PHYSICS           = 0x11,
     CRITSECT_CINEMATIC               = 0x12,
     CRITSECT_CINEMATIC_TARGET_CHANGE = 0x13,
     CRITSECT_FX_ALLOC                = 0x14,
     CRITSECT_CBUF                    = 0x15,
     CRITSECT_COUNT                   = 0x16,
 };
 enum connstate_t : __int32
 {                                       // ...
     CA_DISCONNECTED = 0x0,
     CA_CINEMATIC    = 0x1,
     CA_LOGO         = 0x2,
     CA_CONNECTING   = 0x3,
     CA_CHALLENGING  = 0x4,
     CA_CONNECTED    = 0x5,
     CA_SENDINGSTATS = 0x6,
     CA_LOADING      = 0x7,
     CA_PRIMED       = 0x8,
     CA_ACTIVE       = 0x9,
 };
 enum entity_event_t : __int32
 {
     EV_NONE                        = 0x0,
     EV_FOLIAGE_SOUND               = 0x1,
     EV_STOP_WEAPON_SOUND           = 0x2,
     EV_SOUND_ALIAS                 = 0x3,
     EV_SOUND_ALIAS_AS_MASTER       = 0x4,
     EV_STOPSOUNDS                  = 0x5,
     EV_STANCE_FORCE_STAND          = 0x6,
     EV_STANCE_FORCE_CROUCH         = 0x7,
     EV_STANCE_FORCE_PRONE          = 0x8,
     EV_ITEM_PICKUP                 = 0x9,
     EV_AMMO_PICKUP                 = 0xA,
     EV_NOAMMO                      = 0xB,
     EV_EMPTYCLIP                   = 0xC,
     EV_EMPTY_OFFHAND               = 0xD,
     EV_RESET_ADS                   = 0xE,
     EV_RELOAD                      = 0xF,
     EV_RELOAD_FROM_EMPTY           = 0x10,
     EV_RELOAD_START                = 0x11,
     EV_RELOAD_END                  = 0x12,
     EV_RELOAD_START_NOTIFY         = 0x13,
     EV_RELOAD_ADDAMMO              = 0x14,
     EV_RAISE_WEAPON                = 0x15,
     EV_FIRST_RAISE_WEAPON          = 0x16,
     EV_PUTAWAY_WEAPON              = 0x17,
     EV_WEAPON_ALT                  = 0x18,
     EV_PULLBACK_WEAPON             = 0x19,
     EV_FIRE_WEAPON                 = 0x1A,
     EV_FIRE_WEAPON_LASTSHOT        = 0x1B,
     EV_RECHAMBER_WEAPON            = 0x1C,
     EV_EJECT_BRASS                 = 0x1D,
     EV_MELEE_SWIPE                 = 0x1E,
     EV_FIRE_MELEE                  = 0x1F,
     EV_PREP_OFFHAND                = 0x20,
     EV_USE_OFFHAND                 = 0x21,
     EV_SWITCH_OFFHAND              = 0x22,
     EV_MELEE_HIT                   = 0x23,
     EV_MELEE_MISS                  = 0x24,
     EV_MELEE_BLOOD                 = 0x25,
     EV_FIRE_WEAPON_MG42            = 0x26,
     EV_FIRE_QUADBARREL_1           = 0x27,
     EV_FIRE_QUADBARREL_2           = 0x28,
     EV_BULLET_HIT                  = 0x29,
     EV_BULLET_HIT_CLIENT_SMALL     = 0x2A,
     EV_BULLET_HIT_CLIENT_LARGE     = 0x2B,
     EV_GRENADE_BOUNCE              = 0x2C,
     EV_GRENADE_EXPLODE             = 0x2D,
     EV_ROCKET_EXPLODE              = 0x2E,
     EV_ROCKET_EXPLODE_NOMARKS      = 0x2F,
     EV_FLASHBANG_EXPLODE           = 0x30,
     EV_CUSTOM_EXPLODE              = 0x31,
     EV_CUSTOM_EXPLODE_NOMARKS      = 0x32,
     EV_CHANGE_TO_DUD               = 0x33,
     EV_DUD_EXPLODE                 = 0x34,
     EV_DUD_IMPACT                  = 0x35,
     EV_BULLET                      = 0x36,
     EV_PLAY_FX                     = 0x37,
     EV_PLAY_FX_ON_TAG              = 0x38,
     EV_PHYS_EXPLOSION_SPHERE       = 0x39,
     EV_PHYS_EXPLOSION_CYLINDER     = 0x3A,
     EV_PHYS_EXPLOSION_JOLT         = 0x3B,
     EV_PHYS_JITTER                 = 0x3C,
     EV_EARTHQUAKE                  = 0x3D,
     EV_GRENADE_SUICIDE             = 0x3E,
     EV_DETONATE                    = 0x3F,
     EV_NIGHTVISION_WEAR            = 0x40,
     EV_NIGHTVISION_REMOVE          = 0x41,
     EV_OBITUARY                    = 0x42,
     EV_NO_FRAG_GRENADE_HINT        = 0x43,
     EV_NO_SPECIAL_GRENADE_HINT     = 0x44,
     EV_TARGET_TOO_CLOSE_HINT       = 0x45,
     EV_TARGET_NOT_ENOUGH_CLEARANCE = 0x46,
     EV_LOCKON_REQUIRED_HINT        = 0x47,
     EV_FOOTSTEP_SPRINT             = 0x48,
     EV_FOOTSTEP_RUN                = 0x49,
     EV_FOOTSTEP_WALK               = 0x4A,
     EV_FOOTSTEP_PRONE              = 0x4B,
     EV_JUMP                        = 0x4C,
     EV_LANDING_FIRST               = 0x4D,
     EV_LANDING_LAST                = 0x69,
     EV_LANDING_PAIN_FIRST          = 0x6A,
     EV_LANDING_PAIN_LAST           = 0x86,
     EV_MAX_EVENTS                  = 0x87,
 };
 enum $EAA04E4D414B924040BE4148ED929EB1 : __int32
 {
     STATMON_FPS          = 0x0,
     STATMON_FILEACCESS   = 0x1,
     STATMON_SOUNDCPU     = 0x2,
     STATMON_MAXEFFECTS   = 0x3,
     STATMON_SNAPSHOTENTS = 0x4,
     STATMON_TRIS         = 0x5,
     STATMON_SERVERFPS    = 0x6,
     STATMON_COUNT        = 0x7,
 };
 enum weapAnimFiles_t : __int32
 {
     WEAP_ANIM_ROOT               = 0x0,
     WEAP_ANIM_IDLE               = 0x1,
     WEAP_ANIM_EMPTY_IDLE         = 0x2,
     WEAP_ANIM_FIRE               = 0x3,
     WEAP_ANIM_HOLD_FIRE          = 0x4,
     WEAP_ANIM_LASTSHOT           = 0x5,
     WEAP_ANIM_RECHAMBER          = 0x6,
     WEAP_ANIM_MELEE              = 0x7,
     WEAP_ANIM_MELEE_CHARGE       = 0x8,
     WEAP_ANIM_RELOAD             = 0x9,
     WEAP_ANIM_RELOAD_EMPTY       = 0xA,
     WEAP_ANIM_RELOAD_START       = 0xB,
     WEAP_ANIM_RELOAD_END         = 0xC,
     WEAP_ANIM_RAISE              = 0xD,
     WEAP_ANIM_FIRST_RAISE        = 0xE,
     WEAP_ANIM_DROP               = 0xF,
     WEAP_ANIM_ALT_RAISE          = 0x10,
     WEAP_ANIM_ALT_DROP           = 0x11,
     WEAP_ANIM_QUICK_RAISE        = 0x12,
     WEAP_ANIM_QUICK_DROP         = 0x13,
     WEAP_ANIM_EMPTY_RAISE        = 0x14,
     WEAP_ANIM_EMPTY_DROP         = 0x15,
     WEAP_ANIM_SPRINT_IN          = 0x16,
     WEAP_ANIM_SPRINT_LOOP        = 0x17,
     WEAP_ANIM_SPRINT_OUT         = 0x18,
     WEAP_ANIM_DETONATE           = 0x19,
     WEAP_ANIM_NIGHTVISION_WEAR   = 0x1A,
     WEAP_ANIM_NIGHTVISION_REMOVE = 0x1B,
     WEAP_ANIM_ADS_FIRE           = 0x1C,
     WEAP_ANIM_ADS_LASTSHOT       = 0x1D,
     WEAP_ANIM_ADS_RECHAMBER      = 0x1E,
     WEAP_ANIM_ADS_UP             = 0x1F,
     WEAP_ANIM_ADS_DOWN           = 0x20,
     NUM_WEAP_ANIMS               = 0x21,
 };
 enum $708003E590F9EEB5451E934A26975E39 : __int32
 {
     qfalse = 0x0,
     qtrue  = 0x1,
 };
 enum keyNum_t : __int32
 {
     K_NONE            = 0x0,
     K_TAB             = 0x9,
     K_ENTER           = 0xD,
     K_ESCAPE          = 0x1B,
     K_SPACE           = 0x20,
     K_BACKSPACE       = 0x7F,
     K_ASCII_FIRST     = 0x80,
     K_ASCII_181       = 0x80,
     K_ASCII_191       = 0x81,
     K_ASCII_223       = 0x82,
     K_ASCII_224       = 0x83,
     K_ASCII_225       = 0x84,
     K_ASCII_228       = 0x85,
     K_ASCII_229       = 0x86,
     K_ASCII_230       = 0x87,
     K_ASCII_231       = 0x88,
     K_ASCII_232       = 0x89,
     K_ASCII_233       = 0x8A,
     K_ASCII_236       = 0x8B,
     K_ASCII_241       = 0x8C,
     K_ASCII_242       = 0x8D,
     K_ASCII_243       = 0x8E,
     K_ASCII_246       = 0x8F,
     K_ASCII_248       = 0x90,
     K_ASCII_249       = 0x91,
     K_ASCII_250       = 0x92,
     K_ASCII_252       = 0x93,
     K_END_ASCII_CHARS = 0x94,
     K_COMMAND         = 0x96,
     K_CAPSLOCK        = 0x97,
     K_POWER           = 0x98,
     K_PAUSE           = 0x99,
     K_UPARROW         = 0x9A,
     K_DOWNARROW       = 0x9B,
     K_LEFTARROW       = 0x9C,
     K_RIGHTARROW      = 0x9D,
     K_ALT             = 0x9E,
     K_CTRL            = 0x9F,
     K_SHIFT           = 0xA0,
     K_INS             = 0xA1,
     K_DEL             = 0xA2,
     K_PGDN            = 0xA3,
     K_PGUP            = 0xA4,
     K_HOME            = 0xA5,
     K_END             = 0xA6,
     K_F1              = 0xA7,
     K_F2              = 0xA8,
     K_F3              = 0xA9,
     K_F4              = 0xAA,
     K_F5              = 0xAB,
     K_F6              = 0xAC,
     K_F7              = 0xAD,
     K_F8              = 0xAE,
     K_F9              = 0xAF,
     K_F10             = 0xB0,
     K_F11             = 0xB1,
     K_F12             = 0xB2,
     K_F13             = 0xB3,
     K_F14             = 0xB4,
     K_F15             = 0xB5,
     K_KP_HOME         = 0xB6,
     K_KP_UPARROW      = 0xB7,
     K_KP_PGUP         = 0xB8,
     K_KP_LEFTARROW    = 0xB9,
     K_KP_5            = 0xBA,
     K_KP_RIGHTARROW   = 0xBB,
     K_KP_END          = 0xBC,
     K_KP_DOWNARROW    = 0xBD,
     K_KP_PGDN         = 0xBE,
     K_KP_ENTER        = 0xBF,
     K_KP_INS          = 0xC0,
     K_KP_DEL          = 0xC1,
     K_KP_SLASH        = 0xC2,
     K_KP_MINUS        = 0xC3,
     K_KP_PLUS         = 0xC4,
     K_KP_NUMLOCK      = 0xC5,
     K_KP_STAR         = 0xC6,
     K_KP_EQUALS       = 0xC7,
     K_MOUSE1          = 0xC8,
     K_MOUSE2          = 0xC9,
     K_MOUSE3          = 0xCA,
     K_MOUSE4          = 0xCB,
     K_MOUSE5          = 0xCC,
     K_MWHEELDOWN      = 0xCD,
     K_MWHEELUP        = 0xCE,
     K_AUX1            = 0xCF,
     K_AUX2            = 0xD0,
     K_AUX3            = 0xD1,
     K_AUX4            = 0xD2,
     K_AUX5            = 0xD3,
     K_AUX6            = 0xD4,
     K_AUX7            = 0xD5,
     K_AUX8            = 0xD6,
     K_AUX9            = 0xD7,
     K_AUX10           = 0xD8,
     K_AUX11           = 0xD9,
     K_AUX12           = 0xDA,
     K_AUX13           = 0xDB,
     K_AUX14           = 0xDC,
     K_AUX15           = 0xDD,
     K_AUX16           = 0xDE,
     K_LAST_KEY        = 0xDF,
 };
 enum $50A364FEE5AACF3D085D004A99CC61A8 : __int32
 {
     DRAW_SURF_CAMERA_LIT_BEGIN       = 0x0,
     DRAW_SURF_BSP_CAMERA_LIT         = 0x0,
     DRAW_SURF_SMODEL_CAMERA_LIT      = 0x1,
     DRAW_SURF_ENT_CAMERA_LIT         = 0x2,
     DRAW_SURF_CAMERA_LIT_END         = 0x3,
     DRAW_SURF_CAMERA_DECAL_BEGIN     = 0x3,
     DRAW_SURF_BSP_CAMERA_DECAL       = 0x3,
     DRAW_SURF_SMODEL_CAMERA_DECAL    = 0x4,
     DRAW_SURF_ENT_CAMERA_DECAL       = 0x5,
     DRAW_SURF_FX_CAMERA_LIT          = 0x6,
     DRAW_SURF_FX_CAMERA_LIT_AUTO     = 0x7,
     DRAW_SURF_FX_CAMERA_LIT_DECAL    = 0x8,
     DRAW_SURF_CAMERA_DECAL_END       = 0x9,
     DRAW_SURF_CAMERA_EMISSIVE_BEGIN  = 0x9,
     DRAW_SURF_BSP_CAMERA_EMISSIVE    = 0x9,
     DRAW_SURF_SMODEL_CAMERA_EMISSIVE = 0xA,
     DRAW_SURF_ENT_CAMERA_EMISSIVE    = 0xB,
     DRAW_SURF_FX_CAMERA_EMISSIVE     = 0xC,
     DRAW_SURF_FX_CAMERA_EMISSIVE_AUTO = 0xD,
     DRAW_SURF_FX_CAMERA_EMISSIVE_DECAL = 0xE,
     DRAW_SURF_CAMERA_EMISSIVE_END    = 0xF,
     DRAW_SURF_SUNSHADOW_0_BEGIN      = 0xF,
     DRAW_SURF_BSP_SUNSHADOW_0        = 0xF,
     DRAW_SURF_SMODEL_SUNSHADOW_0     = 0x10,
     DRAW_SURF_ENT_SUNSHADOW_0        = 0x11,
     DRAW_SURF_SUNSHADOW_1_BEGIN      = 0x12,
     DRAW_SURF_BSP_SUNSHADOW_1        = 0x12,
     DRAW_SURF_SMODEL_SUNSHADOW_1     = 0x13,
     DRAW_SURF_ENT_SUNSHADOW_1        = 0x14,
     DRAW_SURF_SPOTSHADOW_0_BEGIN     = 0x15,
     DRAW_SURF_BSP_SPOTSHADOW_0       = 0x15,
     DRAW_SURF_SMODEL_SPOTSHADOW_0    = 0x16,
     DRAW_SURF_ENT_SPOTSHADOW_0       = 0x17,
     DRAW_SURF_SPOTSHADOW_1_BEGIN     = 0x18,
     DRAW_SURF_BSP_SPOTSHADOW_1       = 0x18,
     DRAW_SURF_SMODEL_SPOTSHADOW_1    = 0x19,
     DRAW_SURF_ENT_SPOTSHADOW_1       = 0x1A,
     DRAW_SURF_SPOTSHADOW_2_BEGIN     = 0x1B,
     DRAW_SURF_BSP_SPOTSHADOW_2       = 0x1B,
     DRAW_SURF_SMODEL_SPOTSHADOW_2    = 0x1C,
     DRAW_SURF_ENT_SPOTSHADOW_2       = 0x1D,
     DRAW_SURF_SPOTSHADOW_3_BEGIN     = 0x1E,
     DRAW_SURF_BSP_SPOTSHADOW_3       = 0x1E,
     DRAW_SURF_SMODEL_SPOTSHADOW_3    = 0x1F,
     DRAW_SURF_ENT_SPOTSHADOW_3       = 0x20,
     DRAW_SURF_SHADOW_COOKIE          = 0x21,
     DRAW_SURF_TYPE_COUNT             = 0x22,
 };
 enum meansOfDeath_t : __int32
 {                                       // ...
     MOD_UNKNOWN           = 0x0,
     MOD_PISTOL_BULLET     = 0x1,
     MOD_RIFLE_BULLET      = 0x2,
     MOD_GRENADE           = 0x3,
     MOD_GRENADE_SPLASH    = 0x4,
     MOD_PROJECTILE        = 0x5,
     MOD_PROJECTILE_SPLASH = 0x6,
     MOD_MELEE             = 0x7,
     MOD_HEAD_SHOT         = 0x8,
     MOD_CRUSH             = 0x9,
     MOD_TELEFRAG          = 0xA,
     MOD_FALLING           = 0xB,
     MOD_SUICIDE           = 0xC,
     MOD_TRIGGER_HURT      = 0xD,
     MOD_EXPLOSIVE         = 0xE,
     MOD_IMPACT            = 0xF,
     MOD_NUM               = 0x10,
 };
 enum weapPositionAnimNum_t : __int32
 {
     WEAPPOS_HIP_TO_ADS = 0x0,
     WEAPPOS_ADS_TO_HIP = 0x1,
     NUM_WEAPPOS_ANIMS  = 0x2,
 };
 enum WeapAccuracyType : __int32
 {
     WEAP_ACCURACY_AI_VS_AI     = 0x0,
     WEAP_ACCURACY_AI_VS_PLAYER = 0x1,
     WEAP_ACCURACY_COUNT        = 0x2,
 };
 enum $444C08B790DF9B70A526DB33E16E72C8 : __int32
 {
     CAMERA_REGION_LIT      = 0x0,
     CAMERA_REGION_DECAL    = 0x1,
     CAMERA_REGION_EMISSIVE = 0x2,
     CAMERA_REGION_COUNT    = 0x3,
     CAMERA_REGION_NONE     = 0x3,
 };
 enum hintType_t : __int32
 {
     HINT_NONE         = 0x0,
     HINT_NOICON       = 0x1,
     HINT_ACTIVATE     = 0x2,
     HINT_HEALTH       = 0x3,
     HINT_FRIENDLY     = 0x4,
     FIRST_WEAPON_HINT = 0x5,
     LAST_WEAPON_HINT  = 0x84,
     HINT_NUM_HINTS    = 0x85,
 };
 enum weaponAltModel_t : __int32
 {
     WEAP_ALT_MODEL0    = 0x0,
     WEAP_ALT_MODEL1    = 0x1,
     WEAP_ALT_MODEL2    = 0x2,
     WEAP_ALT_MODEL3    = 0x3,
     WEAP_ALT_MODEL4    = 0x4,
     WEAP_ALT_MODEL5    = 0x5,
     WEAP_ALT_MODEL6    = 0x6,
     WEAP_ALT_MODEL7    = 0x7,
     WEAP_ALT_MODEL8    = 0x8,
     WEAP_ALT_MODEL9    = 0x9,
     WEAP_ALT_MODEL10   = 0xA,
     WEAP_ALT_MODEL11   = 0xB,
     WEAP_ALT_MODEL12   = 0xC,
     WEAP_ALT_MODEL13   = 0xD,
     WEAP_ALT_MODEL14   = 0xE,
     WEAP_ALT_MODEL15   = 0xF,
     NUM_WEAP_ALTMODELS = 0x10,
 };
 enum $825BCCD65D2B547ACC61040E5A743E27 : __int32
 {
     MAX_WEAP_NOTETRACK_TO_SOUND_MAPPINGS = 0x10,
 };
 enum hitLocation_t : __int32
 {                                       // ...
     HITLOC_NONE      = 0x0,
     HITLOC_HELMET    = 0x1,
     HITLOC_HEAD      = 0x2,
     HITLOC_NECK      = 0x3,
     HITLOC_TORSO_UPR = 0x4,
     HITLOC_TORSO_LWR = 0x5,
     HITLOC_R_ARM_UPR = 0x6,
     HITLOC_L_ARM_UPR = 0x7,
     HITLOC_R_ARM_LWR = 0x8,
     HITLOC_L_ARM_LWR = 0x9,
     HITLOC_R_HAND    = 0xA,
     HITLOC_L_HAND    = 0xB,
     HITLOC_R_LEG_UPR = 0xC,
     HITLOC_L_LEG_UPR = 0xD,
     HITLOC_R_LEG_LWR = 0xE,
     HITLOC_L_LEG_LWR = 0xF,
     HITLOC_R_FOOT    = 0x10,
     HITLOC_L_FOOT    = 0x11,
     HITLOC_GUN       = 0x12,
     HITLOC_NUM       = 0x13,
 };
 enum he_type_t : __int32
 {                                       // ...
     HE_TYPE_FREE              = 0x0,
     HE_TYPE_TEXT              = 0x1,
     HE_TYPE_VALUE             = 0x2,
     HE_TYPE_PLAYERNAME        = 0x3,
     HE_TYPE_MAPNAME           = 0x4,
     HE_TYPE_GAMETYPE          = 0x5,
     HE_TYPE_MATERIAL          = 0x6,
     HE_TYPE_TIMER_DOWN        = 0x7,
     HE_TYPE_TIMER_UP          = 0x8,
     HE_TYPE_TENTHS_TIMER_DOWN = 0x9,
     HE_TYPE_TENTHS_TIMER_UP   = 0xA,
     HE_TYPE_CLOCK_DOWN        = 0xB,
     HE_TYPE_CLOCK_UP          = 0xC,
     HE_TYPE_WAYPOINT          = 0xD,
     HE_TYPE_COUNT             = 0xE,
 };
 enum guidedMissileType_t : __int32
 {                                       // ...
     MISSILE_GUIDANCE_NONE       = 0x0,
     MISSILE_GUIDANCE_SIDEWINDER = 0x1,
     MISSILE_GUIDANCE_HELLFIRE   = 0x2,
     MISSILE_GUIDANCE_JAVELIN    = 0x3,
     MISSILE_GUIDANCE_COUNT      = 0x4,
 };
 enum OffhandClass : __int32
 {                                       // ...
     OFFHAND_CLASS_NONE          = 0x0,
     OFFHAND_CLASS_FRAG_GRENADE  = 0x1,
     OFFHAND_CLASS_SMOKE_GRENADE = 0x2,
     OFFHAND_CLASS_FLASH_GRENADE = 0x3,
     OFFHAND_CLASS_COUNT         = 0x4,
 };
 enum weapProjExposion_t : __int32
 {                                       // ...
     WEAPPROJEXP_GRENADE   = 0x0,
     WEAPPROJEXP_ROCKET    = 0x1,
     WEAPPROJEXP_FLASHBANG = 0x2,
     WEAPPROJEXP_NONE      = 0x3,
     WEAPPROJEXP_DUD       = 0x4,
     WEAPPROJEXP_SMOKE     = 0x5,
     WEAPPROJEXP_HEAVY     = 0x6,
     WEAPPROJEXP_NUM       = 0x7,
 };
 enum activeReticleType_t : __int32
 {                                       // ...
     VEH_ACTIVE_RETICLE_NONE  = 0x0,
     VEH_ACTIVE_RETICLE_PIP_ON_A_STICK = 0x1,
     VEH_ACTIVE_RETICLE_BOUNCING_DIAMOND = 0x2,
     VEH_ACTIVE_RETICLE_COUNT = 0x3,
 };
 enum ammoCounterClipType_t : __int32
 {                                       // ...
     AMMO_COUNTER_CLIP_NONE          = 0x0,
     AMMO_COUNTER_CLIP_MAGAZINE      = 0x1,
     AMMO_COUNTER_CLIP_SHORTMAGAZINE = 0x2,
     AMMO_COUNTER_CLIP_SHOTGUN       = 0x3,
     AMMO_COUNTER_CLIP_ROCKET        = 0x4,
     AMMO_COUNTER_CLIP_BELTFED       = 0x5,
     AMMO_COUNTER_CLIP_ALTWEAPON     = 0x6,
     AMMO_COUNTER_CLIP_COUNT         = 0x7,
 };
 enum PenetrateType : __int32
 {                                       // ...
     PENETRATE_TYPE_NONE   = 0x0,
     PENETRATE_TYPE_SMALL  = 0x1,
     PENETRATE_TYPE_MEDIUM = 0x2,
     PENETRATE_TYPE_LARGE  = 0x3,
     PENETRATE_TYPE_COUNT  = 0x4,
 };
 enum ImpactType : __int32
 {                                       // ...
     IMPACT_TYPE_NONE            = 0x0,
     IMPACT_TYPE_BULLET_SMALL    = 0x1,
     IMPACT_TYPE_BULLET_LARGE    = 0x2,
     IMPACT_TYPE_BULLET_AP       = 0x3,
     IMPACT_TYPE_SHOTGUN         = 0x4,
     IMPACT_TYPE_GRENADE_BOUNCE  = 0x5,
     IMPACT_TYPE_GRENADE_EXPLODE = 0x6,
     IMPACT_TYPE_ROCKET_EXPLODE  = 0x7,
     IMPACT_TYPE_PROJECTILE_DUD  = 0x8,
     IMPACT_TYPE_COUNT           = 0x9,
 };
 enum netadrtype_t : __int32
 {                                       // ...
     NA_BOT           = 0x0,
     NA_BAD           = 0x1,
     NA_LOOPBACK      = 0x2,
     NA_BROADCAST     = 0x3,
     NA_IP            = 0x4,
     NA_IPX           = 0x5,
     NA_BROADCAST_IPX = 0x6,
 };
 enum objectiveState_t : __int32
 {                                       // ...
     OBJST_EMPTY     = 0x0,
     OBJST_ACTIVE    = 0x1,
     OBJST_INVISIBLE = 0x2,
     OBJST_DONE      = 0x3,
     OBJST_CURRENT   = 0x4,
     OBJST_FAILED    = 0x5,
     OBJST_NUMSTATES = 0x6,
 };
 enum weapInventoryType_t : __int32
 {                                       // ...
     WEAPINVENTORY_PRIMARY = 0x0,
     WEAPINVENTORY_OFFHAND = 0x1,
     WEAPINVENTORY_ITEM    = 0x2,
     WEAPINVENTORY_ALTMODE = 0x3,
     WEAPINVENTORYCOUNT    = 0x4,
 };
 enum weapType_t : __int32
 {                                       // ...
     WEAPTYPE_BULLET     = 0x0,
     WEAPTYPE_GRENADE    = 0x1,
     WEAPTYPE_PROJECTILE = 0x2,
     WEAPTYPE_BINOCULARS = 0x3,
     WEAPTYPE_NUM        = 0x4,
 };
 enum WeapOverlayInteface_t : __int32
 {                                       // ...
     WEAPOVERLAYINTERFACE_NONE        = 0x0,
     WEAPOVERLAYINTERFACE_JAVELIN     = 0x1,
     WEAPOVERLAYINTERFACE_TURRETSCOPE = 0x2,
     WEAPOVERLAYINTERFACECOUNT        = 0x3,
 };
 enum weapFireType_t : __int32
 {                                       // ...
     WEAPON_FIRETYPE_FULLAUTO   = 0x0,
     WEAPON_FIRETYPE_SINGLESHOT = 0x1,
     WEAPON_FIRETYPE_BURSTFIRE2 = 0x2,
     WEAPON_FIRETYPE_BURSTFIRE3 = 0x3,
     WEAPON_FIRETYPE_BURSTFIRE4 = 0x4,
     WEAPON_FIRETYPECOUNT       = 0x5,
 };
 enum WeapStickinessType : __int32
 {                                       // ...
     WEAPSTICKINESS_NONE            = 0x0,
     WEAPSTICKINESS_ALL             = 0x1,
     WEAPSTICKINESS_GROUND          = 0x2,
     WEAPSTICKINESS_GROUND_WITH_YAW = 0x3,
     WEAPSTICKINESS_COUNT           = 0x4,
 };
 enum weapClass_t : __int32
 {                                       // ...
     WEAPCLASS_RIFLE          = 0x0,
     WEAPCLASS_MG             = 0x1,
     WEAPCLASS_SMG            = 0x2,
     WEAPCLASS_SPREAD         = 0x3,
     WEAPCLASS_PISTOL         = 0x4,
     WEAPCLASS_GRENADE        = 0x5,
     WEAPCLASS_ROCKETLAUNCHER = 0x6,
     WEAPCLASS_TURRET         = 0x7,
     WEAPCLASS_NON_PLAYER     = 0x8,
     WEAPCLASS_ITEM           = 0x9,
     WEAPCLASS_NUM            = 0xA,
 };
 enum weapOverlayReticle_t : __int32
 {                                       // ...
     WEAPOVERLAYRETICLE_NONE      = 0x0,
     WEAPOVERLAYRETICLE_CROSSHAIR = 0x1,
     WEAPOVERLAYRETICLE_NUM       = 0x2,
 };
 enum weapStance_t : __int32
 {                                       // ...
     WEAPSTANCE_STAND = 0x0,
     WEAPSTANCE_DUCK  = 0x1,
     WEAPSTANCE_PRONE = 0x2,
     WEAPSTANCE_NUM   = 0x3,
 };
 enum weaponIconRatioType_t : __int32
 {                                       // ...
     WEAPON_ICON_RATIO_1TO1  = 0x0,
     WEAPON_ICON_RATIO_2TO1  = 0x1,
     WEAPON_ICON_RATIO_4TO1  = 0x2,
     WEAPON_ICON_RATIO_COUNT = 0x3,
 };
 enum print_msg_dest_t : __int32
 {                                       // ...
     CON_DEST_CONSOLE    = 0x0,
     CON_DEST_MINICON    = 0x1,
     CON_DEST_ERROR      = 0x2,
     CON_DEST_GAME_FIRST = 0x3,
     CON_DEST_GAME1      = 0x3,
     CON_DEST_GAME2      = 0x4,
     CON_DEST_GAME3      = 0x5,
     CON_DEST_GAME4      = 0x6,
     CON_DEST_GAME_LAST  = 0x6,
     CON_DEST_COUNT      = 0x7,
 };
 enum StanceState : __int32
 {                                       // ...
     CL_STANCE_STAND  = 0x0,
     CL_STANCE_CROUCH = 0x1,
     CL_STANCE_PRONE  = 0x2,
 };
 enum _tagINTERNETFEATURELIST : __int32
 {
     FEATURE_OBJECT_CACHING          = 0x0,
     FEATURE_ZONE_ELEVATION          = 0x1,
     FEATURE_MIME_HANDLING           = 0x2,
     FEATURE_MIME_SNIFFING           = 0x3,
     FEATURE_WINDOW_RESTRICTIONS     = 0x4,
     FEATURE_WEBOC_POPUPMANAGEMENT   = 0x5,
     FEATURE_BEHAVIORS               = 0x6,
     FEATURE_DISABLE_MK_PROTOCOL     = 0x7,
     FEATURE_LOCALMACHINE_LOCKDOWN   = 0x8,
     FEATURE_SECURITYBAND            = 0x9,
     FEATURE_RESTRICT_ACTIVEXINSTALL = 0xA,
     FEATURE_VALIDATE_NAVIGATE_URL   = 0xB,
     FEATURE_RESTRICT_FILEDOWNLOAD   = 0xC,
     FEATURE_ADDON_MANAGEMENT        = 0xD,
     FEATURE_PROTOCOL_LOCKDOWN       = 0xE,
     FEATURE_HTTP_USERNAME_PASSWORD_DISABLE = 0xF,
     FEATURE_SAFE_BINDTOOBJECT       = 0x10,
     FEATURE_UNC_SAVEDFILECHECK      = 0x11,
     FEATURE_GET_URL_DOM_FILEPATH_UNENCODED = 0x12,
     FEATURE_TABBED_BROWSING         = 0x13,
     FEATURE_SSLUX                   = 0x14,
     FEATURE_DISABLE_NAVIGATION_SOUNDS = 0x15,
     FEATURE_DISABLE_LEGACY_COMPRESSION = 0x16,
     FEATURE_FORCE_ADDR_AND_STATUS   = 0x17,
     FEATURE_XMLHTTP                 = 0x18,
     FEATURE_DISABLE_TELNET_PROTOCOL = 0x19,
     FEATURE_FEEDS                   = 0x1A,
     FEATURE_BLOCK_INPUT_PROMPTS     = 0x1B,
     FEATURE_ENTRY_COUNT             = 0x1C,
 };
 enum __MIDL_IUri_0001 : __int32
 {
     Uri_PROPERTY_ABSOLUTE_URI   = 0x0,
     Uri_PROPERTY_STRING_START   = 0x0,
     Uri_PROPERTY_AUTHORITY      = 0x1,
     Uri_PROPERTY_DISPLAY_URI    = 0x2,
     Uri_PROPERTY_DOMAIN         = 0x3,
     Uri_PROPERTY_EXTENSION      = 0x4,
     Uri_PROPERTY_FRAGMENT       = 0x5,
     Uri_PROPERTY_HOST           = 0x6,
     Uri_PROPERTY_PASSWORD       = 0x7,
     Uri_PROPERTY_PATH           = 0x8,
     Uri_PROPERTY_PATH_AND_QUERY = 0x9,
     Uri_PROPERTY_QUERY          = 0xA,
     Uri_PROPERTY_RAW_URI        = 0xB,
     Uri_PROPERTY_SCHEME_NAME    = 0xC,
     Uri_PROPERTY_USER_INFO      = 0xD,
     Uri_PROPERTY_USER_NAME      = 0xE,
     Uri_PROPERTY_STRING_LAST    = 0xE,
     Uri_PROPERTY_HOST_TYPE      = 0xF,
     Uri_PROPERTY_DWORD_START    = 0xF,
     Uri_PROPERTY_PORT           = 0x10,
     Uri_PROPERTY_SCHEME         = 0x11,
     Uri_PROPERTY_ZONE           = 0x12,
     Uri_PROPERTY_DWORD_LAST     = 0x12,
 };
 enum __MIDL_IUri_0002 : __int32
 {
     Uri_HOST_UNKNOWN = 0x0,
     Uri_HOST_DNS     = 0x1,
     Uri_HOST_IPV4    = 0x2,
     Uri_HOST_IPV6    = 0x3,
     Uri_HOST_IDN     = 0x4,
 };
 enum _D3DFORMAT : __int32
 {                                       // ...
     D3DFMT_UNKNOWN       = 0x0,
     D3DFMT_R8G8B8        = 0x14,
     D3DFMT_A8R8G8B8      = 0x15,
     D3DFMT_X8R8G8B8      = 0x16,
     D3DFMT_R5G6B5        = 0x17,
     D3DFMT_X1R5G5B5      = 0x18,
     D3DFMT_A1R5G5B5      = 0x19,
     D3DFMT_A4R4G4B4      = 0x1A,
     D3DFMT_R3G3B2        = 0x1B,
     D3DFMT_A8            = 0x1C,
     D3DFMT_A8R3G3B2      = 0x1D,
     D3DFMT_X4R4G4B4      = 0x1E,
     D3DFMT_A2B10G10R10   = 0x1F,
     D3DFMT_A8B8G8R8      = 0x20,
     D3DFMT_X8B8G8R8      = 0x21,
     D3DFMT_G16R16        = 0x22,
     D3DFMT_A2R10G10B10   = 0x23,
     D3DFMT_A16B16G16R16  = 0x24,
     D3DFMT_A8P8          = 0x28,
     D3DFMT_P8            = 0x29,
     D3DFMT_L8            = 0x32,
     D3DFMT_A8L8          = 0x33,
     D3DFMT_A4L4          = 0x34,
     D3DFMT_V8U8          = 0x3C,
     D3DFMT_L6V5U5        = 0x3D,
     D3DFMT_X8L8V8U8      = 0x3E,
     D3DFMT_Q8W8V8U8      = 0x3F,
     D3DFMT_V16U16        = 0x40,
     D3DFMT_A2W10V10U10   = 0x43,
     D3DFMT_D16_LOCKABLE  = 0x46,
     D3DFMT_D32           = 0x47,
     D3DFMT_D15S1         = 0x49,
     D3DFMT_D24S8         = 0x4B,
     D3DFMT_D24X8         = 0x4D,
     D3DFMT_D24X4S4       = 0x4F,
     D3DFMT_D16           = 0x50,
     D3DFMT_L16           = 0x51,
     D3DFMT_D32F_LOCKABLE = 0x52,
     D3DFMT_D24FS8        = 0x53,
     D3DFMT_VERTEXDATA    = 0x64,
     D3DFMT_INDEX16       = 0x65,
     D3DFMT_INDEX32       = 0x66,
     D3DFMT_Q16W16V16U16  = 0x6E,
     D3DFMT_R16F          = 0x6F,
     D3DFMT_G16R16F       = 0x70,
     D3DFMT_A16B16G16R16F = 0x71,
     D3DFMT_R32F          = 0x72,
     D3DFMT_G32R32F       = 0x73,
     D3DFMT_A32B32G32R32F = 0x74,
     D3DFMT_CxV8U8        = 0x75,
     D3DFMT_MULTI2_ARGB8  = 0x3154454D,
     D3DFMT_DXT1          = 0x31545844,
     D3DFMT_DXT2          = 0x32545844,
     D3DFMT_YUY2          = 0x32595559,
     D3DFMT_DXT3          = 0x33545844,
     D3DFMT_DXT4          = 0x34545844,
     D3DFMT_DXT5          = 0x35545844,
     D3DFMT_G8R8_G8B8     = 0x42475247,
     D3DFMT_R8G8_B8G8     = 0x47424752,
     D3DFMT_UYVY          = 0x59565955,
     D3DFMT_FORCE_DWORD   = 0x7FFFFFFF,
 };
 enum _D3DPOOL : __int32
 {                                       // ...
     D3DPOOL_DEFAULT     = 0x0,
     D3DPOOL_MANAGED     = 0x1,
     D3DPOOL_SYSTEMMEM   = 0x2,
     D3DPOOL_SCRATCH     = 0x3,
     D3DPOOL_FORCE_DWORD = 0x7FFFFFFF,
 };
 enum _D3DRESOURCETYPE : __int32
 {                                       // ...
     D3DRTYPE_SURFACE       = 0x1,
     D3DRTYPE_VOLUME        = 0x2,
     D3DRTYPE_TEXTURE       = 0x3,
     D3DRTYPE_VOLUMETEXTURE = 0x4,
     D3DRTYPE_CUBETEXTURE   = 0x5,
     D3DRTYPE_VERTEXBUFFER  = 0x6,
     D3DRTYPE_INDEXBUFFER   = 0x7,
     D3DRTYPE_FORCE_DWORD   = 0x7FFFFFFF,
 };
 enum _D3DXCLEANTYPE : __int32
 {
     D3DXCLEAN_BACKFACING     = 0x1,
     D3DXCLEAN_BOWTIES        = 0x2,
     D3DXCLEAN_SKINNING       = 0x1,
     D3DXCLEAN_OPTIMIZATION   = 0x1,
     D3DXCLEAN_SIMPLIFICATION = 0x3,
 };
 enum _D3DBLEND : __int32
 {
     D3DBLEND_ZERO            = 0x1,
     D3DBLEND_ONE             = 0x2,
     D3DBLEND_SRCCOLOR        = 0x3,
     D3DBLEND_INVSRCCOLOR     = 0x4,
     D3DBLEND_SRCALPHA        = 0x5,
     D3DBLEND_INVSRCALPHA     = 0x6,
     D3DBLEND_DESTALPHA       = 0x7,
     D3DBLEND_INVDESTALPHA    = 0x8,
     D3DBLEND_DESTCOLOR       = 0x9,
     D3DBLEND_INVDESTCOLOR    = 0xA,
     D3DBLEND_SRCALPHASAT     = 0xB,
     D3DBLEND_BOTHSRCALPHA    = 0xC,
     D3DBLEND_BOTHINVSRCALPHA = 0xD,
     D3DBLEND_BLENDFACTOR     = 0xE,
     D3DBLEND_INVBLENDFACTOR  = 0xF,
     D3DBLEND_FORCE_DWORD     = 0x7FFFFFFF,
 };
 enum _D3DTEXTUREADDRESS : __int32
 {                                       // ...
     D3DTADDRESS_WRAP        = 0x1,
     D3DTADDRESS_MIRROR      = 0x2,
     D3DTADDRESS_CLAMP       = 0x3,
     D3DTADDRESS_BORDER      = 0x4,
     D3DTADDRESS_MIRRORONCE  = 0x5,
     D3DTADDRESS_FORCE_DWORD = 0x7FFFFFFF,
 };
 enum _D3DPRIMITIVETYPE : __int32
 {
     D3DPT_POINTLIST     = 0x1,
     D3DPT_LINELIST      = 0x2,
     D3DPT_LINESTRIP     = 0x3,
     D3DPT_TRIANGLELIST  = 0x4,
     D3DPT_TRIANGLESTRIP = 0x5,
     D3DPT_TRIANGLEFAN   = 0x6,
     D3DPT_FORCE_DWORD   = 0x7FFFFFFF,
 };
 enum _D3DRENDERSTATETYPE : __int32
 {
     D3DRS_ZENABLE                    = 0x7,
     D3DRS_FILLMODE                   = 0x8,
     D3DRS_SHADEMODE                  = 0x9,
     D3DRS_ZWRITEENABLE               = 0xE,
     D3DRS_ALPHATESTENABLE            = 0xF,
     D3DRS_LASTPIXEL                  = 0x10,
     D3DRS_SRCBLEND                   = 0x13,
     D3DRS_DESTBLEND                  = 0x14,
     D3DRS_CULLMODE                   = 0x16,
     D3DRS_ZFUNC                      = 0x17,
     D3DRS_ALPHAREF                   = 0x18,
     D3DRS_ALPHAFUNC                  = 0x19,
     D3DRS_DITHERENABLE               = 0x1A,
     D3DRS_ALPHABLENDENABLE           = 0x1B,
     D3DRS_FOGENABLE                  = 0x1C,
     D3DRS_SPECULARENABLE             = 0x1D,
     D3DRS_FOGCOLOR                   = 0x22,
     D3DRS_FOGTABLEMODE               = 0x23,
     D3DRS_FOGSTART                   = 0x24,
     D3DRS_FOGEND                     = 0x25,
     D3DRS_FOGDENSITY                 = 0x26,
     D3DRS_RANGEFOGENABLE             = 0x30,
     D3DRS_STENCILENABLE              = 0x34,
     D3DRS_STENCILFAIL                = 0x35,
     D3DRS_STENCILZFAIL               = 0x36,
     D3DRS_STENCILPASS                = 0x37,
     D3DRS_STENCILFUNC                = 0x38,
     D3DRS_STENCILREF                 = 0x39,
     D3DRS_STENCILMASK                = 0x3A,
     D3DRS_STENCILWRITEMASK           = 0x3B,
     D3DRS_TEXTUREFACTOR              = 0x3C,
     D3DRS_WRAP0                      = 0x80,
     D3DRS_WRAP1                      = 0x81,
     D3DRS_WRAP2                      = 0x82,
     D3DRS_WRAP3                      = 0x83,
     D3DRS_WRAP4                      = 0x84,
     D3DRS_WRAP5                      = 0x85,
     D3DRS_WRAP6                      = 0x86,
     D3DRS_WRAP7                      = 0x87,
     D3DRS_CLIPPING                   = 0x88,
     D3DRS_LIGHTING                   = 0x89,
     D3DRS_AMBIENT                    = 0x8B,
     D3DRS_FOGVERTEXMODE              = 0x8C,
     D3DRS_COLORVERTEX                = 0x8D,
     D3DRS_LOCALVIEWER                = 0x8E,
     D3DRS_NORMALIZENORMALS           = 0x8F,
     D3DRS_DIFFUSEMATERIALSOURCE      = 0x91,
     D3DRS_SPECULARMATERIALSOURCE     = 0x92,
     D3DRS_AMBIENTMATERIALSOURCE      = 0x93,
     D3DRS_EMISSIVEMATERIALSOURCE     = 0x94,
     D3DRS_VERTEXBLEND                = 0x97,
     D3DRS_CLIPPLANEENABLE            = 0x98,
     D3DRS_POINTSIZE                  = 0x9A,
     D3DRS_POINTSIZE_MIN              = 0x9B,
     D3DRS_POINTSPRITEENABLE          = 0x9C,
     D3DRS_POINTSCALEENABLE           = 0x9D,
     D3DRS_POINTSCALE_A               = 0x9E,
     D3DRS_POINTSCALE_B               = 0x9F,
     D3DRS_POINTSCALE_C               = 0xA0,
     D3DRS_MULTISAMPLEANTIALIAS       = 0xA1,
     D3DRS_MULTISAMPLEMASK            = 0xA2,
     D3DRS_PATCHEDGESTYLE             = 0xA3,
     D3DRS_DEBUGMONITORTOKEN          = 0xA5,
     D3DRS_POINTSIZE_MAX              = 0xA6,
     D3DRS_INDEXEDVERTEXBLENDENABLE   = 0xA7,
     D3DRS_COLORWRITEENABLE           = 0xA8,
     D3DRS_TWEENFACTOR                = 0xAA,
     D3DRS_BLENDOP                    = 0xAB,
     D3DRS_POSITIONDEGREE             = 0xAC,
     D3DRS_NORMALDEGREE               = 0xAD,
     D3DRS_SCISSORTESTENABLE          = 0xAE,
     D3DRS_SLOPESCALEDEPTHBIAS        = 0xAF,
     D3DRS_ANTIALIASEDLINEENABLE      = 0xB0,
     D3DRS_MINTESSELLATIONLEVEL       = 0xB2,
     D3DRS_MAXTESSELLATIONLEVEL       = 0xB3,
     D3DRS_ADAPTIVETESS_X             = 0xB4,
     D3DRS_ADAPTIVETESS_Y             = 0xB5,
     D3DRS_ADAPTIVETESS_Z             = 0xB6,
     D3DRS_ADAPTIVETESS_W             = 0xB7,
     D3DRS_ENABLEADAPTIVETESSELLATION = 0xB8,
     D3DRS_TWOSIDEDSTENCILMODE        = 0xB9,
     D3DRS_CCW_STENCILFAIL            = 0xBA,
     D3DRS_CCW_STENCILZFAIL           = 0xBB,
     D3DRS_CCW_STENCILPASS            = 0xBC,
     D3DRS_CCW_STENCILFUNC            = 0xBD,
     D3DRS_COLORWRITEENABLE1          = 0xBE,
     D3DRS_COLORWRITEENABLE2          = 0xBF,
     D3DRS_COLORWRITEENABLE3          = 0xC0,
     D3DRS_BLENDFACTOR                = 0xC1,
     D3DRS_SRGBWRITEENABLE            = 0xC2,
     D3DRS_DEPTHBIAS                  = 0xC3,
     D3DRS_WRAP8                      = 0xC6,
     D3DRS_WRAP9                      = 0xC7,
     D3DRS_WRAP10                     = 0xC8,
     D3DRS_WRAP11                     = 0xC9,
     D3DRS_WRAP12                     = 0xCA,
     D3DRS_WRAP13                     = 0xCB,
     D3DRS_WRAP14                     = 0xCC,
     D3DRS_WRAP15                     = 0xCD,
     D3DRS_SEPARATEALPHABLENDENABLE   = 0xCE,
     D3DRS_SRCBLENDALPHA              = 0xCF,
     D3DRS_DESTBLENDALPHA             = 0xD0,
     D3DRS_BLENDOPALPHA               = 0xD1,
     D3DRS_FORCE_DWORD                = 0x7FFFFFFF,
 };
 enum _D3DSAMPLERSTATETYPE : __int32
 {
     D3DSAMP_ADDRESSU      = 0x1,
     D3DSAMP_ADDRESSV      = 0x2,
     D3DSAMP_ADDRESSW      = 0x3,
     D3DSAMP_BORDERCOLOR   = 0x4,
     D3DSAMP_MAGFILTER     = 0x5,
     D3DSAMP_MINFILTER     = 0x6,
     D3DSAMP_MIPFILTER     = 0x7,
     D3DSAMP_MIPMAPLODBIAS = 0x8,
     D3DSAMP_MAXMIPLEVEL   = 0x9,
     D3DSAMP_MAXANISOTROPY = 0xA,
     D3DSAMP_SRGBTEXTURE   = 0xB,
     D3DSAMP_ELEMENTINDEX  = 0xC,
     D3DSAMP_DMAPOFFSET    = 0xD,
     D3DSAMP_FORCE_DWORD   = 0x7FFFFFFF,
 };
 enum _D3DTEXTUREFILTERTYPE : __int32
 {                                       // ...
     D3DTEXF_NONE          = 0x0,        // ...
     D3DTEXF_POINT         = 0x1,        // ...
     D3DTEXF_LINEAR        = 0x2,        // ...
     D3DTEXF_ANISOTROPIC   = 0x3,
     D3DTEXF_PYRAMIDALQUAD = 0x6,
     D3DTEXF_GAUSSIANQUAD  = 0x7,
     D3DTEXF_FORCE_DWORD   = 0x7FFFFFFF,
 };
 enum _D3DDECLUSAGE : __int32
 {
     D3DDECLUSAGE_POSITION     = 0x0,
     D3DDECLUSAGE_BLENDWEIGHT  = 0x1,
     D3DDECLUSAGE_BLENDINDICES = 0x2,
     D3DDECLUSAGE_NORMAL       = 0x3,
     D3DDECLUSAGE_PSIZE        = 0x4,
     D3DDECLUSAGE_TEXCOORD     = 0x5,
     D3DDECLUSAGE_TANGENT      = 0x6,
     D3DDECLUSAGE_BINORMAL     = 0x7,
     D3DDECLUSAGE_TESSFACTOR   = 0x8,
     D3DDECLUSAGE_POSITIONT    = 0x9,
     D3DDECLUSAGE_COLOR        = 0xA,
     D3DDECLUSAGE_FOG          = 0xB,
     D3DDECLUSAGE_DEPTH        = 0xC,
     D3DDECLUSAGE_SAMPLE       = 0xD,
 };
 enum _D3DDECLTYPE : __int32
 {
     D3DDECLTYPE_FLOAT1    = 0x0,
     D3DDECLTYPE_FLOAT2    = 0x1,
     D3DDECLTYPE_FLOAT3    = 0x2,
     D3DDECLTYPE_FLOAT4    = 0x3,
     D3DDECLTYPE_D3DCOLOR  = 0x4,
     D3DDECLTYPE_UBYTE4    = 0x5,
     D3DDECLTYPE_SHORT2    = 0x6,
     D3DDECLTYPE_SHORT4    = 0x7,
     D3DDECLTYPE_UBYTE4N   = 0x8,
     D3DDECLTYPE_SHORT2N   = 0x9,
     D3DDECLTYPE_SHORT4N   = 0xA,
     D3DDECLTYPE_USHORT2N  = 0xB,
     D3DDECLTYPE_USHORT4N  = 0xC,
     D3DDECLTYPE_UDEC3     = 0xD,
     D3DDECLTYPE_DEC3N     = 0xE,
     D3DDECLTYPE_FLOAT16_2 = 0xF,
     D3DDECLTYPE_FLOAT16_4 = 0x10,
     D3DDECLTYPE_UNUSED    = 0x11,
 };
 enum _D3DLIGHTTYPE : __int32
 {                                       // ...
     D3DLIGHT_POINT       = 0x1,
     D3DLIGHT_SPOT        = 0x2,
     D3DLIGHT_DIRECTIONAL = 0x3,
     D3DLIGHT_FORCE_DWORD = 0x7FFFFFFF,
 };
 enum _D3DMULTISAMPLE_TYPE : __int32
 {                                       // ...
     D3DMULTISAMPLE_NONE        = 0x0,
     D3DMULTISAMPLE_NONMASKABLE = 0x1,
     D3DMULTISAMPLE_2_SAMPLES   = 0x2,
     D3DMULTISAMPLE_3_SAMPLES   = 0x3,
     D3DMULTISAMPLE_4_SAMPLES   = 0x4,
     D3DMULTISAMPLE_5_SAMPLES   = 0x5,
     D3DMULTISAMPLE_6_SAMPLES   = 0x6,
     D3DMULTISAMPLE_7_SAMPLES   = 0x7,
     D3DMULTISAMPLE_8_SAMPLES   = 0x8,
     D3DMULTISAMPLE_9_SAMPLES   = 0x9,
     D3DMULTISAMPLE_10_SAMPLES  = 0xA,
     D3DMULTISAMPLE_11_SAMPLES  = 0xB,
     D3DMULTISAMPLE_12_SAMPLES  = 0xC,
     D3DMULTISAMPLE_13_SAMPLES  = 0xD,
     D3DMULTISAMPLE_14_SAMPLES  = 0xE,
     D3DMULTISAMPLE_15_SAMPLES  = 0xF,
     D3DMULTISAMPLE_16_SAMPLES  = 0x10,
     D3DMULTISAMPLE_FORCE_DWORD = 0x7FFFFFFF,
 };
 enum _D3DSWAPEFFECT : __int32
 {                                       // ...
     D3DSWAPEFFECT_DISCARD     = 0x1,
     D3DSWAPEFFECT_FLIP        = 0x2,
     D3DSWAPEFFECT_COPY        = 0x3,
     D3DSWAPEFFECT_FORCE_DWORD = 0x7FFFFFFF,
 };
 enum _MAX_FVF_DECL_SIZE : __int32
 {
     MAX_FVF_DECL_SIZE = 0x41,
 };
 enum _D3DXREGISTER_SET : __int32
 {                                       // ...
     D3DXRS_BOOL        = 0x0,
     D3DXRS_INT4        = 0x1,
     D3DXRS_FLOAT4      = 0x2,
     D3DXRS_SAMPLER     = 0x3,
     D3DXRS_FORCE_DWORD = 0x7FFFFFFF,
 };
 enum _D3DXPARAMETER_CLASS : __int32
 {                                       // ...
     D3DXPC_SCALAR         = 0x0,
     D3DXPC_VECTOR         = 0x1,
     D3DXPC_MATRIX_ROWS    = 0x2,
     D3DXPC_MATRIX_COLUMNS = 0x3,
     D3DXPC_OBJECT         = 0x4,
     D3DXPC_STRUCT         = 0x5,
     D3DXPC_FORCE_DWORD    = 0x7FFFFFFF,
 };
 enum _D3DXPARAMETER_TYPE : __int32
 {                                       // ...
     D3DXPT_VOID           = 0x0,
     D3DXPT_BOOL           = 0x1,
     D3DXPT_INT            = 0x2,
     D3DXPT_FLOAT          = 0x3,
     D3DXPT_STRING         = 0x4,
     D3DXPT_TEXTURE        = 0x5,
     D3DXPT_TEXTURE1D      = 0x6,
     D3DXPT_TEXTURE2D      = 0x7,
     D3DXPT_TEXTURE3D      = 0x8,
     D3DXPT_TEXTURECUBE    = 0x9,
     D3DXPT_SAMPLER        = 0xA,
     D3DXPT_SAMPLER1D      = 0xB,
     D3DXPT_SAMPLER2D      = 0xC,
     D3DXPT_SAMPLER3D      = 0xD,
     D3DXPT_SAMPLERCUBE    = 0xE,
     D3DXPT_PIXELSHADER    = 0xF,
     D3DXPT_VERTEXSHADER   = 0x10,
     D3DXPT_PIXELFRAGMENT  = 0x11,
     D3DXPT_VERTEXFRAGMENT = 0x12,
     D3DXPT_FORCE_DWORD    = 0x7FFFFFFF,
 };
 enum _D3DBACKBUFFER_TYPE : __int32
 {
     D3DBACKBUFFER_TYPE_MONO        = 0x0,
     D3DBACKBUFFER_TYPE_LEFT        = 0x1,
     D3DBACKBUFFER_TYPE_RIGHT       = 0x2,
     D3DBACKBUFFER_TYPE_FORCE_DWORD = 0x7FFFFFFF,
 };
 enum _D3DCULL : __int32
 {
     D3DCULL_NONE        = 0x1,
     D3DCULL_CW          = 0x2,
     D3DCULL_CCW         = 0x3,
     D3DCULL_FORCE_DWORD = 0x7FFFFFFF,
 };
 enum _D3DSTATEBLOCKTYPE : __int32
 {
     D3DSBT_ALL         = 0x1,
     D3DSBT_PIXELSTATE  = 0x2,
     D3DSBT_VERTEXSTATE = 0x3,
     D3DSBT_FORCE_DWORD = 0x7FFFFFFF,
 };
 enum _D3DDEGREETYPE : __int32
 {                                       // ...
     D3DDEGREE_LINEAR      = 0x1,
     D3DDEGREE_QUADRATIC   = 0x2,
     D3DDEGREE_CUBIC       = 0x3,
     D3DDEGREE_QUINTIC     = 0x5,
     D3DDEGREE_FORCE_DWORD = 0x7FFFFFFF,
 };
 enum _D3DBASISTYPE : __int32
 {                                       // ...
     D3DBASIS_BEZIER      = 0x0,
     D3DBASIS_BSPLINE     = 0x1,
     D3DBASIS_CATMULL_ROM = 0x2,
     D3DBASIS_FORCE_DWORD = 0x7FFFFFFF,
 };
 enum _D3DDECLMETHOD : __int32
 {
     D3DDECLMETHOD_DEFAULT          = 0x0,
     D3DDECLMETHOD_PARTIALU         = 0x1,
     D3DDECLMETHOD_PARTIALV         = 0x2,
     D3DDECLMETHOD_CROSSUV          = 0x3,
     D3DDECLMETHOD_UV               = 0x4,
     D3DDECLMETHOD_LOOKUP           = 0x5,
     D3DDECLMETHOD_LOOKUPPRESAMPLED = 0x6,
 };
 enum _D3DQUERYTYPE : __int32
 {
     D3DQUERYTYPE_VCACHE            = 0x4,
     D3DQUERYTYPE_RESOURCEMANAGER   = 0x5,
     D3DQUERYTYPE_VERTEXSTATS       = 0x6,
     D3DQUERYTYPE_EVENT             = 0x8,
     D3DQUERYTYPE_OCCLUSION         = 0x9,
     D3DQUERYTYPE_TIMESTAMP         = 0xA,
     D3DQUERYTYPE_TIMESTAMPDISJOINT = 0xB,
     D3DQUERYTYPE_TIMESTAMPFREQ     = 0xC,
     D3DQUERYTYPE_PIPELINETIMINGS   = 0xD,
     D3DQUERYTYPE_INTERFACETIMINGS  = 0xE,
     D3DQUERYTYPE_VERTEXTIMINGS     = 0xF,
     D3DQUERYTYPE_PIXELTIMINGS      = 0x10,
     D3DQUERYTYPE_BANDWIDTHTIMINGS  = 0x11,
     D3DQUERYTYPE_CACHEUTILIZATION  = 0x12,
 };
 enum _D3DTEXTURESTAGESTATETYPE : __int32
 {
     D3DTSS_COLOROP               = 0x1,
     D3DTSS_COLORARG1             = 0x2,
     D3DTSS_COLORARG2             = 0x3,
     D3DTSS_ALPHAOP               = 0x4,
     D3DTSS_ALPHAARG1             = 0x5,
     D3DTSS_ALPHAARG2             = 0x6,
     D3DTSS_BUMPENVMAT00          = 0x7,
     D3DTSS_BUMPENVMAT01          = 0x8,
     D3DTSS_BUMPENVMAT10          = 0x9,
     D3DTSS_BUMPENVMAT11          = 0xA,
     D3DTSS_TEXCOORDINDEX         = 0xB,
     D3DTSS_BUMPENVLSCALE         = 0x16,
     D3DTSS_BUMPENVLOFFSET        = 0x17,
     D3DTSS_TEXTURETRANSFORMFLAGS = 0x18,
     D3DTSS_COLORARG0             = 0x1A,
     D3DTSS_ALPHAARG0             = 0x1B,
     D3DTSS_RESULTARG             = 0x1C,
     D3DTSS_CONSTANT              = 0x20,
     D3DTSS_FORCE_DWORD           = 0x7FFFFFFF,
 };
 enum _D3DDEVTYPE : __int32
 {                                       // ...
     D3DDEVTYPE_HAL         = 0x1,
     D3DDEVTYPE_REF         = 0x2,
     D3DDEVTYPE_SW          = 0x3,
     D3DDEVTYPE_NULLREF     = 0x4,
     D3DDEVTYPE_FORCE_DWORD = 0x7FFFFFFF,
 };
 enum _D3DTRANSFORMSTATETYPE : __int32
 {
     D3DTS_VIEW        = 0x2,
     D3DTS_PROJECTION  = 0x3,
     D3DTS_TEXTURE0    = 0x10,
     D3DTS_TEXTURE1    = 0x11,
     D3DTS_TEXTURE2    = 0x12,
     D3DTS_TEXTURE3    = 0x13,
     D3DTS_TEXTURE4    = 0x14,
     D3DTS_TEXTURE5    = 0x15,
     D3DTS_TEXTURE6    = 0x16,
     D3DTS_TEXTURE7    = 0x17,
     D3DTS_FORCE_DWORD = 0x7FFFFFFF,
 };
 enum _D3DCUBEMAP_FACES : __int32
 {                                       // ...
     D3DCUBEMAP_FACE_POSITIVE_X  = 0x0,
     D3DCUBEMAP_FACE_NEGATIVE_X  = 0x1,
     D3DCUBEMAP_FACE_POSITIVE_Y  = 0x2,
     D3DCUBEMAP_FACE_NEGATIVE_Y  = 0x3,
     D3DCUBEMAP_FACE_POSITIVE_Z  = 0x4,
     D3DCUBEMAP_FACE_NEGATIVE_Z  = 0x5,
     D3DCUBEMAP_FACE_FORCE_DWORD = 0x7FFFFFFF,
 };
 enum _D3DXINCLUDE_TYPE : __int32
 {                                       // ...
     D3DXINC_LOCAL       = 0x0,
     D3DXINC_SYSTEM      = 0x1,
     D3DXINC_FORCE_DWORD = 0x7FFFFFFF,
 };
 enum entityType_t : __int32
 {                                       // ...
     ET_GENERAL         = 0x0,
     ET_PLAYER          = 0x1,
     ET_PLAYER_CORPSE   = 0x2,
     ET_ITEM            = 0x3,
     ET_MISSILE         = 0x4,
     ET_INVISIBLE       = 0x5,
     ET_SCRIPTMOVER     = 0x6,
     ET_SOUND_BLEND     = 0x7,
     ET_FX              = 0x8,
     ET_LOOP_FX         = 0x9,
     ET_PRIMARY_LIGHT   = 0xA,
     ET_MG42            = 0xB,
     ET_HELICOPTER      = 0xC,
     ET_PLANE           = 0xD,
     ET_VEHICLE         = 0xE,
     ET_VEHICLE_COLLMAP = 0xF,
     ET_VEHICLE_CORPSE  = 0x10,
     ET_EVENTS          = 0x11,
 };
 enum PhysicsGeomType : __int32
 {                                       // ...
     PHYS_GEOM_NONE       = 0x0,
     PHYS_GEOM_BOX        = 0x1,
     PHYS_GEOM_BRUSHMODEL = 0x2,
     PHYS_GEOM_BRUSH      = 0x3,
     PHYS_GEOM_CYLINDER   = 0x4,
     PHYS_GEOM_CAPSULE    = 0x5,
     PHYS_GEOM_COUNT      = 0x6,
 };
 enum PhysWorld : __int32
 {                                       // ...
     PHYS_WORLD_DYNENT  = 0x0,
     PHYS_WORLD_FX      = 0x1,
     PHYS_WORLD_RAGDOLL = 0x2,
     PHYS_WORLD_COUNT   = 0x3,
 };
 enum PacketDataType : __int32
 {                                       // ...
     ANALYZE_SNAPSHOT_DELTAENTITY     = 0x0,
     ANALYZE_SNAPSHOT_NEWENTITY       = 0x1,
     ANALYZE_SNAPSHOT_REMOVEDENTITY   = 0x2,
     ANALYZE_SNAPSHOT_ALLENTITIES     = 0x3,
     ANALYZE_SNAPSHOT_TEMPENTITY      = 0x4,
     ANALYZE_SNAPSHOT_ALLTEMPENTITIES = 0x5,
     ANALYZE_SNAPSHOT_DELTACLIENT     = 0x6,
     ANALYZE_SNAPSHOT_NEWCLIENT       = 0x7,
     ANALYZE_SNAPSHOT_REMOVEDCLIENT   = 0x8,
     ANALYZE_SNAPSHOT_ALLCLIENTS      = 0x9,
     ANALYZE_SNAPSHOT_DELTAPLAYERSTATE = 0xA,
     ANALYZE_SNAPSHOT_NODELTAPLAYERSTATE = 0xB,
     ANALYZE_SNAPSHOT_SERVERCMDS      = 0xC,
     ANALYZE_SNAPSHOT_DATATYPE_COUNT  = 0xD,
 };
 enum JointType : __int32
 {                                       // ...
     RAGDOLL_JOINT_NONE   = 0x0,
     RAGDOLL_JOINT_HINGE  = 0x1,
     RAGDOLL_JOINT_SWIVEL = 0x2,
 };
 enum BodyState : __int32
 {                                       // ...
     BS_DEAD             = 0x0,
     BS_DOBJ_WAIT        = 0x1,
     BS_VELOCITY_CAPTURE = 0x2,
     BS_TUNNEL_TEST      = 0x3,
     BS_RUNNING          = 0x4,
     BS_IDLE             = 0x5,
     RAGDOLL_NUM_STATES  = 0x6,
 };
 enum PacketEntityType : __int32
 {                                       // ...
     ANALYZE_DATATYPE_ENTITYTYPE_GENERALENTITY = 0x0,
     ANALYZE_DATATYPE_ENTITYTYPE_PLAYERENTITY = 0x1,
     ANALYZE_DATATYPE_ENTITYTYPE_PLAYERCORPSEENTITY = 0x2,
     ANALYZE_DATATYPE_ENTITYTYPE_ITEMENTITY = 0x3,
     ANALYZE_DATATYPE_ENTITYTYPE_MISSILEENTITY = 0x4,
     ANALYZE_DATATYPE_ENTITYTYPE_INVISIBLEENTITY = 0x5,
     ANALYZE_DATATYPE_ENTITYTYPE_SCRIPTMOVERENTITY = 0x6,
     ANALYZE_DATATYPE_ENTITYTYPE_SOUNDBLENDENTITY = 0x7,
     ANALYZE_DATATYPE_ENTITYTYPE_FXENTITY = 0x8,
     ANALYZE_DATATYPE_ENTITYTYPE_LOOPFXENTITY = 0x9,
     ANALYZE_DATATYPE_ENTITYTYPE_PRIMARYLIGHTENTITY = 0xA,
     ANALYZE_DATATYPE_ENTITYTYPE_MG42ENTITY = 0xB,
     ANALYZE_DATATYPE_ENTITYTYPE_HELICOPTER = 0xC,
     ANALYZE_DATATYPE_ENTITYTYPE_PLANE = 0xD,
     ANALYZE_DATATYPE_ENTITYTYPE_VEHICLE = 0xE,
     ANALYZE_DATATYPE_ENTITYTYPE_VEHICLE_COLLMAP = 0xF,
     ANALYZE_DATATYPE_ENTITYTYPE_VEHICLE_CORPSE = 0x10,
     ANALYZE_DATATYPE_ENTITYTYPE_TEMPENTITY = 0x11,
     ANALYZE_DATATYPE_ENTITYTYPE_ARCHIVEDENTITY = 0x12,
     ANALYZE_DATATYPE_ENTITYTYPE_CLIENTSTATE = 0x13,
     ANALYZE_DATATYPE_ENTITYTYPE_PLAYERSTATE = 0x14,
     ANALYZE_DATATYPE_ENTITYTYPE_HUDELEM = 0x15,
     ANALYZE_DATATYPE_ENTITYTYPE_BASELINE = 0x16,
     ANALYZE_DATATYPE_ENTITYTYPE_COUNT = 0x17,
 };
 enum $B875B530F6029225B4CDAFA404599205 : __int32
 {
     MT_NODE_SIZE = 0xC,
 };
 enum $5E8F5620978C9634B2D943E366E690AD : __int32
 {
     MEMORY_NODE_BITS        = 0x10,
     MEMORY_NODE_COUNT       = 0x10000,
     MT_SIZE                 = 0xC0000,
     REFSTRING_STRING_OFFSET = 0x4,
 };
 enum $ED63795E6FF48C6A7B5587AA6371F628 : __int32
 {
     STRINGLIST_SIZE = 0x4E20,
 };
 enum $EFF2716B50E4F576C6C65324CAA504E4 : __int32
 {
     HUD_STANCE_STAND  = 0x0,
     HUD_STANCE_CROUCH = 0x1,
     HUD_STANCE_PRONE  = 0x2,
     HUD_STANCE_FLASH  = 0x3,
     HUD_STANCE_NUM    = 0x4,
 };
 enum $CC14BC328FC1C38C12056C4EA3A4FB7C : __int32
 {
     HUD_OBJ_SAME = 0x0,
     HUD_OBJ_NUM  = 0x1,
 };
 enum $89D62A82FE5792D28DF05F010601BF6A : __int32
 {
     FRIEND_ICON      = 0x0,
     FRIEND_CHAT_ICON = 0x1,
     FRIEND_ICON_NUM  = 0x2,
 };
 enum DemoType : __int32
 {                                       // ...
     DEMO_TYPE_NONE   = 0x0,
     DEMO_TYPE_CLIENT = 0x1,
     DEMO_TYPE_SERVER = 0x2,
 };
 enum CubemapShot : __int32
 {                                       // ...
     CUBEMAPSHOT_NONE  = 0x0,
     CUBEMAPSHOT_RIGHT = 0x1,
     CUBEMAPSHOT_LEFT  = 0x2,
     CUBEMAPSHOT_BACK  = 0x3,
     CUBEMAPSHOT_FRONT = 0x4,
     CUBEMAPSHOT_UP    = 0x5,
     CUBEMAPSHOT_DOWN  = 0x6,
     CUBEMAPSHOT_COUNT = 0x7,
 };
 enum InvalidCmdHintType : __int32
 {                                       // ...
     INVALID_CMD_NONE                 = 0x0,
     INVALID_CMD_NO_AMMO_BULLETS      = 0x1,
     INVALID_CMD_NO_AMMO_FRAG_GRENADE = 0x2,
     INVALID_CMD_NO_AMMO_SPECIAL_GRENADE = 0x3,
     INVALID_CMD_NO_AMMO_FLASH_GRENADE = 0x4,
     INVALID_CMD_STAND_BLOCKED        = 0x5,
     INVALID_CMD_CROUCH_BLOCKED       = 0x6,
     INVALID_CMD_TARGET_TOO_CLOSE     = 0x7,
     INVALID_CMD_LOCKON_REQUIRED      = 0x8,
     INVALID_CMD_NOT_ENOUGH_CLEARANCE = 0x9,
 };
 enum itemType_t : __int32
 {                                       // ...
     IT_BAD    = 0x0,
     IT_WEAPON = 0x1,
 };
 enum visionSetLerpStyle_t : __int32
 {                                       // ...
     VISIONSETLERP_UNDEFINED        = 0x0,
     VISIONSETLERP_NONE             = 0x1,
     VISIONSETLERP_TO_LINEAR        = 0x2,
     VISIONSETLERP_TO_SMOOTH        = 0x3,
     VISIONSETLERP_BACKFORTH_LINEAR = 0x4,
     VISIONSETLERP_BACKFORTH_SMOOTH = 0x5,
 };
 enum visionSetMode_t : __int32
 {                                       // ...
     VISIONSETMODE_NAKED = 0x0,
     VISIONSETMODE_NIGHT = 0x1,
     VISIONSETMODECOUNT  = 0x2,
 };
 enum ShockViewTypes : __int32
 {                                       // ...
     SHELLSHOCK_VIEWTYPE_BLURRED = 0x0,
     SHELLSHOCK_VIEWTYPE_FLASHED = 0x1,
     SHELLSHOCK_VIEWTYPE_NONE    = 0x2,
 };
 enum $CC59B31D17E0CFCD114B160E78D83A17 : __int32
 {
     dxBodyFlagFiniteRotation     = 0x1,
     dxBodyFlagFiniteRotationAxis = 0x2,
     dxBodyDisabled               = 0x4,
     dxBodyNoGravity              = 0x8,
     dxBodyAutoDisable            = 0x10,
 };
 enum $F327E4DDE01754FD99507DCF346AA95E : __int32
 {
     dMaxUserClasses = 0x5,
 };
 enum WorkerCmdType : __int32
 {                                       // ...
     WRKCMD_FIRST_FRONTEND          = 0x0,
     WRKCMD_UPDATE_FX_SPOT_LIGHT    = 0x0,
     WRKCMD_UPDATE_FX_NON_DEPENDENT = 0x1,
     WRKCMD_UPDATE_FX_REMAINING     = 0x2,
     WRKCMD_DPVS_CELL_STATIC        = 0x3,
     WRKCMD_DPVS_CELL_SCENE_ENT     = 0x4,
     WRKCMD_DPVS_CELL_DYN_MODEL     = 0x5,
     WRKCMD_DPVS_CELL_DYN_BRUSH     = 0x6,
     WRKCMD_DPVS_ENTITY             = 0x7,
     WRKCMD_ADD_SCENE_ENT           = 0x8,
     WRKCMD_SPOT_SHADOW_ENT         = 0x9,
     WRKCMD_SHADOW_COOKIE           = 0xA,
     WRKCMD_BOUNDS_ENT_DELAYED      = 0xB,
     WRKCMD_SKIN_ENT_DELAYED        = 0xC,
     WRKCMD_GENERATE_FX_VERTS       = 0xD,
     WRKCMD_GENERATE_MARK_VERTS     = 0xE,
     WRKCMD_SKIN_CACHED_STATICMODEL = 0xF,
     WRKCMD_SKIN_XMODEL             = 0x10,
     WRKCMD_COUNT                   = 0x11,
 };
 enum $8427758577D2E2FDBE7AB1097236C612 : __int32
 {
     dSphereClass        = 0x0,
     dBoxClass           = 0x1,
     dCCylinderClass     = 0x2,
     dCylinderClass      = 0x3,
     dPlaneClass         = 0x4,
     dRayClass           = 0x5,
     dGeomTransformClass = 0x6,
     dTriMeshClass       = 0x7,
     dFirstSpaceClass    = 0x8,
     dSimpleSpaceClass   = 0x8,
     dHashSpaceClass     = 0x9,
     dQuadTreeSpaceClass = 0xA,
     dLastSpaceClass     = 0xA,
     dFirstUserClass     = 0xB,
     dLastUserClass      = 0xF,
     dGeomNumClasses     = 0x10,
 };
 enum $9CAFA6EAED10A294A1852FE861A49BBD : __int32
 {
     d_ERR_UNKNOWN = 0x0,
     d_ERR_IASSERT = 0x1,
     d_ERR_UASSERT = 0x2,
     d_ERR_LCP     = 0x3,
 };
 enum $941432A230907D1AC0114D442D0BF7DB : __int32
 {
     dJointTypeNone      = 0x0,
     dJointTypeBall      = 0x1,
     dJointTypeHinge     = 0x2,
     dJointTypeSlider    = 0x3,
     dJointTypeContact   = 0x4,
     dJointTypeUniversal = 0x5,
     dJointTypeFixed     = 0x6,
     dJointTypeNull      = 0x7,
     dJointTypeAMotor    = 0x8,
 };
 enum $BA569D45583336F9FEB28B502F6EAC13 : __int32
 {
     GEOM_DIRTY       = 0x1,
     GEOM_AABB_BAD    = 0x2,
     GEOM_PLACEABLE   = 0x4,
     GEOM_ENABLED     = 0x8,
     RAY_FIRSTCONTACT = 0x10000,
     RAY_BACKFACECULL = 0x20000,
     RAY_CLOSEST_HIT  = 0x40000,
 };
 enum $2BCE212DD45A2FB4D7D797F14D2D527D : __int32
 {
     dJOINT_INGROUP   = 0x1,
     dJOINT_REVERSE   = 0x2,
     dJOINT_TWOBODIES = 0x4,
 };
 enum $55B8B0A285A1BFD79E503E417B0339CA : __int32
 {
     dContactMu2       = 0x1,
     dContactFDir1     = 0x2,
     dContactBounce    = 0x4,
     dContactSoftERP   = 0x8,
     dContactSoftCFM   = 0x10,
     dContactMotion1   = 0x20,
     dContactMotion2   = 0x40,
     dContactSlip1     = 0x80,
     dContactSlip2     = 0x100,
     dContactApprox0   = 0x0,
     dContactApprox1_1 = 0x1000,
     dContactApprox1_2 = 0x2000,
     dContactApprox1   = 0x3000,
 };
 enum $D01A1CDCB33B69DDB667D23F832E9520 : __int32
 {
     dParamLoStop         = 0x0,
     dParamHiStop         = 0x1,
     dParamVel            = 0x2,
     dParamFMax           = 0x3,
     dParamFudgeFactor    = 0x4,
     dParamBounce         = 0x5,
     dParamCFM            = 0x6,
     dParamStopERP        = 0x7,
     dParamStopCFM        = 0x8,
     dParamSuspensionERP  = 0x9,
     dParamSuspensionCFM  = 0xA,
     dParamLoStop2        = 0x100,
     dParamHiStop2        = 0x101,
     dParamVel2           = 0x102,
     dParamFMax2          = 0x103,
     dParamFudgeFactor2   = 0x104,
     dParamBounce2        = 0x105,
     dParamCFM2           = 0x106,
     dParamStopERP2       = 0x107,
     dParamStopCFM2       = 0x108,
     dParamSuspensionERP2 = 0x109,
     dParamSuspensionCFM2 = 0x10A,
     dParamLoStop3        = 0x200,
     dParamHiStop3        = 0x201,
     dParamVel3           = 0x202,
     dParamFMax3          = 0x203,
     dParamFudgeFactor3   = 0x204,
     dParamBounce3        = 0x205,
     dParamCFM3           = 0x206,
     dParamStopERP3       = 0x207,
     dParamStopCFM3       = 0x208,
     dParamSuspensionERP3 = 0x209,
     dParamSuspensionCFM3 = 0x20A,
     dParamGroup          = 0x100,
 };
 enum $1ACA5A4A22A5A5367FE9A61B769D7D07 : __int32
 {
     dAMotorUser  = 0x0,
     dAMotorEuler = 0x1,
 };
 enum physStuckState_t : __int32
 {                                       // ...
     PHYS_OBJ_STATE_POSSIBLY_STUCK = 0x0,
     PHYS_OBJ_STATE_STUCK          = 0x1,
     PHYS_OBJ_STATE_FREE           = 0x2,
 };
 enum $186D85288018174BCB2002F430260BDF : __int32
 {
     FILEDATA_AITYPE               = 0x0,
     FILEDATA_ANIMSCRIPTS_TRAVERSE = 0x1,
     FILEDATA_XANIMLIST            = 0x2,
     FILEDATA_XMODELSURFS          = 0x3,
     FILEDATA_XMODELPARTS          = 0x4,
     FILEDATA_XMODEL               = 0x5,
     FILEDATA_XANIM                = 0x6,
     FILEDATA_PHYSPRESET           = 0x7,
     FILEDATA_XMODELPIECES         = 0x8,
 };
 enum fsMode_t : __int32
 {                                       // ...
     FS_READ        = 0x0,
     FS_WRITE       = 0x1,
     FS_APPEND      = 0x2,
     FS_APPEND_SYNC = 0x3,
 };
 enum csParseFieldType_t : __int32
 {
     CSPFT_STRING                  = 0x0,
     CSPFT_STRING_MAX_STRING_CHARS = 0x1,
     CSPFT_STRING_MAX_QPATH        = 0x2,
     CSPFT_STRING_MAX_OSPATH       = 0x3,
     CSPFT_INT                     = 0x4,
     CSPFT_QBOOLEAN                = 0x5,
     CSPFT_FLOAT                   = 0x6,
     CSPFT_MILLISECONDS            = 0x7,
     CSPFT_FX                      = 0x8,
     CSPFT_XMODEL                  = 0x9,
     CSPFT_MATERIAL                = 0xA,
     CSPFT_SOUND                   = 0xB,
     CSPFT_NUM_BASE_FIELD_TYPES    = 0xC,
 };
 enum $87E5AE5B7F4B76C5118673BF899C605F : __int32
 {
     FX_MARK_VISUALS_CLASS_MODEL_INDEX = 0x0,
     FX_MARK_VISUALS_CLASS_WORLD_INDEX = 0x1,
     FX_MARK_VISUALS_CLASS_COUNT = 0x2,
 };
 enum $8D81743C8337C1FEB890982DB1B23A0B : __int32
 {
     FX_ELEM_SPAWN_RELATIVE_TO_EFFECT = 0x2,
     FX_ELEM_SPAWN_FRUSTUM_CULL       = 0x4,
     FX_ELEM_RUNNER_USES_RAND_ROT     = 0x8,
     FX_ELEM_SPAWN_OFFSET_NONE        = 0x0,
     FX_ELEM_SPAWN_OFFSET_SPHERE      = 0x10,
     FX_ELEM_SPAWN_OFFSET_CYLINDER    = 0x20,
     FX_ELEM_SPAWN_OFFSET_MASK        = 0x30,
     FX_ELEM_RUN_RELATIVE_TO_WORLD    = 0x0,
     FX_ELEM_RUN_RELATIVE_TO_SPAWN    = 0x40,
     FX_ELEM_RUN_RELATIVE_TO_EFFECT   = 0x80,
     FX_ELEM_RUN_RELATIVE_TO_OFFSET   = 0xC0,
     FX_ELEM_RUN_MASK                 = 0xC0,
     FX_ELEM_USE_COLLISION            = 0x100,
     FX_ELEM_DIE_ON_TOUCH             = 0x200,
     FX_ELEM_DRAW_PAST_FOG            = 0x400,
     FX_ELEM_DRAW_WITH_VIEWMODEL      = 0x800,
     FX_ELEM_BLOCK_SIGHT              = 0x1000,
     FX_ELEM_HAS_VELOCITY_GRAPH_LOCAL = 0x1000000,
     FX_ELEM_HAS_VELOCITY_GRAPH_WORLD = 0x2000000,
     FX_ELEM_HAS_GRAVITY              = 0x4000000,
     FX_ELEM_USE_MODEL_PHYSICS        = 0x8000000,
     FX_ELEM_NONUNIFORM_SCALE         = 0x10000000,
 };
 enum $390C8AB619C5D27F330E671BCD9D689E : __int32
 {
     FX_ELEM_TYPE_SPRITE_BILLBOARD = 0x0,
     FX_ELEM_TYPE_SPRITE_ORIENTED  = 0x1,
     FX_ELEM_TYPE_TAIL             = 0x2,
     FX_ELEM_TYPE_TRAIL            = 0x3,
     FX_ELEM_TYPE_CLOUD            = 0x4,
     FX_ELEM_TYPE_MODEL            = 0x5,
     FX_ELEM_TYPE_OMNI_LIGHT       = 0x6,
     FX_ELEM_TYPE_SPOT_LIGHT       = 0x7,
     FX_ELEM_TYPE_SOUND            = 0x8,
     FX_ELEM_TYPE_DECAL            = 0x9,
     FX_ELEM_TYPE_RUNNER           = 0xA,
     FX_ELEM_TYPE_COUNT            = 0xB,
     FX_ELEM_TYPE_LAST_SPRITE      = 0x3,
     FX_ELEM_TYPE_LAST_DRAWN       = 0x7,
 };
 enum $B358E6FACC67EA52B2F36FF1015D54CD : __int32
 {
     FX_ATLAS_START_FIXED       = 0x0,
     FX_ATLAS_START_RANDOM      = 0x1,
     FX_ATLAS_START_INDEXED     = 0x2,
     FX_ATLAS_START_MASK        = 0x3,
     FX_ATLAS_PLAY_OVER_LIFE    = 0x4,
     FX_ATLAS_LOOP_ONLY_N_TIMES = 0x8,
 };
 enum hudelem_update_t : __int32
 {                                       // ...
     HUDELEM_UPDATE_ARCHIVAL = 0x1,
     HUDELEM_UPDATE_CURRENT  = 0x2,
     HUDELEM_UPDATE_ARCHIVAL_AND_CURRENT = 0x3,
 };
 enum DynEntityDrawType : __int32
 {                                       // ...
     DYNENT_DRAW_MODEL = 0x0,
     DYNENT_DRAW_BRUSH = 0x1,
     DYNENT_DRAW_COUNT = 0x2,
 };
 enum DynEntityCollType : __int32
 {                                       // ...
     DYNENT_COLL_CLIENT_FIRST = 0x0,
     DYNENT_COLL_CLIENT_MODEL = 0x0,
     DYNENT_COLL_CLIENT_BRUSH = 0x1,
     DYNENT_COLL_COUNT        = 0x2,
 };
 enum $B7C75F5EC8C61F46B3FEFC285D8D85F1 : __int32
 {
     GEOM_CLASS_BRUSHMODEL = 0xB,
     GEOM_CLASS_BRUSH      = 0xC,
     GEOM_CLASS_CYLINDER   = 0xD,
     GEOM_CLASS_CAPSULE    = 0xE,
     GEOM_CLASS_WORLD      = 0xF,
 };
 enum clientConnected_t : __int32
 {                                       // ...
     CON_DISCONNECTED = 0x0,
     CON_CONNECTING   = 0x1,
     CON_CONNECTED    = 0x2,
 };
 enum sessionState_t : __int32
 {                                       // ...
     SESS_STATE_PLAYING      = 0x0,
     SESS_STATE_DEAD         = 0x1,
     SESS_STATE_SPECTATOR    = 0x2,
     SESS_STATE_INTERMISSION = 0x3,
 };
 enum DynEntityType : __int32
 {                                       // ...
     DYNENT_TYPE_INVALID  = 0x0,
     DYNENT_TYPE_CLUTTER  = 0x1,
     DYNENT_TYPE_DESTRUCT = 0x2,
     DYNENT_TYPE_COUNT    = 0x3,
 };
 enum MissileStage : __int32
 {                                       // ...
     MISSILESTAGE_SOFTLAUNCH = 0x0,
     MISSILESTAGE_ASCENT     = 0x1,
     MISSILESTAGE_DESCENT    = 0x2,
 };
 enum MissileFlightMode : __int32
 {                                       // ...
     MISSILEFLIGHTMODE_TOP    = 0x0,
     MISSILEFLIGHTMODE_DIRECT = 0x1,
 };
 enum PolyOrientation : __int32
 {                                       // ...
     POLY_COUNTERCLOCKWISE = 0x0,
     POLY_CLOCKWISE        = 0x1,
     POLY_ERROR            = 0x2,
 };
 enum SA_AttrTarget : __int32
 {
     SA_All              = 0xFFFF,
     SA_Assembly         = 0x1,
     SA_Class            = 0x4,
     SA_Constructor      = 0x20,
     SA_Delegate         = 0x1000,
     SA_Enum             = 0x10,
     SA_Event            = 0x200,
     SA_Field            = 0x100,
     SA_GenericParameter = 0x4000,
     SA_Interface        = 0x400,
     SA_Method           = 0x40,
     SA_Module           = 0x2,
     SA_Parameter        = 0x800,
     SA_Property         = 0x80,
     SA_ReturnValue      = 0x2000,
     SA_Struct           = 0x8,
     SA_This             = 0x8000,
 };
 enum SA_AccessType : __int32
 {                                       // ...
     SA_NoAccess  = 0x0,
     SA_Read      = 0x1,
     SA_Write     = 0x2,
     SA_ReadWrite = 0x3,
 };
 enum SA_YesNoMaybe : __int32
 {                                       // ...
     SA_No    = 0xFFF0001,
     SA_Maybe = 0xFFF0010,
     SA_Yes   = 0xFFF0100,
 };
 enum $C5F67ECC1FFA3223BD26960E4427EC66 : __int32
 {
     FS_SEEK_CUR = 0x0,
     FS_SEEK_END = 0x1,
     FS_SEEK_SET = 0x2,
 };
 enum inflate_block_mode : __int32
 {                                       // ...
     TYPE   = 0x0,
     LENS   = 0x1,
     STORED = 0x2,
     TABLE  = 0x3,
     BTREE  = 0x4,
     DTREE  = 0x5,
     CODES  = 0x6,
     DRY    = 0x7,
     DONE   = 0x8,
     BAD    = 0x9,
 };
 typedef inflate_block_mode inflate_mode; // ...
 enum inflate_codes_mode : __int32
 {                                       // ...
     START   = 0x0,
     LEN     = 0x1,
     LENEXT  = 0x2,
     DIST    = 0x3,
     DISTEXT = 0x4,
     COPY    = 0x5,
     LIT     = 0x6,
     WASH    = 0x7,
     END     = 0x8,
     BADCODE = 0x9,
 };
 enum block_state : __int32
 {                                       // ...
     need_more      = 0x0,
     block_done     = 0x1,
     finish_started = 0x2,
     finish_done    = 0x3,
 };
 enum $CCF6E80BA446CF589314277232B7BBF3 : __int32
 {
     XANIM_SIZE       = 0x10,
     DOBJ_CREATE_SIZE = 0x64,
     XSURFACE_SIZE    = 0x38,
 };
 enum XModelLodRampType : __int32
 {                                       // ...
     XMODEL_LOD_RAMP_RIGID   = 0x0,
     XMODEL_LOD_RAMP_SKINNED = 0x1,
     XMODEL_LOD_RAMP_COUNT   = 0x2,
 };
 enum $B2D98C46E2C171890FE0C5C8095A3495 : __int32
 {
     XANIM_VERSION         = 0x11,
     XMODEL_VERSION        = 0x19,
     XMODEL_PIECES_VERSION = 0x1,
 };
 enum $E681A048096CB9E4B36F1590F98F8E52 : __int32
 {
     IMG_CATEGORY_UNKNOWN         = 0x0,
     IMG_CATEGORY_AUTO_GENERATED  = 0x1,
     IMG_CATEGORY_LIGHTMAP        = 0x2,
     IMG_CATEGORY_LOAD_FROM_FILE  = 0x3,
     IMG_CATEGORY_RAW             = 0x4,
     IMG_CATEGORY_FIRST_UNMANAGED = 0x5,
     IMG_CATEGORY_WATER           = 0x5,
     IMG_CATEGORY_RENDERTARGET    = 0x6,
     IMG_CATEGORY_TEMP            = 0x7,
 };
 enum $92364187413C9A0320C404614F91083D : __int32
 {
     PICMIP_PLATFORM_USED    = 0x0,
     PICMIP_PLATFORM_MINSPEC = 0x1,
     PICMIP_PLATFORM_COUNT   = 0x2,
 };
 enum $87092D832E2F1FCFCA4B27C8561FF982 : __int32
 {
     MT_TYPE_EMPTY                 = 0x0,
     MT_TYPE_THREAD                = 0x1,
     MT_TYPE_VECTOR                = 0x2,
     MT_TYPE_ANIM_NOTETRACK        = 0x3,
     MT_TYPE_ANIM_TREE             = 0x4,
     MT_TYPE_SMALL_ANIM_TREE       = 0x5,
     MT_TYPE_EXTERNAL              = 0x6,
     MT_TYPE_TEMP                  = 0x7,
     MT_TYPE_SURFACE               = 0x8,
     MT_TYPE_ANIM_PART             = 0x9,
     MT_TYPE_MODEL_PART            = 0xA,
     MT_TYPE_MODEL_PART_MAP        = 0xB,
     MT_TYPE_MODEL_DUPLICATE_PARTS = 0xC,
     MT_TYPE_MODEL_LIST            = 0xD,
     MT_TYPE_SCRIPT_PARSE          = 0xE,
     MT_TYPE_SCRIPT_STRING         = 0xF,
     MT_TYPE_CLASS                 = 0x10,
     MT_TYPE_TAG_INFO              = 0x11,
     MT_TYPE_ANIMSCRIPTED          = 0x12,
     MT_TYPE_CONFIG_STRING         = 0x13,
     MT_TYPE_DEBUGGER_STRING       = 0x14,
     MT_TYPE_GENERIC               = 0x15,
     MT_TYPE_COUNT                 = 0x16,
 };
 enum $CF43A0974C3EB2799D9079D7BDE5CE8D : __int32
 {
     FOG_NONE    = 0x0,
     FOG_SERVER  = 0x1,
     FOG_CURRENT = 0x2,
     FOG_LAST    = 0x3,
     FOG_TARGET  = 0x4,
     FOG_COUNT   = 0x5,
 };
 enum $78AFE9152D51E9B54BBF22F90DA08BBB : __int32
 {
     TEXTURE_FILTER_DISABLED = 0x0,
     TEXTURE_FILTER_NEAREST  = 0x1,
     TEXTURE_FILTER_LINEAR   = 0x2,
     TEXTURE_FILTER_ANISO2X  = 0x3,
     TEXTURE_FILTER_ANISO4X  = 0x4,
 };
 enum $DC3485627FCD5339F6A2D1EEC8B74E34 : __int32
 {
     SAMPLER_FILTER_SHIFT    = 0x0,
     SAMPLER_FILTER_NEAREST  = 0x1,
     SAMPLER_FILTER_LINEAR   = 0x2,
     SAMPLER_FILTER_ANISO2X  = 0x3,
     SAMPLER_FILTER_ANISO4X  = 0x4,
     SAMPLER_FILTER_MASK     = 0x7,
     SAMPLER_MIPMAP_SHIFT    = 0x3,
     SAMPLER_MIPMAP_DISABLED = 0x0,
     SAMPLER_MIPMAP_NEAREST  = 0x8,
     SAMPLER_MIPMAP_LINEAR   = 0x10,
     SAMPLER_MIPMAP_COUNT    = 0x3,
     SAMPLER_MIPMAP_MASK     = 0x18,
     SAMPLER_CLAMP_U_SHIFT   = 0x5,
     SAMPLER_CLAMP_V_SHIFT   = 0x6,
     SAMPLER_CLAMP_W_SHIFT   = 0x7,
     SAMPLER_CLAMP_U         = 0x20,
     SAMPLER_CLAMP_V         = 0x40,
     SAMPLER_CLAMP_W         = 0x80,
     SAMPLER_CLAMP_MASK      = 0xE0,
 };
 enum $F18C17676CCABCF3A7521CF0683F7501 : __int32
 {
     IMAGE_TRACK_MISC        = 0x0,
     IMAGE_TRACK_DEBUG       = 0x1,
     IMAGE_TRACK_TEXTURENAME = 0x2,
     IMAGE_TRACK_UI          = 0x3,
     IMAGE_TRACK_LIGHTMAP    = 0x4,
     IMAGE_TRACK_LIGHT       = 0x5,
     IMAGE_TRACK_FX          = 0x6,
     IMAGE_TRACK_HUD         = 0x7,
     IMAGE_TRACK_MODEL       = 0x8,
     IMAGE_TRACK_WORLD       = 0x9,
     IMAGE_TRACK_COUNT       = 0xA,
 };
 enum MaterialTextureSource : __int32
 {                                       // ...
     TEXTURE_SRC_CODE_BLACK           = 0x0, // ...
     TEXTURE_SRC_CODE_WHITE           = 0x1, // ...
     TEXTURE_SRC_CODE_IDENTITY_NORMAL_MAP = 0x2, // ...
     TEXTURE_SRC_CODE_MODEL_LIGHTING  = 0x3, // ...
     TEXTURE_SRC_CODE_LIGHTMAP_PRIMARY = 0x4, // ...
     TEXTURE_SRC_CODE_LIGHTMAP_SECONDARY = 0x5, // ...
     TEXTURE_SRC_CODE_SHADOWCOOKIE    = 0x6, // ...
     TEXTURE_SRC_CODE_SHADOWMAP_SUN   = 0x7, // ...
     TEXTURE_SRC_CODE_SHADOWMAP_SPOT  = 0x8, // ...
     TEXTURE_SRC_CODE_FEEDBACK        = 0x9, // ...
     TEXTURE_SRC_CODE_RESOLVED_POST_SUN = 0xA, // ...
     TEXTURE_SRC_CODE_RESOLVED_SCENE  = 0xB, // ...
     TEXTURE_SRC_CODE_POST_EFFECT_0   = 0xC, // ...
     TEXTURE_SRC_CODE_POST_EFFECT_1   = 0xD, // ...
     TEXTURE_SRC_CODE_SKY             = 0xE, // ...
     TEXTURE_SRC_CODE_LIGHT_ATTENUATION = 0xF, // ...
     TEXTURE_SRC_CODE_DYNAMIC_SHADOWS = 0x10, // ...
     TEXTURE_SRC_CODE_OUTDOOR         = 0x11, // ...
     TEXTURE_SRC_CODE_FLOATZ          = 0x12, // ...
     TEXTURE_SRC_CODE_PROCESSED_FLOATZ = 0x13, // ...
     TEXTURE_SRC_CODE_RAW_FLOATZ      = 0x14, // ...
     TEXTURE_SRC_CODE_CASE_TEXTURE    = 0x15,
     TEXTURE_SRC_CODE_CINEMATIC_Y     = 0x16, // ...
     TEXTURE_SRC_CODE_CINEMATIC_CR    = 0x17, // ...
     TEXTURE_SRC_CODE_CINEMATIC_CB    = 0x18, // ...
     TEXTURE_SRC_CODE_CINEMATIC_A     = 0x19, // ...
     TEXTURE_SRC_CODE_REFLECTION_PROBE = 0x1A, // ...
     TEXTURE_SRC_CODE_COUNT           = 0x1B,
 };
 enum GfxBlend : __int32
 {
     GFXS_BLEND_DISABLED     = 0x0,
     GFXS_BLEND_ZERO         = 0x1,
     GFXS_BLEND_ONE          = 0x2,
     GFXS_BLEND_SRCCOLOR     = 0x3,
     GFXS_BLEND_INVSRCCOLOR  = 0x4,
     GFXS_BLEND_SRCALPHA     = 0x5,
     GFXS_BLEND_INVSRCALPHA  = 0x6,
     GFXS_BLEND_DESTALPHA    = 0x7,
     GFXS_BLEND_INVDESTALPHA = 0x8,
     GFXS_BLEND_DESTCOLOR    = 0x9,
     GFXS_BLEND_INVDESTCOLOR = 0xA,
     GFXS_BLEND_MASK         = 0xF,
 };
 enum GfxBlendOp : __int32
 {
     GFXS_BLENDOP_DISABLED    = 0x0,
     GFXS_BLENDOP_ADD         = 0x1,
     GFXS_BLENDOP_SUBTRACT    = 0x2,
     GFXS_BLENDOP_REVSUBTRACT = 0x3,
     GFXS_BLENDOP_MIN         = 0x4,
     GFXS_BLENDOP_MAX         = 0x5,
     GFXS_BLENDOP_MASK        = 0x7,
 };
 enum $5D1712DF4D603403B9E48E83EDF32C0E : __int32
 {
     GFXS0_SRCBLEND_RGB_SHIFT         = 0x0,
     GFXS0_SRCBLEND_RGB_MASK          = 0xF,
     GFXS0_DSTBLEND_RGB_SHIFT         = 0x4,
     GFXS0_DSTBLEND_RGB_MASK          = 0xF0,
     GFXS0_BLENDOP_RGB_SHIFT          = 0x8,
     GFXS0_BLENDOP_RGB_MASK           = 0x700,
     GFXS0_BLEND_RGB_MASK             = 0x7FF,
     GFXS0_ATEST_DISABLE              = 0x800,
     GFXS0_ATEST_GT_0                 = 0x1000,
     GFXS0_ATEST_LT_128               = 0x2000,
     GFXS0_ATEST_GE_128               = 0x3000,
     GFXS0_ATEST_MASK                 = 0x3000,
     GFXS0_CULL_SHIFT                 = 0xE,
     GFXS0_CULL_NONE                  = 0x4000,
     GFXS0_CULL_BACK                  = 0x8000,
     GFXS0_CULL_FRONT                 = 0xC000,
     GFXS0_CULL_MASK                  = 0xC000,
     GFXS0_SRCBLEND_ALPHA_SHIFT       = 0x10,
     GFXS0_SRCBLEND_ALPHA_MASK        = 0xF0000,
     GFXS0_DSTBLEND_ALPHA_SHIFT       = 0x14,
     GFXS0_DSTBLEND_ALPHA_MASK        = 0xF00000,
     GFXS0_BLENDOP_ALPHA_SHIFT        = 0x18,
     GFXS0_BLENDOP_ALPHA_MASK         = 0x7000000,
     GFXS0_BLEND_ALPHA_MASK           = 0x7FF0000,
     GFXS0_COLORWRITE_RGB             = 0x8000000,
     GFXS0_COLORWRITE_ALPHA           = 0x10000000,
     GFXS0_COLORWRITE_MASK            = 0x18000000,
     GFXS0_POLYMODE_LINE              = 0x80000000,
     GFXS1_DEPTHWRITE                 = 0x1,
     GFXS1_DEPTHTEST_DISABLE          = 0x2,
     GFXS1_DEPTHTEST_SHIFT            = 0x2,
     GFXS1_DEPTHTEST_ALWAYS           = 0x0,
     GFXS1_DEPTHTEST_LESS             = 0x4,
     GFXS1_DEPTHTEST_EQUAL            = 0x8,
     GFXS1_DEPTHTEST_LESSEQUAL        = 0xC,
     GFXS1_DEPTHTEST_MASK             = 0xC,
     GFXS1_POLYGON_OFFSET_SHIFT       = 0x4,
     GFXS1_POLYGON_OFFSET_0           = 0x0,
     GFXS1_POLYGON_OFFSET_1           = 0x10,
     GFXS1_POLYGON_OFFSET_2           = 0x20,
     GFXS1_POLYGON_OFFSET_SHADOWMAP   = 0x30,
     GFXS1_POLYGON_OFFSET_MASK        = 0x30,
     GFXS1_STENCIL_FRONT_ENABLE       = 0x40,
     GFXS1_STENCIL_BACK_ENABLE        = 0x80,
     GFXS1_STENCIL_MASK               = 0xC0,
     GFXS1_STENCIL_FRONT_PASS_SHIFT   = 0x8,
     GFXS1_STENCIL_FRONT_FAIL_SHIFT   = 0xB,
     GFXS1_STENCIL_FRONT_ZFAIL_SHIFT  = 0xE,
     GFXS1_STENCIL_FRONT_FUNC_SHIFT   = 0x11,
     GFXS1_STENCIL_FRONT_MASK         = 0xFFF00,
     GFXS1_STENCIL_BACK_PASS_SHIFT    = 0x14,
     GFXS1_STENCIL_BACK_FAIL_SHIFT    = 0x17,
     GFXS1_STENCIL_BACK_ZFAIL_SHIFT   = 0x1A,
     GFXS1_STENCIL_BACK_FUNC_SHIFT    = 0x1D,
     GFXS1_STENCIL_BACK_MASK          = 0xFFF00000,
     GFXS1_STENCILFUNC_FRONTBACK_MASK = 0xE00E0000,
     GFXS1_STENCILOP_FRONTBACK_MASK   = 0x1FF1FF00,
 };
 enum $468271FF1901306E39AF422E484DED00 : __int32
 {
     STATE_FLAG_CULL_BACK           = 0x1,
     STATE_FLAG_CULL_FRONT          = 0x2,
     STATE_FLAG_DECAL               = 0x4,
     STATE_FLAG_WRITES_DEPTH        = 0x8,
     STATE_FLAG_USES_DEPTH_BUFFER   = 0x10,
     STATE_FLAG_USES_STENCIL_BUFFER = 0x20,
     STATE_FLAG_CULL_BACK_SHADOW    = 0x40,
     STATE_FLAG_CULL_FRONT_SHADOW   = 0x80,
 };
 enum GfxTextureOp : __int32
 {
     GFXS_TEXOP_DISABLE             = 0x0,
     GFXS_TEXOP_SELECTARG1          = 0x1,
     GFXS_TEXOP_SELECTARG2          = 0x2,
     GFXS_TEXOP_MODULATE            = 0x3,
     GFXS_TEXOP_MODULATE2X          = 0x4,
     GFXS_TEXOP_MODULATE4X          = 0x5,
     GFXS_TEXOP_ADD                 = 0x6,
     GFXS_TEXOP_ADDSIGNED           = 0x7,
     GFXS_TEXOP_ADDSIGNED2X         = 0x8,
     GFXS_TEXOP_SUBTRACT            = 0x9,
     GFXS_TEXOP_ADDSMOOTH           = 0xA,
     GFXS_TEXOP_BLENDDIFFUSEALPHA   = 0xB,
     GFXS_TEXOP_BLENDTEXTUREALPHA   = 0xC,
     GFXS_TEXOP_BLENDFACTORALPHA    = 0xD,
     GFXS_TEXOP_BLENDTEXTUREALPHAPM = 0xE,
     GFXS_TEXOP_BLENDCURRENTALPHA   = 0xF,
     GFXS_TEXOP_MODULATEALPHA_ADDCOLOR = 0x10,
     GFXS_TEXOP_MODULATECOLOR_ADDALPHA = 0x11,
     GFXS_TEXOP_MODULATEINVALPHA_ADDCOLOR = 0x12,
     GFXS_TEXOP_MODULATEINVCOLOR_ADDALPHA = 0x13,
     GFXS_TEXOP_DOTPRODUCT3         = 0x14,
     GFXS_TEXOP_MULTIPLYADD         = 0x15,
     GFXS_TEXOP_LERP                = 0x16,
     GFXS_TEXOP_COUNT               = 0x17,
     GFXS_TEXOP_BITS                = 0x5,
     GFXS_TEXOP_MASK                = 0x1F,
 };
 enum GfxTextureArg : __int32
 {
     GFXS_TEXARG_CONSTANT        = 0x0,
     GFXS_TEXARG_CURRENT         = 0x1,
     GFXS_TEXARG_COLOR_0         = 0x2,
     GFXS_TEXARG_COLOR_1         = 0x3,
     GFXS_TEXARG_TEMP            = 0x4,
     GFXS_TEXARG_TEXTURE         = 0x5,
     GFXS_TEXARG_TFACTOR         = 0x6,
     GFXS_TEXARG_COUNT           = 0x7,
     GFXS_TEXARG_BASE_BITS       = 0x3,
     GFXS_TEXARG_BASE_MASK       = 0x7,
     GFXS_TEXARG_COMPLEMENT      = 0x8,
     GFXS_TEXARG_ALPHA_REPLICATE = 0x10,
     GFXS_TEXARG_BITS            = 0x5,
     GFXS_TEXARG_MASK            = 0x1F,
 };
 enum GfxTextureFunc : __int32
 {
     GFXS_TEXFUNC_OP_SHIFT   = 0x0,
     GFXS_TEXFUNC_DEST_SHIFT = 0x5,
     GFXS_TEXFUNC_ARG1_SHIFT = 0xA,
     GFXS_TEXFUNC_ARG2_SHIFT = 0xF,
     GFXS_TEXFUNC_ARG0_SHIFT = 0x14,
 };
 enum GfxRenderTargetId : __int32
 {                                       // ...
     R_RENDERTARGET_SAVED_SCREEN      = 0x0,
     R_RENDERTARGET_FRAME_BUFFER      = 0x1,
     R_RENDERTARGET_SCENE             = 0x2,
     R_RENDERTARGET_RESOLVED_POST_SUN = 0x3,
     R_RENDERTARGET_RESOLVED_SCENE    = 0x4,
     R_RENDERTARGET_FLOAT_Z           = 0x5,
     R_RENDERTARGET_DYNAMICSHADOWS    = 0x6,
     R_RENDERTARGET_PINGPONG_0        = 0x7,
     R_RENDERTARGET_PINGPONG_1        = 0x8,
     R_RENDERTARGET_SHADOWCOOKIE      = 0x9,
     R_RENDERTARGET_SHADOWCOOKIE_BLUR = 0xA,
     R_RENDERTARGET_POST_EFFECT_0     = 0xB,
     R_RENDERTARGET_POST_EFFECT_1     = 0xC,
     R_RENDERTARGET_SHADOWMAP_SUN     = 0xD,
     R_RENDERTARGET_SHADOWMAP_SPOT    = 0xE,
     R_RENDERTARGET_COUNT             = 0xF,
     R_RENDERTARGET_NONE              = 0x10,
 };
 enum $03401F5063F140792915F3E4BD6A646F : __int32
 {
     CONST_SRC_CODE_MAYBE_DIRTY_PS_BEGIN = 0x0,
     CONST_SRC_CODE_LIGHT_POSITION    = 0x0,
     CONST_SRC_CODE_LIGHT_DIFFUSE     = 0x1,
     CONST_SRC_CODE_LIGHT_SPECULAR    = 0x2,
     CONST_SRC_CODE_LIGHT_SPOTDIR     = 0x3,
     CONST_SRC_CODE_LIGHT_SPOTFACTORS = 0x4,
     CONST_SRC_CODE_NEARPLANE_ORG     = 0x5,
     CONST_SRC_CODE_NEARPLANE_DX      = 0x6,
     CONST_SRC_CODE_NEARPLANE_DY      = 0x7,
     CONST_SRC_CODE_SHADOW_PARMS      = 0x8,
     CONST_SRC_CODE_SHADOWMAP_POLYGON_OFFSET = 0x9,
     CONST_SRC_CODE_RENDER_TARGET_SIZE = 0xA,
     CONST_SRC_CODE_LIGHT_FALLOFF_PLACEMENT = 0xB,
     CONST_SRC_CODE_DOF_EQUATION_VIEWMODEL_AND_FAR_BLUR = 0xC,
     CONST_SRC_CODE_DOF_EQUATION_SCENE = 0xD,
     CONST_SRC_CODE_DOF_LERP_SCALE    = 0xE,
     CONST_SRC_CODE_DOF_LERP_BIAS     = 0xF,
     CONST_SRC_CODE_DOF_ROW_DELTA     = 0x10,
     CONST_SRC_CODE_PARTICLE_CLOUD_COLOR = 0x11,
     CONST_SRC_CODE_GAMETIME          = 0x12,
     CONST_SRC_CODE_MAYBE_DIRTY_PS_END = 0x13,
     CONST_SRC_CODE_ALWAYS_DIRTY_PS_BEGIN = 0x13,
     CONST_SRC_CODE_PIXEL_COST_FRACS  = 0x13,
     CONST_SRC_CODE_PIXEL_COST_DECODE = 0x14,
     CONST_SRC_CODE_FILTER_TAP_0      = 0x15,
     CONST_SRC_CODE_FILTER_TAP_1      = 0x16,
     CONST_SRC_CODE_FILTER_TAP_2      = 0x17,
     CONST_SRC_CODE_FILTER_TAP_3      = 0x18,
     CONST_SRC_CODE_FILTER_TAP_4      = 0x19,
     CONST_SRC_CODE_FILTER_TAP_5      = 0x1A,
     CONST_SRC_CODE_FILTER_TAP_6      = 0x1B,
     CONST_SRC_CODE_FILTER_TAP_7      = 0x1C,
     CONST_SRC_CODE_COLOR_MATRIX_R    = 0x1D,
     CONST_SRC_CODE_COLOR_MATRIX_G    = 0x1E,
     CONST_SRC_CODE_COLOR_MATRIX_B    = 0x1F,
     CONST_SRC_CODE_ALWAYS_DIRTY_PS_END = 0x20,
     CONST_SRC_CODE_NEVER_DIRTY_PS_BEGIN = 0x20,
     CONST_SRC_CODE_SHADOWMAP_SWITCH_PARTITION = 0x20,
     CONST_SRC_CODE_SHADOWMAP_SCALE   = 0x21,
     CONST_SRC_CODE_ZNEAR             = 0x22,
     CONST_SRC_CODE_SUN_POSITION      = 0x23,
     CONST_SRC_CODE_SUN_DIFFUSE       = 0x24,
     CONST_SRC_CODE_SUN_SPECULAR      = 0x25,
     CONST_SRC_CODE_LIGHTING_LOOKUP_SCALE = 0x26,
     CONST_SRC_CODE_DEBUG_BUMPMAP     = 0x27,
     CONST_SRC_CODE_MATERIAL_COLOR    = 0x28,
     CONST_SRC_CODE_FOG               = 0x29,
     CONST_SRC_CODE_FOG_COLOR         = 0x2A,
     CONST_SRC_CODE_GLOW_SETUP        = 0x2B,
     CONST_SRC_CODE_GLOW_APPLY        = 0x2C,
     CONST_SRC_CODE_COLOR_BIAS        = 0x2D,
     CONST_SRC_CODE_COLOR_TINT_BASE   = 0x2E,
     CONST_SRC_CODE_COLOR_TINT_DELTA  = 0x2F,
     CONST_SRC_CODE_OUTDOOR_FEATHER_PARMS = 0x30,
     CONST_SRC_CODE_ENVMAP_PARMS      = 0x31,
     CONST_SRC_CODE_SPOT_SHADOWMAP_PIXEL_ADJUST = 0x32,
     CONST_SRC_CODE_CLIP_SPACE_LOOKUP_SCALE = 0x33,
     CONST_SRC_CODE_CLIP_SPACE_LOOKUP_OFFSET = 0x34,
     CONST_SRC_CODE_PARTICLE_CLOUD_MATRIX = 0x35,
     CONST_SRC_CODE_DEPTH_FROM_CLIP   = 0x36,
     CONST_SRC_CODE_CODE_MESH_ARG_0   = 0x37,
     CONST_SRC_CODE_CODE_MESH_ARG_1   = 0x38,
     CONST_SRC_CODE_CODE_MESH_ARG_LAST = 0x38,
     CONST_SRC_CODE_BASE_LIGHTING_COORDS = 0x39,
     CONST_SRC_CODE_NEVER_DIRTY_PS_END = 0x3A,
     CONST_SRC_CODE_COUNT_FLOAT4      = 0x3A,
     CONST_SRC_FIRST_CODE_MATRIX      = 0x3A,
     CONST_SRC_CODE_WORLD_MATRIX      = 0x3A,
     CONST_SRC_CODE_INVERSE_WORLD_MATRIX = 0x3B,
     CONST_SRC_CODE_TRANSPOSE_WORLD_MATRIX = 0x3C,
     CONST_SRC_CODE_INVERSE_TRANSPOSE_WORLD_MATRIX = 0x3D,
     CONST_SRC_CODE_VIEW_MATRIX       = 0x3E,
     CONST_SRC_CODE_INVERSE_VIEW_MATRIX = 0x3F,
     CONST_SRC_CODE_TRANSPOSE_VIEW_MATRIX = 0x40,
     CONST_SRC_CODE_INVERSE_TRANSPOSE_VIEW_MATRIX = 0x41,
     CONST_SRC_CODE_PROJECTION_MATRIX = 0x42,
     CONST_SRC_CODE_INVERSE_PROJECTION_MATRIX = 0x43,
     CONST_SRC_CODE_TRANSPOSE_PROJECTION_MATRIX = 0x44,
     CONST_SRC_CODE_INVERSE_TRANSPOSE_PROJECTION_MATRIX = 0x45,
     CONST_SRC_CODE_WORLD_VIEW_MATRIX = 0x46,
     CONST_SRC_CODE_INVERSE_WORLD_VIEW_MATRIX = 0x47,
     CONST_SRC_CODE_TRANSPOSE_WORLD_VIEW_MATRIX = 0x48,
     CONST_SRC_CODE_INVERSE_TRANSPOSE_WORLD_VIEW_MATRIX = 0x49,
     CONST_SRC_CODE_VIEW_PROJECTION_MATRIX = 0x4A,
     CONST_SRC_CODE_INVERSE_VIEW_PROJECTION_MATRIX = 0x4B,
     CONST_SRC_CODE_TRANSPOSE_VIEW_PROJECTION_MATRIX = 0x4C,
     CONST_SRC_CODE_INVERSE_TRANSPOSE_VIEW_PROJECTION_MATRIX = 0x4D,
     CONST_SRC_CODE_WORLD_VIEW_PROJECTION_MATRIX = 0x4E,
     CONST_SRC_CODE_INVERSE_WORLD_VIEW_PROJECTION_MATRIX = 0x4F,
     CONST_SRC_CODE_TRANSPOSE_WORLD_VIEW_PROJECTION_MATRIX = 0x50,
     CONST_SRC_CODE_INVERSE_TRANSPOSE_WORLD_VIEW_PROJECTION_MATRIX = 0x51,
     CONST_SRC_CODE_SHADOW_LOOKUP_MATRIX = 0x52,
     CONST_SRC_CODE_INVERSE_SHADOW_LOOKUP_MATRIX = 0x53,
     CONST_SRC_CODE_TRANSPOSE_SHADOW_LOOKUP_MATRIX = 0x54,
     CONST_SRC_CODE_INVERSE_TRANSPOSE_SHADOW_LOOKUP_MATRIX = 0x55,
     CONST_SRC_CODE_WORLD_OUTDOOR_LOOKUP_MATRIX = 0x56,
     CONST_SRC_CODE_INVERSE_WORLD_OUTDOOR_LOOKUP_MATRIX = 0x57,
     CONST_SRC_CODE_TRANSPOSE_WORLD_OUTDOOR_LOOKUP_MATRIX = 0x58,
     CONST_SRC_CODE_INVERSE_TRANSPOSE_WORLD_OUTDOOR_LOOKUP_MATRIX = 0x59,
     CONST_SRC_TOTAL_COUNT            = 0x5A,
     CONST_SRC_NONE                   = 0x5B,
 };
 enum $091E6234341635363F651E71B7EC01B7 : __int32
 {
     STREAM_SRC_POSITION           = 0x0,
     STREAM_SRC_COLOR              = 0x1,
     STREAM_SRC_TEXCOORD_0         = 0x2,
     STREAM_SRC_NORMAL             = 0x3,
     STREAM_SRC_TANGENT            = 0x4,
     STREAM_SRC_OPTIONAL_BEGIN     = 0x5,
     STREAM_SRC_PRE_OPTIONAL_BEGIN = 0x4,
     STREAM_SRC_TEXCOORD_1         = 0x5,
     STREAM_SRC_TEXCOORD_2         = 0x6,
     STREAM_SRC_NORMAL_TRANSFORM_0 = 0x7,
     STREAM_SRC_NORMAL_TRANSFORM_1 = 0x8,
     STREAM_SRC_COUNT              = 0x9,
 };
 enum GfxRenderer : __int32
 {                                       // ...
     GFX_RENDERER_SHADER_2    = 0x0,
     GFX_RENDERER_SHADER_3    = 0x1,
     GFX_RENDERER_COUNT       = 0x2,
     GFX_RENDERER_UNSPECIFIED = 0x2,
 };
 enum $96F09258F588F867E3DA3159817832A2 : __int32
 {
     STREAM_DST_POSITION   = 0x0,
     STREAM_DST_NORMAL     = 0x1,
     STREAM_DST_COLOR_0    = 0x2,
     STREAM_DST_COLOR_1    = 0x3,
     STREAM_DST_TEXCOORD_0 = 0x4,
     STREAM_DST_TEXCOORD_1 = 0x5,
     STREAM_DST_TEXCOORD_2 = 0x6,
     STREAM_DST_TEXCOORD_3 = 0x7,
     STREAM_DST_TEXCOORD_4 = 0x8,
     STREAM_DST_TEXCOORD_5 = 0x9,
     STREAM_DST_TEXCOORD_6 = 0xA,
     STREAM_DST_TEXCOORD_7 = 0xB,
     STREAM_DST_COUNT      = 0xC,
 };
 enum $01E7036930A8EFDA0126158D6C64F2AD : __int32
 {
     GFX_SYM_FILTER_1     = 0x0,
     GFX_SYM_FILTER_2     = 0x1,
     GFX_SYM_FILTER_3     = 0x2,
     GFX_SYM_FILTER_4     = 0x3,
     GFX_SYM_FILTER_5     = 0x4,
     GFX_SYM_FILTER_6     = 0x5,
     GFX_SYM_FILTER_7     = 0x6,
     GFX_SYM_FILTER_8     = 0x7,
     GFX_SYM_FILTER_COUNT = 0x8,
 };
 enum $74254F2FBB58A9D84A85080F50CF363D : __int32
 {
     MTL_ARG_MATERIAL_VERTEX_CONST  = 0x0,
     MTL_ARG_LITERAL_VERTEX_CONST   = 0x1,
     MTL_ARG_MATERIAL_PIXEL_SAMPLER = 0x2,
     MTL_ARG_CODE_PRIM_BEGIN        = 0x3,
     MTL_ARG_CODE_VERTEX_CONST      = 0x3,
     MTL_ARG_CODE_PIXEL_SAMPLER     = 0x4,
     MTL_ARG_CODE_PIXEL_CONST       = 0x5,
     MTL_ARG_CODE_PRIM_END          = 0x6,
     MTL_ARG_MATERIAL_PIXEL_CONST   = 0x6,
     MTL_ARG_LITERAL_PIXEL_CONST    = 0x7,
     MLT_ARG_COUNT                  = 0x8,
 };
 enum MapType : __int32
 {                                       // ...
     MAPTYPE_NONE     = 0x0,
     MAPTYPE_INVALID1 = 0x1,
     MAPTYPE_INVALID2 = 0x2,
     MAPTYPE_2D       = 0x3,
     MAPTYPE_3D       = 0x4,
     MAPTYPE_CUBE     = 0x5,
     MAPTYPE_COUNT    = 0x6,
 };
 enum GfxViewStatsTarget : __int32
 {
     GFX_VIEW_STATS_VISIBLE = 0x0,
     GFX_VIEW_STATS_SHADOW  = 0x1,
     GFX_VIEW_STATS_COUNT   = 0x2,
 };
 enum GfxStencilOp : __int32
 {
     GFXS_STENCILOP_KEEP    = 0x0,
     GFXS_STENCILOP_ZERO    = 0x1,
     GFXS_STENCILOP_REPLACE = 0x2,
     GFXS_STENCILOP_INCRSAT = 0x3,
     GFXS_STENCILOP_DECRSAT = 0x4,
     GFXS_STENCILOP_INVERT  = 0x5,
     GFXS_STENCILOP_INCR    = 0x6,
     GFXS_STENCILOP_DECR    = 0x7,
     GFXS_STENCILOP_COUNT   = 0x8,
 };
 enum GfxPrimStatsTarget : __int32
 {                                       // ...
     GFX_PRIM_STATS_WORLD         = 0x0,
     GFX_PRIM_STATS_SMODELCACHED  = 0x1,
     GFX_PRIM_STATS_SMODELRIGID   = 0x2,
     GFX_PRIM_STATS_XMODELRIGID   = 0x3,
     GFX_PRIM_STATS_XMODELSKINNED = 0x4,
     GFX_PRIM_STATS_BMODEL        = 0x5,
     GFX_PRIM_STATS_FX            = 0x6,
     GFX_PRIM_STATS_HUD           = 0x7,
     GFX_PRIM_STATS_DEBUG         = 0x8,
     GFX_PRIM_STATS_CODE          = 0x9,
     GFX_PRIM_STATS_COUNT         = 0xA,
 };
 enum MaterialVertexDeclType : __int32
 {                                       // ...
     VERTDECL_GENERIC          = 0x0,
     VERTDECL_PACKED           = 0x1,
     VERTDECL_WORLD            = 0x2,
     VERTDECL_WORLD_T1N0       = 0x3,
     VERTDECL_WORLD_T1N1       = 0x4,
     VERTDECL_WORLD_T2N0       = 0x5,
     VERTDECL_WORLD_T2N1       = 0x6,
     VERTDECL_WORLD_T2N2       = 0x7,
     VERTDECL_WORLD_T3N0       = 0x8,
     VERTDECL_WORLD_T3N1       = 0x9,
     VERTDECL_WORLD_T3N2       = 0xA,
     VERTDECL_WORLD_T4N0       = 0xB,
     VERTDECL_WORLD_T4N1       = 0xC,
     VERTDECL_WORLD_T4N2       = 0xD,
     VERTDECL_POS_TEX          = 0xE,
     VERTDECL_STATICMODELCACHE = 0xF,
     VERTDECL_COUNT            = 0x10,
 };
 enum MaterialStateSet : __int32
 {
     MTL_STATE_SET_ALPHA_TEST       = 0x0,
     MTL_STATE_SET_BLEND_FUNC_RGB   = 0x1,
     MTL_STATE_SET_BLEND_FUNC_ALPHA = 0x2,
     MTL_STATE_SET_CULL_FACE        = 0x3,
     MTL_STATE_SET_DEPTH_TEST       = 0x4,
     MTL_STATE_SET_DEPTH_WRITE      = 0x5,
     MTL_STATE_SET_COLOR_WRITE      = 0x6,
     MTL_STATE_SET_POLYGON_OFFSET   = 0x7,
     MTL_STATE_SET_STENCIL          = 0x8,
     MTL_STATE_SET_WIREFRAME        = 0x9,
     MTL_STATE_SET_COUNT            = 0xA,
 };
 enum GfxStencilFunc : __int32
 {
     GFXS_STENCILFUNC_NEVER        = 0x0,
     GFXS_STENCILFUNC_LESS         = 0x1,
     GFXS_STENCILFUNC_EQUAL        = 0x2,
     GFXS_STENCILFUNC_LESSEQUAL    = 0x3,
     GFXS_STENCILFUNC_GREATER      = 0x4,
     GFXS_STENCILFUNC_NOTEQUAL     = 0x5,
     GFXS_STENCILFUNC_GREATEREQUAL = 0x6,
     GFXS_STENCILFUNC_ALWAYS       = 0x7,
     GFXS_STENCILFUNC_COUNT        = 0x8,
 };
 enum $440C8C70E4236D0E56131A1EE8A92CFE : __int32
 {
     ANIM_LOOP  = 0x1,
     ANIM_DELTA = 0x2,
 };
 enum $69AF8E44C9D6025F282D494F15F1F016 : __int32
 {
     PART_TYPE_NO_QUAT           = 0x0,
     PART_TYPE_HALF_QUAT         = 0x1,
     PART_TYPE_FULL_QUAT         = 0x2,
     PART_TYPE_HALF_QUAT_NO_SIZE = 0x3,
     PART_TYPE_FULL_QUAT_NO_SIZE = 0x4,
     PART_TYPE_SMALL_TRANS       = 0x5,
     PART_TYPE_TRANS             = 0x6,
     PART_TYPE_TRANS_NO_SIZE     = 0x7,
     PART_TYPE_NO_TRANS          = 0x8,
     PART_TYPE_ALL               = 0x9,
     PART_TYPE_COUNT             = 0xA,
 };
 enum $B70CFBD4A6D8AE669581DC051D4B6629 : __int32
 {
     XANIM_LOOP_SYNC_TIME    = 0x1,
     XANIM_NONLOOP_SYNC_TIME = 0x2,
     XANIM_SYNC_ROOT         = 0x4,
     XANIM_COMPLETE          = 0x8,
     XANIM_ADDITIVE          = 0x10,
 };
 enum bitarray<128>::<unnamed_tag> : __int32
 {
     BITS_PER_WORD = 0x20,
     WORD_COUNT    = 0x4,
 };
 enum $1BF0D9E267EBE4F705F118FBCA9CC701 : __int32
 {
     XANIM_ERROR_NONE          = 0x0,
     XANIM_ERROR_BAD_ROOT_ANIM = 0x1,
     XANIM_ERROR_BAD_NOTIFY    = 0x2,
 };
 enum $63F7C8B7B63E2DF8CDE8AEDB77CF5EA5 : __int32
 {
     CLASS_NUM_ENTITY      = 0x0,
     CLASS_NUM_HUDELEM     = 0x1,
     CLASS_NUM_PATHNODE    = 0x2,
     CLASS_NUM_VEHICLENODE = 0x3,
     CLASS_NUM_COUNT       = 0x4,
 };
 enum $8D041886EF3022F9893A45FB1AB1517F : __int32
 {
     DSKEL_CREATE_INC = 0x20,
 };
 enum sysEventType_t : __int32
 {                                       // ...
     SE_NONE    = 0x0,
     SE_KEY     = 0x1,
     SE_CHAR    = 0x2,
     SE_CONSOLE = 0x3,
 };
 enum $0372D9E8900E844FF1DA721F78B81D8D : __int32
 {
     DEBUG_MSG_VOID                   = 0x0,
     DEBUG_MSG_SCR_READ_FILE          = 0x1,
     DEBUG_MSG_SCR_BEGIN_LOAD_SCRIPTS = 0x2,
     DEBUG_MSG_SCR_END_LOAD_SCRIPTS   = 0x3,
     DEBUG_MSG_SCR_ADD_TEXT           = 0x4,
     DEBUG_MSG_SCR_ADD_TEXT_REPLY     = 0x5,
     DEBUG_MSG_SCR_PASTE_ELEMENT      = 0x6,
     DEBUG_MSG_SCR_PASTE_ELEMENT_REPLY = 0x7,
     DEBUG_MSG_SCR_INSERT_ELEMENT     = 0x8,
     DEBUG_MSG_SCR_INSERT_ELEMENT_REPLY = 0x9,
     DEBUG_MSG_SCR_DELETE_ELEMENT     = 0xA,
     DEBUG_MSG_SCR_DELETE_ELEMENT_REPLY = 0xB,
     DEBUG_MSG_SCR_BACKSPACE_ELEMENT  = 0xC,
     DEBUG_MSG_SCR_BACKSPACE_ELEMENT_REPLY = 0xD,
     DEBUG_MSG_SCR_CLONE_ELEMENT      = 0xE,
     DEBUG_MSG_SCR_CLONE_ELEMENT_REPLY = 0xF,
     DEBUG_MSG_SCR_EXPAND_ELEMENT     = 0x10,
     DEBUG_MSG_SCR_SELECT_ELEMENT     = 0x11,
     DEBUG_MSG_SCR_TOGGLE_EXPAND_ELEMENT = 0x12,
     DEBUG_MSG_SCR_EVALUATE           = 0x13,
     DEBUG_MSG_SCR_TOGGLE_BREAKPOINT  = 0x14,
     DEBUG_MSG_SCR_TOGGLE_BREAKPOINT_REPLY = 0x15,
     DEBUG_MSG_SCR_HIT_BREAKPOINT     = 0x16,
     DEBUG_MSG_SCR_SORT_HIT_BREAKPOINTS_TOP = 0x17,
     DEBUG_MSG_SCR_STEP               = 0x18,
     DEBUG_MSG_SCR_RUN_TO_CURSOR      = 0x19,
     DEBUG_MSG_SCR_TOGGLE_WATCH_BREAKPOINT = 0x1A,
     DEBUG_MSG_SCR_TOGGLE_WATCH_BREAKPOINT_REPLY = 0x1B,
     DEBUG_MSG_SCR_WATCH_ELEMENT_HIT_BREAKPOINT = 0x1C,
     DEBUG_MSG_SCR_FREE_WATCH_ELEMENT_CHILDREN = 0x1D,
     DEBUG_MSG_SCR_SET_ELEMENT_OBJECT_TYPE = 0x1E,
     DEBUG_MSG_SCR_SET_ELEMENT_THREAD_START = 0x1F,
     DEBUG_MSG_SCR_SET_ELEMENT_VALUE_TEXT = 0x20,
     DEBUG_MSG_SCR_SET_NON_FIELD_REF_TEXT = 0x21,
     DEBUG_MSG_SCR_SET_ELEMENT_REF_TEXT = 0x22,
     DEBUG_MSG_SCR_SET_CHILD_COUNT    = 0x23,
     DEBUG_MSG_SCR_UPDATE             = 0x24,
     DEBUG_MSG_SCR_UPDATE_WATCH_HEIGHT = 0x25,
     DEBUG_MSG_SCR_KEEP_ALIVE         = 0x26,
     DEBUG_MSG_SCR_DISPLAY_THREAD_POS = 0x27,
     DEBUG_MSG_SCR_SELECT_SCRIPT_LINE = 0x28,
     DEBUG_MSG_SCR_SORT_ELEMENT_CHILDREN = 0x29,
     DEBUG_MSG_PRINT_MESSAGE          = 0x2A,
     DEBUG_MSG_CONSOLE_FIX_POS        = 0x2B,
     DEBUG_MSG_PAUSE                  = 0x2C,
     DEBUG_MSG_SCR_ENTER_CALL         = 0x2D,
     DEBUG_MSG_COUNT                  = 0x2E,
 };
 enum $EDF15545C0CEEB7CAB3B4F469958D73A : __int32
 {
     NET_SOCKET_BIND    = 0x0,
     NET_SOCKET_CONNECT = 0x1,
 };
 enum clc_ops_e : __int32
 {
     clc_move          = 0x0,
     clc_moveNoDelta   = 0x1,
     clc_clientCommand = 0x2,
     clc_EOF           = 0x3,
 };
 enum $E0F033F08EE5F4988292F1D8F4F80363 : __int32
 {
     TRACK_EXE_PROJ   = 0x0,
     TRACK_CG_PROJ    = 0x1,
     TRACK_G_PROJ     = 0x2,
     TRACK_R_PROJ     = 0x3,
     TRACK_COUNT_PROJ = 0x4,
 };
 enum WinQuitBehavior : __int32
 {                                       // ...
     WIN_IGNORE_QUIT = 0x0,
     WIN_HANDLE_QUIT = 0x1,
 };
 enum language_t : __int32
 {
     LANGUAGE_ENGLISH   = 0x0,
     LANGUAGE_FRENCH    = 0x1,
     LANGUAGE_GERMAN    = 0x2,
     LANGUAGE_ITALIAN   = 0x3,
     LANGUAGE_SPANISH   = 0x4,
     LANGUAGE_BRITISH   = 0x5,
     LANGUAGE_RUSSIAN   = 0x6,
     LANGUAGE_POLISH    = 0x7,
     LANGUAGE_KOREAN    = 0x8,
     LANGUAGE_TAIWANESE = 0x9,
     LANGUAGE_JAPANESE  = 0xA,
     LANGUAGE_CHINESE   = 0xB,
     LANGUAGE_THAI      = 0xC,
     LANGUAGE_LEET      = 0xD,
     LANGUAGE_CZECH     = 0xE,
     MAX_LANGUAGES      = 0xF,
 };
 enum MSS_MC_SPEC : __int32
 {                                       // ...
     MSS_MC_MONO                = 0x1,   // ...
     MSS_MC_STEREO              = 0x2,
     MSS_MC_USE_SYSTEM_CONFIG   = 0x10,  // ...
     MSS_MC_HEADPHONES          = 0x20,  // ...
     MSS_MC_DOLBY_SURROUND      = 0x30,
     MSS_MC_SRS_CIRCLE_SURROUND = 0x40,
     MSS_MC_40_DTS              = 0x48,
     MSS_MC_40_DISCRETE         = 0x50,  // ...
     MSS_MC_51_DTS              = 0x58,
     MSS_MC_51_DISCRETE         = 0x60,  // ...
     MSS_MC_61_DISCRETE         = 0x70,
     MSS_MC_71_DISCRETE         = 0x80,
     MSS_MC_81_DISCRETE         = 0x90,
     MSS_MC_DIRECTSOUND3D       = 0xA0,
     MSS_MC_EAX2                = 0xC0,
     MSS_MC_EAX3                = 0xD0,
     MSS_MC_EAX4                = 0xE0,
 };
 enum WinThreadLock : __int32
 {                                       // ...
     THREAD_LOCK_NONE    = 0x0,
     THREAD_LOCK_MINIMAL = 0x1,
     THREAD_LOCK_ALL     = 0x2,
 };
 enum $723D4C507CBAE13E1C090A0F4B925142 : __int32
 {
     RED   = 0x0,
     BLACK = 0x1,
 };
 enum $7E9E60F2A1191F0ADD49A6918BB55F76 : __int32
 {
     LEFT  = 0x0,
     RIGHT = 0x1,
 };
 enum ParseThreadContext : __int32
 {
     PARSE_THREAD_MAIN     = 0x0,
     PARSE_THREAD_BACKEND  = 0x1,
     PARSE_THREAD_FASTFILE = 0x2,
     PARSE_THREAD_COUNT    = 0x3,
 };
 enum operationEnum : __int32
 {                                       // ...
     OP_NOOP                    = 0x0,
     OP_RIGHTPAREN              = 0x1,
     OP_MULTIPLY                = 0x2,
     OP_DIVIDE                  = 0x3,
     OP_MODULUS                 = 0x4,
     OP_ADD                     = 0x5,
     OP_SUBTRACT                = 0x6,
     OP_NOT                     = 0x7,
     OP_LESSTHAN                = 0x8,
     OP_LESSTHANEQUALTO         = 0x9,
     OP_GREATERTHAN             = 0xA,
     OP_GREATERTHANEQUALTO      = 0xB,
     OP_EQUALS                  = 0xC,
     OP_NOTEQUAL                = 0xD,
     OP_AND                     = 0xE,
     OP_OR                      = 0xF,
     OP_LEFTPAREN               = 0x10,
     OP_COMMA                   = 0x11,
     OP_BITWISEAND              = 0x12,
     OP_BITWISEOR               = 0x13,
     OP_BITWISENOT              = 0x14,
     OP_BITSHIFTLEFT            = 0x15,
     OP_BITSHIFTRIGHT           = 0x16,
     OP_SIN                     = 0x17,
     OP_FIRSTFUNCTIONCALL       = 0x17,
     OP_COS                     = 0x18,
     OP_MIN                     = 0x19,
     OP_MAX                     = 0x1A,
     OP_MILLISECONDS            = 0x1B,
     OP_DVARINT                 = 0x1C,
     OP_DVARBOOL                = 0x1D,
     OP_DVARFLOAT               = 0x1E,
     OP_DVARSTRING              = 0x1F,
     OP_STAT                    = 0x20,
     OP_UIACTIVE                = 0x21,
     OP_FLASHBANGED             = 0x22,
     OP_SCOPED                  = 0x23,
     OP_SCOREBOARDVISIBLE       = 0x24,
     OP_INKILLCAM               = 0x25,
     OP_PLAYERFIELD             = 0x26,
     OP_SELECTINGLOCATION       = 0x27,
     OP_TEAMFIELD               = 0x28,
     OP_OTHERTEAMFIELD          = 0x29,
     OP_MARINESFIELD            = 0x2A,
     OP_OPFORFIELD              = 0x2B,
     OP_MENUISOPEN              = 0x2C,
     OP_WRITINGDATA             = 0x2D,
     OP_INLOBBY                 = 0x2E,
     OP_INPRIVATEPARTY          = 0x2F,
     OP_PRIVATEPARTYHOST        = 0x30,
     OP_PRIVATEPARTYHOSTINLOBBY = 0x31,
     OP_ALONEINPARTY            = 0x32,
     OP_ADSJAVELIN              = 0x33,
     OP_WEAPLOCKBLINK           = 0x34,
     OP_WEAPATTACKTOP           = 0x35,
     OP_WEAPATTACKDIRECT        = 0x36,
     OP_SECONDSASTIME           = 0x37,
     OP_TABLELOOKUP             = 0x38,
     OP_LOCALIZESTRING          = 0x39,
     OP_LOCALVARINT             = 0x3A,
     OP_LOCALVARBOOL            = 0x3B,
     OP_LOCALVARFLOAT           = 0x3C,
     OP_LOCALVARSTRING          = 0x3D,
     OP_TIMELEFT                = 0x3E,
     OP_SECONDSASCOUNTDOWN      = 0x3F,
     OP_GAMEMSGWNDACTIVE        = 0x40,
     OP_TOINT                   = 0x41,
     OP_TOSTRING                = 0x42,
     OP_TOFLOAT                 = 0x43,
     OP_GAMETYPENAME            = 0x44,
     OP_GAMETYPE                = 0x45,
     OP_GAMETYPEDESCRIPTION     = 0x46,
     OP_SCORE                   = 0x47,
     OP_FRIENDSONLINE           = 0x48,
     OP_FOLLOWING               = 0x49,
     OP_STATRANGEBITSSET        = 0x4A,
     OP_KEYBINDING              = 0x4B,
     OP_ACTIONSLOTUSABLE        = 0x4C,
     OP_HUDFADE                 = 0x4D,
     OP_MAXPLAYERS              = 0x4E,
     OP_ACCEPTINGINVITE         = 0x4F,
     OP_ISINTERMISSION          = 0x50,
     NUM_OPERATORS              = 0x51,
 };
 enum $DF05B2FC29C9D4980F3CD6AF457A8B6B : __int32
 {
     PROF_SYS_EXE   = 0x0,
     PROF_SYS_GAME  = 0x1,
     PROF_SYS_COUNT = 0x2,
 };
 enum $7E6FD532E6B7795B86C5CE43CB127F65 : __int32
 {
     PROFPAGE_NONE          = 0x0,
     PROFPAGE_SELF          = 0x1,
     PROFPAGE_TOTAL         = 0x2,
     PROFPAGE_AVGSELF       = 0x3,
     PROFPAGE_AVGTOTAL      = 0x4,
     PROFPAGE_MAX           = 0x5,
     PROFPAGE_MAXSELF       = 0x6,
     PROFPAGE_SPECIAL_COUNT = 0x7,
 };
 enum server_hardware_types : __int32
 {
     SERVERHARDWARE_UNKNOWN        = 0x0,
     SERVERHARDWARE_LINUXDEDICATED = 0x1,
     SERVERHARDWARE_WINDEDICATED   = 0x2,
     SERVERHARDWARE_MACDEDICATED   = 0x3,
     SERVERHARDWARE_XENONDEDICATED = 0x4,
     SERVERHARDWARE_PS3DEDICATED   = 0x5,
     SERVERHARDWARE_WINLISTEN      = 0x6,
     SERVERHARDWARE_MACLISTEN      = 0x7,
     SERVERHARDWARE_XENONLISTEN    = 0x8,
     SERVERHARDWARE_PS3LISTEN      = 0x9,
     MAX_SERVERHARDWARE            = 0xA,
 };
 enum expDataType : __int32
 {                                       // ...
     VAL_INT    = 0x0,
     VAL_FLOAT  = 0x1,
     VAL_STRING = 0x2,
 };
 enum UILocalVarType : __int32
 {                                       // ...
     UILOCALVAR_INT    = 0x0,
     UILOCALVAR_FLOAT  = 0x1,
     UILOCALVAR_STRING = 0x2,
 };
 enum $0FEF2AE19F63F5AC2B5BA33E1174B5C1 : __int32
 {
     PHYS_ALLOC_LOW   = 0x0,
     PHYS_ALLOC_HIGH  = 0x1,
     PHYS_ALLOC_COUNT = 0x2,
 };
 enum $ADA8F6D52CF494B10E16B78330B22602 : __int32
 {
     CODE_SHIFT_BITS = 0x6,
     CODE_TYPE_MASK  = 0xC0,
     CODE_LEN_MASK   = 0x3F,
 };
 enum MemFileMode : __int32
 {                                       // ...
     MEM_FILE_MODE_DEFAULT = 0x0,
     MEM_FILE_MODE_INFLATE = 0x1,
     MEM_FILE_MODE_DEFLATE = 0x2,
     MEM_FILE_MODENUM      = 0x3,
 };
 enum MemFileThread : __int32
 {
     MEM_FILE_THREAD_UNKNOWN       = 0x0,
     MEM_FILE_THREAD_MAIN          = 0x1,
     MEM_FILE_THREAD_DEBUG_SERVICE = 0x2,
     MEM_FILE_THREAD_SERVER        = 0x3,
     MEM_FILE_THREAD_BACKEND       = 0x4,
     MEM_FILE_THREAD_DATABASE      = 0x5,
     MEM_FILE_THREAD_STREAM        = 0x6,
     MEM_FILE_THREAD_SNDSTREAMPACKETCALLBACK = 0x7,
     MEM_FILE_THREADNUM            = 0x8,
 };
 enum EvalValueType : __int32
 {                                       // ...
     EVAL_VALUE_DOUBLE = 0x0,
     EVAL_VALUE_INT    = 0x1,
     EVAL_VALUE_STRING = 0x2,
 };
 enum EvalOperatorType : __int32
 {                                       // ...
     EVAL_OP_LPAREN        = 0x0,
     EVAL_OP_RPAREN        = 0x1,
     EVAL_OP_COLON         = 0x2,
     EVAL_OP_QUESTION      = 0x3,
     EVAL_OP_PLUS          = 0x4,
     EVAL_OP_MINUS         = 0x5,
     EVAL_OP_UNARY_PLUS    = 0x6,
     EVAL_OP_UNARY_MINUS   = 0x7,
     EVAL_OP_MULTIPLY      = 0x8,
     EVAL_OP_DIVIDE        = 0x9,
     EVAL_OP_MODULUS       = 0xA,
     EVAL_OP_LSHIFT        = 0xB,
     EVAL_OP_RSHIFT        = 0xC,
     EVAL_OP_BITWISE_NOT   = 0xD,
     EVAL_OP_BITWISE_AND   = 0xE,
     EVAL_OP_BITWISE_OR    = 0xF,
     EVAL_OP_BITWISE_XOR   = 0x10,
     EVAL_OP_LOGICAL_NOT   = 0x11,
     EVAL_OP_LOGICAL_AND   = 0x12,
     EVAL_OP_LOGICAL_OR    = 0x13,
     EVAL_OP_EQUALS        = 0x14,
     EVAL_OP_NOT_EQUAL     = 0x15,
     EVAL_OP_LESS          = 0x16,
     EVAL_OP_LESS_EQUAL    = 0x17,
     EVAL_OP_GREATER       = 0x18,
     EVAL_OP_GREATER_EQUAL = 0x19,
     EVAL_OP_COUNT         = 0x1A,
 };
 enum printParm_t : __int32
 {
     PRINT_ALL       = 0x0,
     PRINT_DEVELOPER = 0x1,
     PRINT_WARNING   = 0x2,
     PRINT_ERROR     = 0x3,
 };
 enum $5D8CDD6B418A9D96842F5B9D40CCE7B8 : __int32
 {
     DVAR_TYPE_BOOL    = 0x0,
     DVAR_TYPE_FLOAT   = 0x1,
     DVAR_TYPE_FLOAT_2 = 0x2,
     DVAR_TYPE_FLOAT_3 = 0x3,
     DVAR_TYPE_FLOAT_4 = 0x4,
     DVAR_TYPE_INT     = 0x5,
     DVAR_TYPE_ENUM    = 0x6,
     DVAR_TYPE_STRING  = 0x7,
     DVAR_TYPE_COLOR   = 0x8,
     DVAR_TYPE_COUNT   = 0x9,
 };
 enum DvarSetSource : __int32
 {                                       // ...
     DVAR_SOURCE_INTERNAL = 0x0,
     DVAR_SOURCE_EXTERNAL = 0x1,
     DVAR_SOURCE_SCRIPT   = 0x2,
     DVAR_SOURCE_DEVGUI   = 0x3,
 };
 enum FsListBehavior_e : __int32
 {                                       // ...
     FS_LIST_PURE_ONLY = 0x0,
     FS_LIST_ALL       = 0x1,
 };
 enum snd_alias_members_t : __int32
 {                                       // ...
     SA_INVALID            = 0x0,
     SA_NAME               = 0x1,
     SA_SEQUENCE           = 0x2,
     SA_FILE               = 0x3,
     SA_SUBTITLE           = 0x4,
     SA_VOL_MIN            = 0x5,
     SA_VOL_MAX            = 0x6,
     SA_VOL_MOD            = 0x7,
     SA_PITCH_MIN          = 0x8,
     SA_PITCH_MAX          = 0x9,
     SA_DIST_MIN           = 0xA,
     SA_DIST_MAX           = 0xB,
     SA_CHANNEL            = 0xC,
     SA_TYPE               = 0xD,
     SA_LOOP               = 0xE,
     SA_PROBABILITY        = 0xF,
     SA_LOADSPEC           = 0x10,
     SA_MASTERSLAVE        = 0x11,
     SA_SECONDARYALIASNAME = 0x12,
     SA_CHAINALIASNAME     = 0x13,
     SA_VOLUMEFALLOFFCURVE = 0x14,
     SA_STARTDELAY         = 0x15,
     SA_SPEAKERMAP         = 0x16,
     SA_REVERB             = 0x17,
     SA_LFEPERCENTAGE      = 0x18,
     SA_CENTERPERCENTAGE   = 0x19,
     SA_ENVELOPMIN         = 0x1A,
     SA_ENVELOPMAX         = 0x1B,
     SA_ENVELOPPERCENTAGE  = 0x1C,
     SA_NUMFIELDS          = 0x1D,
 };
 enum SA_SPKRMAPIDENTIFIERS : __int32
 {                                       // ...
     SA_MONOSOURCE             = 0x0,
     SA_LEFTSOURCE             = 0x1,
     SA_RIGHTSOURCE            = 0x2,
     SA_LEFTSPEAKER            = 0x3,
     SA_RIGHTSPEAKER           = 0x4,
     SA_CENTERSPEAKER          = 0x5,
     SA_LFESPEAKER             = 0x6,
     SA_LEFTSURROUNDSPEAKER    = 0x7,
     SA_RIGHTSURROUNDSPEAKER   = 0x8,
     SA_SPKRMAPIDENTIFIERCOUNT = 0x9,
 };
 enum DevEventType : __int32
 {                                       // ...
     EVENT_ACTIVATE   = 0x0,
     EVENT_DEACTIVATE = 0x1,
     EVENT_ACCEPT     = 0x2,
     EVENT_UPDATE     = 0x3,
     EVENT_DRAW       = 0x4,
     EVENT_SAVE       = 0x5,
 };
 enum FS_ErrorCodes : __int32
 {
     FS_OPEN_FAILURE = 0xFFFFFFFF,
     FS_OPEN_NOT_IN_IWD_OR_LOCALIZED_DIR = 0xFFFFFFFE,
 };
 enum FsThread : __int32
 {                                       // ...
     FS_THREAD_MAIN     = 0x0,
     FS_THREAD_STREAM   = 0x1,
     FS_THREAD_DATABASE = 0x2,
     FS_THREAD_BACKEND  = 0x3,
     FS_THREAD_SERVER   = 0x4,
     FS_THREAD_COUNT    = 0x5,
     FS_THREAD_INVALID  = 0x6,
 };
 enum AssertOccurance : __int32
 {                                       // ...
     FIRST_TIME = 0x0,
     RECURSIVE  = 0x1,
 };
 enum ADDRESS_MODE : __int32
 {                                       // ...
     AddrMode1616 = 0x0,
     AddrMode1632 = 0x1,
     AddrModeReal = 0x2,
     AddrModeFlat = 0x3,
 };
 enum uiMenuCommand_t : __int32
 {                                       // ...
     UIMENU_NONE            = 0x0,
     UIMENU_MAIN            = 0x1,
     UIMENU_INGAME          = 0x2,
     UIMENU_NEED_CD         = 0x3,
     UIMENU_BAD_CD_KEY      = 0x4,
     UIMENU_PREGAME         = 0x5,
     UIMENU_POSTGAME        = 0x6,
     UIMENU_WM_QUICKMESSAGE = 0x7,
     UIMENU_WM_AUTOUPDATE   = 0x8,
     UIMENU_SCRIPT_POPUP    = 0x9,
     UIMENU_SCOREBOARD      = 0xA,
     UIMENU_ENDOFGAME       = 0xB,
 };
 enum msgwnd_mode_t : __int32
 {                                       // ...
     MWM_BOTTOMUP_ALIGN_TOP    = 0x0,
     MWM_BOTTOMUP_ALIGN_BOTTOM = 0x1,
     MWM_TOPDOWN_ALIGN_TOP     = 0x2,
     MWM_TOPDOWN_ALIGN_BOTTOM  = 0x3,
 };
 enum sscType_t : __int32
 {                                       // ...
     SSC_STRING   = 0x0,
     SSC_YESNO    = 0x1,
     SSC_GAMETYPE = 0x2,
     SSC_MAPNAME  = 0x3,
 };
 enum msgLocErrType_t : __int32
 {                                       // ...
     LOCMSG_SAFE  = 0x0,
     LOCMSG_NOERR = 0x1,
 };
 enum $FA0F6E0D35BC98A4BB2F4AB85FCCB638 : __int32
 {
     OPERATOR = 0x0,
     OPERAND  = 0x1,
 };
 enum $D718A841A9F145D6BAF7FAB15D6BEE24 : __int32
 {
     CONSOLE_REASON_GOTO_LINE = 0x0,
     CONSOLE_REASON_FIND      = 0x1,
     CONSOLE_REASON_EDIT      = 0x2,
 };
 enum std::_Uninitialized : __int32
 {
     _Noinit = 0x0,
 };
 enum std::codecvt_base::<unnamed_tag> : __int32
 {
     ok      = 0x0,
     partial = 0x1,
     error   = 0x2,
     noconv  = 0x3,
 };
 enum std::_Iosb<int>::_Dummy_enum : __int32
 {
     _Dummy_enum_val = 0x1,
 };
 enum std::_Iosb<int>::_Fmtflags : __int32
 {
     _Fmtmask = 0xFFFF,
     _Fmtzero = 0x0,
 };
 enum std::_Iosb<int>::_Iostate : __int32
 {
     _Statmask = 0x17,
 };
 enum std::_Iosb<int>::_Openmode : __int32
 {
     _Openmask = 0xFF,
 };
 enum std::_Iosb<int>::_Seekdir : __int32
 {
     _Seekmask = 0x3,
 };
 enum std::_Iosb<int>::<unnamed_tag> : __int32
 {
     _Openprot = 0x40,
 };
 enum std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >::<unnamed_tag> : __int32
 {                                       // ...
     _BUF_SIZE = 0x10,
 };
 typedef std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >::<unnamed_tag> std::string::<unnamed_tag>;
 enum std::ctype_base::<unnamed_tag> : __int32
 {
     alnum  = 0x107,
     alpha  = 0x103,
     cntrl  = 0x20,
     digit  = 0x4,
     graph  = 0x117,
     lower  = 0x2,
     print  = 0x1D7,
     punct  = 0x10,
     space  = 0x48,
     upper  = 0x1,
     xdigit = 0x80,
 };
 enum std::ios_base::event : __int32
 {
     erase_event   = 0x0,
     imbue_event   = 0x1,
     copyfmt_event = 0x2,
 };
 typedef std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >::<unnamed_tag> std::wstring::<unnamed_tag>;
 enum std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::less<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,mapStringEntriesName_t>,0>::<unnamed_tag> : __int32
 {
     _Multi = 0x0,
 };
 enum std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::less<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,mapStringEntriesName_t>,0> >::_Redbl : __int32
 {
     _Red   = 0x0,
     _Black = 0x1,
 };
 enum serverState_t : __int32
 {                                       // ...
     SS_DEAD    = 0x0,
     SS_LOADING = 0x1,
     SS_GAME    = 0x2,
 };
 enum $C3A80A4928DD55B480B15DEB8BFE1B34 : __int32
 {
     CS_FREE          = 0x0,
     CS_ZOMBIE        = 0x1,
     CS_CONNECTED     = 0x2,
     CS_CLIENTLOADING = 0x3,
     CS_ACTIVE        = 0x4,
 };
 enum $F8B33BB90694E9B450DEE9F30AAB5E84 : __int32
 {
     PLAYERSTATE_TOTAL        = 0x0,
     PLAYERSTATE_FIELDDELTAS  = 0x1,
     PLAYERSTATE_STATS        = 0x2,
     PLAYERSTATE_AMMO         = 0x3,
     PLAYERSTATE_OBJECTIVES   = 0x4,
     PLAYERSTATE_HUDELEMS     = 0x5,
     PLAYERSTATE_WEAPONMODELS = 0x6,
     NUM_PLAYERSTATE_SEGMENTS = 0x7,
 };
 enum packetModeList : __int32
 {                                       // ...
     PACKETDATA_FIRST            = 0x0,
     PACKETDATA_UNDEFINED        = 0x0,
     PACKETDATA_HEADER           = 0x1,
     PACKETDATA_OVERHEAD         = 0x2,
     PACKETDATA_DATA             = 0x3,
     PACKETDATA_RELIABLEDATA     = 0x4,
     PACKETDATA_ZEROFLOAT        = 0x5,
     PACKETDATA_SMALLFLOAT       = 0x6,
     PACKETDATA_LARGEFLOAT       = 0x7,
     PACKETDATA_ZEROINT          = 0x8,
     PACKETDATA_SMALLANGLE       = 0x9,
     PACKETDATA_ZEROANGLE        = 0xA,
     PACKETDATA_TIMEDELTA        = 0xB,
     PACKETDATA_TIME             = 0xC,
     PACKETDATA_24BITFLAGINDEX   = 0xD,
     PACKETDATA_GROUNDENTITY     = 0xE,
     PACKETDATA_ENTITYNUM        = 0xF,
     PACKETDATA_LASTFIELDCHANGED = 0x10,
     PACKETDATA_NOTNETWORKDATA   = 0x11,
     PACKETDATA_ORIGINDELTA      = 0x12,
     PACKETDATA_ORIGIN           = 0x13,
     NUM_PACKETDATA_MODES        = 0x14,
 };
 enum svc_ops_e : __int32
 {
     svc_nop           = 0x0,
     svc_gamestate     = 0x1,
     svc_configstring  = 0x2,
     svc_baseline      = 0x3,
     svc_serverCommand = 0x4,
     svc_download      = 0x5,
     svc_snapshot      = 0x6,
     svc_EOF           = 0x7,
 };
 enum svscmd_type : __int32
 {                                       // ...
     SV_CMD_CAN_IGNORE = 0x0,
     SV_CMD_RELIABLE   = 0x1,
 };
 enum $A9FDED199653E5E1C469F04B28023DED : __int32
 {
     DB_ZONE_CODE_LOC   = 0x0,
     DB_ZONE_COMMON_LOC = 0x1,
     DB_ZONE_CODE       = 0x2,
     DB_ZONE_COMMON     = 0x4,
     DB_ZONE_GAME       = 0x8,
     DB_ZONE_MOD        = 0x10,
     DB_ZONE_LOAD       = 0x20,
     DB_ZONE_DEV        = 0x40,
 };
 enum $4D3AD445C93D33C17617DE0B08BB4C2A : __int32
 {
     PA_UNVALIDATED = 0x0,
     PA_VALID       = 0x1,
     PA_INVALID     = 0x2,
 };
 enum dlFlags_t : __int32
 {
     DL_FLAG_DISCON = 0x0,
     DL_FLAG_URL    = 0x1,
 };
 enum $ED9FB841C3609FB6E94779723A0A91AC : __int32
 {
     ENUM_NOP                       = 0x0,
     ENUM_program                   = 0x1,
     ENUM_assignment                = 0x2,
     ENUM_unknown_variable          = 0x3,
     ENUM_local_variable            = 0x4,
     ENUM_local_variable_frozen     = 0x5,
     ENUM_primitive_expression      = 0x6,
     ENUM_integer                   = 0x7,
     ENUM_float                     = 0x8,
     ENUM_minus_integer             = 0x9,
     ENUM_minus_float               = 0xA,
     ENUM_string                    = 0xB,
     ENUM_istring                   = 0xC,
     ENUM_array_variable            = 0xD,
     ENUM_unknown_field             = 0xE,
     ENUM_field_variable            = 0xF,
     ENUM_field_variable_frozen     = 0x10,
     ENUM_variable                  = 0x11,
     ENUM_function                  = 0x12,
     ENUM_call_expression           = 0x13,
     ENUM_local_function            = 0x14,
     ENUM_far_function              = 0x15,
     ENUM_function_pointer          = 0x16,
     ENUM_call                      = 0x17,
     ENUM_method                    = 0x18,
     ENUM_call_expression_statement = 0x19,
     ENUM_script_call               = 0x1A,
     ENUM_return                    = 0x1B,
     ENUM_return2                   = 0x1C,
     ENUM_wait                      = 0x1D,
     ENUM_script_thread_call        = 0x1E,
     ENUM_undefined                 = 0x1F,
     ENUM_self                      = 0x20,
     ENUM_self_frozen               = 0x21,
     ENUM_level                     = 0x22,
     ENUM_game                      = 0x23,
     ENUM_anim                      = 0x24,
     ENUM_if                        = 0x25,
     ENUM_if_else                   = 0x26,
     ENUM_while                     = 0x27,
     ENUM_for                       = 0x28,
     ENUM_inc                       = 0x29,
     ENUM_dec                       = 0x2A,
     ENUM_binary_equals             = 0x2B,
     ENUM_statement_list            = 0x2C,
     ENUM_developer_statement_list  = 0x2D,
     ENUM_expression_list           = 0x2E,
     ENUM_bool_or                   = 0x2F,
     ENUM_bool_and                  = 0x30,
     ENUM_binary                    = 0x31,
     ENUM_bool_not                  = 0x32,
     ENUM_bool_complement           = 0x33,
     ENUM_size_field                = 0x34,
     ENUM_self_field                = 0x35,
     ENUM_precachetree              = 0x36,
     ENUM_waittill                  = 0x37,
     ENUM_waittillmatch             = 0x38,
     ENUM_waittillFrameEnd          = 0x39,
     ENUM_notify                    = 0x3A,
     ENUM_endon                     = 0x3B,
     ENUM_switch                    = 0x3C,
     ENUM_case                      = 0x3D,
     ENUM_default                   = 0x3E,
     ENUM_break                     = 0x3F,
     ENUM_continue                  = 0x40,
     ENUM_expression                = 0x41,
     ENUM_empty_array               = 0x42,
     ENUM_animation                 = 0x43,
     ENUM_thread                    = 0x44,
     ENUM_begin_developer_thread    = 0x45,
     ENUM_end_developer_thread      = 0x46,
     ENUM_usingtree                 = 0x47,
     ENUM_false                     = 0x48,
     ENUM_true                      = 0x49,
     ENUM_animtree                  = 0x4A,
     ENUM_breakon                   = 0x4B,
     ENUM_breakpoint                = 0x4C,
     ENUM_prof_begin                = 0x4D,
     ENUM_prof_end                  = 0x4E,
     ENUM_vector                    = 0x4F,
     ENUM_object                    = 0x50,
     ENUM_thread_object             = 0x51,
     ENUM_local                     = 0x52,
     ENUM_statement                 = 0x53,
     ENUM_bad_expression            = 0x54,
     ENUM_bad_statement             = 0x55,
     ENUM_include                   = 0x56,
     ENUM_argument                  = 0x57,
 };
 enum $6D51E4D9581472729AE3FDE62615AD51 : __int32
 {
     OP_End                           = 0x0,
     OP_Return                        = 0x1,
     OP_GetUndefined                  = 0x2,
     OP_GetZero                       = 0x3,
     OP_GetByte                       = 0x4,
     OP_GetNegByte                    = 0x5,
     OP_GetUnsignedShort              = 0x6,
     OP_GetNegUnsignedShort           = 0x7,
     OP_GetInteger                    = 0x8,
     OP_GetFloat                      = 0x9,
     OP_GetString                     = 0xA,
     OP_GetIString                    = 0xB,
     OP_GetVector                     = 0xC,
     OP_GetLevelObject                = 0xD,
     OP_GetAnimObject                 = 0xE,
     OP_GetSelf                       = 0xF,
     OP_GetLevel                      = 0x10,
     OP_GetGame                       = 0x11,
     OP_GetAnim                       = 0x12,
     OP_GetAnimation                  = 0x13,
     OP_GetGameRef                    = 0x14,
     OP_GetFunction                   = 0x15,
     OP_CreateLocalVariable           = 0x16,
     OP_RemoveLocalVariables          = 0x17,
     OP_EvalLocalVariableCached0      = 0x18,
     OP_EvalLocalVariableCached1      = 0x19,
     OP_EvalLocalVariableCached2      = 0x1A,
     OP_EvalLocalVariableCached3      = 0x1B,
     OP_EvalLocalVariableCached4      = 0x1C,
     OP_EvalLocalVariableCached5      = 0x1D,
     OP_EvalLocalVariableCached       = 0x1E,
     OP_EvalLocalArrayCached          = 0x1F,
     OP_EvalArray                     = 0x20,
     OP_EvalLocalArrayRefCached0      = 0x21,
     OP_EvalLocalArrayRefCached       = 0x22,
     OP_EvalArrayRef                  = 0x23,
     OP_ClearArray                    = 0x24,
     OP_EmptyArray                    = 0x25,
     OP_GetSelfObject                 = 0x26,
     OP_EvalLevelFieldVariable        = 0x27,
     OP_EvalAnimFieldVariable         = 0x28,
     OP_EvalSelfFieldVariable         = 0x29,
     OP_EvalFieldVariable             = 0x2A,
     OP_EvalLevelFieldVariableRef     = 0x2B,
     OP_EvalAnimFieldVariableRef      = 0x2C,
     OP_EvalSelfFieldVariableRef      = 0x2D,
     OP_EvalFieldVariableRef          = 0x2E,
     OP_ClearFieldVariable            = 0x2F,
     OP_SafeCreateVariableFieldCached = 0x30,
     OP_SafeSetVariableFieldCached0   = 0x31,
     OP_SafeSetVariableFieldCached    = 0x32,
     OP_SafeSetWaittillVariableFieldCached = 0x33,
     OP_clearparams                   = 0x34,
     OP_checkclearparams              = 0x35,
     OP_EvalLocalVariableRefCached0   = 0x36,
     OP_EvalLocalVariableRefCached    = 0x37,
     OP_SetLevelFieldVariableField    = 0x38,
     OP_SetVariableField              = 0x39,
     OP_SetAnimFieldVariableField     = 0x3A,
     OP_SetSelfFieldVariableField     = 0x3B,
     OP_SetLocalVariableFieldCached0  = 0x3C,
     OP_SetLocalVariableFieldCached   = 0x3D,
     OP_CallBuiltin0                  = 0x3E,
     OP_CallBuiltin1                  = 0x3F,
     OP_CallBuiltin2                  = 0x40,
     OP_CallBuiltin3                  = 0x41,
     OP_CallBuiltin4                  = 0x42,
     OP_CallBuiltin5                  = 0x43,
     OP_CallBuiltin                   = 0x44,
     OP_CallBuiltinMethod0            = 0x45,
     OP_CallBuiltinMethod1            = 0x46,
     OP_CallBuiltinMethod2            = 0x47,
     OP_CallBuiltinMethod3            = 0x48,
     OP_CallBuiltinMethod4            = 0x49,
     OP_CallBuiltinMethod5            = 0x4A,
     OP_CallBuiltinMethod             = 0x4B,
     OP_wait                          = 0x4C,
     OP_waittillFrameEnd              = 0x4D,
     OP_PreScriptCall                 = 0x4E,
     OP_ScriptFunctionCall2           = 0x4F,
     OP_ScriptFunctionCall            = 0x50,
     OP_ScriptFunctionCallPointer     = 0x51,
     OP_ScriptMethodCall              = 0x52,
     OP_ScriptMethodCallPointer       = 0x53,
     OP_ScriptThreadCall              = 0x54,
     OP_ScriptThreadCallPointer       = 0x55,
     OP_ScriptMethodThreadCall        = 0x56,
     OP_ScriptMethodThreadCallPointer = 0x57,
     OP_DecTop                        = 0x58,
     OP_CastFieldObject               = 0x59,
     OP_EvalLocalVariableObjectCached = 0x5A,
     OP_CastBool                      = 0x5B,
     OP_BoolNot                       = 0x5C,
     OP_BoolComplement                = 0x5D,
     OP_JumpOnFalse                   = 0x5E,
     OP_JumpOnTrue                    = 0x5F,
     OP_JumpOnFalseExpr               = 0x60,
     OP_JumpOnTrueExpr                = 0x61,
     OP_jump                          = 0x62,
     OP_jumpback                      = 0x63,
     OP_inc                           = 0x64,
     OP_dec                           = 0x65,
     OP_bit_or                        = 0x66,
     OP_bit_ex_or                     = 0x67,
     OP_bit_and                       = 0x68,
     OP_equality                      = 0x69,
     OP_inequality                    = 0x6A,
     OP_less                          = 0x6B,
     OP_greater                       = 0x6C,
     OP_less_equal                    = 0x6D,
     OP_greater_equal                 = 0x6E,
     OP_shift_left                    = 0x6F,
     OP_shift_right                   = 0x70,
     OP_plus                          = 0x71,
     OP_minus                         = 0x72,
     OP_multiply                      = 0x73,
     OP_divide                        = 0x74,
     OP_mod                           = 0x75,
     OP_size                          = 0x76,
     OP_waittillmatch                 = 0x77,
     OP_waittill                      = 0x78,
     OP_notify                        = 0x79,
     OP_endon                         = 0x7A,
     OP_voidCodepos                   = 0x7B,
     OP_switch                        = 0x7C,
     OP_endswitch                     = 0x7D,
     OP_vector                        = 0x7E,
     OP_NOP                           = 0x7F,
     OP_abort                         = 0x80,
     OP_object                        = 0x81,
     OP_thread_object                 = 0x82,
     OP_EvalLocalVariable             = 0x83,
     OP_EvalLocalVariableRef          = 0x84,
     OP_prof_begin                    = 0x85,
     OP_prof_end                      = 0x86,
     OP_breakpoint                    = 0x87,
     OP_assignmentBreakpoint          = 0x88,
     OP_manualAndAssignmentBreakpoint = 0x89,
     OP_count                         = 0x8A,
 };
 enum $3FAD84344DD9017EDEA6C2E0F6A382A4 : __int32
 {
     SCR_SYS_GAME = 0x1,
 };
 enum $4063C00325E3CB226EF18D9D8FC4A6BC : __int32
 {
     SCR_XANIM_CLIENT = 0x0,
     SCR_XANIM_SERVER = 0x1,
     SCR_XANIM_COUNT  = 0x2,
 };
 enum $419E78E8024FDA76FFEC5687979C53A0 : __int32
 {
     VARIABLELIST_PARENT_SIZE     = 0x8000,
     VARIABLELIST_PARENT_BEGIN    = 0x1,
     VARIABLELIST_PARENT_END      = 0x8001,
     VARIABLELIST_CHILD_SIZE      = 0xFFFE,
     VARIABLELIST_CHILD_BEGIN     = 0x8002,
     VARIABLELIST_CHILD_END       = 0x18000,
     VARIABLELIST_PARENT_DEV_SIZE = 0x7380,
     VARIABLELIST_CHILD_DEV_SIZE  = 0xF37E,
     VARIABLELIST_SIZE            = 0x18000,
 };
 enum $A0B78AE774D4666200C807179F1D92A1 : __int32
 {
     VAR_NAME_BITS      = 0x8,
     VAR_NAME_LOW_MASK  = 0xFFFFFF,
     VAR_NAME_HIGH_MASK = 0xFFFFFF00,
     VAR_MIN_INT        = 0xFF800000,
     VAR_MAX_INT        = 0x7FFFFF,
 };
 enum $58F52E26B27655EC9A5E0AD682A1F43F : __int32
 {
     STEP_CONTINUE = 0x0,
     STEP_OVER     = 0x1,
     STEP_INTO     = 0x2,
     STEP_OUT      = 0x3,
     STEP_AUTO     = 0x4,
 };
 enum $2F76E4A0B33E3CADEECF86B1BA14D159 : __int32
 {
     MAX_VM_STACK_DEPTH   = 0x20,
     MAX_VM_OPERAND_STACK = 0x800,
 };
 enum $9D454B4FF036F3302969255676F4A675 : __int32
 {
     LOCAL_VAR_STACK_SIZE = 0x40,
 };
 enum $9D8FAF1F6329DA5B6AB22B763A72053E : __int32
 {
     VAR_MASK = 0x1F,
 };
 enum $3FFC1CCCF67A053E976ADE59AFDC0E97 : __int32
 {
     VAR_STAT_FREE     = 0x0,
     VAR_STAT_MOVABLE  = 0x20,
     VAR_STAT_HEAD     = 0x40,
     VAR_STAT_EXTERNAL = 0x60,
     VAR_STAT_MASK     = 0x60,
 };
 enum $4ED498BBBB7609BF2C0277D690FCD989 : __int32
 {
     HASH_STAT_FREE    = 0x0,
     HASH_STAT_MOVABLE = 0x10000,
     HASH_STAT_HEAD    = 0x20000,
     HASH_STAT_MASK    = 0x30000,
 };
 enum $CEAB46625C953059CD23D6CC88D02635 : __int32
 {
     HASH_NEXT_MASK = 0xFFFF,
 };
 enum $E2C4A72AF674157DC07227CFCED3F1B3 : __int32
 {
     SL_USER_GAME       = 0x1,
     SL_USER_TEMP       = 0x2,
     SL_USER_XZONE      = 0x4,
     SL_USER_XZONE_TEMP = 0x8,
 };
 enum $82B1EE505F6D7AECF79BE08F2A6FCFF8 : __int32
 {
     SOURCE_TYPE_BREAKPOINT   = 0x1,
     SOURCE_TYPE_CALL         = 0x2,
     SOURCE_TYPE_THREAD_START = 0x4,
     SOURCE_TYPE_BUILTIN_CALL = 0x8,
     SOURCE_TYPE_NOTIFY       = 0x10,
 };
 enum $689E3F8954B9CD60DF21AA6907596934 : __int32
 {
     SCR_DEV_NO       = 0x0,
     SCR_DEV_YES      = 0x1,
     SCR_DEV_IGNORE   = 0x2,
     SCR_DEV_EVALUATE = 0x3,
 };
 enum $A564D3E02E3542B7B56F81001D50D921 : __int32
 {
     INITIAL_OPCODE_LOOKUP_LEN    = 0x40000,
     INITIAL_SOURCEPOS_LOOKUP_LEN = 0x40000,
 };
 enum $6FA9B1A6E859C7CBA9948F76BC7AD5F5 : __int32
 {
     INITIAL_SOURCEBUFFER_LOOKUP_LEN = 0x100,
 };
 enum $35C0F5BFE334434B152C3B2BEA82F66E : __int32
 {
     THREAD_COUNT   = 0x0,
     THREAD_POS     = 0x1,
     THREAD_INDICES = 0x2,
 };
 enum $D1294A89E6A9ED9241E170FD33144FB1 : __int32
 {
     BUILTIN_ANY            = 0x0,
     BUILTIN_DEVELOPER_ONLY = 0x1,
 };
 enum $2250315E5CBC61394E4CC83F48827B3C : __int32
 {
     K_DBL_CLICK_MOUSE1 = 0xDF,
 };
 enum $710690B3316F52083F64DFA9948A35C4 : __int32
 {
     SCR_BREAKPOINT_NONE             = 0x0,
     SCR_BREAKPOINT_NORMAL           = 0x1,
     SCR_BREAKPOINT_CONDITIONAL      = 0x2,
     SCR_BREAKPOINT_DISABLED         = 0x3,
     SCR_BREAKPOINT_LINE_DISABLED    = 0x4,
     SCR_BREAKPOINT_LINE_NORMAL      = 0x5,
     SCR_BREAKPOINT_BUILTIN_NORMAL   = 0x6,
     SCR_BREAKPOINT_BUILTIN_DISABLED = 0x7,
 };
 enum Scr_ConsoleOpenMode : __int32
 {                                       // ...
     SCR_CONSOLE_INPUT_ONLY   = 0x0,
     SCR_CONSOLE_INPUT_OUTPUT = 0x1,
 };
 enum $4374AA28AEDC7C5E5529F124946950D8 : __int32
 {
     WATCH_NAME_SIZE    = 0x0,
     WATCH_NAME_OBJECT  = 0x1,
     WATCH_NAME_ENDONS  = 0x2,
     WATCH_NAME_SELF    = 0x3,
     WATCH_NAME_THREADS = 0x4,
     WATCH_NAME_COUNT   = 0x5,
 };
 enum $F70A79649926715426B3C355C6FD927A : __int32
 {
     SCR_ABORT_NONE     = 0x0,
     SCR_ABORT_CONTINUE = 0x1,
     SCR_ABORT_BREAK    = 0x2,
     SCR_ABORT_RETURN   = 0x3,
     SCR_ABORT_MAX      = 0x3,
 };
 enum $11C64C00F3ABDB80799A2860E5481167 : __int32
 {
     CALL_NONE     = 0x0,
     CALL_BUILTIN  = 0x1,
     CALL_THREAD   = 0x2,
     CALL_FUNCTION = 0x3,
 };
 enum $BB7F4801BC8A3FB836B39ECFF8B5BEFB : __int32
 {
     FUNC_SCOPE_LOCAL = 0x0,
     FUNC_SCOPE_FAR   = 0x1,
 };
 enum $4261C902CEEB0B31C1E1EA50445DAD10 : __int32
 {
     ANIMTREE_NAMES = 0x0,
     ANIMTREE_XANIM = 0x1,
 };
 enum $DC25A160997449D3F86A044747DA95B4 : __int32
 {
     ANIMTREE_PROPERTIES = 0x0,
 };
 enum $AD78DDBFED7D8E30733C9FEA069F08EB : __int32
 {
     ANIMPROP_LOOPSYNC    = 0x0,
     ANIMPROP_NONLOOPSYNC = 0x1,
     ANIMPROP_COMPLETE    = 0x2,
     ANIMPROP_ADDITIVE    = 0x3,
     ANIMPROP_COUNT       = 0x4,
 };
 enum $7B5BE226977229D68869D0243752A976 : __int32
 {
     XFILE_BLOCK_TEMP             = 0x0,
     XFILE_BLOCK_RUNTIME_BEGIN    = 0x1,
     XFILE_BLOCK_RUNTIME          = 0x1,
     XFILE_BLOCK_LARGE_RUNTIME    = 0x2,
     XFILE_BLOCK_PHYSICAL_RUNTIME = 0x3,
     XFILE_BLOCK_RUNTIME_END      = 0x4,
     XFILE_BLOCK_VIRTUAL          = 0x4,
     XFILE_BLOCK_LARGE            = 0x5,
     XFILE_BLOCK_PHYSICAL         = 0x6,
     XFILE_BLOCK_VERTEX           = 0x7,
     XFILE_BLOCK_INDEX            = 0x8,
     MAX_XFILE_COUNT              = 0x9,
 };
 enum ThreadOwner : __int32
 {                                       // ...
     THREAD_OWNER_NONE       = 0x0,
     THREAD_OWNER_DATABASE   = 0x1,
     THREAD_OWNER_CINEMATICS = 0x2,
 };
 enum $C0188971FD43DEB8E91731A66ECD7D9E : __int32
 {
     BACKEND_EVENT_WORKER_CMD = 0x0,
     BACKEND_EVENT_GENERIC    = 0x1,
     BACKEND_EVENT_COUNT      = 0x2,
 };
 enum $B0E47B6E7E9B6C157D04BB03B078282C : __int32
 {
     HUDELEMFLAG_FOREGROUND     = 0x1,
     HUDELEMFLAG_HIDEWHENDEAD   = 0x2,
     HUDELEMFLAG_HIDEWHENINMENU = 0x4,
     HUDELEMFLAGBITS            = 0x3,
 };
 enum pmtype_t : __int32
 {
     PM_NORMAL        = 0x0,
     PM_NORMAL_LINKED = 0x1,
     PM_NOCLIP        = 0x2,
     PM_UFO           = 0x3,
     PM_SPECTATOR     = 0x4,
     PM_INTERMISSION  = 0x5,
     PM_LASTSTAND     = 0x6,
     PM_DEAD          = 0x7,
     PM_DEAD_LINKED   = 0x8,
 };
 enum $437E18100F0AD85232F2BEC7F95C8047 : __int32
 {
     UT_STATIC   = 0x0,
     UT_VSTATIC  = 0x1,
     UT_MALLOC   = 0x2,
     UT_HUNK     = 0x3,
     UT_VOID     = 0x4,
     UT_IMAGE    = 0x5,
     UT_TEMP     = 0x6,
     UT_PHYSICAL = 0x7,
     UT_COUNT    = 0x8,
 };
 enum FS_SERVER_COMPARE_RESULT : __int32
 {                                       // ...
     FILES_MATCH      = 0x0,
     NEED_DOWNLOAD    = 0x1,
     NOT_DOWNLOADABLE = 0x2,
 };
 enum _HTFilterOrder : __int32
 {
     HT_FILTER_FIRST  = 0x0,
     HT_FILTER_EARLY  = 0x3FFF,
     HT_FILTER_MIDDLE = 0x7FFF,
     HT_FILTER_LATE   = 0xBFFE,
     HT_FILTER_LAST   = 0xFFFF,
 };
 enum dlStatus_t : __int32
 {                                       // ...
     DL_CONTINUE = 0x0,
     DL_DONE     = 0x1,
     DL_FAILED   = 0x2,
 };
 enum HTEventType : __int32
 {
     HTEvent_READ    = 0x1,
     HTEvent_ACCEPT  = 0x2,
     HTEvent_CLOSE   = 0x4,
     HTEvent_WRITE   = 0x10008,
     HTEvent_CONNECT = 0x10010,
     HTEvent_OOB     = 0x20020,
     HTEvent_TYPES   = 0x3,
     HTEvent_TIMEOUT = 0x30040,
     HTEvent_BEGIN   = 0x30000,
     HTEvent_END     = 0x30080,
     HTEvent_FLUSH   = 0x30100,
     HTEvent_RESET   = 0x30200,
     HTEvent_ALL     = 0xFFFF,
 };
 enum _HTAlertOpcode : __int32
 {                                       // ...
     HT_PROG_DNS       = 0x1,
     HT_PROG_CONNECT   = 0x2,
     HT_PROG_ACCEPT    = 0x4,
     HT_PROG_READ      = 0x8,
     HT_PROG_WRITE     = 0x10,
     HT_PROG_DONE      = 0x20,
     HT_PROG_INTERRUPT = 0x40,
     HT_PROG_OTHER     = 0x80,
     HT_PROG_TIMEOUT   = 0x100,
     HT_PROG_LOGIN     = 0x200,
     HT_A_PROGRESS     = 0xFFFF,
     HT_A_MESSAGE      = 0x10000,
     HT_A_CONFIRM      = 0x20000,
     HT_A_PROMPT       = 0x40000,
     HT_A_SECRET       = 0x80000,
     HT_A_USER_PW      = 0x100000,
 };
 enum _HTPriority : __int32
 {                                       // ...
     HT_PRIORITY_INV = 0xFFFFFFFF,
     HT_PRIORITY_OFF = 0x0,
     HT_PRIORITY_MIN = 0x1,
     HT_PRIORITY_MAX = 0x14,
 };
 enum _HTAlertMsg : __int32
 {
     HT_MSG_NULL                 = 0xFFFFFFFF,
     HT_MSG_UID                  = 0x0,
     HT_MSG_PROXY_UID            = 0x1,
     HT_MSG_FTP_UID              = 0x2,
     HT_MSG_PW                   = 0x3,
     HT_MSG_FILENAME             = 0x4,
     HT_MSG_ACCOUNT              = 0x5,
     HT_MSG_METHOD               = 0x6,
     HT_MSG_MOVED                = 0x7,
     HT_MSG_RULES                = 0x8,
     HT_MSG_FILE_REPLACE         = 0x9,
     HT_MSG_RETRY_AUTHENTICATION = 0xA,
     HT_MSG_RETRY_PROXY_AUTH     = 0xB,
     HT_MSG_REDO                 = 0xC,
     HT_MSG_BIG_PUT              = 0xD,
     HT_MSG_SOURCE_MOVED         = 0xE,
     HT_MSG_DESTINATION_MOVED    = 0xF,
     HT_MSG_REDIRECTION          = 0x10,
     HT_MSG_PROXY                = 0x11,
     HT_MSG_CACHE_LOCK           = 0x12,
     HT_MSG_ACCEPT_COOKIE        = 0x13,
     HT_MSG_ELEMENTS             = 0x14,
 };
 enum __bitmask _HTRqHd : __int32
 {                                       // ...
     HT_C_ACCEPT_TYPE       = 0x1,
     HT_C_ACCEPT_CHAR       = 0x2,
     HT_C_ACCEPT_ENC        = 0x4,
     HT_C_ACCEPT_TE         = 0x8,
     HT_C_ACCEPT_LAN        = 0x10,
     HT_C_AUTH              = 0x20,
     HT_C_EXPECT            = 0x40,
     HT_C_FROM              = 0x80,
     HT_C_HOST              = 0x100,
     HT_C_IMS               = 0x200,
     HT_C_IF_MATCH          = 0x400,
     HT_C_IF_MATCH_ANY      = 0x800,
     HT_C_IF_NONE_MATCH     = 0x1000,
     HT_C_IF_NONE_MATCH_ANY = 0x2000,
     HT_C_IF_RANGE          = 0x4000,
     HT_C_IF_UNMOD_SINCE    = 0x8000,
     HT_C_MAX_FORWARDS      = 0x10000,
     HT_C_RANGE             = 0x20000,
     HT_C_REFERER           = 0x40000,
     HT_C_USER_AGENT        = 0x80000,
 };
 enum HTMethod : __int32
 {                                       // ...
     METHOD_INVALID = 0x0,
     METHOD_GET     = 0x1,
     METHOD_HEAD    = 0x2,
     METHOD_POST    = 0x4,
     METHOD_PUT     = 0x8,
     METHOD_PATCH   = 0x10,
     METHOD_DELETE  = 0x20,
     METHOD_TRACE   = 0x40,
     METHOD_OPTIONS = 0x80,
     METHOD_LINK    = 0x100,
     METHOD_UNLINK  = 0x200,
 };
 enum _HTPreconditions : __int32
 {                                       // ...
     HT_NO_MATCH        = 0x0,
     HT_MATCH_THIS      = 0x1,
     HT_MATCH_ANY       = 0x2,
     HT_DONT_MATCH_THIS = 0x3,
     HT_DONT_MATCH_ANY  = 0x4,
 };
 enum __bitmask _HTGnHd : __int32
 {                                       // ...
     HT_G_CC              = 0x1,
     HT_G_CONNECTION      = 0x2,
     HT_G_DATE            = 0x4,
     HT_G_PRAGMA_NO_CACHE = 0x8,
     HT_G_FORWARDED       = 0x10,
     HT_G_MESSAGE_ID      = 0x20,
     HT_G_MIME            = 0x40,
     HT_G_TRAILER         = 0x80,
     HT_G_TRANSFER        = 0x100,
     HT_G_EXTRA_HEADERS   = 0x200,
 };
 enum __bitmask _HTRsHd : __int32
 {                                       // ...
     HT_S_AGE         = 0x1,
     HT_S_LOCATION    = 0x2,
     HT_S_PROXY_AUTH  = 0x4,
     HT_S_PUBLIC      = 0x8,
     HT_S_RETRY_AFTER = 0x10,
     HT_S_SERVER      = 0x20,
     HT_S_VARY        = 0x40,
     HT_S_WARNING     = 0x80,
     HT_S_WWW_AUTH    = 0x100,
     HT_S_TRAILER     = 0x200,
 };
 enum __bitmask _HTEnHd : __int32
 {                                       // ...
     HT_E_ALLOW            = 0x1,
     HT_E_CONTENT_BASE     = 0x2,
     HT_E_CONTENT_ENCODING = 0x4,
     HT_E_CONTENT_LANGUAGE = 0x8,
     HT_E_CONTENT_LENGTH   = 0x10,
     HT_E_CONTENT_LOCATION = 0x20,
     HT_E_CONTENT_MD5      = 0x40,
     HT_E_CONTENT_RANGE    = 0x80,
     HT_E_CTE              = 0x100,
     HT_E_CONTENT_TYPE     = 0x200,
     HT_E_DERIVED_FROM     = 0x400,
     HT_E_ETAG             = 0x800,
     HT_E_EXPIRES          = 0x1000,
     HT_E_LAST_MODIFIED    = 0x2000,
     HT_E_LINK             = 0x4000,
     HT_E_TITLE            = 0x8000,
     HT_E_URI              = 0x10000,
     HT_E_VERSION          = 0x20000,
 };
 enum _HTReload : __int32
 {                                       // ...
     HT_CACHE_OK             = 0x0,
     HT_CACHE_FLUSH_MEM      = 0x1,
     HT_CACHE_VALIDATE       = 0x2,
     HT_CACHE_END_VALIDATE   = 0x4,
     HT_CACHE_RANGE_VALIDATE = 0x8,
     HT_CACHE_FLUSH          = 0x10,
     HT_CACHE_ERROR          = 0x20,
 };
 enum $8D7E01CBCE6A43BEB94ACB112259962F : __int32
 {
     PROF_GUARD_TESTING   = 0x0,
     PROF_GUARD_COM_FRAME = 0x1,
 };
 enum __bitmask StatType : __int32
 {                                       // ...
     STAT_TYPE_PRIMARY   = 0x1,          // ...
     STAT_TYPE_SECONDARY = 0x2,          // ...
     STAT_TYPE_EQUIPMENT = 0x4,          // ...
     STAT_TYPE_WEAPON    = 0x8,          // ...
     STAT_TYPE_ABILITY   = 0x10,         // ...
     STAT_TYPE_GRENADE   = 0x20,         // ...
 };
 enum MapProfileTrackedValue : __int32
 {                                       // ...
     MAP_PROFILE_FILE_OPEN = 0x0,
     MAP_PROFILE_FILE_SEEK = 0x1,
     MAP_PROFILE_FILE_READ = 0x2,
     MAP_PROFILE_VALUE_MAX = 0x3,
 };
 enum ComSaveLumpBehavior : __int32
 {                                       // ...
     COM_SAVE_LUMP_AND_CLOSE  = 0x0,
     COM_SAVE_LUMP_AND_REOPEN = 0x1,
 };
 enum LumpType : __int32
 {                                       // ...
     LUMP_MATERIALS             = 0x0,
     LUMP_LIGHTBYTES            = 0x1,
     LUMP_LIGHTGRIDENTRIES      = 0x2,
     LUMP_LIGHTGRIDCOLORS       = 0x3,
     LUMP_PLANES                = 0x4,
     LUMP_BRUSHSIDES            = 0x5,
     LUMP_BRUSHSIDEEDGECOUNTS   = 0x6,
     LUMP_BRUSHEDGES            = 0x7,
     LUMP_BRUSHES               = 0x8,
     LUMP_TRIANGLES             = 0x9,
     LUMP_DRAWVERTS             = 0xA,
     LUMP_DRAWINDICES           = 0xB,
     LUMP_CULLGROUPS            = 0xC,
     LUMP_CULLGROUPINDICES      = 0xD,
     LUMP_OBSOLETE_1            = 0xE,
     LUMP_OBSOLETE_2            = 0xF,
     LUMP_OBSOLETE_3            = 0x10,
     LUMP_OBSOLETE_4            = 0x11,
     LUMP_OBSOLETE_5            = 0x12,
     LUMP_PORTALVERTS           = 0x13,
     LUMP_OBSOLETE_6            = 0x14,
     LUMP_OBSOLETE_7            = 0x15,
     LUMP_OBSOLETE_8            = 0x16,
     LUMP_OBSOLETE_9            = 0x17,
     LUMP_AABBTREES             = 0x18,
     LUMP_CELLS                 = 0x19,
     LUMP_PORTALS               = 0x1A,
     LUMP_NODES                 = 0x1B,
     LUMP_LEAFS                 = 0x1C,
     LUMP_LEAFBRUSHES           = 0x1D,
     LUMP_LEAFSURFACES          = 0x1E,
     LUMP_COLLISIONVERTS        = 0x1F,
     LUMP_COLLISIONTRIS         = 0x20,
     LUMP_COLLISIONEDGEWALKABLE = 0x21,
     LUMP_COLLISIONBORDERS      = 0x22,
     LUMP_COLLISIONPARTITIONS   = 0x23,
     LUMP_COLLISIONAABBS        = 0x24,
     LUMP_MODELS                = 0x25,
     LUMP_VISIBILITY            = 0x26,
     LUMP_ENTITIES              = 0x27,
     LUMP_PATHCONNECTIONS       = 0x28,
     LUMP_REFLECTION_PROBES     = 0x29,
     LUMP_VERTEX_LAYER_DATA     = 0x2A,
     LUMP_PRIMARY_LIGHTS        = 0x2B,
     LUMP_LIGHTGRIDHEADER       = 0x2C,
     LUMP_LIGHTGRIDROWS         = 0x2D,
     LUMP_OBSOLETE_10           = 0x2E,
     LUMP_UNLAYERED_TRIANGLES   = 0x2F,
     LUMP_UNLAYERED_DRAWVERTS   = 0x30,
     LUMP_UNLAYERED_DRAWINDICES = 0x31,
     LUMP_UNLAYERED_CULLGROUPS  = 0x32,
     LUMP_UNLAYERED_AABBTREES   = 0x33,
     LUMP_LIGHTREGIONS          = 0x34,
     LUMP_LIGHTREGION_HULLS     = 0x35,
     LUMP_LIGHTREGION_AXES      = 0x36,
 };
 enum SideClassification : __int32
 {
     SIDE_FRONT = 0x0,
     SIDE_BACK  = 0x1,
     SIDE_ON    = 0x2,
     SIDE_CROSS = 0x3,
     SIDE_COUNT = 0x4,
 };
 enum SphereEdgeTraceResult : __int32
 {                                       // ...
     SPHERE_HITS_EDGE   = 0x0,
     SPHERE_MISSES_EDGE = 0x1,
     SPHERE_MAY_HIT_V0  = 0x2,
     SPHERE_MAY_HIT_V1  = 0x3,
 };
 enum $15F727204CFF2A120845C1ABCA9EFF6F : __int32
 {
     PLAY_MODE_FAST   = 0x0,
     PLAY_MODE_SLOW   = 0x1,
     PLAY_MODE_NORMAL = 0x2,
 };
 enum bandwidth_enum : __int32
 {
     BANDWIDTH_NARROW    = 0x0,
     BANDWIDTH_WIDE      = 0x1,
     BANDWIDTH_ULTRAWIDE = 0x2,
     NUM_BANDWIDTH_MODES = 0x3,
 };
 enum $F87199581B90CD26553E0A9AA084C751 : __int32
 {
     FL_GODMODE              = 0x1,
     FL_DEMI_GODMODE         = 0x2,
     FL_NOTARGET             = 0x4,
     FL_NO_KNOCKBACK         = 0x8,
     FL_DROPPED_ITEM         = 0x10,
     FL_NO_BOTS              = 0x20,
     FL_NO_HUMANS            = 0x40,
     FL_TOGGLE               = 0x80,
     FL_SOFTACTIVATE         = 0x100,
     FL_PARACHUTE            = 0x200,
     FL_NO_HEADCHECK         = 0x400,
     FL_SUPPORTS_LINKTO      = 0x1000,
     FL_NO_AUTO_ANIM_UPDATE  = 0x2000,
     FL_GRENADE_TOUCH_DAMAGE = 0x4000,
     FL_MISSILE_DESTABILIZED = 0x10000,
     FL_STABLE_MISSILES      = 0x20000,
     FL_REPEAT_ANIM_UPDATE   = 0x40000,
     FL_VEHICLE_TARGET       = 0x80000,
     FL_GROUND_ENT           = 0x100000,
     FL_CURSOR_HINT          = 0x200000,
     FL_USE_TURRET           = 0x400000,
     FL_MISSILE_ATTRACTOR    = 0x800000,
     FL_WEAPON_BEING_GRABBED = 0x1000000,
 };
 enum $F3BCC0001EA0B8E51E4CC6AFFC3D286A : __int32
 {
     ACTIVE_STATE_INACTIVE = 0x0,
     ACTIVE_STATE_ACTIVE   = 0x1,
     ACTIVE_STATE_WANTS_TURRET_DISMOUNT = 0x2,
 };
 enum VehicleSound : __int32
 {
     VEH_LOW_IDLE_SND    = 0x0,
     VEH_HIGH_IDLE_SND   = 0x1,
     VEH_LOW_ENGINE_SND  = 0x2,
     VEH_HIGH_ENGINE_SND = 0x3,
     VEH_TURRET_SPIN_SND = 0x4,
     VEH_TURRET_STOP_SND = 0x5,
     NUM_VEHICLE_SNDS    = 0x6,
 };
 enum VehicleMoveState : __int32
 {                                       // ...
     VEH_MOVESTATE_STOP  = 0x0,
     VEH_MOVESTATE_MOVE  = 0x1,
     VEH_MOVESTATE_HOVER = 0x2,
 };
 enum $7B2BF5886094A29560631C7D45349132 : __int32
 {
     FL_WHEEL = 0x0,
     FR_WHEEL = 0x1,
     BL_WHEEL = 0x2,
     BR_WHEEL = 0x3,
 };
 enum VehicleTurretState : __int32
 {                                       // ...
     VEH_TURRET_STOPPED  = 0x0,
     VEH_TURRET_STOPPING = 0x1,
     VEH_TURRET_MOVING   = 0x2,
 };
 enum DAMAGE_FLAGS : __int32
 {
     DAMAGE_NOFLAG       = 0x0,
     DAMAGE_RADIUS       = 0x1,
     DAMAGE_NO_ARMOR     = 0x2,
     DAMAGE_NO_KNOCKBACK = 0x4,
     DAMAGE_PENETRATION  = 0x8,
 };
 enum $0B108213060DE4AE0E1CE602F5100DDF : __int32
 {
     VFT_TYPE = 0xC,
     VFT_NUM  = 0xD,
 };
 enum $31A75C0C830F942FD6CB494087A60C13 : __int32
 {
     ENT_HANDLER_NULL               = 0x0,
     ENT_HANDLER_TRIGGER_MULTIPLE   = 0x1,
     ENT_HANDLER_TRIGGER_HURT       = 0x2,
     ENT_HANDLER_TRIGGER_HURT_TOUCH = 0x3,
     ENT_HANDLER_TRIGGER_DAMAGE     = 0x4,
     ENT_HANDLER_SCRIPT_MOVER       = 0x5,
     ENT_HANDLER_SCRIPT_MODEL       = 0x6,
     ENT_HANDLER_GRENADE            = 0x7,
     ENT_HANDLER_TIMED_OBJECT       = 0x8,
     ENT_HANDLER_ROCKET             = 0x9,
     ENT_HANDLER_CLIENT             = 0xA,
     ENT_HANDLER_CLIENT_SPECTATOR   = 0xB,
     ENT_HANDLER_CLIENT_DEAD        = 0xC,
     ENT_HANDLER_PLAYER_CLONE       = 0xD,
     ENT_HANDLER_TURRET_INIT        = 0xE,
     ENT_HANDLER_TURRET             = 0xF,
     ENT_HANDLER_DROPPED_ITEM       = 0x10,
     ENT_HANDLER_ITEM_INIT          = 0x11,
     ENT_HANDLER_ITEM               = 0x12,
     ENT_HANDLER_TRIGGER_USE        = 0x13,
     ENT_HANDLER_PRIMARY_LIGHT      = 0x14,
     ENT_HANDLER_PLAYER_BLOCK       = 0x15,
     ENT_HANDLER_VEHICLE            = 0x16,
     ENT_HANDLER_HELICOPTER         = 0x17,
     ENT_HANDLER_COUNT              = 0x18,
 };
 enum VehicleTypes : __int32
 {
     VEH_WHEELS_4      = 0x0,
     VEH_TANK          = 0x1,
     VEH_PLANE         = 0x2,
     VEH_BOAT          = 0x3,
     VEH_ARTILLERY     = 0x4,
     VEH_HELICOPTER    = 0x5,
     NUM_VEHICLE_TYPES = 0x6,
 };
 enum VehicleManualMode : __int32
 {
     VEH_MANUAL_OFF   = 0x0,
     VEH_MANUAL_ON    = 0x1,
     VEH_MANUAL_TRANS = 0x2,
 };
 enum $98A714CE55D38E537D879567E2170A15 : __int32
 {
     FIXED_LINK_ANGLES          = 0x0,
     FIXED_LINK_ANGLES_YAW_ONLY = 0x1,
     FIXED_LINK_ANGLES_NONE     = 0x2,
 };
 enum fieldtype_t : __int32
 {                                       // ...
     F_INT        = 0x0,                 // ...
     F_FLOAT      = 0x1,                 // ...
     F_LSTRING    = 0x2,                 // ...
     F_STRING     = 0x3,                 // ...
     F_VECTOR     = 0x4,                 // ...
     F_ENTITY     = 0x5,
     F_ENTHANDLE  = 0x6,
     F_VECTORHACK = 0x7,
     F_OBJECT     = 0x8,                 // ...
     F_MODEL      = 0x9,                 // ...
 };
 enum $854C867908149C343981C8BAF4C9A230 : __int32
 {
     ENTFIELD_ENTITY   = 0x0,
     ENTFIELD_SENTIENT = 0x4000,
     ENTFIELD_ACTOR    = 0x8000,
     ENTFIELD_CLIENT   = 0xC000,
     ENTFIELD_MASK     = 0xC000,
 };
 enum $F90C4BB1092B48528BFB76505F931A55 : __int32
 {
     LF_NONE        = 0x0,
     LF_MAP_RESTART = 0x1,
     LF_MAP_CHANGE  = 0x2,
     LF_EXITLEVEL   = 0x3,
 };
 enum AntiBurnHudMenus : __int32
 {
     HUD_MENU_HEALTH     = 0x0,
     HUD_MENU_AMMO       = 0x1,
     HUD_MENU_COMPASS    = 0x2,
     HUD_MENU_STANCE     = 0x3,
     HUD_MENU_OFFHAND    = 0x4,
     HUD_MENU_OBJECTIVES = 0x5,
     HUD_MENU_SPRINT     = 0x6,
 };
 enum $A1BE347394FC01D8E43F73A65E725CFC : __int32
 {
     TURRET_REQUIRES_AI     = 0x1,
     TURRET_AUTO            = 0x2,
     TURRET_FIRING          = 0x4,
     TURRET_HAS_MISS_TARGET = 0x8,
     TURRET_TAKEN_PAIN      = 0x10,
     TURRET_ERROR_INITED    = 0x20,
     TURRET_HAS_TARGET      = 0x40,
     TURRET_BAD_TARGET      = 0x80,
     TURRET_FIRST_PITCH_CAP = 0x100,
     TURRET_PITCH_CAP       = 0x200,
     TURRET_PITCH_MIN       = 0x400,
     TURRET_INIT_VIEW       = 0x800,
 };
 enum $1C8F8D8F9DAF288AC6C72DD8C5683042 : __int32
 {
     PMOVE_HANDLER_CLIENT = 0x0,
     PMOVE_HANDLER_SERVER = 0x1,
     PMOVE_HANDLER_COUNT  = 0x2,
 };
 enum $9D9FE1FBF61515F2094BBC74EAE32761 : __int32
 {
     HE_FONT_DEFAULT    = 0x0,
     HE_FONT_BIGFIXED   = 0x1,
     HE_FONT_SMALLFIXED = 0x2,
     HE_FONT_OBJECTIVE  = 0x3,
     HE_FONT_BIG        = 0x4,
     HE_FONT_SMALL      = 0x5,
     HE_FONT_COUNT      = 0x6,
 };
 enum scriptAnimPerkStates_t : __int32
 {
     ANIM_PERK_UNUSED       = 0x0,
     ANIM_PERK_LASTSTAND    = 0x1,
     ANIM_PERK_GRENADEDEATH = 0x2,
     NUM_ANIM_PERKSTATES    = 0x3,
 };
 enum PlayerSpreadOverrideState : __int32
 {
     PSOS_DISABLED  = 0x0,
     PSOS_RESETTING = 0x1,
     PSOS_ENABLED   = 0x2,
 };
 enum $53B7CF4E68BA96864516EAE91DEE3467 : __int32
 {
     IMPACTEFFECT_HEADSHOT = 0x1,
     IMPACTEFFECT_FATAL    = 0x2,
     IMPACTEFFECT_EXIT     = 0x4,
 };
 enum $FFE723C3A54D7F6DDF86A219D7944B2F : __int32
 {
     FX_STATUS_REF_COUNT_MASK         = 0xFFFF,
     FX_STATUS_HAS_PENDING_LOOP_ELEMS = 0x10000,
     FX_STATUS_OWNED_EFFECTS_SHIFT    = 0x11,
     FX_STATUS_OWNED_EFFECTS_MASK     = 0x7FE0000,
     FX_STATUS_DEFER_UPDATE           = 0x8000000,
     FX_STATUS_SELF_OWNED             = 0x10000000,
     FX_STATUS_IS_LOCKED              = 0x20000000,
     FX_STATUS_IS_LOCKED_MASK         = 0x60000000,
 };
 enum $8340209549BE697D1F033EFBE5B42EDF : __int32
 {
     FX_ELEM_CLASS_SPRITE    = 0x0,
     FX_ELEM_CLASS_NONSPRITE = 0x1,
     FX_ELEM_CLASS_CLOUD     = 0x2,
     FX_ELEM_CLASS_COUNT     = 0x3,
 };
 enum FxRandKey : __int32
 {                                       // ...
     FXRAND_VELOCITY_X             = 0x0,
     FXRAND_VELOCITY_Y             = 0x1,
     FXRAND_VELOCITY_Z             = 0x2,
     FXRAND_ANGULAR_VELOCITY_PITCH = 0x3,
     FXRAND_ANGULAR_VELOCITY_YAW   = 0x4,
     FXRAND_ANGULAR_VELOCITY_ROLL  = 0x5,
     FXRAND_ORIGIN_X               = 0x6,
     FXRAND_ORIGIN_Y               = 0x7,
     FXRAND_ORIGIN_Z               = 0x8,
     FXRAND_OFFSET_YAW             = 0x9,
     FXRAND_OFFSET_HEIGHT          = 0xA,
     FXRAND_OFFSET_RADIUS          = 0xB,
     FXRAND_ANGLES_PITCH           = 0xC,
     FXRAND_ANGLES_YAW             = 0xD,
     FXRAND_ANGLES_ROLL            = 0xE,
     FXRAND_GRAVITY                = 0xF,
     FXRAND_REFLECTION_FACTOR      = 0x10,
     FXRAND_LIFE_SPAN              = 0x11,
     FXRAND_SPAWN_DELAY            = 0x12,
     FXRAND_SPAWN_COUNT            = 0x13,
     FXRAND_EMIT_DIST              = 0x14,
     FXRAND_VISUAL                 = 0x15,
     FXRAND_TILE_START             = 0x16,
     FXRAND_COLOR                  = 0x17,
     FXRAND_ROTATION               = 0x18,
     FXRAND_ROTATION_DELTA         = 0x19,
     FXRAND_SIZE_0                 = 0x1A,
     FXRAND_SIZE_1                 = 0x1B,
     FXRAND_SCALE                  = 0x1C,
     FXRAND_COUNT                  = 0x1D,
 };
 enum FxUpdateResult : __int32
 {                                       // ...
     FX_UPDATE_REMOVE = 0x0,
     FX_UPDATE_KEEP   = 0x1,
 };
 enum GfxWarningType : __int32
 {                                       // ...
     R_WARN_FRONTEND_ENT_LIMIT        = 0x0,
     R_WARN_KNOWN_MODELS              = 0x1,
     R_WARN_KNOWN_SPECIAL_MODELS      = 0x2,
     R_WARN_MODEL_LIGHT_CACHE         = 0x3,
     R_WARN_SCENE_ENTITIES            = 0x4,
     R_WARN_TEMP_SKIN_BUF_SIZE        = 0x5,
     R_WARN_MAX_SKINNED_CACHE_VERTICES = 0x6,
     R_WARN_MAX_SCENE_SURFS_SIZE      = 0x7,
     R_WARN_PORTAL_PLANES             = 0x8,
     R_WARN_MAX_CLOUDS                = 0x9,
     R_WARN_MAX_DLIGHTS               = 0xA,
     R_WARN_SMODEL_LIGHTING           = 0xB,
     R_WARN_MAX_DRAWSURFS             = 0xC,
     R_WARN_GFX_CODE_MESH_LIMIT       = 0xD,
     R_WARN_GFX_MARK_MESH_LIMIT       = 0xE,
     R_WARN_MAX_SCENE_DRAWSURFS       = 0xF,
     R_WARN_MAX_FX_DRAWSURFS          = 0x10,
     R_WARN_NONEMISSIVE_FX_MATERIAL   = 0x11,
     R_WARN_NONLIGHTMAP_MARK_MATERIAL = 0x12,
     R_WARN_PRIM_DRAW_SURF_BUFFER_SIZE = 0x13,
     R_WARN_CMDBUF_OVERFLOW           = 0x14,
     R_WARN_MISSING_DECL_NONDEBUG     = 0x15,
     R_WARN_MAX_DYNENT_REFS           = 0x16,
     R_WARN_MAX_SCENE_DOBJ_REFS       = 0x17,
     R_WARN_MAX_SCENE_MODEL_REFS      = 0x18,
     R_WARN_MAX_SCENE_BRUSH_REFS      = 0x19,
     R_WARN_MAX_CODE_INDS             = 0x1A,
     R_WARN_MAX_CODE_VERTS            = 0x1B,
     R_WARN_MAX_CODE_ARGS             = 0x1C,
     R_WARN_MAX_MARK_INDS             = 0x1D,
     R_WARN_MAX_MARK_VERTS            = 0x1E,
     R_WARN_DEBUG_ALLOC               = 0x1F,
     R_WARN_SPOT_LIGHT_LIMIT          = 0x20,
     R_WARN_FX_ELEM_LIMIT             = 0x21,
     R_WARN_WORKER_CMD_SIZE           = 0x22,
     R_WARN_UNKNOWN_STATICMODEL_SHADER = 0x23,
     R_WARN_UNKNOWN_XMODEL_SHADER     = 0x24,
     R_WARN_DYNAMIC_INDEX_BUFFER_SIZE = 0x25,
     R_WARN_TOO_MANY_LIGHT_GRID_POINTS = 0x26,
     R_WARN_FOGABLE_2DTEXT            = 0x27,
     R_WARN_FOGABLE_2DGLYPH           = 0x28,
     R_WARN_COUNT                     = 0x29,
 };
 enum $75BB4F8A1DEC312B1EB2F0961913F9D7 : __int32
 {
     FX_EFFECT_NEEDS_LIGHTING = 0x1,
 };
 enum MaterialUpdateFrequency : __int32
 {                                       // ...
     MTL_UPDATE_PER_PRIM   = 0x0,
     MTL_UPDATE_PER_OBJECT = 0x1,        // ...
     MTL_UPDATE_RARELY     = 0x2,        // ...
     MTL_UPDATE_CUSTOM     = 0x3,        // ...
 };
 enum _D3DFILLMODE : __int32
 {
     D3DFILL_POINT       = 0x1,
     D3DFILL_WIREFRAME   = 0x2,
     D3DFILL_SOLID       = 0x3,
     D3DFILL_FORCE_DWORD = 0x7FFFFFFF,
 };
 enum _D3DBLENDOP : __int32
 {
     D3DBLENDOP_ADD         = 0x1,
     D3DBLENDOP_SUBTRACT    = 0x2,
     D3DBLENDOP_REVSUBTRACT = 0x3,
     D3DBLENDOP_MIN         = 0x4,
     D3DBLENDOP_MAX         = 0x5,
     D3DBLENDOP_FORCE_DWORD = 0x7FFFFFFF,
 };
 enum _D3DCMPFUNC : __int32
 {
     D3DCMP_NEVER        = 0x1,
     D3DCMP_LESS         = 0x2,
     D3DCMP_EQUAL        = 0x3,
     D3DCMP_LESSEQUAL    = 0x4,
     D3DCMP_GREATER      = 0x5,
     D3DCMP_NOTEQUAL     = 0x6,
     D3DCMP_GREATEREQUAL = 0x7,
     D3DCMP_ALWAYS       = 0x8,
     D3DCMP_FORCE_DWORD  = 0x7FFFFFFF,
 };
 enum _D3DSTENCILOP : __int32
 {
     D3DSTENCILOP_KEEP        = 0x1,
     D3DSTENCILOP_ZERO        = 0x2,
     D3DSTENCILOP_REPLACE     = 0x3,
     D3DSTENCILOP_INCRSAT     = 0x4,
     D3DSTENCILOP_DECRSAT     = 0x5,
     D3DSTENCILOP_INVERT      = 0x6,
     D3DSTENCILOP_INCR        = 0x7,
     D3DSTENCILOP_DECR        = 0x8,
     D3DSTENCILOP_FORCE_DWORD = 0x7FFFFFFF,
 };
 enum _D3DZBUFFERTYPE : __int32
 {
     D3DZB_FALSE       = 0x0,
     D3DZB_TRUE        = 0x1,
     D3DZB_USEW        = 0x2,
     D3DZB_FORCE_DWORD = 0x7FFFFFFF,
 };
 enum GfxRenderCommand : __int32
 {                                       // ...
     RC_END_OF_LIST                   = 0x0,
     RC_SET_MATERIAL_COLOR            = 0x1,
     RC_SAVE_SCREEN                   = 0x2,
     RC_SAVE_SCREEN_SECTION           = 0x3,
     RC_CLEAR_SCREEN                  = 0x4,
     RC_SET_VIEWPORT                  = 0x5,
     RC_FIRST_NONCRITICAL             = 0x6,
     RC_STRETCH_PIC                   = 0x6,
     RC_STRETCH_PIC_FLIP_ST           = 0x7,
     RC_STRETCH_PIC_ROTATE_XY         = 0x8,
     RC_STRETCH_PIC_ROTATE_ST         = 0x9,
     RC_STRETCH_RAW                   = 0xA,
     RC_DRAW_QUAD_PIC                 = 0xB,
     RC_DRAW_FULL_SCREEN_COLORED_QUAD = 0xC,
     RC_DRAW_TEXT_2D                  = 0xD,
     RC_DRAW_TEXT_3D                  = 0xE,
     RC_BLEND_SAVED_SCREEN_BLURRED    = 0xF,
     RC_BLEND_SAVED_SCREEN_FLASHED    = 0x10,
     RC_DRAW_POINTS                   = 0x11,
     RC_DRAW_LINES                    = 0x12,
     RC_DRAW_TRIANGLES                = 0x13,
     RC_DRAW_PROFILE                  = 0x14,
     RC_PROJECTION_SET                = 0x15,
     RC_COUNT                         = 0x16,
 };
 enum __shex GfxDepthRangeType : __int32
 {                                       // ...
     GFX_DEPTH_RANGE_SCENE     = 0x0,
     GFX_DEPTH_RANGE_VIEWMODEL = 0x2,
     GFX_DEPTH_RANGE_FULL      = -0x1,
 };
 enum $A1218AF7D1C12B1D50BD9B9B70D78FD4 : __int32
 {
     SCENE_VIEW_CAMERA       = 0x0,
     SCENE_VIEW_SUNSHADOW_0  = 0x1,
     SCENE_VIEW_SUNSHADOW_1  = 0x2,
     SCENE_VIEW_COUNT        = 0x3,
     SCENE_VIEW_SPOTSHADOW_0 = 0x3,
     SCENE_VIEW_SPOTSHADOW_1 = 0x4,
     SCENE_VIEW_SPOTSHADOW_2 = 0x5,
     SCENE_VIEW_SPOTSHADOW_3 = 0x6,
     SCENE_VIEW_COUNT_ENTVIS = 0x7,
 };
 enum __shex surfaceType_t : __int32
 {                                       // ...
     SF_TRIANGLES            = 0x0,
     SF_TRIANGLES_PRETESS    = 0x1,
     SF_BEGIN_STATICMODEL    = 0x2,
     SF_STATICMODEL_RIGID    = 0x2,
     SF_STATICMODEL_PRETESS  = 0x3,
     SF_STATICMODEL_CACHED   = 0x4,
     SF_STATICMODEL_SKINNED  = 0x5,
     SF_END_STATICMODEL      = 0x6,
     SF_BMODEL               = 0x6,
     SF_BEGIN_XMODEL         = 0x7,
     SF_XMODEL_RIGID         = 0x7,
     SF_XMODEL_RIGID_SKINNED = 0x8,
     SF_XMODEL_SKINNED       = 0x9,
     SF_END_XMODEL           = 0xA,
     SF_BEGIN_FX             = 0xA,
     SF_CODE_MESH            = 0xA,
     SF_MARK_MESH            = 0xB,
     SF_PARTICLE_CLOUD       = 0xC,
     SF_END_FX               = 0xD,
     SF_NUM_SURFACE_TYPES    = 0xD,
     SF_FORCE_32_BITS        = -0x1,
 };
 enum GfxViewMode : __int32
 {                                       // ...
     VIEW_MODE_NONE     = 0x0,
     VIEW_MODE_3D       = 0x1,
     VIEW_MODE_2D       = 0x2,
     VIEW_MODE_IDENTITY = 0x3,
 };
 enum GfxViewportBehavior : __int32
 {                                       // ...
     GFX_USE_VIEWPORT_FOR_VIEW = 0x0,    // ...
     GFX_USE_VIEWPORT_FULL     = 0x1,    // ...
 };
 enum ShadowType : __int32
 {                                       // ...
     SHADOW_NONE   = 0x0,
     SHADOW_COOKIE = 0x1,
     SHADOW_MAP    = 0x2,
 };
 enum MarkFragmentsAgainstEnum : __int32
 {                                       // ...
     MARK_FRAGMENTS_AGAINST_BRUSHES = 0x0,
     MARK_FRAGMENTS_AGAINST_MODELS  = 0x1,
 };
 enum $747AC7BC2D9086BEE24ADBF561714DA6 : __int32
 {
     FX_FLAG_TYPE_EDITOR = 0x0,
     FX_FLAG_TYPE_NATIVE = 0x1,
     FX_FLAG_TYPE_ATLAS  = 0x2,
     FX_FLAG_TYPE_COUNT  = 0x3,
 };
 enum $CA71BBF97BD0D498DDD74A9DF9E401D6 : __int32
 {
     FX_ED_FLAG_LOOPING               = 0x1,
     FX_ED_FLAG_USE_RANDOM_COLOR      = 0x2,
     FX_ED_FLAG_USE_RANDOM_ALPHA      = 0x4,
     FX_ED_FLAG_USE_RANDOM_SIZE_0     = 0x8,
     FX_ED_FLAG_USE_RANDOM_SIZE_1     = 0x10,
     FX_ED_FLAG_USE_RANDOM_SCALE      = 0x20,
     FX_ED_FLAG_USE_RANDOM_ROTATION_DELTA = 0x40,
     FX_ED_FLAG_MODULATE_COLOR_BY_ALPHA = 0x80,
     FX_ED_FLAG_USE_RANDOM_VELOCITY_0 = 0x100,
     FX_ED_FLAG_USE_RANDOM_VELOCITY_1 = 0x200,
     FX_ED_FLAG_BACKCOMPAT_VELOCITY   = 0x400,
     FX_ED_FLAG_ABSOLUTE_VELOCITY_0   = 0x800,
     FX_ED_FLAG_ABSOLUTE_VELOCITY_1   = 0x1000,
     FX_ED_FLAG_PLAY_ON_TOUCH         = 0x2000,
     FX_ED_FLAG_PLAY_ON_DEATH         = 0x4000,
     FX_ED_FLAG_PLAY_ON_RUN           = 0x8000,
     FX_ED_FLAG_BOUNDING_SPHERE       = 0x10000,
     FX_ED_FLAG_USE_ITEM_CLIP         = 0x20000,
     FX_ED_FLAG_DISABLED              = 0x80000000,
 };
 enum FX_DrawElement_Setup_Handle_Overtime_Enum : __int32
 {
     FX_DRAWELEMENT_SETUP_DO_NOT_HANDLE_OVERTIME = 0x0,
     FX_DRAWELEMENT_SETUP_CLAMP_OVERTIME = 0x1,
 };
 enum FxSampleChannel : __int32
 {                                       // ...
     FX_CHAN_RGBA     = 0x0,
     FX_CHAN_SIZE_0   = 0x1,
     FX_CHAN_SIZE_1   = 0x2,
     FX_CHAN_SCALE    = 0x3,
     FX_CHAN_ROTATION = 0x4,
     FX_CHAN_COUNT    = 0x5,
     FX_CHAN_NONE     = 0x6,
 };
 enum $6B5913277FB02B4635833F62604EE97D : __int32
 {
     PHYS_OBJ_ID_NULL = 0x0,
     PHYS_OBJ_ID_DEAD = 0xFFFFFFFF,
 };
 enum $FF0F9BB4667D9529B36B1787C14C63F7 : __int32
 {
     FX_TYPE_BULLET_HIT_SMALL_NORMAL = 0x0,
     FX_TYPE_BULLET_HIT_SMALL_EXIT   = 0x1,
     FX_TYPE_BULLET_HIT_LARGE_NORMAL = 0x2,
     FX_TYPE_BULLET_HIT_LARGE_EXIT   = 0x3,
     FX_TYPE_SHOTGUN_HIT_NORMAL      = 0x4,
     FX_TYPE_SHOTGUN_HIT_EXIT        = 0x5,
     FX_TYPE_BULLET_HIT_AP_NORMAL    = 0x6,
     FX_TYPE_BULLET_HIT_AP_EXIT      = 0x7,
     FX_TYPE_GRENADE_BOUNCE          = 0x8,
     FX_TYPE_GRENADE_EXPLODE         = 0x9,
     FX_TYPE_ROCKET_EXPLODE          = 0xA,
     FX_TYPE_PROJECTILE_DUD          = 0xB,
     FX_TYPE_COUNT                   = 0xC,
 };
 enum DevGuiInputButton : __int32
 {                                       // ...
     INPUT_UP           = 0x0,
     INPUT_DOWN         = 0x1,
     INPUT_LEFT         = 0x2,
     INPUT_RIGHT        = 0x3,
     INPUT_ACCEPT       = 0x4,
     INPUT_REJECT       = 0x5,
     INPUT_BIND         = 0x6,
     INPUT_GRAPH_EDIT   = 0x7,
     INPUT_GRAPH_ADD    = 0x8,
     INPUT_GRAPH_REMOVE = 0x9,
     INPUT_GRAPH_SAVE   = 0xA,
     INPUT_COUNT        = 0xB,
 };
 enum DevGuiInputAxis : __int32
 {                                       // ...
     SCROLL_XAXIS      = 0x0,
     SCROLL_YAXIS      = 0x1,
     SCROLL_AXIS_COUNT = 0x2,
 };
 enum DevGuiInputState : __int32
 {                                       // ...
     SCROLL_NONE    = 0x0,
     SCROLL_PRESSED = 0x1,
     SCROLL_STALLED = 0x2,
     SCROLL_HELD    = 0x3,
 };
 enum DevGuiTokenResult : __int32
 {                                       // ...
     DEVGUI_TOKEN_ERROR = 0x0,
     DEVGUI_TOKEN_MORE  = 0x1,
     DEVGUI_TOKEN_LAST  = 0x2,
 };
 enum $4F2A0E90FE52E2ED541E463F68A28621 : __int32
 {
     DEV_CHILD_MENU      = 0x0,
     DEV_CHILD_DVAR      = 0x1,
     DEV_CHILD_COMMAND   = 0x2,
     DEV_CHILD_GRAPH     = 0x3,
     DEV_CHILD_TYPECOUNT = 0x4,
 };
 enum $D93A52C218787A3ED865FD745137F4B3 : __int32
 {
     DM_MEMORY_TEMP     = 0x0,
     DM_MEMORY_VIRTUAL  = 0x1,
     DM_MEMORY_PHYSICAL = 0x2,
 };
 enum $1B8EAFF1434832E143B04F7E036A82BD : __int32
 {
     TS_2D           = 0x0,
     TS_FUNCTION     = 0x1,
     TS_COLOR_MAP    = 0x2,
     TS_UNUSED_1     = 0x3,
     TS_UNUSED_2     = 0x4,
     TS_NORMAL_MAP   = 0x5,
     TS_UNUSED_3     = 0x6,
     TS_UNUSED_4     = 0x7,
     TS_SPECULAR_MAP = 0x8,
     TS_UNUSED_5     = 0x9,
     TS_UNUSED_6     = 0xA,
     TS_WATER_MAP    = 0xB,
 };
 enum nodeType : __int32
 {                                       // ...
     NODE_BADNODE             = 0x0,
     NODE_PATHNODE            = 0x1,
     NODE_COVER_STAND         = 0x2,
     NODE_COVER_CROUCH        = 0x3,
     NODE_COVER_CROUCH_WINDOW = 0x4,
     NODE_COVER_PRONE         = 0x5,
     NODE_COVER_RIGHT         = 0x6,
     NODE_COVER_LEFT          = 0x7,
     NODE_COVER_WIDE_RIGHT    = 0x8,
     NODE_COVER_WIDE_LEFT     = 0x9,
     NODE_CONCEALMENT_STAND   = 0xA,
     NODE_CONCEALMENT_CROUCH  = 0xB,
     NODE_CONCEALMENT_PRONE   = 0xC,
     NODE_REACQUIRE           = 0xD,
     NODE_BALCONY             = 0xE,
     NODE_SCRIPTED            = 0xF,
     NODE_NEGOTIATION_BEGIN   = 0x10,
     NODE_NEGOTIATION_END     = 0x11,
     NODE_TURRET              = 0x12,
     NODE_GUARD               = 0x13,
     NODE_NUMTYPES            = 0x14,
     NODE_DONTLINK            = 0x14,
 };
 enum MaterialWorldVertexFormat : __int32
 {                                       // ...
     MTL_WORLDVERT_TEX_1_NRM_1 = 0x0,    // ...
     MTL_WORLDVERT_TEX_2_NRM_1 = 0x1,    // ...
     MTL_WORLDVERT_TEX_2_NRM_2 = 0x2,
     MTL_WORLDVERT_TEX_3_NRM_1 = 0x3,    // ...
     MTL_WORLDVERT_TEX_3_NRM_2 = 0x4,
     MTL_WORLDVERT_TEX_3_NRM_3 = 0x5,
     MTL_WORLDVERT_TEX_4_NRM_1 = 0x6,    // ...
     MTL_WORLDVERT_TEX_4_NRM_2 = 0x7,
     MTL_WORLDVERT_TEX_4_NRM_3 = 0x8,
     MTL_WORLDVERT_TEX_5_NRM_1 = 0x9,    // ...
     MTL_WORLDVERT_TEX_5_NRM_2 = 0xA,
     MTL_WORLDVERT_TEX_5_NRM_3 = 0xB,
 };
 enum $82FE27F13E2804A2BFF43495E4DE60C8 : __int32
 {
     ENT_DRAW_DOBJ  = 0x0,
     ENT_DRAW_BRUSH = 0x1,
     ENT_DRAW_COUNT = 0x2,
 };
 enum $2B76725870934D0249060F3F22A0B85A : __int32
 {
     RENDERCMD_BEGINFRAME = 0x1,
     RENDERCMD_ENDFRAME   = 0x2,
 };
 enum rankTableColumns_t : __int32
 {                                       // ...
     MP_RANKTABLE_RANKID       = 0x0,
     MP_RANKTABLE_RANK         = 0x1,
     MP_RANKTABLE_MINXP        = 0x2,
     MP_RANKTABLE_XPTONEXT     = 0x3,
     MP_RANKTABLE_SHORTRANK    = 0x4,
     MP_RANKTABLE_FULLRANK     = 0x5,
     MP_RANKTABLE_ICON         = 0x6,
     MP_RANKTABLE_MAXXP        = 0x7,
     MP_RANKTABLE_WEAPUNLOCK   = 0x8,
     MP_RANKTABLE_PERKUNLOCK   = 0x9,
     MP_RANKTABLE_CHALLENGE    = 0xA,
     MP_RANKTABLE_CAMO         = 0xB,
     MP_RANKTABLE_ATTACHMENT   = 0xC,
     MP_RANKTABLE_LEVEL        = 0xD,
     MP_RANKTABLE_DISPLAYLEVEL = 0xE,
     MP_RANKTABLE_COUNT        = 0xF,
 };
 enum $889BDFD573EF65A8169C43FA64FBB7C2 : __int32
 {
     KEYS_ALL          = 0x0,
     KEYS_GAMEPAD_ONLY = 0x1,
 };
 enum LocSelInputState : __int32
 {                                       // ...
     LOC_SEL_INPUT_NONE    = 0x0,
     LOC_SEL_INPUT_CONFIRM = 0x1,
     LOC_SEL_INPUT_CANCEL  = 0x2,
 };
 enum $911B1C60E22E7A2B5FD643458531C5D6 : __int32
 {
     KB_LEFT             = 0x0,
     KB_RIGHT            = 0x1,
     KB_FORWARD          = 0x2,
     KB_BACK             = 0x3,
     KB_LOOKUP           = 0x4,
     KB_LOOKDOWN         = 0x5,
     KB_MOVELEFT         = 0x6,
     KB_MOVERIGHT        = 0x7,
     KB_STRAFE           = 0x8,
     KB_SPEED            = 0x9,
     KB_UP               = 0xA,
     KB_DOWN             = 0xB,
     KB_ANYUP            = 0xC,
     KB_MLOOK            = 0xD,
     KB_ATTACK           = 0xE,
     KB_BREATH           = 0xF,
     KB_FRAG             = 0x10,
     KB_OFFHANDSECONDARY = 0x11,
     KB_MELEE            = 0x12,
     KB_ACTIVATE         = 0x13,
     KB_RELOAD           = 0x14,
     KB_USE_RELOAD       = 0x15,
     KB_LEANLEFT         = 0x16,
     KB_LEANRIGHT        = 0x17,
     KB_PRONE            = 0x18,
     KB_CROUCH           = 0x19,
     KB_THROW            = 0x1A,
     KB_SPRINT           = 0x1B,
     KB_NIGHTVISION      = 0x1C,
     KB_TALK             = 0x1D,
     NUM_BUTTONS         = 0x1E,
 };
 enum weapAnimNumber_t : __int32
 {
     WEAP_IDLE                = 0x0,
     WEAP_FORCE_IDLE          = 0x1,
     WEAP_ATTACK              = 0x2,
     WEAP_ATTACK_LASTSHOT     = 0x3,
     WEAP_RECHAMBER           = 0x4,
     WEAP_ADS_ATTACK          = 0x5,
     WEAP_ADS_ATTACK_LASTSHOT = 0x6,
     WEAP_ADS_RECHAMBER       = 0x7,
     WEAP_MELEE_ATTACK        = 0x8,
     WEAP_MELEE_CHARGE        = 0x9,
     WEAP_DROP                = 0xA,
     WEAP_RAISE               = 0xB,
     WEAP_FIRST_RAISE         = 0xC,
     WEAP_RELOAD              = 0xD,
     WEAP_RELOAD_EMPTY        = 0xE,
     WEAP_RELOAD_START        = 0xF,
     WEAP_RELOAD_END          = 0x10,
     WEAP_ALTSWITCHFROM       = 0x11,
     WEAP_ALTSWITCHTO         = 0x12,
     WEAP_QUICK_DROP          = 0x13,
     WEAP_QUICK_RAISE         = 0x14,
     WEAP_EMPTY_DROP          = 0x15,
     WEAP_EMPTY_RAISE         = 0x16,
     WEAP_SPRINT_IN           = 0x17,
     WEAP_SPRINT_LOOP         = 0x18,
     WEAP_SPRINT_OUT          = 0x19,
     WEAP_HOLD_FIRE           = 0x1A,
     WEAP_DETONATE            = 0x1B,
     WEAP_NIGHTVISION_WEAR    = 0x1C,
     WEAP_NIGHTVISION_REMOVE  = 0x1D,
     MAX_WP_ANIMATIONS        = 0x1E,
 };
 enum $73E480FCE7B67BAA29FC24DF5A08B1FF : __int32
 {
     WEAP_ANIM_VIEWMODEL_START = 0x0,
     WEAP_ANIM_VIEWMODEL_END   = 0x1F,
 };
 enum LaserOwnerEnum : __int32
 {                                       // ...
     LASER_OWNER_NON_PLAYER = 0x0,
     LASER_OWNER_PLAYER     = 0x1,
 };
 enum leType_t : __int32
 {                                       // ...
     LE_MOVING_TRACER = 0x0,
 };
 enum $0430AA46DF96A968652D06883B1CD67C : __int32
 {
     DTYPE_BOOL  = 0x0,
     DTYPE_FLOAT = 0x1,
     DTYPE_VEC3  = 0x2,
 };
 enum $4B4088CFD7D3A6DA3D623EBFCC5A92EB : __int32
 {
     CULL_OUT       = 0x0,
     CULL_CALC_POSE = 0x1,
     CULL_CALC_SKIN = 0x2,
 };
 enum SCOREBOARD_FIELDS : __int32
 {
     SCOREBOARD_CLIENT     = 0x0,
     SCOREBOARD_SCORE      = 0x1,
     SCOREBOARD_PING       = 0x2,
     SCOREBOARD_DEATHS     = 0x3,
     SCOREBOARD_STATUSICON = 0x4,
     SCOREBOARD_RANKKILLS  = 0x5,
     SCOREBOARD_ASSISTS    = 0x6,
     SCOREBOARD_NUMFIELDS  = 0x7,
 };
 enum SCOREBOARD_HEADER : __int32
 {
     SCOREBOARD_SVCMD      = 0x0,
     SCOREBOARD_NUMSCORES  = 0x1,
     SCOREBOARD_ALLYSCORE  = 0x2,
     SCOREBOARD_AXISSCORE  = 0x3,
     SCOREBOARD_SCORELIMIT = 0x4,
     SCOREBOARD_HEADERSIZE = 0x5,
 };
 enum listColumnTypes_t : __int32
 {                                       // ...
     LCT_NAME         = 0x0,             // ...
     LCT_CLAN         = 0x1,
     LCT_SCORE        = 0x2,             // ...
     LCT_DEATHS       = 0x3,             // ...
     LCT_PING         = 0x4,             // ...
     LCT_STATUS_ICON  = 0x5,             // ...
     LCT_TALKING_ICON = 0x6,             // ...
     LCT_KILLS        = 0x7,             // ...
     LCT_RANK_ICON    = 0x8,             // ...
     LCT_ASSISTS      = 0x9,             // ...
     LCT_NUM          = 0xA,
 };
 enum cgDrawTalkEnum : __int32
 {
     CG_TALKER_NONE     = 0x0,
     CG_TALKER_ALL      = 0x1,
     CG_TALKER_FRIENDLY = 0x2,
     CG_TALKER_ENEMY    = 0x3,
     CG_TALKER_COUNT    = 0x4,
 };
 enum CompassType : __int32
 {                                       // ...
     COMPASS_TYPE_PARTIAL = 0x0,
     COMPASS_TYPE_FULL    = 0x1,
 };
 enum EquipmentSound_t : __int32
 {                                       // ...
     EQS_WALKING    = 0x0,
     EQS_RUNNING    = 0x1,
     EQS_SPRINTING  = 0x2,
     EQS_QWALKING   = 0x3,
     EQS_QRUNNING   = 0x4,
     EQS_QSPRINTING = 0x5,
 };
 enum scriptAnimNoteType_t : __int32
 {
     ANIM_NOTE_NONE   = 0x0,
     ANIM_NOTE_RELOAD = 0x1,
     NUM_ANIM_NOTES   = 0x2,
 };
 enum mg42anims_t : __int32
 {
     MG42ANIM_ROOT = 0x0,
     MG42ANIM_IDLE = 0x1,
     MG42ANIM_FIRE = 0x2,
     MG42ANIM_NUM  = 0x3,
 };
 enum helicopteranims_t : __int32
 {
     HELICOPTER_ROOT          = 0x0,
     HELICOPTER_ROTORS_ROTATE = 0x1,
     HELICOPTER_NUM           = 0x2,
 };
 enum parseSkip_t : __int32
 {                                       // ...
     SKIP_NO        = 0x0,
     SKIP_YES       = 0x1,
     SKIP_ALL_ELIFS = 0x2,
 };
 enum weapFieldType_t : __int32
 {
     WFT_WEAPONTYPE            = 0xC,
     WFT_WEAPONCLASS           = 0xD,
     WFT_OVERLAYRETICLE        = 0xE,
     WFT_PENETRATE_TYPE        = 0xF,
     WFT_IMPACT_TYPE           = 0x10,
     WFT_STANCE                = 0x11,
     WFT_PROJ_EXPLOSION        = 0x12,
     WFT_OFFHAND_CLASS         = 0x13,
     WFT_ANIMTYPE              = 0x14,
     WFT_ACTIVE_RETICLE_TYPE   = 0x15,
     WFT_GUIDED_MISSILE_TYPE   = 0x16,
     WFT_BOUNCE_SOUND          = 0x17,
     WFT_STICKINESS            = 0x18,
     WFT_OVERLAYINTERFACE      = 0x19,
     WFT_INVENTORYTYPE         = 0x1A,
     WFT_FIRETYPE              = 0x1B,
     WFT_AMMOCOUNTER_CLIPTYPE  = 0x1C,
     WFT_ICONRATIO_HUD         = 0x1D,
     WFT_ICONRATIO_AMMOCOUNTER = 0x1E,
     WFT_ICONRATIO_KILL        = 0x1F,
     WFT_ICONRATIO_DPAD        = 0x20,
     WFT_HIDETAGS              = 0x21,
     WFT_NOTETRACKSOUNDMAP     = 0x22,
     WFT_NUM_FIELD_TYPES       = 0x23,
 };
 enum scriptAnimWeaponPositions_t : __int32
 {
     ANIM_WP_HIP              = 0x0,
     ANIM_WP_ADS              = 0x1,
     NUM_ANIM_WEAPONPOSITIONS = 0x2,
 };
 enum proneCheckType_t : __int32
 {                                       // ...
     PCT_CLIENT = 0x0,
     PCT_ACTOR  = 0x1,
 };
 enum PmStanceFrontBack : __int32
 {                                       // ...
     PM_STANCE_STAND           = 0x0,
     PM_STANCE_PRONE           = 0x1,
     PM_STANCE_CROUCH          = 0x2,
     PM_STANCE_BACKWARD_FIRST  = 0x3,
     PM_STANCE_BACKWARD_RUN    = 0x3,
     PM_STANCE_BACKWARD_PRONE  = 0x4,
     PM_STANCE_BACKWARD_CROUCH = 0x5,
     NUM_PM_STANCE_FRONTBACK   = 0x6,
 };
 enum animBodyPart_t : __int32
 {                                       // ...
     ANIM_BP_UNUSED     = 0x0,
     ANIM_BP_LEGS       = 0x1,
     ANIM_BP_TORSO      = 0x2,
     ANIM_BP_BOTH       = 0x3,
     NUM_ANIM_BODYPARTS = 0x4,
 };
 enum scriptAnimStrafeStates_t : __int32
 {                                       // ...
     ANIM_STRAFE_NOT       = 0x0,
     ANIM_STRAFE_LEFT      = 0x1,
     ANIM_STRAFE_RIGHT     = 0x2,
     NUM_ANIM_STRAFESTATES = 0x3,
 };
 enum invalid_cmd_hint_t : __int32
 {
     INVALID_CMD_NO_HINT     = 0x0,
     INVALID_CMD_STAND_HINT  = 0x1,
     INVALID_CMD_CROUCH_HINT = 0x2,
 };
 enum MantleAnims : __int32
 {
     MANTLE_ROOT       = 0x0,
     MANTLE_UP_57      = 0x1,
     MANTLE_UP_51      = 0x2,
     MANTLE_UP_45      = 0x3,
     MANTLE_UP_39      = 0x4,
     MANTLE_UP_33      = 0x5,
     MANTLE_UP_27      = 0x6,
     MANTLE_UP_21      = 0x7,
     MANTLE_OVER_HIGH  = 0x8,
     MANTLE_OVER_MID   = 0x9,
     MANTLE_OVER_LOW   = 0xA,
     MANTLE_ANIM_COUNT = 0xB,
     MANTLE_UP_FIRST   = 0x1,
     MANTLE_UP_LAST    = 0x7,
     MANTLE_UP_COUNT   = 0x7,
     MANTLE_OVER_FIRST = 0x8,
     MANTLE_OVER_LAST  = 0xA,
     MANTLE_OVER_COUNT = 0x3,
 };
 enum animScriptParseMode_t : __int32
 {                                       // ...
     PARSEMODE_DEFINES           = 0x0,
     PARSEMODE_ANIMATION         = 0x1,
     PARSEMODE_CANNED_ANIMATIONS = 0x2,
     PARSEMODE_STATECHANGES      = 0x3,
     PARSEMODE_EVENTS            = 0x4,
     NUM_PARSEMODES              = 0x5,
 };
 enum animScriptMounted_t : __int32
 {
     MOUNTED_UNUSED        = 0x0,
     MOUNTED_MG42          = 0x1,
     NUM_ANIM_COND_MOUNTED = 0x2,
 };
 enum animScriptConditionTypes_t : __int32
 {                                       // ...
     ANIM_CONDTYPE_BITFLAGS = 0x0,       // ...
     ANIM_CONDTYPE_VALUE    = 0x1,       // ...
     NUM_ANIM_CONDTYPES     = 0x2,
 };
 typedef $C15A5588E915B6036BD955C44CEC191A $EB9FCD648227F71A1C4E86DB6CBF3B20;
 enum AISpecies : __int32
 {
     AI_SPECIES_HUMAN = 0x0,
     AI_SPECIES_DOG   = 0x1,
     MAX_AI_SPECIES   = 0x2,
     AI_SPECIES_ALL   = 0x2,
 };
 enum GfxDrawSceneMethod : __int32
 {                                       // ...
     GFX_DRAW_SCENE_NONE        = 0x0,
     GFX_DRAW_SCENE_FULLBRIGHT  = 0x1,
     GFX_DRAW_SCENE_DEBUGSHADER = 0x2,
     GFX_DRAW_SCENE_STANDARD    = 0x3,
 };
 enum $92B7A5862D0D0A102266CADFD83F70B7 : __int32
 {
     DOBJ_MAX_SURFS          = 0x40,
     XMODEL_MAX_MERGED_SURFS = 0x20,
     XMODEL_MAX_SURFS        = 0x30,
 };
 enum StaticModelFlag : __int32
 {
     STATIC_MODEL_FLAG_NO_SHADOW = 0x1,
 };
 enum $8B87E21AA2068E91D0E75800557ACF44 : __int32
 {
     CUSTOM_SAMPLER_REFLECTION_PROBE = 0x0,
     CUSTOM_SAMPLER_LIGHTMAP_PRIMARY = 0x1,
     CUSTOM_SAMPLER_LIGHTMAP_SECONDARY = 0x2,
     CUSTOM_SAMPLER_COUNT            = 0x3,
 };
 enum DxCapsResponse : __int32
 {                                       // ...
     DX_CAPS_RESPONSE_QUIT       = 0x0,  // ...
     DX_CAPS_RESPONSE_WARN       = 0x1,  // ...
     DX_CAPS_RESPONSE_INFO       = 0x2,  // ...
     DX_CAPS_RESPONSE_FORBID_SM3 = 0x3,  // ...
 };
 enum file_image_flags_t : __int32
 {
     IMG_FLAG_NOPICMIP       = 0x1,
     IMG_FLAG_NOMIPMAPS      = 0x2,
     IMG_FLAG_CUBEMAP        = 0x4,
     IMG_FLAG_VOLMAP         = 0x8,
     IMG_FLAG_STREAMING      = 0x10,
     IMG_FLAG_LEGACY_NORMALS = 0x20,
     IMG_FLAG_CLAMP_U        = 0x40,
     IMG_FLAG_CLAMP_V        = 0x80,
     IMG_FLAG_DYNAMIC        = 0x10000,
     IMG_FLAG_RENDER_TARGET  = 0x20000,
     IMG_FLAG_SYSTEMMEM      = 0x40000,
 };
 enum CinematicEnum : __int32
 {                                       // ...
     CINEMATIC_NOT_PAUSED = 0x0,
     CINEMATIC_PAUSED     = 0x1,
 };
 enum CinematicThreadState : __int32
 {
     CINEMATIC_THREAD_STATE_FROM_HOST_GO = 0x0,
     CINEMATIC_THREAD_STATE_FROM_HOST_GO_BINK = 0x1,
     CINEMATIC_THREAD_STATE_TO_HOST_BETWEEN_UPDATES = 0x2,
     CINEMATIC_THREAD_STATE_TO_HOST_ENTERING_BINK = 0x3,
     CINEMATIC_THREAD_STATE_TO_HOST_EXITED_BINK = 0x4,
     CINEMATIC_THREAD_STATE_TO_HOST_NEED_UNBIND_ALL_IMAGES = 0x5,
 };
 enum GfxScreenshotType : __int32
 {                                       // ...
     R_SCREENSHOT_JPG = 0x0,
     R_SCREENSHOT_TGA = 0x1,
 };
 enum CubeCoord : __int32
 {                                       // ...
     CUBE_X0         = 0x0,
     CUBE_X1         = 0x1,
     CUBE_Y0         = 0x2,
     CUBE_Y1         = 0x3,
     CUBE_NUM_COORDS = 0x4,
 };
 enum FlipEdge : __int32
 {                                       // ...
     DONT_FLIP_EDGE = 0x0,
     FLIP_EDGE      = 0x1,
 };
 enum $72E71F3D9535328A1AA08FD8E568F55B : __int32
 {
     CULL_STATE_OUT             = 0x0,
     CULL_STATE_BOUNDED_PENDING = 0x1,
     CULL_STATE_BOUNDED         = 0x2,
     CULL_STATE_SKINNED_PENDING = 0x3,
     CULL_STATE_DONE            = 0x4,
 };
 enum $19367882E50C0D90FA74E887951753D7 : __int32
 {
     VISDATA_VISIBLE  = 0x1,
     VISDATA_CULL_OUT = 0x2,
 };
 enum DpvsForceBevels : __int32
 {                                       // ...
     DPVS_DONT_FORCE_BEVELS = 0x0,
     DPVS_FORCE_BEVELS      = 0x1,
 };
 enum DpvsClipChildren : __int32
 {                                       // ...
     DPVS_DONT_CLIP_CHILDREN = 0x0,
     DPVS_CLIP_CHILDREN      = 0x1,
 };
 enum $669BDC9D2CE6D0BEFB4F7D57A1B924C8 : __int32
 {
     R_COLOR_OVERRIDE_BLACK = 0x0,
     R_COLOR_OVERRIDE_NONE  = 0x1,
     R_COLOR_OVERRIDE_WHITE = 0x2,
     R_COLOR_OVERRIDE_GRAY  = 0x3,
     R_COLOR_OVERRIDE_COUNT = 0x4,
 };
 enum GfxPixelCostMode : __int32
 {                                       // ...
     GFX_PIXEL_COST_MODE_OFF          = 0x0,
     GFX_PIXEL_COST_MODE_MEASURE_COST = 0x1,
     GFX_PIXEL_COST_MODE_MEASURE_MSEC = 0x2,
     GFX_PIXEL_COST_MODE_ADD_COST_USE_DEPTH = 0x3,
     GFX_PIXEL_COST_MODE_ADD_COST_IGNORE_DEPTH = 0x4,
     GFX_PIXEL_COST_MODE_ADD_PASSES_USE_DEPTH = 0x5,
     GFX_PIXEL_COST_MODE_ADD_PASSES_IGNORE_DEPTH = 0x6,
 };
 enum $7289DBEFE9BA94617DD3EA143BDD93C8 : __int32
 {
     MTL_PREPASS_STANDARD  = 0x0,
     MTL_PREPASS_ALPHA     = 0x1,
     MTL_PREPASS_FLOATZ    = 0x2,
     MTL_PREPASS_NONE      = 0x3,
     MTL_PREPASS_TYPECOUNT = 0x4,
 };
 enum LightHasShadowMap : __int32
 {                                       // ...
     LIGHT_HAS_SHADOWMAP    = 0x0,
     LIGHT_HAS_NO_SHADOWMAP = 0x1,
 };
 enum $008CE78860C0EFF69FED022A9304118E : __int32
 {
     R_SHOW_COLLISION_POLYTYPE_ALL   = 0x0,
     R_SHOW_COLLISION_POLYTYPE_WIREFRAME = 0x1,
     R_SHOW_COLLISION_POLYTYPE_INTERIOR = 0x2,
     R_SHOW_COLLISION_POLYTYPE_COUNT = 0x3,
 };
 enum $70AF7554D84087E88C7E212265C5B7FC : __int32
 {
     R_DEBUGSHADER_NONE     = 0x0,
     R_DEBUGSHADER_TEXTURE  = 0x1,
     R_DEBUGSHADER_TANGENT  = 0x2,
     R_DEBUGSHADER_BINORMAL = 0x3,
     R_DEBUGSHADER_NORMAL   = 0x4,
     R_DEBUGSHADER_COUNT    = 0x5,
 };
 enum $CE01B310B9D4331A0D8C4EB7FFA0F7F1 : __int32
 {
     R_GPU_SYNC_OFF        = 0x0,
     R_GPU_SYNC_ADAPTIVE   = 0x1,
     R_GPU_SYNC_AGGRESSIVE = 0x2,
     R_GPU_SYNC_COUNT      = 0x3,
 };
 enum $F8BAC180992631E19A574A0F352E600A : __int32
 {
     GFX_SM_OVERLAY_OFF   = 0x0,
     GFX_SM_OVERLAY_SUN   = 0x1,
     GFX_SM_OVERLAY_SPOT  = 0x2,
     GFX_SM_OVERLAY_COUNT = 0x3,
 };
 enum $992610B3BFC3932E8DACC0F4E0AAB928 : __int32
 {
     GFX_AA_ALPHA_OFF         = 0x0,
     GFX_AA_ALPHA_TO_COVERAGE = 0x1,
     GFX_AA_ALPHA_SUPERSAMPLE = 0x2,
     GFX_AA_ALPHA_COUNT       = 0x3,
 };
 enum $0A74F54669E6FD0FB2FE5E6B9004FAC8 : __int32
 {
     R_CLEAR_NEVER          = 0x0,
     R_CLEAR_DEV_ONLY_BLINK = 0x1,
     R_CLEAR_BLINK          = 0x2,
     R_CLEAR_STEADY         = 0x3,
     R_CLEAR_FOG_COLOR      = 0x4,
     R_CLEAR_COUNT          = 0x5,
 };
 enum $7D3C21EA98995ABCBC0D287EF2F1BCC1 : __int32
 {
     GFX_SHOW_PIXEL_COST_OFF          = 0x0,
     GFX_SHOW_PIXEL_COST_TIMING_ONLY  = 0x1,
     GFX_SHOW_PIXEL_COST_USE_DEPTH    = 0x2,
     GFX_SHOW_PIXEL_COST_IGNORE_DEPTH = 0x3,
     GFX_SHOW_PIXEL_COST_COUNT        = 0x4,
 };
 enum $BAAA890B7CAD06B6387D5E0CC1077F60 : __int32
 {
     R_SHOWTESS_OFF           = 0x0,
     R_SHOWTESS_TECH          = 0x1,
     R_SHOWTESS_TECHSET       = 0x2,
     R_SHOWTESS_MATERIAL      = 0x3,
     R_SHOWTESS_VERTEX_SHADER = 0x4,
     R_SHOWTESS_PIXEL_SHADER  = 0x5,
     R_SHOWTESS_COUNT         = 0x6,
 };
 enum $DA8BCB5A54BAB06CD35E1014CE5D911C : __int32
 {
     R_MIP_FILTER_UNCHANGED     = 0x0,
     R_MIP_FILTER_FORCE_LINEAR  = 0x1,
     R_MIP_FILTER_FORCE_NEAREST = 0x2,
     R_MIP_FILTER_FORCE_NO_MIPS = 0x3,
     R_MIP_FILTER_COUNT         = 0x4,
 };
 enum GfxAspectRatio : __int32
 {                                       // ...
     GFX_ASPECT_RATIO_AUTO       = 0x0,
     GFX_ASPECT_RATIO_STANDARD   = 0x1,
     GFX_ASPECT_RATIO_WIDE_16_10 = 0x2,
     GFX_ASPECT_RATIO_WIDE_16_9  = 0x3,
     GFX_ASPECT_RATIO_COUNT      = 0x4,
 };
 enum $A1823DBB2E1ECBBFE5B3FD011D242004 : __int32
 {
     R_NORMAL_OVERRIDE_FLAT  = 0x0,
     R_NORMAL_OVERRIDE_NONE  = 0x1,
     R_NORMAL_OVERRIDE_COUNT = 0x2,
 };
 enum $2CDBB6FB02DE140D6C242132EAFCD501 : __int32
 {
     R_FB_COLOR_DEBUG_NONE     = 0x0,
     R_FB_COLOR_DEBUG_SCREEN   = 0x1,
     R_FB_COLOR_DEBUG_FEEDBACK = 0x2,
     R_FB_COLOR_DEBUG_COUNT    = 0x3,
 };
 enum $C7DDB36EBC8A0E6A12FFF07E09941262 : __int32
 {
     R_SHOW_COLLISION_NONE      = 0x0,
     R_SHOW_COLLISION_ALL       = 0x1,
     R_SHOW_COLLISION_PLAYER    = 0x2,
     R_SHOW_COLLISION_BULLET    = 0x3,
     R_SHOW_COLLISION_MISSILE   = 0x4,
     R_SHOW_COLLISION_VEHICLE   = 0x5,
     R_SHOW_COLLISION_MONSTER   = 0x6,
     R_SHOW_COLLISION_ITEM      = 0x7,
     R_SHOW_COLLISION_CANSHOOT  = 0x8,
     R_SHOW_COLLISION_AINOSIGHT = 0x9,
     R_SHOW_COLLISION_COUNT     = 0xA,
 };
 enum $EDDE65824B9FECD8724E2AFB60F4FAB9 : __int32
 {
     R_SHOW_COLLISION_GROUPS_ALL     = 0x0,
     R_SHOW_COLLISION_GROUPS_BRUSH   = 0x1,
     R_SHOW_COLLISION_GROUPS_TERRAIN = 0x2,
     R_SHOW_COLLISION_GROUPS_COUNT   = 0x3,
 };
 enum $F9AE9E383AB8943B384F3AB0134046DD : __int32
 {
     IMAGE_PROG_SHADOW_COOKIE      = 0x0,
     IMAGE_PROG_SHADOW_COOKIE_BLUR = 0x1,
     IMAGE_PROG_SHADOWMAP_SUN      = 0x2,
     IMAGE_PROG_SHADOWMAP_SPOT     = 0x3,
     IMAGE_PROG_FLOATZ             = 0x4,
     IMAGE_PROG_POST_EFFECT_0      = 0x5,
     IMAGE_PROG_POST_EFFECT_1      = 0x6,
     IMAGE_PROG_PINGPONG_0         = 0x7,
     IMAGE_PROG_PINGPONG_1         = 0x8,
     IMAGE_PROG_RESOLVED_SCENE     = 0x9,
     IMAGE_PROG_SAVEDSCREEN        = 0xA,
     IMAGE_PROG_RAW                = 0xB,
     IMAGE_PROG_MODEL_LIGHTING     = 0xC,
     IMAGE_PROG_MODEL_LIGHTING1    = 0xD,
     IMAGE_PROG_COUNT              = 0xE,
 };
 enum StreamStatMetrics : __int32
 {
     STREAMSTATMETRIC_NUMBER = 0x0,
     STREAMSTATMETRIC_SIZE   = 0x1,
     STREAMSTATMETRIC_COUNT  = 0x2,
 };
 enum GfxImageFileFormat : __int32
 {
     IMG_FORMAT_INVALID           = 0x0,
     IMG_FORMAT_BITMAP_RGBA       = 0x1,
     IMG_FORMAT_BITMAP_RGB        = 0x2,
     IMG_FORMAT_BITMAP_LUMINANCE_ALPHA = 0x3,
     IMG_FORMAT_BITMAP_LUMINANCE  = 0x4,
     IMG_FORMAT_BITMAP_ALPHA      = 0x5,
     IMG_FORMAT_WAVELET_RGBA      = 0x6,
     IMG_FORMAT_WAVELET_RGB       = 0x7,
     IMG_FORMAT_WAVELET_LUMINANCE_ALPHA = 0x8,
     IMG_FORMAT_WAVELET_LUMINANCE = 0x9,
     IMG_FORMAT_WAVELET_ALPHA     = 0xA,
     IMG_FORMAT_DXT1              = 0xB,
     IMG_FORMAT_DXT3              = 0xC,
     IMG_FORMAT_DXT5              = 0xD,
     IMG_FORMAT_DXN               = 0xE,
     IMG_FORMAT_COUNT             = 0xF,
 };
 enum StreamStatElements : __int32
 {
     STREAMSTATITEM_RESIDENT_BEGIN   = 0x0,
     STREAMSTATITEM_RESIDENT_ZERO    = 0x0,
     STREAMSTATITEM_RESIDENT_LOW     = 0x1,
     STREAMSTATITEM_RESIDENT_MEDIUM  = 0x2,
     STREAMSTATITEM_RESIDENT_HIGH    = 0x3,
     STREAMSTATITEM_RESIDENT_FALLING_FROM_USE = 0x4,
     STREAMSTATITEM_RESIDENT_IN_USE  = 0x5,
     STREAMSTATITEM_RESIDENT_END     = 0x6,
     STREAMSTATITEM_LOADED_CHANGE    = 0x6,
     STREAMSTATITEM_DISCARDED_CHANGE = 0x7,
     STREAMSTATITEM_RELOADED_CHANGE  = 0x8,
     STREAMSTATITEM_FAILED_INACTIVE_CHANGE = 0x9,
     STREAMSTATITEM_FAILED_ACTIVE_CHANGE = 0xA,
     STREAMSTATITEM_LOADED_TOTAL     = 0xB,
     STREAMSTATITEM_RELOADED_TOTAL   = 0xC,
     STREAMSTATITEM_DISCARDED_TOTAL  = 0xD,
     STREAMSTATITEM_VISIBLE_HIMIP_SURFS = 0xE,
     STREAMSTATITEM_VISIBLE_LOADED_HIMIP_SURFS = 0xF,
     STREAMSTATITEM_VISIBLE_UNLOADED_HIMIP_SURFS = 0x10,
     STREAMSTATITEM_VISIBLE_HIMIP_IMGS = 0x11,
     STREAMSTATITEM_VISIBLE_LOADED_HIMIP_IMGS = 0x12,
     STREAMSTATITEM_VISIBLE_UNLOADED_HIMIP_IMGS = 0x13,
     STREAMSTATITEM_COUNT            = 0x14,
 };
 enum GfxRefBlendMode : __int32
 {                                       // ...
     BLENDMODE_OPAQUE = 0x0,
     BLENDMODE_BLEND  = 0x1,
     BLENDMODE_GT0    = 0x2,
     BLENDMODE_GE128  = 0x3,
     BLENDMODE_LT128  = 0x4,
     BLENDMODE_ADD    = 0x5,
 };
 enum J_COLOR_SPACE : __int32
 {                                       // ...
     JCS_UNKNOWN   = 0x0,
     JCS_GRAYSCALE = 0x1,
     JCS_RGB       = 0x2,
     JCS_YCbCr     = 0x3,
     JCS_CMYK      = 0x4,
     JCS_YCCK      = 0x5,
 };
 enum J_DCT_METHOD : __int32
 {                                       // ...
     JDCT_ISLOW = 0x0,
     JDCT_IFAST = 0x1,
     JDCT_FLOAT = 0x2,
 };
 enum J_DITHER_MODE : __int32
 {                                       // ...
     JDITHER_NONE    = 0x0,
     JDITHER_ORDERED = 0x1,
     JDITHER_FS      = 0x2,
 };
 enum J_BUF_MODE : __int32
 {                                       // ...
     JBUF_PASS_THRU     = 0x0,
     JBUF_SAVE_SOURCE   = 0x1,
     JBUF_CRANK_DEST    = 0x2,
     JBUF_SAVE_AND_PASS = 0x3,
 };
 enum MtlTechSetNotFoundBehavior : __int32
 {                                       // ...
     MTL_TECHSET_NOT_FOUND_RETURN_NULL = 0x0,
     MTL_TECHSET_NOT_FOUND_RETURN_DEFAULT = 0x1,
 };
 enum MaterialShaderType : __int32
 {                                       // ...
     MTL_VERTEX_SHADER = 0x0,
     MTL_PIXEL_SHADER  = 0x1,
 };
 enum MtlParseSuccess : __int32
 {                                       // ...
     MTL_PARSE_SUCCESS  = 0x0,
     MTL_PARSE_NO_MATCH = 0x1,
     MTL_PARSE_ERROR    = 0x2,
 };
 enum ShaderParamType : __int32
 {                                       // ...
     SHADER_PARAM_FLOAT4       = 0x0,
     SHADER_PARAM_SAMPLER_2D   = 0x1,
     SHADER_PARAM_SAMPLER_3D   = 0x2,
     SHADER_PARAM_SAMPLER_CUBE = 0x3,
 };
 enum $52458AF7298FAC6588F16908A91E7C51 : __int32
 {
     MTL_TYPE_DEFAULT       = 0x0,
     MTL_TYPE_MODEL         = 0x1,
     MTL_TYPE_MODEL_VERTCOL = 0x2,
     MTL_TYPE_WORLD         = 0x3,
     MTL_TYPE_WORLD_VERTCOL = 0x4,
     MTL_TYPE_COUNT         = 0x5,
 };
 enum $8097F087A999941A6317E01D12BB4FDC : __int32
 {
     MTL_FEATURE_ZFEATHER     = 0x1,
     MTL_FEATURE_OUTDOOR      = 0x2,
     MTL_FEATURE_SPEC         = 0x4,
     MTL_FEATURE_DETAIL       = 0x8,
     MTL_FEATURE_NORMAL       = 0x10,
     MTL_FEATURE_PHONG_MASK   = 0x180,
     MTL_FEATURE_PHONG_SMAP   = 0x80,
     MTL_FEATURE_PHONG_HWSMAP = 0x100,
     MTL_FEATURE_TWEAK        = 0x20,
 };
 enum GfxModelLightExtrapolation : __int32
 {                                       // ...
     GFX_MODELLIGHT_EXTRAPOLATE  = 0x0,
     GFX_MODELLIGHT_SHOW_MISSING = 0x1,
 };
 enum GfxProjectionTypes : __int32
 {                                       // ...
     GFX_PROJECTION_2D = 0x0,
     GFX_PROJECTION_3D = 0x1,
 };
 enum $6D838C9168C0F937693A9FC695DED415 : __int32
 {
     TEXT_RENDERFLAG_FORCEMONOSPACE   = 0x1,
     TEXT_RENDERFLAG_CURSOR           = 0x2,
     TEXT_RENDERFLAG_DROPSHADOW       = 0x4,
     TEXT_RENDERFLAG_DROPSHADOW_EXTRA = 0x8,
     TEXT_RENDERFLAG_GLOW             = 0x10,
     TEXT_RENDERFLAG_GLOW_FORCE_COLOR = 0x20,
     TEXT_RENDERFLAG_FX_DECODE        = 0x40,
     TEXT_RENDERFLAG_PADDING          = 0x80,
     TEXT_RENDERFLAG_SUBTITLETEXT     = 0x100,
     TEXT_RENDERFLAG_CINEMATIC        = 0x200,
 };
 enum RenderTargetUsage : __int32
 {                                       // ...
     RENDERTARGET_USAGE_DEPTH   = 0x0,
     RENDERTARGET_USAGE_RENDER  = 0x1,
     RENDERTARGET_USAGE_RENDER_SHARE_SCENE = 0x2,
     RENDERTARGET_USAGE_TEXTURE = 0x3,
 };
 enum FullscreenType : __int32
 {                                       // ...
     FULLSCREEN_DISPLAY = 0x0,
     FULLSCREEN_MIXED   = 0x1,
     FULLSCREEN_SCENE   = 0x2,
 };
 enum XSurfaceVertColType : __int32
 {
     XSURFACE_VERTCOL_NONE = 0x0,
     XSURFACE_VERTCOL_GREY = 0x1,
     XSURFACE_VERTCOL_ALL  = 0x2,
 };
 enum GfxSortedHistoryAdd : __int32
 {                                       // ...
     SH_ADD_NEVER  = 0x0,
     SH_ADD_IF_NEW = 0x1,
 };
 enum J_MESSAGE_CODE : __int32
 {
     JMSG_NOMESSAGE              = 0x0,
     JERR_ARITH_NOTIMPL          = 0x1,
     JERR_BAD_ALIGN_TYPE         = 0x2,
     JERR_BAD_ALLOC_CHUNK        = 0x3,
     JERR_BAD_BUFFER_MODE        = 0x4,
     JERR_BAD_COMPONENT_ID       = 0x5,
     JERR_BAD_DCT_COEF           = 0x6,
     JERR_BAD_DCTSIZE            = 0x7,
     JERR_BAD_HUFF_TABLE         = 0x8,
     JERR_BAD_IN_COLORSPACE      = 0x9,
     JERR_BAD_J_COLORSPACE       = 0xA,
     JERR_BAD_LENGTH             = 0xB,
     JERR_BAD_LIB_VERSION        = 0xC,
     JERR_BAD_MCU_SIZE           = 0xD,
     JERR_BAD_POOL_ID            = 0xE,
     JERR_BAD_PRECISION          = 0xF,
     JERR_BAD_PROGRESSION        = 0x10,
     JERR_BAD_PROG_SCRIPT        = 0x11,
     JERR_BAD_SAMPLING           = 0x12,
     JERR_BAD_SCAN_SCRIPT        = 0x13,
     JERR_BAD_STATE              = 0x14,
     JERR_BAD_STRUCT_SIZE        = 0x15,
     JERR_BAD_VIRTUAL_ACCESS     = 0x16,
     JERR_BUFFER_SIZE            = 0x17,
     JERR_CANT_SUSPEND           = 0x18,
     JERR_CCIR601_NOTIMPL        = 0x19,
     JERR_COMPONENT_COUNT        = 0x1A,
     JERR_CONVERSION_NOTIMPL     = 0x1B,
     JERR_DAC_INDEX              = 0x1C,
     JERR_DAC_VALUE              = 0x1D,
     JERR_DHT_INDEX              = 0x1E,
     JERR_DQT_INDEX              = 0x1F,
     JERR_EMPTY_IMAGE            = 0x20,
     JERR_EMS_READ               = 0x21,
     JERR_EMS_WRITE              = 0x22,
     JERR_EOI_EXPECTED           = 0x23,
     JERR_FILE_READ              = 0x24,
     JERR_FILE_WRITE             = 0x25,
     JERR_FRACT_SAMPLE_NOTIMPL   = 0x26,
     JERR_HUFF_CLEN_OVERFLOW     = 0x27,
     JERR_HUFF_MISSING_CODE      = 0x28,
     JERR_IMAGE_TOO_BIG          = 0x29,
     JERR_INPUT_EMPTY            = 0x2A,
     JERR_INPUT_EOF              = 0x2B,
     JERR_MISMATCHED_QUANT_TABLE = 0x2C,
     JERR_MISSING_DATA           = 0x2D,
     JERR_MODE_CHANGE            = 0x2E,
     JERR_NOTIMPL                = 0x2F,
     JERR_NOT_COMPILED           = 0x30,
     JERR_NO_BACKING_STORE       = 0x31,
     JERR_NO_HUFF_TABLE          = 0x32,
     JERR_NO_IMAGE               = 0x33,
     JERR_NO_QUANT_TABLE         = 0x34,
     JERR_NO_SOI                 = 0x35,
     JERR_OUT_OF_MEMORY          = 0x36,
     JERR_QUANT_COMPONENTS       = 0x37,
     JERR_QUANT_FEW_COLORS       = 0x38,
     JERR_QUANT_MANY_COLORS      = 0x39,
     JERR_SOF_DUPLICATE          = 0x3A,
     JERR_SOF_NO_SOS             = 0x3B,
     JERR_SOF_UNSUPPORTED        = 0x3C,
     JERR_SOI_DUPLICATE          = 0x3D,
     JERR_SOS_NO_SOF             = 0x3E,
     JERR_TFILE_CREATE           = 0x3F,
     JERR_TFILE_READ             = 0x40,
     JERR_TFILE_SEEK             = 0x41,
     JERR_TFILE_WRITE            = 0x42,
     JERR_TOO_LITTLE_DATA        = 0x43,
     JERR_UNKNOWN_MARKER         = 0x44,
     JERR_VIRTUAL_BUG            = 0x45,
     JERR_WIDTH_OVERFLOW         = 0x46,
     JERR_XMS_READ               = 0x47,
     JERR_XMS_WRITE              = 0x48,
     JMSG_COPYRIGHT              = 0x49,
     JMSG_VERSION                = 0x4A,
     JTRC_16BIT_TABLES           = 0x4B,
     JTRC_ADOBE                  = 0x4C,
     JTRC_APP0                   = 0x4D,
     JTRC_APP14                  = 0x4E,
     JTRC_DAC                    = 0x4F,
     JTRC_DHT                    = 0x50,
     JTRC_DQT                    = 0x51,
     JTRC_DRI                    = 0x52,
     JTRC_EMS_CLOSE              = 0x53,
     JTRC_EMS_OPEN               = 0x54,
     JTRC_EOI                    = 0x55,
     JTRC_HUFFBITS               = 0x56,
     JTRC_JFIF                   = 0x57,
     JTRC_JFIF_BADTHUMBNAILSIZE  = 0x58,
     JTRC_JFIF_EXTENSION         = 0x59,
     JTRC_JFIF_THUMBNAIL         = 0x5A,
     JTRC_MISC_MARKER            = 0x5B,
     JTRC_PARMLESS_MARKER        = 0x5C,
     JTRC_QUANTVALS              = 0x5D,
     JTRC_QUANT_3_NCOLORS        = 0x5E,
     JTRC_QUANT_NCOLORS          = 0x5F,
     JTRC_QUANT_SELECTED         = 0x60,
     JTRC_RECOVERY_ACTION        = 0x61,
     JTRC_RST                    = 0x62,
     JTRC_SMOOTH_NOTIMPL         = 0x63,
     JTRC_SOF                    = 0x64,
     JTRC_SOF_COMPONENT          = 0x65,
     JTRC_SOI                    = 0x66,
     JTRC_SOS                    = 0x67,
     JTRC_SOS_COMPONENT          = 0x68,
     JTRC_SOS_PARAMS             = 0x69,
     JTRC_TFILE_CLOSE            = 0x6A,
     JTRC_TFILE_OPEN             = 0x6B,
     JTRC_THUMB_JPEG             = 0x6C,
     JTRC_THUMB_PALETTE          = 0x6D,
     JTRC_THUMB_RGB              = 0x6E,
     JTRC_UNKNOWN_IDS            = 0x6F,
     JTRC_XMS_CLOSE              = 0x70,
     JTRC_XMS_OPEN               = 0x71,
     JWRN_ADOBE_XFORM            = 0x72,
     JWRN_BOGUS_PROGRESSION      = 0x73,
     JWRN_EXTRANEOUS_DATA        = 0x74,
     JWRN_HIT_MARKER             = 0x75,
     JWRN_HUFF_BAD_CODE          = 0x76,
     JWRN_JFIF_MAJOR             = 0x77,
     JWRN_JPEG_EOF               = 0x78,
     JWRN_MUST_RESYNC            = 0x79,
     JWRN_NOT_SEQUENTIAL         = 0x7A,
     JWRN_TOO_MUCH_DATA          = 0x7B,
     JMSG_LASTMSGCODE            = 0x7C,
 };
 enum JPEG_MARKER : __int32
 {                                       // ...
     M_TEM   = 0x1,
     M_SOF0  = 0xC0,
     M_SOF1  = 0xC1,
     M_SOF2  = 0xC2,
     M_SOF3  = 0xC3,
     M_DHT   = 0xC4,
     M_SOF5  = 0xC5,
     M_SOF6  = 0xC6,
     M_SOF7  = 0xC7,
     M_JPG   = 0xC8,
     M_SOF9  = 0xC9,
     M_SOF10 = 0xCA,
     M_SOF11 = 0xCB,
     M_DAC   = 0xCC,
     M_SOF13 = 0xCD,
     M_SOF14 = 0xCE,
     M_SOF15 = 0xCF,
     M_RST0  = 0xD0,
     M_RST1  = 0xD1,
     M_RST2  = 0xD2,
     M_RST3  = 0xD3,
     M_RST4  = 0xD4,
     M_RST5  = 0xD5,
     M_RST6  = 0xD6,
     M_RST7  = 0xD7,
     M_SOI   = 0xD8,
     M_EOI   = 0xD9,
     M_SOS   = 0xDA,
     M_DQT   = 0xDB,
     M_DNL   = 0xDC,
     M_DRI   = 0xDD,
     M_DHP   = 0xDE,
     M_EXP   = 0xDF,
     M_APP0  = 0xE0,
     M_APP1  = 0xE1,
     M_APP2  = 0xE2,
     M_APP3  = 0xE3,
     M_APP4  = 0xE4,
     M_APP5  = 0xE5,
     M_APP6  = 0xE6,
     M_APP7  = 0xE7,
     M_APP8  = 0xE8,
     M_APP9  = 0xE9,
     M_APP10 = 0xEA,
     M_APP11 = 0xEB,
     M_APP12 = 0xEC,
     M_APP13 = 0xED,
     M_APP14 = 0xEE,
     M_APP15 = 0xEF,
     M_JPG0  = 0xF0,
     M_JPG13 = 0xFD,
     M_COM   = 0xFE,
     M_ERROR = 0x100,
 };
 enum c_pass_type : __int32
 {                                       // ...
     main_pass     = 0x0,
     huff_opt_pass = 0x1,
     output_pass   = 0x2,
 };
 enum _EXCEPTION_DISPOSITION : __int32
 {                                       // ...
     ExceptionContinueExecution = 0x0,
     ExceptionContinueSearch    = 0x1,
     ExceptionNestedException   = 0x2,
     ExceptionCollidedUnwind    = 0x3,
 };
 enum _NT_PRODUCT_TYPE : __int32
 {                                       // ...
     NtProductWinNt    = 0x1,
     NtProductLanManNt = 0x2,
     NtProductServer   = 0x3,
 };
 enum _ALTERNATIVE_ARCHITECTURE_TYPE : __int32
 {                                       // ...
     StandardDesign  = 0x0,
     NEC98x86        = 0x1,
     EndAlternatives = 0x2,
 };
 enum INTRNCVT_STATUS : __int32
 {
     INTRNCVT_OK        = 0x0,
     INTRNCVT_OVERFLOW  = 0x1,
     INTRNCVT_UNDERFLOW = 0x2,
 };
 enum STATE : __int32
 {                                       // ...
     ST_NORMAL  = 0x0,
     ST_PERCENT = 0x1,
     ST_FLAG    = 0x2,
     ST_WIDTH   = 0x3,
     ST_DOT     = 0x4,
     ST_PRECIS  = 0x5,
     ST_SIZE    = 0x6,
     ST_TYPE    = 0x7,
 };
 enum CHARTYPE : __int32
 {
     CH_OTHER   = 0x0,
     CH_PERCENT = 0x1,
     CH_DOT     = 0x2,
     CH_STAR    = 0x3,
     CH_ZERO    = 0x4,
     CH_DIGIT   = 0x5,
     CH_FLAG    = 0x6,
     CH_SIZE    = 0x7,
     CH_TYPE    = 0x8,
 };
 enum ARG_TYPE : __int32
 {                                       // ...
     eblank           = 0x0,
     e_int_arg        = 0x1,
     e_short_arg      = 0x2,
     e_ptr_arg        = 0x3,
     e_int64_arg      = 0x4,
     e_long_long_arg  = 0x5,
     e_long_arg       = 0x6,
     e_longdouble_arg = 0x7,
     e_double_arg     = 0x8,
 };
 enum $D283E5A92EBEB600100C8EBC9C67A011 : __int32
 {                                       // ...
     lkNormal   = 0x0,                   // ...
     lkPrealloc = 0x1,                   // ...
     lkDeleted  = 0x2,
 };
 enum state_t : __int32
 {
     S_INIT       = 0x0,
     S_EAT0L      = 0x1,
     S_SIGNM      = 0x2,
     S_GETL       = 0x3,
     S_GETR       = 0x4,
     S_POINT      = 0x5,
     S_E          = 0x6,
     S_SIGNE      = 0x7,
     S_EAT0E      = 0x8,
     S_GETE       = 0x9,
     S_END        = 0xA,
     S_E_IMPLICIT = 0xB,
 };
 enum error_types : __int32
 {                                       // ...
     logl_zero               = 0x0,
     logl_negative           = 0x1,
     log_zero                = 0x2,
     log_negative            = 0x3,
     logf_zero               = 0x4,
     logf_negative           = 0x5,
     log10l_zero             = 0x6,
     log10l_negative         = 0x7,
     log10_zero              = 0x8,
     log10_negative          = 0x9,
     log10f_zero             = 0xA,
     log10f_negative         = 0xB,
     expl_overflow           = 0xC,
     expl_underflow          = 0xD,
     exp_overflow            = 0xE,
     exp_underflow           = 0xF,
     expf_overflow           = 0x10,
     expf_underflow          = 0x11,
     powl_overflow           = 0x12,
     powl_underflow          = 0x13,
     powl_zero_to_zero       = 0x14,
     powl_zero_to_negative   = 0x15,
     powl_neg_to_non_integer = 0x16,
     powl_nan_to_zero        = 0x17,
     pow_overflow            = 0x18,
     pow_underflow           = 0x19,
     pow_zero_to_zero        = 0x1A,
     pow_zero_to_negative    = 0x1B,
     pow_neg_to_non_integer  = 0x1C,
     pow_nan_to_zero         = 0x1D,
     powf_overflow           = 0x1E,
     powf_underflow          = 0x1F,
     powf_zero_to_zero       = 0x20,
     powf_zero_to_negative   = 0x21,
     powf_neg_to_non_integer = 0x22,
     powf_nan_to_zero        = 0x23,
     atan2l_zero             = 0x24,
     atan2_zero              = 0x25,
     atan2f_zero             = 0x26,
     expm1l_overflow         = 0x27,
     expm1l_underflow        = 0x28,
     expm1_overflow          = 0x29,
     expm1_underflow         = 0x2A,
     expm1f_overflow         = 0x2B,
     expm1f_underflow        = 0x2C,
     hypotl_overflow         = 0x2D,
     hypot_overflow          = 0x2E,
     hypotf_overflow         = 0x2F,
     sqrtl_negative          = 0x30,
     sqrt_negative           = 0x31,
     sqrtf_negative          = 0x32,
     scalbl_overflow         = 0x33,
     scalbl_underflow        = 0x34,
     scalb_overflow          = 0x35,
     scalb_underflow         = 0x36,
     scalbf_overflow         = 0x37,
     scalbf_underflow        = 0x38,
     acosl_gt_one            = 0x39,
     acos_gt_one             = 0x3A,
     acosf_gt_one            = 0x3B,
     asinl_gt_one            = 0x3C,
     asin_gt_one             = 0x3D,
     asinf_gt_one            = 0x3E,
     coshl_overflow          = 0x3F,
     cosh_overflow           = 0x40,
     coshf_overflow          = 0x41,
     y0l_zero                = 0x42,
     y0l_negative            = 0x43,
     y0l_gt_loss             = 0x44,
     y0_zero                 = 0x45,
     y0_negative             = 0x46,
     y0_gt_loss              = 0x47,
     y0f_zero                = 0x48,
     y0f_negative            = 0x49,
     y0f_gt_loss             = 0x4A,
     y1l_zero                = 0x4B,
     y1l_negative            = 0x4C,
     y1l_gt_loss             = 0x4D,
     y1_zero                 = 0x4E,
     y1_negative             = 0x4F,
     y1_gt_loss              = 0x50,
     y1f_zero                = 0x51,
     y1f_negative            = 0x52,
     y1f_gt_loss             = 0x53,
     ynl_zero                = 0x54,
     ynl_negative            = 0x55,
     ynl_gt_loss             = 0x56,
     yn_zero                 = 0x57,
     yn_negative             = 0x58,
     yn_gt_loss              = 0x59,
     ynf_zero                = 0x5A,
     ynf_negative            = 0x5B,
     ynf_gt_loss             = 0x5C,
     j0l_gt_loss             = 0x5D,
     j0_gt_loss              = 0x5E,
     j0f_gt_loss             = 0x5F,
     j1l_gt_loss             = 0x60,
     j1_gt_loss              = 0x61,
     j1f_gt_loss             = 0x62,
     jnl_gt_loss             = 0x63,
     jn_gt_loss              = 0x64,
     jnf_gt_loss             = 0x65,
     lgammal_overflow        = 0x66,
     lgammal_negative        = 0x67,
     lgammal_reserve         = 0x68,
     lgamma_overflow         = 0x69,
     lgamma_negative         = 0x6A,
     lgamma_reserve          = 0x6B,
     lgammaf_overflow        = 0x6C,
     lgammaf_negative        = 0x6D,
     lgammaf_reserve         = 0x6E,
     gammal_overflow         = 0x6F,
     gammal_negative         = 0x70,
     gammal_reserve          = 0x71,
     gamma_overflow          = 0x72,
     gamma_negative          = 0x73,
     gamma_reserve           = 0x74,
     gammaf_overflow         = 0x75,
     gammaf_negative         = 0x76,
     gammaf_reserve          = 0x77,
     fmodl_by_zero           = 0x78,
     fmod_by_zero            = 0x79,
     fmodf_by_zero           = 0x7A,
     remainderl_by_zero      = 0x7B,
     remainder_by_zero       = 0x7C,
     remainderf_by_zero      = 0x7D,
     sinhl_overflow          = 0x7E,
     sinh_overflow           = 0x7F,
     sinhf_overflow          = 0x80,
     atanhl_gt_one           = 0x81,
     atanhl_eq_one           = 0x82,
     atanh_gt_one            = 0x83,
     atanh_eq_one            = 0x84,
     atanhf_gt_one           = 0x85,
     atanhf_eq_one           = 0x86,
     acoshl_lt_one           = 0x87,
     acosh_lt_one            = 0x88,
     acoshf_lt_one           = 0x89,
     log1pl_zero             = 0x8A,
     log1pl_negative         = 0x8B,
     log1p_zero              = 0x8C,
     log1p_negative          = 0x8D,
     log1pf_zero             = 0x8E,
     log1pf_negative         = 0x8F,
     ldexpl_overflow         = 0x90,
     ldexpl_underflow        = 0x91,
     ldexp_overflow          = 0x92,
     ldexp_underflow         = 0x93,
     ldexpf_overflow         = 0x94,
     ldexpf_underflow        = 0x95,
     logbl_zero              = 0x96,
     logb_zero               = 0x97,
     logbf_zero              = 0x98,
     nextafterl_overflow     = 0x99,
     nextafter_overflow      = 0x9A,
     nextafterf_overflow     = 0x9B,
     ilogbl_zero             = 0x9C,
     ilogb_zero              = 0x9D,
     ilogbf_zero             = 0x9E,
     exp2l_overflow          = 0x9F,
     exp2l_underflow         = 0xA0,
     exp2_overflow           = 0xA1,
     exp2_underflow          = 0xA2,
     exp2f_overflow          = 0xA3,
     exp2f_underflow         = 0xA4,
     exp10l_overflow         = 0xA5,
     exp10_overflow          = 0xA6,
     exp10f_overflow         = 0xA7,
     log2l_zero              = 0xA8,
     log2l_negative          = 0xA9,
     log2_zero               = 0xAA,
     log2_negative           = 0xAB,
     log2f_zero              = 0xAC,
     log2f_negative          = 0xAD,
     log_nan                 = 0x3E8,
     log10_nan               = 0x3E9,
     exp_nan                 = 0x3EA,
     atan_nan                = 0x3EB,
     ceil_nan                = 0x3EC,
     floor_nan               = 0x3ED,
     pow_nan                 = 0x3EE,
     modf_nan                = 0x3EF,
     acos_nan                = 0x3F0,
     asin_nan                = 0x3F1,
     sin_naninf              = 0x3F2,
     cos_naninf              = 0x3F3,
     tan_naninf              = 0x3F4,
 };
 enum _FPIEEE_FORMAT : __int32
 {
     _FpFormatFp32    = 0x0,
     _FpFormatFp64    = 0x1,
     _FpFormatFp80    = 0x2,
     _FpFormatFp128   = 0x3,
     _FpFormatI16     = 0x4,
     _FpFormatI32     = 0x5,
     _FpFormatI64     = 0x6,
     _FpFormatU16     = 0x7,
     _FpFormatU32     = 0x8,
     _FpFormatU64     = 0x9,
     _FpFormatBcd80   = 0xA,
     _FpFormatCompare = 0xB,
     _FpFormatString  = 0xC,
 };
 enum _FP_OPERATION_CODE : __int32
 {
     _FpCodeUnspecified  = 0x0,
     _FpCodeAdd          = 0x1,
     _FpCodeSubtract     = 0x2,
     _FpCodeMultiply     = 0x3,
     _FpCodeDivide       = 0x4,
     _FpCodeSquareRoot   = 0x5,
     _FpCodeRemainder    = 0x6,
     _FpCodeCompare      = 0x7,
     _FpCodeConvert      = 0x8,
     _FpCodeRound        = 0x9,
     _FpCodeTruncate     = 0xA,
     _FpCodeFloor        = 0xB,
     _FpCodeCeil         = 0xC,
     _FpCodeAcos         = 0xD,
     _FpCodeAsin         = 0xE,
     _FpCodeAtan         = 0xF,
     _FpCodeAtan2        = 0x10,
     _FpCodeCabs         = 0x11,
     _FpCodeCos          = 0x12,
     _FpCodeCosh         = 0x13,
     _FpCodeExp          = 0x14,
     _FpCodeFabs         = 0x15,
     _FpCodeFmod         = 0x16,
     _FpCodeFrexp        = 0x17,
     _FpCodeHypot        = 0x18,
     _FpCodeLdexp        = 0x19,
     _FpCodeLog          = 0x1A,
     _FpCodeLog10        = 0x1B,
     _FpCodeModf         = 0x1C,
     _FpCodePow          = 0x1D,
     _FpCodeSin          = 0x1E,
     _FpCodeSinh         = 0x1F,
     _FpCodeTan          = 0x20,
     _FpCodeTanh         = 0x21,
     _FpCodeY0           = 0x22,
     _FpCodeY1           = 0x23,
     _FpCodeYn           = 0x24,
     _FpCodeLogb         = 0x25,
     _FpCodeNextafter    = 0x26,
     _FpCodeNegate       = 0x27,
     _FpCodeFmin         = 0x28,
     _FpCodeFmax         = 0x29,
     _FpCodeConvertTrunc = 0x2A,
     _XMMIAddps          = 0x2B,
     _XMMIAddss          = 0x2C,
     _XMMISubps          = 0x2D,
     _XMMISubss          = 0x2E,
     _XMMIMulps          = 0x2F,
     _XMMIMulss          = 0x30,
     _XMMIDivps          = 0x31,
     _XMMIDivss          = 0x32,
     _XMMISqrtps         = 0x33,
     _XMMISqrtss         = 0x34,
     _XMMIMaxps          = 0x35,
     _XMMIMaxss          = 0x36,
     _XMMIMinps          = 0x37,
     _XMMIMinss          = 0x38,
     _XMMICmpps          = 0x39,
     _XMMICmpss          = 0x3A,
     _XMMIComiss         = 0x3B,
     _XMMIUComiss        = 0x3C,
     _XMMICvtpi2ps       = 0x3D,
     _XMMICvtsi2ss       = 0x3E,
     _XMMICvtps2pi       = 0x3F,
     _XMMICvtss2si       = 0x40,
     _XMMICvttps2pi      = 0x41,
     _XMMICvttss2si      = 0x42,
     _XMMIAddsubps       = 0x43,
     _XMMIHaddps         = 0x44,
     _XMMIHsubps         = 0x45,
     _XMMIRoundps        = 0x46,
     _XMMIRoundss        = 0x47,
     _XMMIDpps           = 0x48,
     _XMMI2Addpd         = 0x49,
     _XMMI2Addsd         = 0x4A,
     _XMMI2Subpd         = 0x4B,
     _XMMI2Subsd         = 0x4C,
     _XMMI2Mulpd         = 0x4D,
     _XMMI2Mulsd         = 0x4E,
     _XMMI2Divpd         = 0x4F,
     _XMMI2Divsd         = 0x50,
     _XMMI2Sqrtpd        = 0x51,
     _XMMI2Sqrtsd        = 0x52,
     _XMMI2Maxpd         = 0x53,
     _XMMI2Maxsd         = 0x54,
     _XMMI2Minpd         = 0x55,
     _XMMI2Minsd         = 0x56,
     _XMMI2Cmppd         = 0x57,
     _XMMI2Cmpsd         = 0x58,
     _XMMI2Comisd        = 0x59,
     _XMMI2UComisd       = 0x5A,
     _XMMI2Cvtpd2pi      = 0x5B,
     _XMMI2Cvtsd2si      = 0x5C,
     _XMMI2Cvttpd2pi     = 0x5D,
     _XMMI2Cvttsd2si     = 0x5E,
     _XMMI2Cvtps2pd      = 0x5F,
     _XMMI2Cvtss2sd      = 0x60,
     _XMMI2Cvtpd2ps      = 0x61,
     _XMMI2Cvtsd2ss      = 0x62,
     _XMMI2Cvtdq2ps      = 0x63,
     _XMMI2Cvttps2dq     = 0x64,
     _XMMI2Cvtps2dq      = 0x65,
     _XMMI2Cvttpd2dq     = 0x66,
     _XMMI2Cvtpd2dq      = 0x67,
     _XMMI2Addsubpd      = 0x68,
     _XMMI2Haddpd        = 0x69,
     _XMMI2Hsubpd        = 0x6A,
     _XMMI2Roundpd       = 0x6B,
     _XMMI2Roundsd       = 0x6C,
     _XMMI2Dppd          = 0x6D,
 };
 enum _FPIEEE_ROUNDING_MODE : __int32
 {
     _FpRoundNearest       = 0x0,
     _FpRoundMinusInfinity = 0x1,
     _FpRoundPlusInfinity  = 0x2,
     _FpRoundChopped       = 0x3,
 };
 enum _FPIEEE_PRECISION : __int32
 {
     _FpPrecisionFull = 0x0,
     _FpPrecision53   = 0x1,
     _FpPrecision24   = 0x2,
 };
 enum Tokens : __int32
 {
     TOK_basedLp   = 0x0,
     TOK_cdecl     = 0x1,
     TOK_pascal    = 0x2,
     TOK_stdcall   = 0x3,
     TOK_thiscall  = 0x4,
     TOK_fastcall  = 0x5,
     TOK_cocall    = 0x6,
     TOK_ptr64     = 0x7,
     TOK_restrict  = 0x8,
     TOK_unaligned = 0x9,
     TOK__last     = 0xA,
 };
 enum DNameStatus : __int32
 {                                       // ...
     DN_valid     = 0x0,
     DN_truncated = 0x1,
     DN_invalid   = 0x2,
     DN_error     = 0x3,
 };
 enum _RTC_ErrorNumber : __int32
 {
     _RTC_CHKSTK           = 0x0,
     _RTC_CVRT_LOSS_INFO   = 0x1,
     _RTC_CORRUPT_STACK    = 0x2,
     _RTC_UNINIT_LOCAL_USE = 0x3,
     _RTC_CORRUPTED_ALLOCA = 0x4,
     _RTC_ILLEGAL          = 0x5,
 };
 struct tagLC_ID // sizeof=0x6
 {                                       // ...
     unsigned __int16 wLanguage;         // ...
     unsigned __int16 wCountry;
     unsigned __int16 wCodePage;
 };
 struct threadlocaleinfostruct::<unnamed_type_lc_category> // sizeof=0x10
 {                                       // ...
     char *locale;
     wchar_t *wlocale;
     int *refcount;
     int *wrefcount;
 };
 struct lconv // sizeof=0x30
 {                                       // ...
     char *decimal_point;                // ...
     char *thousands_sep;                // ...
     char *grouping;                     // ...
     char *int_curr_symbol;              // ...
     char *currency_symbol;              // ...
     char *mon_decimal_point;            // ...
     char *mon_thousands_sep;            // ...
     char *mon_grouping;                 // ...
     char *positive_sign;                // ...
     char *negative_sign;                // ...
     char int_frac_digits;
     char frac_digits;
     char p_cs_precedes;
     char p_sep_by_space;
     char n_cs_precedes;
     char n_sep_by_space;
     char p_sign_posn;
     char n_sign_posn;
 };
 struct __lc_time_data // sizeof=0xB8
 {                                       // ...
     char *wday_abbr[7];
     char *wday[7];
     char *month_abbr[12];
     char *month[12];
     char *ampm[2];
     char *ww_sdatefmt;
     char *ww_ldatefmt;
     char *ww_timefmt;
     unsigned int ww_lcid;
     int ww_caltype;
     int refcount;
 };
 struct threadlocaleinfostruct // sizeof=0xD8
 {                                       // ...
     int refcount;
     unsigned int lc_codepage;
     unsigned int lc_collate_cp;
     unsigned int lc_handle[6];
     tagLC_ID lc_id[6];
     threadlocaleinfostruct::<unnamed_type_lc_category> lc_category[6];
     int lc_clike;
     int mb_cur_max;
     int *lconv_intl_refcount;
     int *lconv_num_refcount;
     int *lconv_mon_refcount;
     lconv *lconv;
     int *ctype1_refcount;
     unsigned __int16 *ctype1;
     const unsigned __int16 *pctype;     // ...
     const unsigned __int8 *pclmap;
     const unsigned __int8 *pcumap;
     __lc_time_data *lc_time_curr;
 };
 struct __declspec(align(4)) threadmbcinfostruct // sizeof=0x220
 {                                       // ...
     int refcount;
     int mbcodepage;
     int ismbcodepage;
     int mblcid;
     unsigned __int16 mbulinfo[6];
     unsigned __int8 mbctype[257];
     unsigned __int8 mbcasemap[256];
     // padding byte
     // padding byte
     // padding byte
 };
 struct localeinfo_struct // sizeof=0x8
 {                                       // ...
     threadlocaleinfostruct *locinfo;    // ...
     threadmbcinfostruct *mbcinfo;       // ...
 };
 struct __cppobj vc_attributes::PreAttribute // sizeof=0x54
 {
     unsigned int Deref;
     vc_attributes::YesNoMaybe Valid;
     vc_attributes::YesNoMaybe Null;
     vc_attributes::YesNoMaybe Tainted;
     vc_attributes::AccessType Access;
     unsigned int ValidElementsConst;
     unsigned int ValidBytesConst;
     const wchar_t *ValidElements;
     const wchar_t *ValidBytes;
     const wchar_t *ValidElementsLength;
     const wchar_t *ValidBytesLength;
     unsigned int WritableElementsConst;
     unsigned int WritableBytesConst;
     const wchar_t *WritableElements;
     const wchar_t *WritableBytes;
     const wchar_t *WritableElementsLength;
     const wchar_t *WritableBytesLength;
     unsigned int ElementSizeConst;
     const wchar_t *ElementSize;
     vc_attributes::YesNoMaybe NullTerminated;
     const wchar_t *Condition;
 };
 struct __cppobj vc_attributes::PostAttribute // sizeof=0x58
 {
     unsigned int Deref;
     vc_attributes::YesNoMaybe Valid;
     vc_attributes::YesNoMaybe Null;
     vc_attributes::YesNoMaybe Tainted;
     vc_attributes::AccessType Access;
     unsigned int ValidElementsConst;
     unsigned int ValidBytesConst;
     const wchar_t *ValidElements;
     const wchar_t *ValidBytes;
     const wchar_t *ValidElementsLength;
     const wchar_t *ValidBytesLength;
     unsigned int WritableElementsConst;
     unsigned int WritableBytesConst;
     const wchar_t *WritableElements;
     const wchar_t *WritableBytes;
     const wchar_t *WritableElementsLength;
     const wchar_t *WritableBytesLength;
     unsigned int ElementSizeConst;
     const wchar_t *ElementSize;
     vc_attributes::YesNoMaybe NullTerminated;
     vc_attributes::YesNoMaybe MustCheck;
     const wchar_t *Condition;
 };
 struct __cppobj vc_attributes::FormatStringAttribute // sizeof=0x8
 {
     const wchar_t *Style;
     const wchar_t *UnformattedAlternative;
 };
 struct _ldiv_t // sizeof=0x8
 {
     int quot;
     int rem;
 };
 struct _iobuf // sizeof=0x20
 {                                       // ...
     char *_ptr;                         // ...
     int _cnt;                           // ...
     char *_base;                        // ...
     int _flag;                          // ...
     int _file;
     int _charbuf;
     int _bufsiz;
     char *_tmpfname;
 };
 struct trajectory_t // sizeof=0x24
 {                                       // ...
     trType_t trType;                    // ...
     int trTime;                         // ...
     int trDuration;                     // ...
     float trBase[3];                    // ...
     float trDelta[3];                   // ...
 };
 struct __declspec(align(4)) snd_local_t::<unnamed_type_restore> // sizeof=0x4008
 {                                       // ...
     unsigned __int8 buffer[16384];
     int size;                           // ...
     bool compress;                      // ...
     // padding byte
     // padding byte
     // padding byte
 };
 struct snd_volume_info_t // sizeof=0xC
 {                                       // ...
     float volume;                       // ...
     float goalvolume;                   // ...
     float goalrate;                     // ...
 };
 struct __declspec(align(4)) snd_channelvolgroup // sizeof=0x304
 {                                       // ...
     snd_volume_info_t channelvol[64];
     bool active;                        // ...
     // padding byte
     // padding byte
     // padding byte
 };
 struct snd_background_info_t // sizeof=0x8
 {                                       // ...
     float goalvolume;                   // ...
     float goalrate;                     // ...
 };
 struct __declspec(align(4)) snd_enveffect // sizeof=0x20
 {                                       // ...
     int roomtype;
     float drylevel;
     float drygoal;
     float dryrate;
     float wetlevel;
     float wetgoal;
     float wetrate;
     bool active;                        // ...
     // padding byte
     // padding byte
     // padding byte
 };
 struct orientation_t // sizeof=0x30
 {                                       // ...
     float origin[3];                    // ...
     float axis[3][3];                   // ...
 };
 struct __declspec(align(4)) snd_listener // sizeof=0x38
 {                                       // ...
     orientation_t orient;               // ...
     int clientNum;                      // ...
     bool active;                        // ...
     // padding byte
     // padding byte
     // padding byte
 };
 struct snd_amplifier // sizeof=0x18
 {                                       // ...
     snd_listener *listener;             // ...
     int minRadius;
     int maxRadius;                      // ...
     float falloffExp;
     float minVol;
     float maxVol;
 };
 struct snd_entchannel_info_t // sizeof=0x50
 {                                       // ...
     char name[64];
     int priority;                       // ...
     bool is3d;                          // ...
     bool isRestricted;                  // ...
     bool isPausable;                    // ...
     // padding byte
     int maxVoices;                      // ...
     int voiceCount;                     // ...
 };
 struct SndFileSpecificChannelInfo // sizeof=0x10
 {                                       // ...
     SndFileLoadingState loadingState;   // ...
     int srcChannelCount;                // ...
     int baserate;                       // ...
     int endtime;                        // ...
 };
 struct SndEntHandle::<unnamed_type_field> // sizeof=0x4
 {                                       // ...
     unsigned int entIndex;
 };
 union SndEntHandle // sizeof=0x4
 {                                       // ...
     SndEntHandle::<unnamed_type_field> field;
     int handle;
 };
 struct sndLengthNotifyInfo // sizeof=0x24
 {                                       // ...
     SndLengthId id[4];
     void *data[4];
     int count;
 };
 struct _AILSOUNDINFO // sizeof=0x24
 {                                       // ...
     int format;
     const void *data_ptr;               // ...
     unsigned int data_len;              // ...
     unsigned int rate;
     int bits;
     int channels;
     unsigned int samples;
     unsigned int block_size;
     const void *initial_ptr;            // ...
 };
 struct MssSound // sizeof=0x28
 {                                       // ...
     _AILSOUNDINFO info;
     unsigned __int8 *data;
 };
 struct LoadedSound // sizeof=0x2C
 {                                       // ...
     const char *name;
     MssSound sound;
 };
 struct StreamFileNameRaw // sizeof=0x8
 {                                       // ...
     const char *dir;
     const char *name;
 };
 union StreamFileInfo // sizeof=0x8
 {                                       // ...
     StreamFileNameRaw raw;
 };
 struct StreamFileName // sizeof=0x8
 {                                       // ...
     StreamFileInfo info;
 };
 struct StreamedSound // sizeof=0x8
 {                                       // ...
     StreamFileName filename;
 };
 union SoundFileRef // sizeof=0x8
 {                                       // ...
     LoadedSound *loadSnd;
     StreamedSound streamSnd;
 };
 struct SoundFile // sizeof=0xC
 {
     unsigned __int8 type;
     unsigned __int8 exists;
     // padding byte
     // padding byte
     SoundFileRef u;
 };
 struct SndCurve // sizeof=0x48
 {                                       // ...
     const char *filename;               // ...
     int knotCount;                      // ...
     float knots[8][2];                  // ...
 };
 struct MSSSpeakerLevels // sizeof=0x10
 {                                       // ...
     int speaker;
     int numLevels;
     float levels[2];
 };
 struct MSSChannelMap // sizeof=0x64
 {                                       // ...
     int speakerCount;
     MSSSpeakerLevels speakers[6];
 };
 struct SpeakerMap // sizeof=0x198
 {                                       // ...
     bool isDefault;
     // padding byte
     // padding byte
     // padding byte
     const char *name;                   // ...
     MSSChannelMap channelMaps[2][2];
 };
 const struct snd_alias_t // sizeof=0x5C
 {
     const char *aliasName;
     const char *subtitle;
     const char *secondaryAliasName;
     const char *chainAliasName;
     SoundFile *soundFile;
     int sequence;
     float volMin;
     float volMax;
     float pitchMin;
     float pitchMax;
     float distMin;
     float distMax;
     int flags;
     float slavePercentage;
     float probability;
     float lfePercentage;
     float centerPercentage;
     int startDelay;
     SndCurve *volumeFalloffCurve;
     float envelopMin;
     float envelopMax;
     float envelopPercentage;
     SpeakerMap *speakerMap;
 };
 struct snd_channel_info_t // sizeof=0x8C
 {                                       // ...
     SndFileSpecificChannelInfo soundFileInfo; // ...
     SndEntHandle sndEnt;                // ...
     int entchannel;                     // ...
     int startDelay;                     // ...
     int startTime;                      // ...
     int looptime;                       // ...
     int totalMsec;                      // ...
     int playbackId;                     // ...
     sndLengthNotifyInfo lengthNotifyInfo; // ...
     float basevolume;                   // ...
     float pitch;
     const snd_alias_t *alias0;          // ...
     const snd_alias_t *alias1;          // ...
     int saveIndex0;
     int saveIndex1;
     float lerp;                         // ...
     float org[3];                       // ...
     float offset[3];                    // ...
     bool paused;                        // ...
     bool master;                        // ...
     bool timescale;                     // ...
     // padding byte
     snd_alias_system_t system;          // ...
 };
 struct snd_local_t // sizeof=0x7EF8
 {                                       // ...
     bool Initialized2d;                 // ...
     bool Initialized3d;                 // ...
     bool paused;                        // ...
     // padding byte
     int playbackIdCounter;              // ...
     unsigned int playback_rate;         // ...
     int playback_channels;              // ...
     float timescale;                    // ...
     int pausetime;                      // ...
     int cpu;                            // ...
     snd_local_t::<unnamed_type_restore> restore; // ...
     float volume;                       // ...
     snd_volume_info_t mastervol;        // ...
     snd_channelvolgroup channelVolGroups[4]; // ...
     snd_channelvolgroup *channelvol;    // ...
     snd_background_info_t background[5]; // ...
     int ambient_track;                  // ...
     float slaveLerp;                    // ...
     snd_enveffect envEffects[3];        // ...
     snd_enveffect *effect;              // ...
     bool defaultPauseSettings[64];      // ...
     bool pauseSettings[64];             // ...
     snd_listener listeners[2];          // ...
     int time;                           // ...
     int looptime;                       // ...
     snd_amplifier amplifier;            // ...
     snd_entchannel_info_t entchaninfo[64]; // ...
     int entchannel_count;               // ...
     snd_channel_info_t chaninfo[53];    // ...
     int max_2D_channels;                // ...
     int max_3D_channels;                // ...
     int max_stream_channels;            // ...
 };
 union DvarValue // sizeof=0x10
 {                                       // ...
     bool enabled;
     int integer;
     unsigned int unsignedInt;
     float value;
     float vector[4];
     const char *string;
     unsigned __int8 color[4];
 };
 struct DvarLimits::<unnamed_type_enumeration> // sizeof=0x8
 {                                       // ...
     int stringCount;
     const char **strings;
 };
 struct DvarLimits::<unnamed_type_integer> // sizeof=0x8
 {                                       // ...
     int min;
     int max;
 };
 struct DvarLimits::<unnamed_type_value> // sizeof=0x8
 {                                       // ...
     float min;
     float max;
 };
 struct DvarLimits::<unnamed_type_vector> // sizeof=0x8
 {                                       // ...
     float min;
     float max;
 };
 union DvarLimits // sizeof=0x8
 {                                       // ...
     DvarLimits::<unnamed_type_enumeration> enumeration;
     DvarLimits::<unnamed_type_integer> integer;
     DvarLimits::<unnamed_type_value> value;
     DvarLimits::<unnamed_type_vector> vector;
 };
 struct dvar_s // sizeof=0x4C
 {                                       // ...
     const char *name;
     const char *description;
     unsigned __int16 flags;             // ...
     unsigned __int8 type;
     bool modified;
     DvarValue current;
     DvarValue latched;
     DvarValue reset;
     DvarLimits domain;
     bool (__cdecl *domainFunc)(dvar_s *, DvarValue);
     dvar_s *hashNext;
 };
 struct $983F061E0B702DD8AE0B4B955735A6A3 // sizeof=0x8
 {                                       // ...
     unsigned int Lo;
     int Hi;
 };
 union tagCY // sizeof=0x8
 {                                       // ...
     $983F061E0B702DD8AE0B4B955735A6A3 __s0;
     __int64 int64;
 };
 const struct _GUID // sizeof=0x10
 {                                       // ...
     unsigned int Data1;                 // ...
     unsigned __int16 Data2;             // ...
     unsigned __int16 Data3;
     unsigned __int8 Data4[8];           // ...
 };
 struct __cppobj IUnknown // sizeof=0x4
 {                                       // ...
     IUnknown_vtbl *__vftable;
 };
 struct /*VFT*/ IUnknown_vtbl // sizeof=0xC
 {
     HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
     unsigned int (__stdcall *AddRef)(IUnknown *this);
     unsigned int (__stdcall *Release)(IUnknown *this);
 };
 struct __cppobj IDispatch : IUnknown // sizeof=0x4
 {
 };
 struct __declspec(align(4)) tagTYPEDESC // sizeof=0x8
 {                                       // ...
     $0EA3A158A7CC305141C230AC8CF8AB4C ___u0;
     unsigned __int16 vt;
     // padding byte
     // padding byte
 };
 struct tagSAFEARRAYBOUND // sizeof=0x8
 {                                       // ...
     unsigned int cElements;
     int lLbound;
 };
 struct __unaligned __declspec(align(4)) tagARRAYDESC // sizeof=0x14
 {
     tagTYPEDESC tdescElem;
     unsigned __int16 cDims;
     // padding byte
     // padding byte
     tagSAFEARRAYBOUND rgbounds[1];
 };
 union $0EA3A158A7CC305141C230AC8CF8AB4C // sizeof=0x4
 {
     tagTYPEDESC *lptdesc;
     tagARRAYDESC *lpadesc;
     unsigned int hreftype;
 };
 struct __declspec(align(4)) tagIDLDESC // sizeof=0x8
 {                                       // ...
     unsigned int dwReserved;
     unsigned __int16 wIDLFlags;
     // padding byte
     // padding byte
 };
 struct tagTYPEATTR // sizeof=0x4C
 {
     _GUID guid;
     unsigned int lcid;
     unsigned int dwReserved;
     int memidConstructor;
     int memidDestructor;
     wchar_t *lpstrSchema;
     unsigned int cbSizeInstance;
     tagTYPEKIND typekind;
     unsigned __int16 cFuncs;
     unsigned __int16 cVars;
     unsigned __int16 cImplTypes;
     unsigned __int16 cbSizeVft;
     unsigned __int16 cbAlignment;
     unsigned __int16 wTypeFlags;
     unsigned __int16 wMajorVerNum;
     unsigned __int16 wMinorVerNum;
     tagTYPEDESC tdescAlias;
     tagIDLDESC idldescType;
 };
 struct __cppobj ITypeInfo : IUnknown // sizeof=0x4
 {
 };
 struct tagPARAMDESCEX // sizeof=0x18
 {
     unsigned int cBytes;
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     tagVARIANT varDefaultValue;
 };
 struct __declspec(align(4)) tagPARAMDESC // sizeof=0x8
 {                                       // ...
     tagPARAMDESCEX *pparamdescex;
     unsigned __int16 wParamFlags;
     // padding byte
     // padding byte
 };
 union $9E1D345D36631EC8325C2286E1C604B9 // sizeof=0x8
 {                                       // ...
     tagIDLDESC idldesc;
     tagPARAMDESC paramdesc;
 };
 struct tagELEMDESC // sizeof=0x10
 {                                       // ...
     tagTYPEDESC tdesc;
     $9E1D345D36631EC8325C2286E1C604B9 ___u1;
 };
 struct __declspec(align(4)) tagFUNCDESC // sizeof=0x34
 {
     int memid;
     int *lprgscode;
     tagELEMDESC *lprgelemdescParam;
     tagFUNCKIND funckind;
     tagINVOKEKIND invkind;
     tagCALLCONV callconv;
     __int16 cParams;
     __int16 cParamsOpt;
     __int16 oVft;
     __int16 cScodes;
     tagELEMDESC elemdescFunc;
     unsigned __int16 wFuncFlags;
     // padding byte
     // padding byte
 };
 struct tagVARIANT // sizeof=0x10
 {
     $DF481A0F8E59CF2FFA27B30C51E5D8AE ___u0;
 };
 union $D6E2034126E3D77443E7FECC32294E18 // sizeof=0x4
 {                                       // ...
     unsigned int oInst;
     tagVARIANT *lpvarValue;
 };
 struct tagVARDESC // sizeof=0x24
 {
     int memid;
     wchar_t *lpstrSchema;
     $D6E2034126E3D77443E7FECC32294E18 ___u2;
     tagELEMDESC elemdescVar;
     unsigned __int16 wVarFlags;
     // padding byte
     // padding byte
     tagVARKIND varkind;
 };
 struct __cppobj ITypeComp : IUnknown // sizeof=0x4
 {
 };
 union tagBINDPTR // sizeof=0x4
 {
     tagFUNCDESC *lpfuncdesc;
     tagVARDESC *lpvardesc;
     ITypeComp *lptcomp;
 };
 struct /*VFT*/ ITypeComp_vtbl // sizeof=0x14
 {
     HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
     unsigned int (__stdcall *AddRef)(IUnknown *this);
     unsigned int (__stdcall *Release)(IUnknown *this);
     HRESULT (__stdcall *Bind)(ITypeComp *this, wchar_t *, unsigned int, unsigned __int16, ITypeInfo **, tagDESCKIND *, tagBINDPTR *);
     HRESULT (__stdcall *BindType)(ITypeComp *this, wchar_t *, unsigned int, ITypeInfo **, ITypeComp **);
 };
 struct tagDISPPARAMS // sizeof=0x10
 {
     tagVARIANT *rgvarg;
     int *rgdispidNamedArgs;
     unsigned int cArgs;
     unsigned int cNamedArgs;
 };
 struct tagEXCEPINFO // sizeof=0x20
 {
     unsigned __int16 wCode;
     unsigned __int16 wReserved;
     wchar_t *bstrSource;
     wchar_t *bstrDescription;
     wchar_t *bstrHelpFile;
     unsigned int dwHelpContext;
     void *pvReserved;
     HRESULT (__stdcall *pfnDeferredFillIn)(tagEXCEPINFO *);
     int scode;
 };
 struct __cppobj ITypeLib : IUnknown // sizeof=0x4
 {
 };
 struct __declspec(align(4)) tagTLIBATTR // sizeof=0x20
 {
     _GUID guid;
     unsigned int lcid;
     tagSYSKIND syskind;
     unsigned __int16 wMajorVerNum;
     unsigned __int16 wMinorVerNum;
     unsigned __int16 wLibFlags;
     // padding byte
     // padding byte
 };
 struct /*VFT*/ ITypeLib_vtbl // sizeof=0x34
 {
     HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
     unsigned int (__stdcall *AddRef)(IUnknown *this);
     unsigned int (__stdcall *Release)(IUnknown *this);
     unsigned int (__stdcall *GetTypeInfoCount)(ITypeLib *this);
     HRESULT (__stdcall *GetTypeInfo)(ITypeLib *this, unsigned int, ITypeInfo **);
     HRESULT (__stdcall *GetTypeInfoType)(ITypeLib *this, unsigned int, tagTYPEKIND *);
     HRESULT (__stdcall *GetTypeInfoOfGuid)(ITypeLib *this, const _GUID *, ITypeInfo **);
     HRESULT (__stdcall *GetLibAttr)(ITypeLib *this, tagTLIBATTR **);
     HRESULT (__stdcall *GetTypeComp)(ITypeLib *this, ITypeComp **);
     HRESULT (__stdcall *GetDocumentation)(ITypeLib *this, int, wchar_t **, wchar_t **, unsigned int *, wchar_t **);
     HRESULT (__stdcall *IsName)(ITypeLib *this, wchar_t *, unsigned int, int *);
     HRESULT (__stdcall *FindName)(ITypeLib *this, wchar_t *, unsigned int, ITypeInfo **, int *, unsigned __int16 *);
     void (__stdcall *ReleaseTLibAttr)(ITypeLib *this, tagTLIBATTR *);
 };
 struct /*VFT*/ ITypeInfo_vtbl // sizeof=0x58
 {
     HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
     unsigned int (__stdcall *AddRef)(IUnknown *this);
     unsigned int (__stdcall *Release)(IUnknown *this);
     HRESULT (__stdcall *GetTypeAttr)(ITypeInfo *this, tagTYPEATTR **);
     HRESULT (__stdcall *GetTypeComp)(ITypeInfo *this, ITypeComp **);
     HRESULT (__stdcall *GetFuncDesc)(ITypeInfo *this, unsigned int, tagFUNCDESC **);
     HRESULT (__stdcall *GetVarDesc)(ITypeInfo *this, unsigned int, tagVARDESC **);
     HRESULT (__stdcall *GetNames)(ITypeInfo *this, int, wchar_t **, unsigned int, unsigned int *);
     HRESULT (__stdcall *GetRefTypeOfImplType)(ITypeInfo *this, unsigned int, unsigned int *);
     HRESULT (__stdcall *GetImplTypeFlags)(ITypeInfo *this, unsigned int, int *);
     HRESULT (__stdcall *GetIDsOfNames)(ITypeInfo *this, wchar_t **, unsigned int, int *);
     HRESULT (__stdcall *Invoke)(ITypeInfo *this, void *, int, unsigned __int16, tagDISPPARAMS *, tagVARIANT *, tagEXCEPINFO *, unsigned int *);
     HRESULT (__stdcall *GetDocumentation)(ITypeInfo *this, int, wchar_t **, wchar_t **, unsigned int *, wchar_t **);
     HRESULT (__stdcall *GetDllEntry)(ITypeInfo *this, int, tagINVOKEKIND, wchar_t **, wchar_t **, unsigned __int16 *);
     HRESULT (__stdcall *GetRefTypeInfo)(ITypeInfo *this, unsigned int, ITypeInfo **);
     HRESULT (__stdcall *AddressOfMember)(ITypeInfo *this, int, tagINVOKEKIND, void **);
     HRESULT (__stdcall *CreateInstance)(ITypeInfo *this, IUnknown *, const _GUID *, void **);
     HRESULT (__stdcall *GetMops)(ITypeInfo *this, int, wchar_t **);
     HRESULT (__stdcall *GetContainingTypeLib)(ITypeInfo *this, ITypeLib **, unsigned int *);
     void (__stdcall *ReleaseTypeAttr)(ITypeInfo *this, tagTYPEATTR *);
     void (__stdcall *ReleaseFuncDesc)(ITypeInfo *this, tagFUNCDESC *);
     void (__stdcall *ReleaseVarDesc)(ITypeInfo *this, tagVARDESC *);
 };
 struct /*VFT*/ IDispatch_vtbl // sizeof=0x1C
 {
     HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
     unsigned int (__stdcall *AddRef)(IUnknown *this);
     unsigned int (__stdcall *Release)(IUnknown *this);
     HRESULT (__stdcall *GetTypeInfoCount)(IDispatch *this, unsigned int *);
     HRESULT (__stdcall *GetTypeInfo)(IDispatch *this, unsigned int, unsigned int, ITypeInfo **);
     HRESULT (__stdcall *GetIDsOfNames)(IDispatch *this, const _GUID *, wchar_t **, unsigned int, unsigned int, int *);
     HRESULT (__stdcall *Invoke)(IDispatch *this, int, const _GUID *, unsigned int, unsigned __int16, tagDISPPARAMS *, tagVARIANT *, tagEXCEPINFO *, unsigned int *);
 };
 struct tagSAFEARRAY // sizeof=0x18
 {
     unsigned __int16 cDims;
     unsigned __int16 fFeatures;
     unsigned int cbElements;
     unsigned int cLocks;
     void *pvData;
     tagSAFEARRAYBOUND rgsabound[1];
 };
 struct $12FD4DC4C84824403B0456BCD8AF73C8 // sizeof=0x2
 {                                       // ...
     unsigned __int8 scale;
     unsigned __int8 sign;
 };
 union $911408BBA13E18341C223856B8B46F18 // sizeof=0x2
 {                                       // ...
     $12FD4DC4C84824403B0456BCD8AF73C8 __s0;
     unsigned __int16 signscale;
 };
 struct $A04CD8C0331024E133CCEC4B0AB36956 // sizeof=0x8
 {                                       // ...
     unsigned int Lo32;
     unsigned int Mid32;
 };
 union $D2747069831CE52F79555A3424402DB1 // sizeof=0x8
 {                                       // ...
     $A04CD8C0331024E133CCEC4B0AB36956 __s0;
     unsigned __int64 Lo64;
 };
 struct tagDEC // sizeof=0x10
 {                                       // ...
     unsigned __int16 wReserved;
     $911408BBA13E18341C223856B8B46F18 ___u1;
     unsigned int Hi32;
     $D2747069831CE52F79555A3424402DB1 ___u3;
 };
 struct __cppobj IRecordInfo : IUnknown // sizeof=0x4
 {
 };
 struct /*VFT*/ IRecordInfo_vtbl // sizeof=0x4C
 {
     HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
     unsigned int (__stdcall *AddRef)(IUnknown *this);
     unsigned int (__stdcall *Release)(IUnknown *this);
     HRESULT (__stdcall *RecordInit)(IRecordInfo *this, void *);
     HRESULT (__stdcall *RecordClear)(IRecordInfo *this, void *);
     HRESULT (__stdcall *RecordCopy)(IRecordInfo *this, void *, void *);
     HRESULT (__stdcall *GetGuid)(IRecordInfo *this, _GUID *);
     HRESULT (__stdcall *GetName)(IRecordInfo *this, wchar_t **);
     HRESULT (__stdcall *GetSize)(IRecordInfo *this, unsigned int *);
     HRESULT (__stdcall *GetTypeInfo)(IRecordInfo *this, ITypeInfo **);
     HRESULT (__stdcall *GetField)(IRecordInfo *this, void *, const wchar_t *, tagVARIANT *);
     HRESULT (__stdcall *GetFieldNoCopy)(IRecordInfo *this, void *, const wchar_t *, tagVARIANT *, void **);
     HRESULT (__stdcall *PutField)(IRecordInfo *this, unsigned int, void *, const wchar_t *, tagVARIANT *);
     HRESULT (__stdcall *PutFieldNoCopy)(IRecordInfo *this, unsigned int, void *, const wchar_t *, tagVARIANT *);
     HRESULT (__stdcall *GetFieldNames)(IRecordInfo *this, unsigned int *, wchar_t **);
     int (__stdcall *IsMatchingType)(IRecordInfo *this, IRecordInfo *);
     void *(__stdcall *RecordCreate)(IRecordInfo *this);
     HRESULT (__stdcall *RecordCreateCopy)(IRecordInfo *this, void *, void **);
     HRESULT (__stdcall *RecordDestroy)(IRecordInfo *this, void *);
 };
 struct $E2F13C0D8C7A5E44CBEA2DDC2BADB614 // sizeof=0x10
 {                                       // ...
     unsigned __int16 vt;
     unsigned __int16 wReserved1;
     unsigned __int16 wReserved2;
     unsigned __int16 wReserved3;
     __int64 llVal;
 };
 struct $6A8D979C73360B3A30A29C9532790949 // sizeof=0x10
 {                                       // ...
     _BYTE gap0[8];
     int lVal;
     IRecordInfo *pRecInfo;
 };
 struct $20D69447C97B677619C52B2E27D3FF49 // sizeof=0x9
 {                                       // ...
     _BYTE gap0[8];
     unsigned __int8 bVal;
 };
 struct $31126B8528A05AF3606C6D495FD178E8 // sizeof=0xA
 {                                       // ...
     _BYTE gap0[8];
     __int16 iVal;
 };
 struct $50230A970D9734D4E9774CFC619DF0F6 // sizeof=0xC
 {                                       // ...
     _BYTE gap0[8];
     float fltVal;
 };
 struct $4C0EC2258454B893CE739DAE89D8DB7B // sizeof=0x10
 {                                       // ...
     _BYTE gap0[8];
     long double dblVal;
 };
 struct $6DB36323059316E675433BB10D285009 // sizeof=0xA
 {                                       // ...
     _BYTE gap0[8];
     __int16 boolVal;
 };
 struct $8E3C8731874D1B3BC66617C4DD3163A6 // sizeof=0xC
 {                                       // ...
     _BYTE gap0[8];
     int scode;
 };
 struct $F75953F7996C774DB701A54685C2D4AC // sizeof=0x10
 {                                       // ...
     _BYTE gap0[8];
     tagCY cyVal;
 };
 struct $E94952165EEA9EEA990FEB33603E1B19 // sizeof=0x10
 {                                       // ...
     _BYTE gap0[8];
     long double date;
 };
 struct $7B1C2AA558A72DB3909F7F0B6C8C78B2 // sizeof=0xC
 {                                       // ...
     _BYTE gap0[8];
     wchar_t *bstrVal;
 };
 struct $28D171EED90DF421B2675FB5FB465284 // sizeof=0xC
 {                                       // ...
     _BYTE gap0[8];
     IUnknown *punkVal;
 };
 struct $816917A86A49EE07269AD717C6B8BA5F // sizeof=0xC
 {                                       // ...
     _BYTE gap0[8];
     IDispatch *pdispVal;
 };
 struct $66EB1D41C10E61D479871681EA0B2001 // sizeof=0xC
 {                                       // ...
     _BYTE gap0[8];
     tagSAFEARRAY *parray;
 };
 struct $CEB26E30A72A699742605DB617405969 // sizeof=0xC
 {                                       // ...
     _BYTE gap0[8];
     unsigned __int8 *pbVal;
 };
 struct $76732A64405C0E287FCB302687644550 // sizeof=0xC
 {                                       // ...
     _BYTE gap0[8];
     __int16 *piVal;
 };
 struct $E5FC128E66C26C95254032BA69D36E74 // sizeof=0xC
 {                                       // ...
     _BYTE gap0[8];
     int *plVal;
 };
 struct $E9CDCC48CD0BB58E8F361AA17BFDA76E // sizeof=0xC
 {                                       // ...
     _BYTE gap0[8];
     __int64 *pllVal;
 };
 struct $BF8CC88CDF129BD6E4FA4ABA13F521AD // sizeof=0xC
 {                                       // ...
     _BYTE gap0[8];
     float *pfltVal;
 };
 struct $2CABE618CF1C2625A4479554E4967E0A // sizeof=0xC
 {                                       // ...
     _BYTE gap0[8];
     long double *pdblVal;
 };
 struct $AAA92DA1D6E1B0E8462F69216B62027C // sizeof=0xC
 {                                       // ...
     _BYTE gap0[8];
     __int16 *pboolVal;
 };
 struct $F7167AE7A8ABA03C094C204FB1564A28 // sizeof=0xC
 {                                       // ...
     _BYTE gap0[8];
     int *pscode;
 };
 struct $4C4509829A1D8D94CB479B5E98E07156 // sizeof=0xC
 {                                       // ...
     _BYTE gap0[8];
     tagCY *pcyVal;
 };
 struct $6857AE69DB7C952EEFD665431A7B503A // sizeof=0xC
 {                                       // ...
     _BYTE gap0[8];
     long double *pdate;
 };
 struct $BE56ADCB97A5F80C4E840DC3FCEE04D4 // sizeof=0xC
 {                                       // ...
     _BYTE gap0[8];
     wchar_t **pbstrVal;
 };
 struct $2D01F5D40693004D715B063416318E6D // sizeof=0xC
 {                                       // ...
     _BYTE gap0[8];
     IUnknown **ppunkVal;
 };
 struct $2B097C12EDF1BB6A107F52340F674881 // sizeof=0xC
 {                                       // ...
     _BYTE gap0[8];
     IDispatch **ppdispVal;
 };
 struct $0FA736FFCDDB7DBF4703739E39D69DE1 // sizeof=0xC
 {                                       // ...
     _BYTE gap0[8];
     tagSAFEARRAY **pparray;
 };
 struct $7AA74CCA7C56FC511166819AB32F41C5 // sizeof=0xC
 {                                       // ...
     _BYTE gap0[8];
     tagVARIANT *pvarVal;
 };
 struct $6C39A09D97B880131B2C5BB4943CBB45 // sizeof=0xC
 {                                       // ...
     _BYTE gap0[8];
     void *byref;
 };
 struct $E898A5260D8380431CCAA47FCC291563 // sizeof=0x9
 {                                       // ...
     _BYTE gap0[8];
     char cVal;
 };
 struct $48802A31D3D0701BC13CEF9CEA041E7B // sizeof=0xA
 {                                       // ...
     _BYTE gap0[8];
     unsigned __int16 uiVal;
 };
 struct $B644145F46FF1F932B106BFA6CC3F6D9 // sizeof=0xC
 {                                       // ...
     _BYTE gap0[8];
     unsigned int ulVal;
 };
 struct $EA00B0D50EAA1933F67C45009B664198 // sizeof=0x10
 {                                       // ...
     _BYTE gap0[8];
     unsigned __int64 ullVal;
 };
 struct $5CA90CF57237397281FB12BFD52C1905 // sizeof=0xC
 {                                       // ...
     _BYTE gap0[8];
     int intVal;
 };
 struct $E7F48E2F4EAA3149E57D87E5D1B2C6B8 // sizeof=0xC
 {                                       // ...
     _BYTE gap0[8];
     unsigned int uintVal;
 };
 struct $B38C1253EF0F1A2A5A045D24FB48A4FA // sizeof=0xC
 {                                       // ...
     _BYTE gap0[8];
     tagDEC *pdecVal;
 };
 struct $E1D71D20C3D01115E20D79FAE9629CE8 // sizeof=0xC
 {                                       // ...
     _BYTE gap0[8];
     char *pcVal;
 };
 struct $5669F5A4AD19EF2CB42A5602080CB0A6 // sizeof=0xC
 {                                       // ...
     _BYTE gap0[8];
     unsigned __int16 *puiVal;
 };
 struct $886F8AE9D7C8B1B861B6CA58D67B682A // sizeof=0xC
 {                                       // ...
     _BYTE gap0[8];
     unsigned int *pulVal;
 };
 struct $ADBB94A21537A8461C6168A5B871A740 // sizeof=0xC
 {                                       // ...
     _BYTE gap0[8];
     unsigned __int64 *pullVal;
 };
 struct $CDA73A427DD2A30CDA26CA3394C33CF0 // sizeof=0xC
 {                                       // ...
     _BYTE gap0[8];
     int *pintVal;
 };
 struct $2516E53E690D8CC5659AAB7EDC49E664 // sizeof=0xC
 {                                       // ...
     _BYTE gap0[8];
     unsigned int *puintVal;
 };
 struct $17B4421FDC73B39569D8A12F584CB67F // sizeof=0xC
 {                                       // ...
     _BYTE gap0[8];
     void *pvRecord;
 };
 union $DF481A0F8E59CF2FFA27B30C51E5D8AE // sizeof=0x10
 {
     $E2F13C0D8C7A5E44CBEA2DDC2BADB614 __s0;
     tagDEC decVal;
     $6A8D979C73360B3A30A29C9532790949 __s2;
     $20D69447C97B677619C52B2E27D3FF49 __s3;
     $31126B8528A05AF3606C6D495FD178E8 __s4;
     $50230A970D9734D4E9774CFC619DF0F6 __s5;
     $4C0EC2258454B893CE739DAE89D8DB7B __s6;
     $6DB36323059316E675433BB10D285009 __s7;
     $8E3C8731874D1B3BC66617C4DD3163A6 __s8;
     $F75953F7996C774DB701A54685C2D4AC __s9;
     $E94952165EEA9EEA990FEB33603E1B19 __s10;
     $7B1C2AA558A72DB3909F7F0B6C8C78B2 __s11;
     $28D171EED90DF421B2675FB5FB465284 __s12;
     $816917A86A49EE07269AD717C6B8BA5F __s13;
     $66EB1D41C10E61D479871681EA0B2001 __s14;
     $CEB26E30A72A699742605DB617405969 __s15;
     $76732A64405C0E287FCB302687644550 __s16;
     $E5FC128E66C26C95254032BA69D36E74 __s17;
     $E9CDCC48CD0BB58E8F361AA17BFDA76E __s18;
     $BF8CC88CDF129BD6E4FA4ABA13F521AD __s19;
     $2CABE618CF1C2625A4479554E4967E0A __s20;
     $AAA92DA1D6E1B0E8462F69216B62027C __s21;
     $F7167AE7A8ABA03C094C204FB1564A28 __s22;
     $4C4509829A1D8D94CB479B5E98E07156 __s23;
     $6857AE69DB7C952EEFD665431A7B503A __s24;
     $BE56ADCB97A5F80C4E840DC3FCEE04D4 __s25;
     $2D01F5D40693004D715B063416318E6D __s26;
     $2B097C12EDF1BB6A107F52340F674881 __s27;
     $0FA736FFCDDB7DBF4703739E39D69DE1 __s28;
     $7AA74CCA7C56FC511166819AB32F41C5 __s29;
     $6C39A09D97B880131B2C5BB4943CBB45 __s30;
     $E898A5260D8380431CCAA47FCC291563 __s31;
     $48802A31D3D0701BC13CEF9CEA041E7B __s32;
     $B644145F46FF1F932B106BFA6CC3F6D9 __s33;
     $EA00B0D50EAA1933F67C45009B664198 __s34;
     $5CA90CF57237397281FB12BFD52C1905 __s35;
     $E7F48E2F4EAA3149E57D87E5D1B2C6B8 __s36;
     $B38C1253EF0F1A2A5A045D24FB48A4FA __s37;
     $E1D71D20C3D01115E20D79FAE9629CE8 __s38;
     $5669F5A4AD19EF2CB42A5602080CB0A6 __s39;
     $886F8AE9D7C8B1B861B6CA58D67B682A __s40;
     $ADBB94A21537A8461C6168A5B871A740 __s41;
     $CDA73A427DD2A30CDA26CA3394C33CF0 __s42;
     $2516E53E690D8CC5659AAB7EDC49E664 __s43;
     $17B4421FDC73B39569D8A12F584CB67F __s44;
 };
 struct $B950AFB169DC87688B328897744C612F // sizeof=0x8
 {                                       // ...
     unsigned int LowPart;
     unsigned int HighPart;
 };
 union _ULARGE_INTEGER // sizeof=0x8
 {                                       // ...
     $B950AFB169DC87688B328897744C612F __s0;
     $B950AFB169DC87688B328897744C612F u;
     unsigned __int64 QuadPart;
 };
 struct _FILETIME // sizeof=0x8
 {                                       // ...
     unsigned int dwLowDateTime;         // ...
     unsigned int dwHighDateTime;        // ...
 };
 struct tagSTATSTG // sizeof=0x48
 {
     wchar_t *pwcsName;
     unsigned int type;
     _ULARGE_INTEGER cbSize;
     _FILETIME mtime;
     _FILETIME ctime;
     _FILETIME atime;
     unsigned int grfMode;
     unsigned int grfLocksSupported;
     _GUID clsid;
     unsigned int grfStateBits;
     unsigned int reserved;
 };
 struct tagCABSTR // sizeof=0x8
 {                                       // ...
     unsigned int cElems;
     wchar_t **pElems;
 };
 struct tagCACLSID // sizeof=0x8
 {                                       // ...
     unsigned int cElems;
     _GUID *pElems;
 };
 struct tagCADBL // sizeof=0x8
 {                                       // ...
     unsigned int cElems;
     long double *pElems;
 };
 struct tagCAUB // sizeof=0x8
 {                                       // ...
     unsigned int cElems;
     unsigned __int8 *pElems;
 };
 struct tagCACY // sizeof=0x8
 {                                       // ...
     unsigned int cElems;
     tagCY *pElems;
 };
 struct _ADPCMDATATAG // sizeof=0x48
 {                                       // ...
     unsigned int blocksize;
     unsigned int extrasamples;
     unsigned int blockleft;
     unsigned int step;
     unsigned int savesrc;
     unsigned int sample;
     unsigned int destend;
     unsigned int srcend;
     unsigned int samplesL;
     unsigned int samplesR;
     unsigned __int16 moresamples[16];
 };
 struct _AILMIXINFO // sizeof=0x78
 {                                       // ...
     _AILSOUNDINFO Info;                 // ...
     _ADPCMDATATAG mss_adpcm;
     unsigned int src_fract;
     int left_val;
     int right_val;
 };
 struct MemoryFile // sizeof=0x1C
 {                                       // ...
     unsigned __int8 *buffer;            // ...
     int bufferSize;
     int bytesUsed;                      // ...
     int segmentIndex;
     int segmentStart;
     bool errorOnOverflow;
     bool memoryOverflow;
     bool compress;
     // padding byte
     void (__cdecl *archiveProc)(MemoryFile *, int, void *);
 };
 struct tagCAUL // sizeof=0x8
 {                                       // ...
     unsigned int cElems;
     unsigned int *pElems;
 };
 struct tagBSTRBLOB // sizeof=0x8
 {                                       // ...
     unsigned int cbSize;
     unsigned __int8 *pData;
 };
 struct $FAF74743FBE1C8632047CFB668F7028A // sizeof=0x8
 {                                       // ...
     unsigned int LowPart;
     int HighPart;
 };
 union _LARGE_INTEGER // sizeof=0x8
 {                                       // ...
     $FAF74743FBE1C8632047CFB668F7028A __s0;
     $FAF74743FBE1C8632047CFB668F7028A u;
     __int64 QuadPart;
 };
 struct tagCAH // sizeof=0x8
 {                                       // ...
     unsigned int cElems;
     _LARGE_INTEGER *pElems;
 };
 struct _TP_CALLBACK_ENVIRON::<unnamed_type_u>::<unnamed_type_s> // sizeof=0x4
 {                                       // ...
.0   unsigned __int32 LongFunction : 1;
.1   unsigned __int32 Private : 31;
 };
 union _TP_CALLBACK_ENVIRON::<unnamed_type_u> // sizeof=0x4
 {                                       // ...
     unsigned int Flags;
     _TP_CALLBACK_ENVIRON::<unnamed_type_u>::<unnamed_type_s> s;
 };
 struct _TP_CALLBACK_ENVIRON // sizeof=0x20
 {
     unsigned int Version;
     _TP_POOL *Pool;
     _TP_CLEANUP_GROUP *CleanupGroup;
     void (__stdcall *CleanupGroupCancelCallback)(void *, void *);
     void *RaceDll;
     _ACTIVATION_CONTEXT *ActivationContext;
     void (__stdcall *FinalizationCallback)(_TP_CALLBACK_INSTANCE *, void *);
     _TP_CALLBACK_ENVIRON::<unnamed_type_u> u;
 };
 struct tagCAUI // sizeof=0x8
 {                                       // ...
     unsigned int cElems;
     unsigned __int16 *pElems;
 };
 struct tagCAFILETIME // sizeof=0x8
 {                                       // ...
     unsigned int cElems;
     _FILETIME *pElems;
 };
 struct tagCLIPDATA // sizeof=0xC
 {
     unsigned int cbSize;
     int ulClipFmt;
     unsigned __int8 *pClipData;
 };
 struct tagBLOB // sizeof=0x8
 {                                       // ...
     unsigned int cbSize;
     unsigned __int8 *pBlobData;
 };
 struct __cppobj ISequentialStream : IUnknown // sizeof=0x4
 {                                       // ...
 };
 struct /*VFT*/ ISequentialStream_vtbl // sizeof=0x14
 {
     HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
     unsigned int (__stdcall *AddRef)(IUnknown *this);
     unsigned int (__stdcall *Release)(IUnknown *this);
     HRESULT (__stdcall *Read)(ISequentialStream *this, void *, unsigned int, unsigned int *);
     HRESULT (__stdcall *Write)(ISequentialStream *this, const void *, unsigned int, unsigned int *);
 };
 struct __cppobj IStream : ISequentialStream // sizeof=0x4
 {
 };
 struct /*VFT*/ IStream_vtbl // sizeof=0x38
 {
     HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
     unsigned int (__stdcall *AddRef)(IUnknown *this);
     unsigned int (__stdcall *Release)(IUnknown *this);
     HRESULT (__stdcall *Read)(ISequentialStream *this, void *, unsigned int, unsigned int *);
     HRESULT (__stdcall *Write)(ISequentialStream *this, const void *, unsigned int, unsigned int *);
     HRESULT (__stdcall *Seek)(IStream *this, _LARGE_INTEGER, unsigned int, _ULARGE_INTEGER *);
     HRESULT (__stdcall *SetSize)(IStream *this, _ULARGE_INTEGER);
     HRESULT (__stdcall *CopyTo)(IStream *this, IStream *, _ULARGE_INTEGER, _ULARGE_INTEGER *, _ULARGE_INTEGER *);
     HRESULT (__stdcall *Commit)(IStream *this, unsigned int);
     HRESULT (__stdcall *Revert)(IStream *this);
     HRESULT (__stdcall *LockRegion)(IStream *this, _ULARGE_INTEGER, _ULARGE_INTEGER, unsigned int);
     HRESULT (__stdcall *UnlockRegion)(IStream *this, _ULARGE_INTEGER, _ULARGE_INTEGER, unsigned int);
     HRESULT (__stdcall *Stat)(IStream *this, tagSTATSTG *, unsigned int);
     HRESULT (__stdcall *Clone)(IStream *this, IStream **);
 };
 struct __cppobj IStorage : IUnknown // sizeof=0x4
 {
 };
 struct __cppobj IEnumSTATSTG : IUnknown // sizeof=0x4
 {
 };
 struct /*VFT*/ IEnumSTATSTG_vtbl // sizeof=0x1C
 {
     HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
     unsigned int (__stdcall *AddRef)(IUnknown *this);
     unsigned int (__stdcall *Release)(IUnknown *this);
     HRESULT (__stdcall *Next)(IEnumSTATSTG *this, unsigned int, tagSTATSTG *, unsigned int *);
     HRESULT (__stdcall *Skip)(IEnumSTATSTG *this, unsigned int);
     HRESULT (__stdcall *Reset)(IEnumSTATSTG *this);
     HRESULT (__stdcall *Clone)(IEnumSTATSTG *this, IEnumSTATSTG **);
 };
 struct /*VFT*/ IStorage_vtbl // sizeof=0x48
 {
     HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
     unsigned int (__stdcall *AddRef)(IUnknown *this);
     unsigned int (__stdcall *Release)(IUnknown *this);
     HRESULT (__stdcall *CreateStream)(IStorage *this, const wchar_t *, unsigned int, unsigned int, unsigned int, IStream **);
     HRESULT (__stdcall *OpenStream)(IStorage *this, const wchar_t *, void *, unsigned int, unsigned int, IStream **);
     HRESULT (__stdcall *CreateStorage)(IStorage *this, const wchar_t *, unsigned int, unsigned int, unsigned int, IStorage **);
     HRESULT (__stdcall *OpenStorage)(IStorage *this, const wchar_t *, IStorage *, unsigned int, wchar_t **, unsigned int, IStorage **);
     HRESULT (__stdcall *CopyTo)(IStorage *this, unsigned int, const _GUID *, wchar_t **, IStorage *);
     HRESULT (__stdcall *MoveElementTo)(IStorage *this, const wchar_t *, IStorage *, const wchar_t *, unsigned int);
     HRESULT (__stdcall *Commit)(IStorage *this, unsigned int);
     HRESULT (__stdcall *Revert)(IStorage *this);
     HRESULT (__stdcall *EnumElements)(IStorage *this, unsigned int, void *, unsigned int, IEnumSTATSTG **);
     HRESULT (__stdcall *DestroyElement)(IStorage *this, const wchar_t *);
     HRESULT (__stdcall *RenameElement)(IStorage *this, const wchar_t *, const wchar_t *);
     HRESULT (__stdcall *SetElementTimes)(IStorage *this, const wchar_t *, const _FILETIME *, const _FILETIME *, const _FILETIME *);
     HRESULT (__stdcall *SetClass)(IStorage *this, const _GUID *);
     HRESULT (__stdcall *SetStateBits)(IStorage *this, unsigned int, unsigned int);
     HRESULT (__stdcall *Stat)(IStorage *this, tagSTATSTG *, unsigned int);
 };
 struct tagVersionedStream // sizeof=0x14
 {
     _GUID guidVersion;
     IStream *pStream;
 };
 struct tagCAC // sizeof=0x8
 {                                       // ...
     unsigned int cElems;
     char *pElems;
 };
 struct tagCAI // sizeof=0x8
 {                                       // ...
     unsigned int cElems;
     __int16 *pElems;
 };
 struct tagCAL // sizeof=0x8
 {                                       // ...
     unsigned int cElems;
     int *pElems;
 };
 struct tagCAUH // sizeof=0x8
 {                                       // ...
     unsigned int cElems;
     _ULARGE_INTEGER *pElems;
 };
 struct tagCAFLT // sizeof=0x8
 {                                       // ...
     unsigned int cElems;
     float *pElems;
 };
 struct tagCABOOL // sizeof=0x8
 {                                       // ...
     unsigned int cElems;
     __int16 *pElems;
 };
 struct tagCASCODE // sizeof=0x8
 {                                       // ...
     unsigned int cElems;
     int *pElems;
 };
 struct tagCADATE // sizeof=0x8
 {                                       // ...
     unsigned int cElems;
     long double *pElems;
 };
 struct tagCACLIPDATA // sizeof=0x8
 {                                       // ...
     unsigned int cElems;
     tagCLIPDATA *pElems;
 };
 struct tagCABSTRBLOB // sizeof=0x8
 {                                       // ...
     unsigned int cElems;
     tagBSTRBLOB *pElems;
 };
 struct tagCALPSTR // sizeof=0x8
 {                                       // ...
     unsigned int cElems;
     char **pElems;
 };
 struct tagCALPWSTR // sizeof=0x8
 {                                       // ...
     unsigned int cElems;
     wchar_t **pElems;
 };
 struct tagCAPROPVARIANT // sizeof=0x8
 {                                       // ...
     unsigned int cElems;
     tagPROPVARIANT *pElems;
 };
 struct tagPROPVARIANT // sizeof=0x10
 {
     $DD6C6B1F74FEB8CCCBAB610FCEA0479B ___u0;
 };
 struct __unaligned __declspec(align(1)) $5DF3780F58367B9F2537DF425A8A812E // sizeof=0x9
 {                                       // ...
     unsigned __int16 vt;
     unsigned __int16 wReserved1;
     unsigned __int16 wReserved2;
     unsigned __int16 wReserved3;
     char cVal;
 };
 struct $6D336DA143C556260FF80C12817B08DB // sizeof=0xC
 {                                       // ...
     _BYTE gap0[8];
     int lVal;
 };
 struct $888B0EDBC9E1C279DA4A5EF6C79C29D1 // sizeof=0x10
 {                                       // ...
     _BYTE gap0[8];
     _LARGE_INTEGER hVal;
 };
 struct $8B57884EB60B8BCAC840C3009FE329B5 // sizeof=0x10
 {                                       // ...
     _BYTE gap0[8];
     _ULARGE_INTEGER uhVal;
 };
 struct $EECCDCD8A0A49AB08117D7785BE0D5FB // sizeof=0x10
 {                                       // ...
     _BYTE gap0[8];
     _FILETIME filetime;
 };
 struct $1F63314D372858C2785438DDB1CCE189 // sizeof=0xC
 {                                       // ...
     _BYTE gap0[8];
     _GUID *puuid;
 };
 struct $4651ABE9464AB83A11BFF7726A452768 // sizeof=0xC
 {                                       // ...
     _BYTE gap0[8];
     tagCLIPDATA *pclipdata;
 };
 struct $418A425068131C3AB6BC1F8722C2FF97 // sizeof=0x10
 {                                       // ...
     _BYTE gap0[8];
     tagBSTRBLOB bstrblobVal;
 };
 struct $56C586EC716F67E31BAE66865996E6F7 // sizeof=0x10
 {                                       // ...
     _BYTE gap0[8];
     tagBLOB blob;
 };
 struct $17BA733FE6B8BEB3CC80B954432F0727 // sizeof=0xC
 {                                       // ...
     _BYTE gap0[8];
     char *pszVal;
 };
 struct $A123DDE5155BABE8656CED1ACF96B10E // sizeof=0xC
 {                                       // ...
     _BYTE gap0[8];
     wchar_t *pwszVal;
 };
 struct $FC0BE000C4DC22E781CCEFCC1FCC2383 // sizeof=0xC
 {                                       // ...
     _BYTE gap0[8];
     IStream *pStream;
 };
 struct $06D38A1AA6421646F9DD5501D16B85D9 // sizeof=0xC
 {                                       // ...
     _BYTE gap0[8];
     IStorage *pStorage;
 };
 struct $46ADE2E9D4BE0F09C82B582A37DE948B // sizeof=0xC
 {                                       // ...
     _BYTE gap0[8];
     tagVersionedStream *pVersionedStream;
 };
 struct $FAB90E8D25F49C22DCBFB8611E3E9214 // sizeof=0x10
 {                                       // ...
     _BYTE gap0[8];
     tagCAC cac;
 };
 struct $1461CBD9F5FA7515E5D2DAE7224466DB // sizeof=0x10
 {                                       // ...
     _BYTE gap0[8];
     tagCAUB caub;
 };
 struct $61DAF1FFE0622EFFA322EE0B5B3EC2BA // sizeof=0x10
 {                                       // ...
     _BYTE gap0[8];
     tagCAI cai;
 };
 struct $25AF51A7EA8753D15244011C091C4DA5 // sizeof=0x10
 {                                       // ...
     _BYTE gap0[8];
     tagCAUI caui;
 };
 struct $F104AA9E8599A00BFF48C156E2E399D2 // sizeof=0x10
 {                                       // ...
     _BYTE gap0[8];
     tagCAL cal;
 };
 struct $5DE6A231F147B150BBDC0E59FEAD6F24 // sizeof=0x10
 {                                       // ...
     _BYTE gap0[8];
     tagCAUL caul;
 };
 struct $E8164169443DA17C7AE47E3A4BB44FB6 // sizeof=0x10
 {                                       // ...
     _BYTE gap0[8];
     tagCAH cah;
 };
 struct $222DF5559E3FE7E672D4854BCBFEB446 // sizeof=0x10
 {                                       // ...
     _BYTE gap0[8];
     tagCAUH cauh;
 };
 struct $832C93F69CBF3233F2ECBBE9AE03F7DE // sizeof=0x10
 {                                       // ...
     _BYTE gap0[8];
     tagCAFLT caflt;
 };
 struct $515DB5C3B6D2D7EC0DFC1E3DC01EB5FC // sizeof=0x10
 {                                       // ...
     _BYTE gap0[8];
     tagCADBL cadbl;
 };
 struct $0AD1D434E3A97CDE05F9945D4D56740A // sizeof=0x10
 {                                       // ...
     _BYTE gap0[8];
     tagCABOOL cabool;
 };
 struct $AA3ADBB85D14D7A2B3EA87CE830E9AF5 // sizeof=0x10
 {                                       // ...
     _BYTE gap0[8];
     tagCASCODE cascode;
 };
 struct $44A4D90643DF444FA0347EC7A4E9BCD9 // sizeof=0x10
 {                                       // ...
     _BYTE gap0[8];
     tagCACY cacy;
 };
 struct $6F2F37C13E12FDF77BC9F07F7A7512B0 // sizeof=0x10
 {                                       // ...
     _BYTE gap0[8];
     tagCADATE cadate;
 };
 struct $1F356AE364116612A449AC4E0D6BC639 // sizeof=0x10
 {                                       // ...
     _BYTE gap0[8];
     tagCAFILETIME cafiletime;
 };
 struct $0CD28F2F6F357BF17FC6A1BDAF551C61 // sizeof=0x10
 {                                       // ...
     _BYTE gap0[8];
     tagCACLSID cauuid;
 };
 struct $0999FD122F907147D9DBD764652B7FE9 // sizeof=0x10
 {                                       // ...
     _BYTE gap0[8];
     tagCACLIPDATA caclipdata;
 };
 struct $9C37579773DC6336755279057496CBC5 // sizeof=0x10
 {                                       // ...
     _BYTE gap0[8];
     tagCABSTR cabstr;
 };
 struct $4BD09EF6051E90B21D58E761CBD34CF4 // sizeof=0x10
 {                                       // ...
     _BYTE gap0[8];
     tagCABSTRBLOB cabstrblob;
 };
 struct $F955AC29C8D154C14F3D30A1C796710B // sizeof=0x10
 {                                       // ...
     _BYTE gap0[8];
     tagCALPSTR calpstr;
 };
 struct $34E8CC8A040ED089665D951F25C087E0 // sizeof=0x10
 {                                       // ...
     _BYTE gap0[8];
     tagCALPWSTR calpwstr;
 };
 struct $E3B2ECD8FD7AFC5696C11F866B29FFC9 // sizeof=0x10
 {                                       // ...
     _BYTE gap0[8];
     tagCAPROPVARIANT capropvar;
 };
 struct $115D5900679A715671CD8546C85DE910 // sizeof=0xC
 {                                       // ...
     _BYTE gap0[8];
     tagPROPVARIANT *pvarVal;
 };
 union $DD6C6B1F74FEB8CCCBAB610FCEA0479B // sizeof=0x10
 {
     $5DF3780F58367B9F2537DF425A8A812E __s0;
     tagDEC decVal;
     $20D69447C97B677619C52B2E27D3FF49 __s2;
     $31126B8528A05AF3606C6D495FD178E8 __s3;
     $48802A31D3D0701BC13CEF9CEA041E7B __s4;
     $6D336DA143C556260FF80C12817B08DB __s5;
     $B644145F46FF1F932B106BFA6CC3F6D9 __s6;
     $5CA90CF57237397281FB12BFD52C1905 __s7;
     $E7F48E2F4EAA3149E57D87E5D1B2C6B8 __s8;
     $888B0EDBC9E1C279DA4A5EF6C79C29D1 __s9;
     $8B57884EB60B8BCAC840C3009FE329B5 __s10;
     $50230A970D9734D4E9774CFC619DF0F6 __s11;
     $4C0EC2258454B893CE739DAE89D8DB7B __s12;
     $6DB36323059316E675433BB10D285009 __s13;
     $8E3C8731874D1B3BC66617C4DD3163A6 __s14;
     $F75953F7996C774DB701A54685C2D4AC __s15;
     $E94952165EEA9EEA990FEB33603E1B19 __s16;
     $EECCDCD8A0A49AB08117D7785BE0D5FB __s17;
     $1F63314D372858C2785438DDB1CCE189 __s18;
     $4651ABE9464AB83A11BFF7726A452768 __s19;
     $7B1C2AA558A72DB3909F7F0B6C8C78B2 __s20;
     $418A425068131C3AB6BC1F8722C2FF97 __s21;
     $56C586EC716F67E31BAE66865996E6F7 __s22;
     $17BA733FE6B8BEB3CC80B954432F0727 __s23;
     $A123DDE5155BABE8656CED1ACF96B10E __s24;
     $28D171EED90DF421B2675FB5FB465284 __s25;
     $816917A86A49EE07269AD717C6B8BA5F __s26;
     $FC0BE000C4DC22E781CCEFCC1FCC2383 __s27;
     $06D38A1AA6421646F9DD5501D16B85D9 __s28;
     $46ADE2E9D4BE0F09C82B582A37DE948B __s29;
     $66EB1D41C10E61D479871681EA0B2001 __s30;
     $FAB90E8D25F49C22DCBFB8611E3E9214 __s31;
     $1461CBD9F5FA7515E5D2DAE7224466DB __s32;
     $61DAF1FFE0622EFFA322EE0B5B3EC2BA __s33;
     $25AF51A7EA8753D15244011C091C4DA5 __s34;
     $F104AA9E8599A00BFF48C156E2E399D2 __s35;
     $5DE6A231F147B150BBDC0E59FEAD6F24 __s36;
     $E8164169443DA17C7AE47E3A4BB44FB6 __s37;
     $222DF5559E3FE7E672D4854BCBFEB446 __s38;
     $832C93F69CBF3233F2ECBBE9AE03F7DE __s39;
     $515DB5C3B6D2D7EC0DFC1E3DC01EB5FC __s40;
     $0AD1D434E3A97CDE05F9945D4D56740A __s41;
     $AA3ADBB85D14D7A2B3EA87CE830E9AF5 __s42;
     $44A4D90643DF444FA0347EC7A4E9BCD9 __s43;
     $6F2F37C13E12FDF77BC9F07F7A7512B0 __s44;
     $1F356AE364116612A449AC4E0D6BC639 __s45;
     $0CD28F2F6F357BF17FC6A1BDAF551C61 __s46;
     $0999FD122F907147D9DBD764652B7FE9 __s47;
     $9C37579773DC6336755279057496CBC5 __s48;
     $4BD09EF6051E90B21D58E761CBD34CF4 __s49;
     $F955AC29C8D154C14F3D30A1C796710B __s50;
     $34E8CC8A040ED089665D951F25C087E0 __s51;
     $E3B2ECD8FD7AFC5696C11F866B29FFC9 __s52;
     $E1D71D20C3D01115E20D79FAE9629CE8 __s53;
     $CEB26E30A72A699742605DB617405969 __s54;
     $76732A64405C0E287FCB302687644550 __s55;
     $5669F5A4AD19EF2CB42A5602080CB0A6 __s56;
     $E5FC128E66C26C95254032BA69D36E74 __s57;
     $886F8AE9D7C8B1B861B6CA58D67B682A __s58;
     $CDA73A427DD2A30CDA26CA3394C33CF0 __s59;
     $2516E53E690D8CC5659AAB7EDC49E664 __s60;
     $BF8CC88CDF129BD6E4FA4ABA13F521AD __s61;
     $2CABE618CF1C2625A4479554E4967E0A __s62;
     $AAA92DA1D6E1B0E8462F69216B62027C __s63;
     $B38C1253EF0F1A2A5A045D24FB48A4FA __s64;
     $F7167AE7A8ABA03C094C204FB1564A28 __s65;
     $4C4509829A1D8D94CB479B5E98E07156 __s66;
     $6857AE69DB7C952EEFD665431A7B503A __s67;
     $BE56ADCB97A5F80C4E840DC3FCEE04D4 __s68;
     $2D01F5D40693004D715B063416318E6D __s69;
     $2B097C12EDF1BB6A107F52340F674881 __s70;
     $0FA736FFCDDB7DBF4703739E39D69DE1 __s71;
     $115D5900679A715671CD8546C85DE910 __s72;
 };
 struct __declspec(align(2)) trace_t // sizeof=0x2C
 {                                       // ...
     float fraction;                     // ...
     float normal[3];                    // ...
     int surfaceFlags;                   // ...
     int contents;                       // ...
     const char *material;               // ...
     TraceHitType hitType;               // ...
     unsigned __int16 hitId;
     unsigned __int16 modelIndex;        // ...
     unsigned __int16 partName;          // ...
     unsigned __int16 partGroup;         // ...
     bool allsolid;                      // ...
     bool startsolid;                    // ...
     bool walkable;                      // ...
     // padding byte
 };
 struct _LARGE_INTEGER::<unnamed_type_u> // sizeof=0x8
 {
     unsigned int LowPart;
     int HighPart;
 };
 struct _ULARGE_INTEGER::<unnamed_type_u> // sizeof=0x8
 {
     unsigned int LowPart;
     unsigned int HighPart;
 };
 struct snd_alias_list_t // sizeof=0xC
 {                                       // ...
     const char *aliasName;              // ...
     snd_alias_t *head;                  // ...
     int count;                          // ...
 };
 struct snd_physics_info // sizeof=0x10
 {                                       // ...
     snd_alias_list_t *aliasList;        // ...
     float org[3];                       // ...
 };
 struct snd_physics // sizeof=0x204
 {                                       // ...
     snd_physics_info info[32];          // ...
     int count;                          // ...
 };
 struct AsyncPlaySound // sizeof=0x14
 {                                       // ...
     snd_alias_t *alias;
     SndEntHandle sndEnt;
     float origin[3];
 };
 struct CmdArgs // sizeof=0x84
 {                                       // ...
     int nesting;                        // ...
     int localClientNum[8];              // ...
     int controllerIndex[8];             // ...
     int argc[8];                        // ...
     const char **argv[8];               // ...
 };
 struct clientUIActive_t // sizeof=0x10
 {
     bool active;
     bool isRunning;
     bool cgameInitialized;
     bool cgameInitCalled;
     int keyCatchers;
     bool displayHUDWithKeycatchUI;
     // padding byte
     // padding byte
     // padding byte
     connstate_t connectionState;
 };
 struct cplane_s // sizeof=0x14
 {                                       // ...
     float normal[3];                    // ...
     float dist;
     unsigned __int8 type;
     unsigned __int8 signbits;
     unsigned __int8 pad[2];
 };
 struct __declspec(align(2)) cbrushside_t // sizeof=0xC
 {                                       // ...
     cplane_s *plane;                    // ...
     unsigned int materialNum;           // ...
     __int16 firstAdjacentSideOffset;
     unsigned __int8 edgeCount;
     // padding byte
 };
 struct $0D0CB43DF22755AD856C77DD3F304010 // sizeof=0x4
 {                                       // ...
     unsigned __int8 r;
     unsigned __int8 g;
     unsigned __int8 b;
     unsigned __int8 a;
 };
 union hudelem_color_t // sizeof=0x4
 {                                       // ...
     $0D0CB43DF22755AD856C77DD3F304010 __s0;
     int rgba;
 };
 struct ProfileScriptWritable // sizeof=0xC
 {                                       // ...
     int refCount;
     unsigned int startTime;
     unsigned int totalTime;             // ...
 };
 struct ProfileScript // sizeof=0x80C
 {                                       // ...
     ProfileScriptWritable write[40];    // ...
     volatile unsigned int totalTime[40]; // ...
     volatile unsigned int avgTime[40];  // ...
     volatile unsigned int maxTime[40];  // ...
     volatile float cumulative[40];      // ...
     char profileScriptNames[40][20];    // ...
     int scriptSrcBufferIndex[32];
     unsigned int srcTotal;
     unsigned int srcAvgTime;
     unsigned int srcMaxTime;
 };
 struct BrushWrapper // sizeof=0x50
 {
     float mins[3];
     int contents;
     float maxs[3];
     unsigned int numsides;
     cbrushside_t *sides;
     __int16 axialMaterialNum[2][3];
     unsigned __int8 *baseAdjacentSide;
     __int16 firstAdjacentSideOffsets[2][3];
     unsigned __int8 edgeCount[2][3];
     // padding byte
     // padding byte
     int totalEdgeCount;
     cplane_s *planes;
 };
 struct LerpEntityStateEarthquake // sizeof=0xC
 {                                       // ...
     float scale;
     float radius;
     int duration;
 };
 struct hudelem_s // sizeof=0xA0
 {                                       // ...
     he_type_t type;
     float x;
     float y;
     float z;                            // ...
     int targetEntNum;
     float fontScale;
     int font;
     int alignOrg;
     int alignScreen;
     hudelem_color_t color;
     hudelem_color_t fromColor;
     int fadeStartTime;                  // ...
     int fadeTime;                       // ...
     int label;
     int width;
     int height;
     int materialIndex;
     int offscreenMaterialIdx;           // ...
     int fromWidth;                      // ...
     int fromHeight;
     int scaleStartTime;                 // ...
     int scaleTime;
     float fromX;
     float fromY;
     int fromAlignOrg;
     int fromAlignScreen;                // ...
     int moveStartTime;                  // ...
     int moveTime;                       // ...
     int time;                           // ...
     int duration;
     float value;                        // ...
     int text;
     float sort;
     hudelem_color_t glowColor;
     int fxBirthTime;                    // ...
     int fxLetterTime;                   // ...
     int fxDecayStartTime;               // ...
     int fxDecayDuration;                // ...
     int soundID;
     int flags;
 };
 struct LerpEntityStateVehicle // sizeof=0x1C
 {                                       // ...
     float bodyPitch;
     float bodyRoll;
     float steerYaw;
     int materialTime;
     float gunPitch;
     float gunYaw;
     int teamAndOwnerIndex;
 };
 struct __cppobj XModelStreamInfo // sizeof=0x0
 {                                       // ...
 };
 struct XModelCollTri_s // sizeof=0x30
 {
     float plane[4];
     float svec[4];
     float tvec[4];
 };
 struct LerpEntityStatePhysicsJitter // sizeof=0xC
 {                                       // ...
     float innerRadius;
     float minDisplacement;
     float maxDisplacement;
 };
 struct PhysMass // sizeof=0x24
 {                                       // ...
     float centerOfMass[3];
     float momentsOfInertia[3];
     float productsOfInertia[3];
 };
 struct LerpEntityStatePlayer // sizeof=0x8
 {                                       // ...
     float leanf;
     int movementDir;
 };
 struct FxSpawnDefLooping // sizeof=0x8
 {                                       // ...
     int intervalMsec;
     int count;
 };
 struct FxIntRange // sizeof=0x8
 {                                       // ...
     int base;
     int amplitude;
 };
 struct FxSpawnDefOneShot // sizeof=0x8
 {                                       // ...
     FxIntRange count;
 };
 union FxSpawnDef // sizeof=0x8
 {                                       // ...
     FxSpawnDefLooping looping;
     FxSpawnDefOneShot oneShot;
 };
 struct FxFloatRange // sizeof=0x8
 {                                       // ...
     float base;
     float amplitude;
 };
 struct FxElemAtlas // sizeof=0x8
 {                                       // ...
     unsigned __int8 behavior;
     unsigned __int8 index;
     unsigned __int8 fps;
     unsigned __int8 loopCount;
     unsigned __int8 colIndexBits;
     unsigned __int8 rowIndexBits;
     __int16 entryCount;
 };
 struct FxElemVec3Range // sizeof=0x18
 {                                       // ...
     float base[3];
     float amplitude[3];
 };
 struct FxElemVelStateInFrame // sizeof=0x30
 {                                       // ...
     FxElemVec3Range velocity;
     FxElemVec3Range totalDelta;
 };
 const struct FxElemVelStateSample // sizeof=0x60
 {
     FxElemVelStateInFrame local;
     FxElemVelStateInFrame world;
 };
 struct FxElemVisualState // sizeof=0x18
 {                                       // ...
     unsigned __int8 color[4];
     float rotationDelta;
     float rotationTotal;                // ...
     float size[2];                      // ...
     float scale;
 };
 const struct FxElemVisStateSample // sizeof=0x30
 {
     FxElemVisualState base;
     FxElemVisualState amplitude;
 };
 struct GfxDrawSurfFields // sizeof=0x8
 {                                       // ...
.0   unsigned __int64 objectId : 16;
.16  unsigned __int64 reflectionProbeIndex : 8;
.24  unsigned __int64 customIndex : 5;
.29  unsigned __int64 materialSortedIndex : 11;
.40  unsigned __int64 prepass : 2;
.42  unsigned __int64 primaryLightIndex : 8;
.50  unsigned __int64 surfType : 4;
.54  unsigned __int64 primarySortKey : 6;
.60  unsigned __int64 unused : 4;
 };
 union GfxDrawSurf // sizeof=0x8
 {                                       // ...
     GfxDrawSurfFields fields;
     unsigned __int64 packed;
 };
 struct __declspec(align(4)) MaterialInfo // sizeof=0x18
 {                                       // ...
     const char *name;                   // ...
     unsigned __int8 gameFlags;
     unsigned __int8 sortKey;
     unsigned __int8 textureAtlasRowCount; // ...
     unsigned __int8 textureAtlasColumnCount; // ...
     GfxDrawSurf drawSurf;
     unsigned int surfaceTypeBits;
     unsigned __int16 hashIndex;
     // padding byte
     // padding byte
 };
 struct MaterialTechniqueSet // sizeof=0x94
 {                                       // ...
     const char *name;
     unsigned __int8 worldVertFormat;
     bool hasBeenUploaded;
     unsigned __int8 unused[1];
     // padding byte
     MaterialTechniqueSet *remappedTechniqueSet;
     MaterialTechnique *techniques[34];
 };
 struct MaterialStreamRouting // sizeof=0x2
 {                                       // ...
     unsigned __int8 source;             // ...
     unsigned __int8 dest;               // ...
 };
 struct __cppobj IDirect3DDevice9 : IUnknown // sizeof=0x4
 {
 };
 struct __cppobj IDirect3D9 : IUnknown // sizeof=0x4
 {
 };
 struct __unaligned __declspec(align(4)) _D3DADAPTER_IDENTIFIER9 // sizeof=0x44C
 {                                       // ...
     char Driver[512];
     char Description[512];              // ...
     char DeviceName[32];
     _LARGE_INTEGER DriverVersion;
     unsigned int VendorId;
     unsigned int DeviceId;
     unsigned int SubSysId;
     unsigned int Revision;
     _GUID DeviceIdentifier;
     unsigned int WHQLLevel;
 };
 struct _D3DDISPLAYMODE // sizeof=0x10
 {                                       // ...
     unsigned int Width;                 // ...
     unsigned int Height;                // ...
     unsigned int RefreshRate;           // ...
     _D3DFORMAT Format;
 };
 struct _D3DVSHADERCAPS2_0 // sizeof=0x10
 {                                       // ...
     unsigned int Caps;
     int DynamicFlowControlDepth;
     int NumTemps;
     int StaticFlowControlDepth;
 };
 struct _D3DPSHADERCAPS2_0 // sizeof=0x14
 {                                       // ...
     unsigned int Caps;
     int DynamicFlowControlDepth;
     int NumTemps;
     int StaticFlowControlDepth;
     int NumInstructionSlots;
 };
 struct _D3DCAPS9 // sizeof=0x130
 {                                       // ...
     _D3DDEVTYPE DeviceType;
     unsigned int AdapterOrdinal;
     unsigned int Caps;
     unsigned int Caps2;                 // ...
     unsigned int Caps3;
     unsigned int PresentationIntervals;
     unsigned int CursorCaps;
     unsigned int DevCaps;
     unsigned int PrimitiveMiscCaps;
     unsigned int RasterCaps;            // ...
     unsigned int ZCmpCaps;
     unsigned int SrcBlendCaps;
     unsigned int DestBlendCaps;
     unsigned int AlphaCmpCaps;
     unsigned int ShadeCaps;
     unsigned int TextureCaps;           // ...
     unsigned int TextureFilterCaps;     // ...
     unsigned int CubeTextureFilterCaps;
     unsigned int VolumeTextureFilterCaps;
     unsigned int TextureAddressCaps;
     unsigned int VolumeTextureAddressCaps;
     unsigned int LineCaps;
     unsigned int MaxTextureWidth;       // ...
     unsigned int MaxTextureHeight;      // ...
     unsigned int MaxVolumeExtent;
     unsigned int MaxTextureRepeat;
     unsigned int MaxTextureAspectRatio;
     unsigned int MaxAnisotropy;         // ...
     float MaxVertexW;
     float GuardBandLeft;
     float GuardBandTop;
     float GuardBandRight;
     float GuardBandBottom;
     float ExtentsAdjust;
     unsigned int StencilCaps;
     unsigned int FVFCaps;
     unsigned int TextureOpCaps;
     unsigned int MaxTextureBlendStages;
     unsigned int MaxSimultaneousTextures; // ...
     unsigned int VertexProcessingCaps;
     unsigned int MaxActiveLights;
     unsigned int MaxUserClipPlanes;     // ...
     unsigned int MaxVertexBlendMatrices;
     unsigned int MaxVertexBlendMatrixIndex;
     float MaxPointSize;
     unsigned int MaxPrimitiveCount;
     unsigned int MaxVertexIndex;
     unsigned int MaxStreams;
     unsigned int MaxStreamStride;
     unsigned int VertexShaderVersion;
     unsigned int MaxVertexShaderConst;
     unsigned int PixelShaderVersion;
     float PixelShader1xMaxValue;
     unsigned int DevCaps2;
     float MaxNpatchTessellationLevel;
     unsigned int Reserved5;
     unsigned int MasterAdapterOrdinal;
     unsigned int AdapterOrdinalInGroup;
     unsigned int NumberOfAdaptersInGroup;
     unsigned int DeclTypes;
     unsigned int NumSimultaneousRTs;
     unsigned int StretchRectFilterCaps;
     _D3DVSHADERCAPS2_0 VS20Caps;
     _D3DPSHADERCAPS2_0 PS20Caps;
     unsigned int VertexTextureFilterCaps;
     unsigned int MaxVShaderInstructionsExecuted;
     unsigned int MaxPShaderInstructionsExecuted;
     unsigned int MaxVertexShader30InstructionSlots;
     unsigned int MaxPixelShader30InstructionSlots;
 };
 struct HMONITOR__ // sizeof=0x4
 {
     int unused;
 };
 struct HWND__ // sizeof=0x4
 {
     int unused;
 };
 struct _D3DPRESENT_PARAMETERS_ // sizeof=0x38
 {                                       // ...
     unsigned int BackBufferWidth;
     unsigned int BackBufferHeight;
     _D3DFORMAT BackBufferFormat;
     unsigned int BackBufferCount;
     _D3DMULTISAMPLE_TYPE MultiSampleType;
     unsigned int MultiSampleQuality;
     _D3DSWAPEFFECT SwapEffect;
     HWND__ *hDeviceWindow;
     int Windowed;
     int EnableAutoDepthStencil;
     _D3DFORMAT AutoDepthStencilFormat;
     unsigned int Flags;
     unsigned int FullScreen_RefreshRateInHz;
     unsigned int PresentationInterval;
 };
 struct /*VFT*/ IDirect3D9_vtbl // sizeof=0x44
 {
     HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
     unsigned int (__stdcall *AddRef)(IUnknown *this);
     unsigned int (__stdcall *Release)(IUnknown *this);
     HRESULT (__stdcall *RegisterSoftwareDevice)(IDirect3D9 *this, void *);
     unsigned int (__stdcall *GetAdapterCount)(IDirect3D9 *this);
     HRESULT (__stdcall *GetAdapterIdentifier)(IDirect3D9 *this, unsigned int, unsigned int, _D3DADAPTER_IDENTIFIER9 *);
     unsigned int (__stdcall *GetAdapterModeCount)(IDirect3D9 *this, unsigned int, _D3DFORMAT);
     HRESULT (__stdcall *EnumAdapterModes)(IDirect3D9 *this, unsigned int, _D3DFORMAT, unsigned int, _D3DDISPLAYMODE *);
     HRESULT (__stdcall *GetAdapterDisplayMode)(IDirect3D9 *this, unsigned int, _D3DDISPLAYMODE *);
     HRESULT (__stdcall *CheckDeviceType)(IDirect3D9 *this, unsigned int, _D3DDEVTYPE, _D3DFORMAT, _D3DFORMAT, int);
     HRESULT (__stdcall *CheckDeviceFormat)(IDirect3D9 *this, unsigned int, _D3DDEVTYPE, _D3DFORMAT, unsigned int, _D3DRESOURCETYPE, _D3DFORMAT);
     HRESULT (__stdcall *CheckDeviceMultiSampleType)(IDirect3D9 *this, unsigned int, _D3DDEVTYPE, _D3DFORMAT, int, _D3DMULTISAMPLE_TYPE, unsigned int *);
     HRESULT (__stdcall *CheckDepthStencilMatch)(IDirect3D9 *this, unsigned int, _D3DDEVTYPE, _D3DFORMAT, _D3DFORMAT, _D3DFORMAT);
     HRESULT (__stdcall *CheckDeviceFormatConversion)(IDirect3D9 *this, unsigned int, _D3DDEVTYPE, _D3DFORMAT, _D3DFORMAT);
     HRESULT (__stdcall *GetDeviceCaps)(IDirect3D9 *this, unsigned int, _D3DDEVTYPE, _D3DCAPS9 *);
     HMONITOR__ *(__stdcall *GetAdapterMonitor)(IDirect3D9 *this, unsigned int);
     HRESULT (__stdcall *CreateDevice)(IDirect3D9 *this, unsigned int, _D3DDEVTYPE, HWND__ *, unsigned int, _D3DPRESENT_PARAMETERS_ *, IDirect3DDevice9 **);
 };
 struct _D3DDEVICE_CREATION_PARAMETERS // sizeof=0x10
 {
     unsigned int AdapterOrdinal;
     _D3DDEVTYPE DeviceType;
     HWND__ *hFocusWindow;
     unsigned int BehaviorFlags;
 };
 struct __cppobj IDirect3DResource9 : IUnknown // sizeof=0x4
 {                                       // ...
 };
 struct /*VFT*/ IDirect3DResource9_vtbl // sizeof=0x2C
 {
     HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
     unsigned int (__stdcall *AddRef)(IUnknown *this);
     unsigned int (__stdcall *Release)(IUnknown *this);
     HRESULT (__stdcall *GetDevice)(IDirect3DResource9 *this, IDirect3DDevice9 **);
     HRESULT (__stdcall *SetPrivateData)(IDirect3DResource9 *this, const _GUID *, const void *, unsigned int, unsigned int);
     HRESULT (__stdcall *GetPrivateData)(IDirect3DResource9 *this, const _GUID *, void *, unsigned int *);
     HRESULT (__stdcall *FreePrivateData)(IDirect3DResource9 *this, const _GUID *);
     unsigned int (__stdcall *SetPriority)(IDirect3DResource9 *this, unsigned int);
     unsigned int (__stdcall *GetPriority)(IDirect3DResource9 *this);
     void (__stdcall *PreLoad)(IDirect3DResource9 *this);
     _D3DRESOURCETYPE (__stdcall *GetType)(IDirect3DResource9 *this);
 };
 struct __cppobj IDirect3DSurface9 : IDirect3DResource9 // sizeof=0x4
 {
 };
 struct _D3DSURFACE_DESC // sizeof=0x20
 {                                       // ...
     _D3DFORMAT Format;                  // ...
     _D3DRESOURCETYPE Type;
     unsigned int Usage;
     _D3DPOOL Pool;
     _D3DMULTISAMPLE_TYPE MultiSampleType;
     unsigned int MultiSampleQuality;
     unsigned int Width;                 // ...
     unsigned int Height;                // ...
 };
 struct _D3DLOCKED_RECT // sizeof=0x8
 {                                       // ...
     int Pitch;                          // ...
     void *pBits;                        // ...
 };
 const struct tagRECT // sizeof=0x10
 {                                       // ...
     int left;                           // ...
     int top;                            // ...
     int right;                          // ...
     int bottom;                         // ...
 };
 struct HDC__ // sizeof=0x4
 {
     int unused;
 };
 struct /*VFT*/ IDirect3DSurface9_vtbl // sizeof=0x44
 {
     HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
     unsigned int (__stdcall *AddRef)(IUnknown *this);
     unsigned int (__stdcall *Release)(IUnknown *this);
     HRESULT (__stdcall *GetDevice)(IDirect3DResource9 *this, IDirect3DDevice9 **);
     HRESULT (__stdcall *SetPrivateData)(IDirect3DResource9 *this, const _GUID *, const void *, unsigned int, unsigned int);
     HRESULT (__stdcall *GetPrivateData)(IDirect3DResource9 *this, const _GUID *, void *, unsigned int *);
     HRESULT (__stdcall *FreePrivateData)(IDirect3DResource9 *this, const _GUID *);
     unsigned int (__stdcall *SetPriority)(IDirect3DResource9 *this, unsigned int);
     unsigned int (__stdcall *GetPriority)(IDirect3DResource9 *this);
     void (__stdcall *PreLoad)(IDirect3DResource9 *this);
     _D3DRESOURCETYPE (__stdcall *GetType)(IDirect3DResource9 *this);
     HRESULT (__stdcall *GetContainer)(IDirect3DSurface9 *this, const _GUID *, void **);
     HRESULT (__stdcall *GetDesc)(IDirect3DSurface9 *this, _D3DSURFACE_DESC *);
     HRESULT (__stdcall *LockRect)(IDirect3DSurface9 *this, _D3DLOCKED_RECT *, const tagRECT *, unsigned int);
     HRESULT (__stdcall *UnlockRect)(IDirect3DSurface9 *this);
     HRESULT (__stdcall *GetDC)(IDirect3DSurface9 *this, HDC__ **);
     HRESULT (__stdcall *ReleaseDC)(IDirect3DSurface9 *this, HDC__ *);
 };
 struct _RGNDATAHEADER // sizeof=0x20
 {                                       // ...
     unsigned int dwSize;
     unsigned int iType;
     unsigned int nCount;
     unsigned int nRgnSize;
     tagRECT rcBound;
 };
 const struct __declspec(align(4)) _RGNDATA // sizeof=0x24
 {
     _RGNDATAHEADER rdh;
     char Buffer[1];
     // padding byte
     // padding byte
     // padding byte
 };
 struct __cppobj IDirect3DSwapChain9 : IUnknown // sizeof=0x4
 {
 };
 struct _D3DRASTER_STATUS // sizeof=0x8
 {
     int InVBlank;
     unsigned int ScanLine;
 };
 struct /*VFT*/ IDirect3DSwapChain9_vtbl // sizeof=0x28
 {
     HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
     unsigned int (__stdcall *AddRef)(IUnknown *this);
     unsigned int (__stdcall *Release)(IUnknown *this);
     HRESULT (__stdcall *Present)(IDirect3DSwapChain9 *this, const tagRECT *, const tagRECT *, HWND__ *, const _RGNDATA *, unsigned int);
     HRESULT (__stdcall *GetFrontBufferData)(IDirect3DSwapChain9 *this, IDirect3DSurface9 *);
     HRESULT (__stdcall *GetBackBuffer)(IDirect3DSwapChain9 *this, unsigned int, _D3DBACKBUFFER_TYPE, IDirect3DSurface9 **);
     HRESULT (__stdcall *GetRasterStatus)(IDirect3DSwapChain9 *this, _D3DRASTER_STATUS *);
     HRESULT (__stdcall *GetDisplayMode)(IDirect3DSwapChain9 *this, _D3DDISPLAYMODE *);
     HRESULT (__stdcall *GetDevice)(IDirect3DSwapChain9 *this, IDirect3DDevice9 **);
     HRESULT (__stdcall *GetPresentParameters)(IDirect3DSwapChain9 *this, _D3DPRESENT_PARAMETERS_ *);
 };
 const struct _D3DGAMMARAMP // sizeof=0x600
 {                                       // ...
     unsigned __int16 red[256];          // ...
     unsigned __int16 green[256];        // ...
     unsigned __int16 blue[256];         // ...
 };
 struct __cppobj IDirect3DBaseTexture9 : IDirect3DResource9 // sizeof=0x4
 {                                       // ...
 };
 struct /*VFT*/ IDirect3DBaseTexture9_vtbl // sizeof=0x44
 {
     HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
     unsigned int (__stdcall *AddRef)(IUnknown *this);
     unsigned int (__stdcall *Release)(IUnknown *this);
     HRESULT (__stdcall *GetDevice)(IDirect3DResource9 *this, IDirect3DDevice9 **);
     HRESULT (__stdcall *SetPrivateData)(IDirect3DResource9 *this, const _GUID *, const void *, unsigned int, unsigned int);
     HRESULT (__stdcall *GetPrivateData)(IDirect3DResource9 *this, const _GUID *, void *, unsigned int *);
     HRESULT (__stdcall *FreePrivateData)(IDirect3DResource9 *this, const _GUID *);
     unsigned int (__stdcall *SetPriority)(IDirect3DResource9 *this, unsigned int);
     unsigned int (__stdcall *GetPriority)(IDirect3DResource9 *this);
     void (__stdcall *PreLoad)(IDirect3DResource9 *this);
     _D3DRESOURCETYPE (__stdcall *GetType)(IDirect3DResource9 *this);
     unsigned int (__stdcall *SetLOD)(IDirect3DBaseTexture9 *this, unsigned int);
     unsigned int (__stdcall *GetLOD)(IDirect3DBaseTexture9 *this);
     unsigned int (__stdcall *GetLevelCount)(IDirect3DBaseTexture9 *this);
     HRESULT (__stdcall *SetAutoGenFilterType)(IDirect3DBaseTexture9 *this, _D3DTEXTUREFILTERTYPE);
     _D3DTEXTUREFILTERTYPE (__stdcall *GetAutoGenFilterType)(IDirect3DBaseTexture9 *this);
     void (__stdcall *GenerateMipSubLevels)(IDirect3DBaseTexture9 *this);
 };
 struct __cppobj IDirect3DTexture9 : IDirect3DBaseTexture9 // sizeof=0x4
 {
 };
 struct /*VFT*/ IDirect3DTexture9_vtbl // sizeof=0x58
 {
     HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
     unsigned int (__stdcall *AddRef)(IUnknown *this);
     unsigned int (__stdcall *Release)(IUnknown *this);
     HRESULT (__stdcall *GetDevice)(IDirect3DResource9 *this, IDirect3DDevice9 **);
     HRESULT (__stdcall *SetPrivateData)(IDirect3DResource9 *this, const _GUID *, const void *, unsigned int, unsigned int);
     HRESULT (__stdcall *GetPrivateData)(IDirect3DResource9 *this, const _GUID *, void *, unsigned int *);
     HRESULT (__stdcall *FreePrivateData)(IDirect3DResource9 *this, const _GUID *);
     unsigned int (__stdcall *SetPriority)(IDirect3DResource9 *this, unsigned int);
     unsigned int (__stdcall *GetPriority)(IDirect3DResource9 *this);
     void (__stdcall *PreLoad)(IDirect3DResource9 *this);
     _D3DRESOURCETYPE (__stdcall *GetType)(IDirect3DResource9 *this);
     unsigned int (__stdcall *SetLOD)(IDirect3DBaseTexture9 *this, unsigned int);
     unsigned int (__stdcall *GetLOD)(IDirect3DBaseTexture9 *this);
     unsigned int (__stdcall *GetLevelCount)(IDirect3DBaseTexture9 *this);
     HRESULT (__stdcall *SetAutoGenFilterType)(IDirect3DBaseTexture9 *this, _D3DTEXTUREFILTERTYPE);
     _D3DTEXTUREFILTERTYPE (__stdcall *GetAutoGenFilterType)(IDirect3DBaseTexture9 *this);
     void (__stdcall *GenerateMipSubLevels)(IDirect3DBaseTexture9 *this);
     HRESULT (__stdcall *GetLevelDesc)(IDirect3DTexture9 *this, unsigned int, _D3DSURFACE_DESC *);
     HRESULT (__stdcall *GetSurfaceLevel)(IDirect3DTexture9 *this, unsigned int, IDirect3DSurface9 **);
     HRESULT (__stdcall *LockRect)(IDirect3DTexture9 *this, unsigned int, _D3DLOCKED_RECT *, const tagRECT *, unsigned int);
     HRESULT (__stdcall *UnlockRect)(IDirect3DTexture9 *this, unsigned int);
     HRESULT (__stdcall *AddDirtyRect)(IDirect3DTexture9 *this, const tagRECT *);
 };
 struct _D3DVOLUME_DESC // sizeof=0x1C
 {                                       // ...
     _D3DFORMAT Format;                  // ...
     _D3DRESOURCETYPE Type;
     unsigned int Usage;
     _D3DPOOL Pool;
     unsigned int Width;
     unsigned int Height;
     unsigned int Depth;
 };
 struct __cppobj IDirect3DVolumeTexture9 : IDirect3DBaseTexture9 // sizeof=0x4
 {
 };
 struct __cppobj IDirect3DVolume9 : IUnknown // sizeof=0x4
 {
 };
 struct _D3DLOCKED_BOX // sizeof=0xC
 {                                       // ...
     int RowPitch;                       // ...
     int SlicePitch;                     // ...
     void *pBits;                        // ...
 };
 const struct _D3DBOX // sizeof=0x18
 {                                       // ...
     unsigned int Left;                  // ...
     unsigned int Top;                   // ...
     unsigned int Right;                 // ...
     unsigned int Bottom;                // ...
     unsigned int Front;                 // ...
     unsigned int Back;                  // ...
 };
 struct /*VFT*/ IDirect3DVolume9_vtbl // sizeof=0x2C
 {
     HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
     unsigned int (__stdcall *AddRef)(IUnknown *this);
     unsigned int (__stdcall *Release)(IUnknown *this);
     HRESULT (__stdcall *GetDevice)(IDirect3DVolume9 *this, IDirect3DDevice9 **);
     HRESULT (__stdcall *SetPrivateData)(IDirect3DVolume9 *this, const _GUID *, const void *, unsigned int, unsigned int);
     HRESULT (__stdcall *GetPrivateData)(IDirect3DVolume9 *this, const _GUID *, void *, unsigned int *);
     HRESULT (__stdcall *FreePrivateData)(IDirect3DVolume9 *this, const _GUID *);
     HRESULT (__stdcall *GetContainer)(IDirect3DVolume9 *this, const _GUID *, void **);
     HRESULT (__stdcall *GetDesc)(IDirect3DVolume9 *this, _D3DVOLUME_DESC *);
     HRESULT (__stdcall *LockBox)(IDirect3DVolume9 *this, _D3DLOCKED_BOX *, const _D3DBOX *, unsigned int);
     HRESULT (__stdcall *UnlockBox)(IDirect3DVolume9 *this);
 };
 struct /*VFT*/ IDirect3DVolumeTexture9_vtbl // sizeof=0x58
 {
     HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
     unsigned int (__stdcall *AddRef)(IUnknown *this);
     unsigned int (__stdcall *Release)(IUnknown *this);
     HRESULT (__stdcall *GetDevice)(IDirect3DResource9 *this, IDirect3DDevice9 **);
     HRESULT (__stdcall *SetPrivateData)(IDirect3DResource9 *this, const _GUID *, const void *, unsigned int, unsigned int);
     HRESULT (__stdcall *GetPrivateData)(IDirect3DResource9 *this, const _GUID *, void *, unsigned int *);
     HRESULT (__stdcall *FreePrivateData)(IDirect3DResource9 *this, const _GUID *);
     unsigned int (__stdcall *SetPriority)(IDirect3DResource9 *this, unsigned int);
     unsigned int (__stdcall *GetPriority)(IDirect3DResource9 *this);
     void (__stdcall *PreLoad)(IDirect3DResource9 *this);
     _D3DRESOURCETYPE (__stdcall *GetType)(IDirect3DResource9 *this);
     unsigned int (__stdcall *SetLOD)(IDirect3DBaseTexture9 *this, unsigned int);
     unsigned int (__stdcall *GetLOD)(IDirect3DBaseTexture9 *this);
     unsigned int (__stdcall *GetLevelCount)(IDirect3DBaseTexture9 *this);
     HRESULT (__stdcall *SetAutoGenFilterType)(IDirect3DBaseTexture9 *this, _D3DTEXTUREFILTERTYPE);
     _D3DTEXTUREFILTERTYPE (__stdcall *GetAutoGenFilterType)(IDirect3DBaseTexture9 *this);
     void (__stdcall *GenerateMipSubLevels)(IDirect3DBaseTexture9 *this);
     HRESULT (__stdcall *GetLevelDesc)(IDirect3DVolumeTexture9 *this, unsigned int, _D3DVOLUME_DESC *);
     HRESULT (__stdcall *GetVolumeLevel)(IDirect3DVolumeTexture9 *this, unsigned int, IDirect3DVolume9 **);
     HRESULT (__stdcall *LockBox)(IDirect3DVolumeTexture9 *this, unsigned int, _D3DLOCKED_BOX *, const _D3DBOX *, unsigned int);
     HRESULT (__stdcall *UnlockBox)(IDirect3DVolumeTexture9 *this, unsigned int);
     HRESULT (__stdcall *AddDirtyBox)(IDirect3DVolumeTexture9 *this, const _D3DBOX *);
 };
 struct __cppobj IDirect3DCubeTexture9 : IDirect3DBaseTexture9 // sizeof=0x4
 {
 };
 struct /*VFT*/ IDirect3DCubeTexture9_vtbl // sizeof=0x58
 {
     HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
     unsigned int (__stdcall *AddRef)(IUnknown *this);
     unsigned int (__stdcall *Release)(IUnknown *this);
     HRESULT (__stdcall *GetDevice)(IDirect3DResource9 *this, IDirect3DDevice9 **);
     HRESULT (__stdcall *SetPrivateData)(IDirect3DResource9 *this, const _GUID *, const void *, unsigned int, unsigned int);
     HRESULT (__stdcall *GetPrivateData)(IDirect3DResource9 *this, const _GUID *, void *, unsigned int *);
     HRESULT (__stdcall *FreePrivateData)(IDirect3DResource9 *this, const _GUID *);
     unsigned int (__stdcall *SetPriority)(IDirect3DResource9 *this, unsigned int);
     unsigned int (__stdcall *GetPriority)(IDirect3DResource9 *this);
     void (__stdcall *PreLoad)(IDirect3DResource9 *this);
     _D3DRESOURCETYPE (__stdcall *GetType)(IDirect3DResource9 *this);
     unsigned int (__stdcall *SetLOD)(IDirect3DBaseTexture9 *this, unsigned int);
     unsigned int (__stdcall *GetLOD)(IDirect3DBaseTexture9 *this);
     unsigned int (__stdcall *GetLevelCount)(IDirect3DBaseTexture9 *this);
     HRESULT (__stdcall *SetAutoGenFilterType)(IDirect3DBaseTexture9 *this, _D3DTEXTUREFILTERTYPE);
     _D3DTEXTUREFILTERTYPE (__stdcall *GetAutoGenFilterType)(IDirect3DBaseTexture9 *this);
     void (__stdcall *GenerateMipSubLevels)(IDirect3DBaseTexture9 *this);
     HRESULT (__stdcall *GetLevelDesc)(IDirect3DCubeTexture9 *this, unsigned int, _D3DSURFACE_DESC *);
     HRESULT (__stdcall *GetCubeMapSurface)(IDirect3DCubeTexture9 *this, _D3DCUBEMAP_FACES, unsigned int, IDirect3DSurface9 **);
     HRESULT (__stdcall *LockRect)(IDirect3DCubeTexture9 *this, _D3DCUBEMAP_FACES, unsigned int, _D3DLOCKED_RECT *, const tagRECT *, unsigned int);
     HRESULT (__stdcall *UnlockRect)(IDirect3DCubeTexture9 *this, _D3DCUBEMAP_FACES, unsigned int);
     HRESULT (__stdcall *AddDirtyRect)(IDirect3DCubeTexture9 *this, _D3DCUBEMAP_FACES, const tagRECT *);
 };
 struct __cppobj IDirect3DVertexBuffer9 : IDirect3DResource9 // sizeof=0x4
 {
 };
 struct _D3DVERTEXBUFFER_DESC // sizeof=0x18
 {
     _D3DFORMAT Format;
     _D3DRESOURCETYPE Type;
     unsigned int Usage;
     _D3DPOOL Pool;
     unsigned int Size;
     unsigned int FVF;
 };
 struct /*VFT*/ IDirect3DVertexBuffer9_vtbl // sizeof=0x38
 {
     HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
     unsigned int (__stdcall *AddRef)(IUnknown *this);
     unsigned int (__stdcall *Release)(IUnknown *this);
     HRESULT (__stdcall *GetDevice)(IDirect3DResource9 *this, IDirect3DDevice9 **);
     HRESULT (__stdcall *SetPrivateData)(IDirect3DResource9 *this, const _GUID *, const void *, unsigned int, unsigned int);
     HRESULT (__stdcall *GetPrivateData)(IDirect3DResource9 *this, const _GUID *, void *, unsigned int *);
     HRESULT (__stdcall *FreePrivateData)(IDirect3DResource9 *this, const _GUID *);
     unsigned int (__stdcall *SetPriority)(IDirect3DResource9 *this, unsigned int);
     unsigned int (__stdcall *GetPriority)(IDirect3DResource9 *this);
     void (__stdcall *PreLoad)(IDirect3DResource9 *this);
     _D3DRESOURCETYPE (__stdcall *GetType)(IDirect3DResource9 *this);
     HRESULT (__stdcall *Lock)(IDirect3DVertexBuffer9 *this, unsigned int, unsigned int, void **, unsigned int);
     HRESULT (__stdcall *Unlock)(IDirect3DVertexBuffer9 *this);
     HRESULT (__stdcall *GetDesc)(IDirect3DVertexBuffer9 *this, _D3DVERTEXBUFFER_DESC *);
 };
 struct __cppobj IDirect3DIndexBuffer9 : IDirect3DResource9 // sizeof=0x4
 {
 };
 struct _D3DINDEXBUFFER_DESC // sizeof=0x14
 {
     _D3DFORMAT Format;
     _D3DRESOURCETYPE Type;
     unsigned int Usage;
     _D3DPOOL Pool;
     unsigned int Size;
 };
 struct /*VFT*/ IDirect3DIndexBuffer9_vtbl // sizeof=0x38
 {
     HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
     unsigned int (__stdcall *AddRef)(IUnknown *this);
     unsigned int (__stdcall *Release)(IUnknown *this);
     HRESULT (__stdcall *GetDevice)(IDirect3DResource9 *this, IDirect3DDevice9 **);
     HRESULT (__stdcall *SetPrivateData)(IDirect3DResource9 *this, const _GUID *, const void *, unsigned int, unsigned int);
     HRESULT (__stdcall *GetPrivateData)(IDirect3DResource9 *this, const _GUID *, void *, unsigned int *);
     HRESULT (__stdcall *FreePrivateData)(IDirect3DResource9 *this, const _GUID *);
     unsigned int (__stdcall *SetPriority)(IDirect3DResource9 *this, unsigned int);
     unsigned int (__stdcall *GetPriority)(IDirect3DResource9 *this);
     void (__stdcall *PreLoad)(IDirect3DResource9 *this);
     _D3DRESOURCETYPE (__stdcall *GetType)(IDirect3DResource9 *this);
     HRESULT (__stdcall *Lock)(IDirect3DIndexBuffer9 *this, unsigned int, unsigned int, void **, unsigned int);
     HRESULT (__stdcall *Unlock)(IDirect3DIndexBuffer9 *this);
     HRESULT (__stdcall *GetDesc)(IDirect3DIndexBuffer9 *this, _D3DINDEXBUFFER_DESC *);
 };
 const struct tagPOINT // sizeof=0x8
 {                                       // ...
     int x;                              // ...
     int y;                              // ...
 };
 const struct _D3DRECT // sizeof=0x10
 {
     int x1;
     int y1;
     int x2;
     int y2;
 };
 struct $40942CBCB8F0A1CDBC81269929B28324 // sizeof=0x40
 {                                       // ...
     float _11;
     float _12;
     float _13;
     float _14;
     float _21;
     float _22;
     float _23;
     float _24;
     float _31;
     float _32;
     float _33;
     float _34;
     float _41;
     float _42;
     float _43;
     float _44;
 };
 union $B346B5DA5451F7A9EA9FFBDA4C0C7142 // sizeof=0x40
 {                                       // ...
     $40942CBCB8F0A1CDBC81269929B28324 __s0;
     float m[4][4];
 };
 const struct _D3DMATRIX // sizeof=0x40
 {                                       // ...
     $B346B5DA5451F7A9EA9FFBDA4C0C7142 ___u0;
 };
 const struct _D3DVIEWPORT9 // sizeof=0x18
 {                                       // ...
     unsigned int X;                     // ...
     unsigned int Y;                     // ...
     unsigned int Width;                 // ...
     unsigned int Height;                // ...
     float MinZ;                         // ...
     float MaxZ;                         // ...
 };
 struct _D3DCOLORVALUE // sizeof=0x10
 {                                       // ...
     float r;
     float g;
     float b;
     float a;
 };
 const struct _D3DMATERIAL9 // sizeof=0x44
 {
     _D3DCOLORVALUE Diffuse;
     _D3DCOLORVALUE Ambient;
     _D3DCOLORVALUE Specular;
     _D3DCOLORVALUE Emissive;
     float Power;
 };
 struct _D3DVECTOR // sizeof=0xC
 {                                       // ...
     float x;
     float y;
     float z;
 };
 const struct _D3DLIGHT9 // sizeof=0x68
 {
     _D3DLIGHTTYPE Type;
     _D3DCOLORVALUE Diffuse;
     _D3DCOLORVALUE Specular;
     _D3DCOLORVALUE Ambient;
     _D3DVECTOR Position;
     _D3DVECTOR Direction;
     float Range;
     float Falloff;
     float Attenuation0;
     float Attenuation1;
     float Attenuation2;
     float Theta;
     float Phi;
 };
 struct __cppobj IDirect3DStateBlock9 : IUnknown // sizeof=0x4
 {
 };
 struct /*VFT*/ IDirect3DStateBlock9_vtbl // sizeof=0x18
 {
     HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
     unsigned int (__stdcall *AddRef)(IUnknown *this);
     unsigned int (__stdcall *Release)(IUnknown *this);
     HRESULT (__stdcall *GetDevice)(IDirect3DStateBlock9 *this, IDirect3DDevice9 **);
     HRESULT (__stdcall *Capture)(IDirect3DStateBlock9 *this);
     HRESULT (__stdcall *Apply)(IDirect3DStateBlock9 *this);
 };
 const struct _D3DCLIPSTATUS9 // sizeof=0x8
 {
     unsigned int ClipUnion;
     unsigned int ClipIntersection;
 };
 const struct tagPALETTEENTRY // sizeof=0x4
 {
     unsigned __int8 peRed;
     unsigned __int8 peGreen;
     unsigned __int8 peBlue;
     unsigned __int8 peFlags;
 };
 struct __cppobj IDirect3DVertexDeclaration9 : IUnknown // sizeof=0x4
 {
 };
 const struct _D3DVERTEXELEMENT9 // sizeof=0x8
 {                                       // ...
     unsigned __int16 Stream;            // ...
     unsigned __int16 Offset;            // ...
     unsigned __int8 Type;               // ...
     unsigned __int8 Method;             // ...
     unsigned __int8 Usage;              // ...
     unsigned __int8 UsageIndex;         // ...
 };
 struct __cppobj IDirect3DVertexShader9 : IUnknown // sizeof=0x4
 {
 };
 struct /*VFT*/ IDirect3DVertexShader9_vtbl // sizeof=0x14
 {
     HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
     unsigned int (__stdcall *AddRef)(IUnknown *this);
     unsigned int (__stdcall *Release)(IUnknown *this);
     HRESULT (__stdcall *GetDevice)(IDirect3DVertexShader9 *this, IDirect3DDevice9 **);
     HRESULT (__stdcall *GetFunction)(IDirect3DVertexShader9 *this, void *, unsigned int *);
 };
 struct __cppobj IDirect3DPixelShader9 : IUnknown // sizeof=0x4
 {
 };
 struct /*VFT*/ IDirect3DPixelShader9_vtbl // sizeof=0x14
 {
     HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
     unsigned int (__stdcall *AddRef)(IUnknown *this);
     unsigned int (__stdcall *Release)(IUnknown *this);
     HRESULT (__stdcall *GetDevice)(IDirect3DPixelShader9 *this, IDirect3DDevice9 **);
     HRESULT (__stdcall *GetFunction)(IDirect3DPixelShader9 *this, void *, unsigned int *);
 };
 const struct _D3DRECTPATCH_INFO // sizeof=0x1C
 {
     unsigned int StartVertexOffsetWidth;
     unsigned int StartVertexOffsetHeight;
     unsigned int Width;
     unsigned int Height;
     unsigned int Stride;
     _D3DBASISTYPE Basis;
     _D3DDEGREETYPE Degree;
 };
 const struct _D3DTRIPATCH_INFO // sizeof=0x10
 {
     unsigned int StartVertexOffset;
     unsigned int NumVertices;
     _D3DBASISTYPE Basis;
     _D3DDEGREETYPE Degree;
 };
 struct __cppobj IDirect3DQuery9 : IUnknown // sizeof=0x4
 {
 };
 struct /*VFT*/ IDirect3DQuery9_vtbl // sizeof=0x20
 {
     HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
     unsigned int (__stdcall *AddRef)(IUnknown *this);
     unsigned int (__stdcall *Release)(IUnknown *this);
     HRESULT (__stdcall *GetDevice)(IDirect3DQuery9 *this, IDirect3DDevice9 **);
     _D3DQUERYTYPE (__stdcall *GetType)(IDirect3DQuery9 *this);
     unsigned int (__stdcall *GetDataSize)(IDirect3DQuery9 *this);
     HRESULT (__stdcall *Issue)(IDirect3DQuery9 *this, unsigned int);
     HRESULT (__stdcall *GetData)(IDirect3DQuery9 *this, void *, unsigned int, unsigned int);
 };
 struct /*VFT*/ IDirect3DDevice9_vtbl // sizeof=0x1DC
 {
     HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
     unsigned int (__stdcall *AddRef)(IUnknown *this);
     unsigned int (__stdcall *Release)(IUnknown *this);
     HRESULT (__stdcall *TestCooperativeLevel)(IDirect3DDevice9 *this);
     unsigned int (__stdcall *GetAvailableTextureMem)(IDirect3DDevice9 *this);
     HRESULT (__stdcall *EvictManagedResources)(IDirect3DDevice9 *this);
     HRESULT (__stdcall *GetDirect3D)(IDirect3DDevice9 *this, IDirect3D9 **);
     HRESULT (__stdcall *GetDeviceCaps)(IDirect3DDevice9 *this, _D3DCAPS9 *);
     HRESULT (__stdcall *GetDisplayMode)(IDirect3DDevice9 *this, unsigned int, _D3DDISPLAYMODE *);
     HRESULT (__stdcall *GetCreationParameters)(IDirect3DDevice9 *this, _D3DDEVICE_CREATION_PARAMETERS *);
     HRESULT (__stdcall *SetCursorProperties)(IDirect3DDevice9 *this, unsigned int, unsigned int, IDirect3DSurface9 *);
     void (__stdcall *SetCursorPosition)(IDirect3DDevice9 *this, int, int, unsigned int);
     int (__stdcall *ShowCursor)(IDirect3DDevice9 *this, int);
     HRESULT (__stdcall *CreateAdditionalSwapChain)(IDirect3DDevice9 *this, _D3DPRESENT_PARAMETERS_ *, IDirect3DSwapChain9 **);
     HRESULT (__stdcall *GetSwapChain)(IDirect3DDevice9 *this, unsigned int, IDirect3DSwapChain9 **);
     unsigned int (__stdcall *GetNumberOfSwapChains)(IDirect3DDevice9 *this);
     HRESULT (__stdcall *Reset)(IDirect3DDevice9 *this, _D3DPRESENT_PARAMETERS_ *);
     HRESULT (__stdcall *Present)(IDirect3DDevice9 *this, const tagRECT *, const tagRECT *, HWND__ *, const _RGNDATA *);
     HRESULT (__stdcall *GetBackBuffer)(IDirect3DDevice9 *this, unsigned int, unsigned int, _D3DBACKBUFFER_TYPE, IDirect3DSurface9 **);
     HRESULT (__stdcall *GetRasterStatus)(IDirect3DDevice9 *this, unsigned int, _D3DRASTER_STATUS *);
     HRESULT (__stdcall *SetDialogBoxMode)(IDirect3DDevice9 *this, int);
     void (__stdcall *SetGammaRamp)(IDirect3DDevice9 *this, unsigned int, unsigned int, const _D3DGAMMARAMP *);
     void (__stdcall *GetGammaRamp)(IDirect3DDevice9 *this, unsigned int, _D3DGAMMARAMP *);
     HRESULT (__stdcall *CreateTexture)(IDirect3DDevice9 *this, unsigned int, unsigned int, unsigned int, unsigned int, _D3DFORMAT, _D3DPOOL, IDirect3DTexture9 **, void **);
     HRESULT (__stdcall *CreateVolumeTexture)(IDirect3DDevice9 *this, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, _D3DFORMAT, _D3DPOOL, IDirect3DVolumeTexture9 **, void **);
     HRESULT (__stdcall *CreateCubeTexture)(IDirect3DDevice9 *this, unsigned int, unsigned int, unsigned int, _D3DFORMAT, _D3DPOOL, IDirect3DCubeTexture9 **, void **);
     HRESULT (__stdcall *CreateVertexBuffer)(IDirect3DDevice9 *this, unsigned int, unsigned int, unsigned int, _D3DPOOL, IDirect3DVertexBuffer9 **, void **);
     HRESULT (__stdcall *CreateIndexBuffer)(IDirect3DDevice9 *this, unsigned int, unsigned int, _D3DFORMAT, _D3DPOOL, IDirect3DIndexBuffer9 **, void **);
     HRESULT (__stdcall *CreateRenderTarget)(IDirect3DDevice9 *this, unsigned int, unsigned int, _D3DFORMAT, _D3DMULTISAMPLE_TYPE, unsigned int, int, IDirect3DSurface9 **, void **);
     HRESULT (__stdcall *CreateDepthStencilSurface)(IDirect3DDevice9 *this, unsigned int, unsigned int, _D3DFORMAT, _D3DMULTISAMPLE_TYPE, unsigned int, int, IDirect3DSurface9 **, void **);
     HRESULT (__stdcall *UpdateSurface)(IDirect3DDevice9 *this, IDirect3DSurface9 *, const tagRECT *, IDirect3DSurface9 *, const tagPOINT *);
     HRESULT (__stdcall *UpdateTexture)(IDirect3DDevice9 *this, IDirect3DBaseTexture9 *, IDirect3DBaseTexture9 *);
     HRESULT (__stdcall *GetRenderTargetData)(IDirect3DDevice9 *this, IDirect3DSurface9 *, IDirect3DSurface9 *);
     HRESULT (__stdcall *GetFrontBufferData)(IDirect3DDevice9 *this, unsigned int, IDirect3DSurface9 *);
     HRESULT (__stdcall *StretchRect)(IDirect3DDevice9 *this, IDirect3DSurface9 *, const tagRECT *, IDirect3DSurface9 *, const tagRECT *, _D3DTEXTUREFILTERTYPE);
     HRESULT (__stdcall *ColorFill)(IDirect3DDevice9 *this, IDirect3DSurface9 *, const tagRECT *, unsigned int);
     HRESULT (__stdcall *CreateOffscreenPlainSurface)(IDirect3DDevice9 *this, unsigned int, unsigned int, _D3DFORMAT, _D3DPOOL, IDirect3DSurface9 **, void **);
     HRESULT (__stdcall *SetRenderTarget)(IDirect3DDevice9 *this, unsigned int, IDirect3DSurface9 *);
     HRESULT (__stdcall *GetRenderTarget)(IDirect3DDevice9 *this, unsigned int, IDirect3DSurface9 **);
     HRESULT (__stdcall *SetDepthStencilSurface)(IDirect3DDevice9 *this, IDirect3DSurface9 *);
     HRESULT (__stdcall *GetDepthStencilSurface)(IDirect3DDevice9 *this, IDirect3DSurface9 **);
     HRESULT (__stdcall *BeginScene)(IDirect3DDevice9 *this);
     HRESULT (__stdcall *EndScene)(IDirect3DDevice9 *this);
     HRESULT (__stdcall *Clear)(IDirect3DDevice9 *this, unsigned int, const _D3DRECT *, unsigned int, unsigned int, float, unsigned int);
     HRESULT (__stdcall *SetTransform)(IDirect3DDevice9 *this, _D3DTRANSFORMSTATETYPE, const _D3DMATRIX *);
     HRESULT (__stdcall *GetTransform)(IDirect3DDevice9 *this, _D3DTRANSFORMSTATETYPE, _D3DMATRIX *);
     HRESULT (__stdcall *MultiplyTransform)(IDirect3DDevice9 *this, _D3DTRANSFORMSTATETYPE, const _D3DMATRIX *);
     HRESULT (__stdcall *SetViewport)(IDirect3DDevice9 *this, const _D3DVIEWPORT9 *);
     HRESULT (__stdcall *GetViewport)(IDirect3DDevice9 *this, _D3DVIEWPORT9 *);
     HRESULT (__stdcall *SetMaterial)(IDirect3DDevice9 *this, const _D3DMATERIAL9 *);
     HRESULT (__stdcall *GetMaterial)(IDirect3DDevice9 *this, _D3DMATERIAL9 *);
     HRESULT (__stdcall *SetLight)(IDirect3DDevice9 *this, unsigned int, const _D3DLIGHT9 *);
     HRESULT (__stdcall *GetLight)(IDirect3DDevice9 *this, unsigned int, _D3DLIGHT9 *);
     HRESULT (__stdcall *LightEnable)(IDirect3DDevice9 *this, unsigned int, int);
     HRESULT (__stdcall *GetLightEnable)(IDirect3DDevice9 *this, unsigned int, int *);
     HRESULT (__stdcall *SetClipPlane)(IDirect3DDevice9 *this, unsigned int, const float *);
     HRESULT (__stdcall *GetClipPlane)(IDirect3DDevice9 *this, unsigned int, float *);
     HRESULT (__stdcall *SetRenderState)(IDirect3DDevice9 *this, _D3DRENDERSTATETYPE, unsigned int);
     HRESULT (__stdcall *GetRenderState)(IDirect3DDevice9 *this, _D3DRENDERSTATETYPE, unsigned int *);
     HRESULT (__stdcall *CreateStateBlock)(IDirect3DDevice9 *this, _D3DSTATEBLOCKTYPE, IDirect3DStateBlock9 **);
     HRESULT (__stdcall *BeginStateBlock)(IDirect3DDevice9 *this);
     HRESULT (__stdcall *EndStateBlock)(IDirect3DDevice9 *this, IDirect3DStateBlock9 **);
     HRESULT (__stdcall *SetClipStatus)(IDirect3DDevice9 *this, const _D3DCLIPSTATUS9 *);
     HRESULT (__stdcall *GetClipStatus)(IDirect3DDevice9 *this, _D3DCLIPSTATUS9 *);
     HRESULT (__stdcall *GetTexture)(IDirect3DDevice9 *this, unsigned int, IDirect3DBaseTexture9 **);
     HRESULT (__stdcall *SetTexture)(IDirect3DDevice9 *this, unsigned int, IDirect3DBaseTexture9 *);
     HRESULT (__stdcall *GetTextureStageState)(IDirect3DDevice9 *this, unsigned int, _D3DTEXTURESTAGESTATETYPE, unsigned int *);
     HRESULT (__stdcall *SetTextureStageState)(IDirect3DDevice9 *this, unsigned int, _D3DTEXTURESTAGESTATETYPE, unsigned int);
     HRESULT (__stdcall *GetSamplerState)(IDirect3DDevice9 *this, unsigned int, _D3DSAMPLERSTATETYPE, unsigned int *);
     HRESULT (__stdcall *SetSamplerState)(IDirect3DDevice9 *this, unsigned int, _D3DSAMPLERSTATETYPE, unsigned int);
     HRESULT (__stdcall *ValidateDevice)(IDirect3DDevice9 *this, unsigned int *);
     HRESULT (__stdcall *SetPaletteEntries)(IDirect3DDevice9 *this, unsigned int, const tagPALETTEENTRY *);
     HRESULT (__stdcall *GetPaletteEntries)(IDirect3DDevice9 *this, unsigned int, tagPALETTEENTRY *);
     HRESULT (__stdcall *SetCurrentTexturePalette)(IDirect3DDevice9 *this, unsigned int);
     HRESULT (__stdcall *GetCurrentTexturePalette)(IDirect3DDevice9 *this, unsigned int *);
     HRESULT (__stdcall *SetScissorRect)(IDirect3DDevice9 *this, const tagRECT *);
     HRESULT (__stdcall *GetScissorRect)(IDirect3DDevice9 *this, tagRECT *);
     HRESULT (__stdcall *SetSoftwareVertexProcessing)(IDirect3DDevice9 *this, int);
     int (__stdcall *GetSoftwareVertexProcessing)(IDirect3DDevice9 *this);
     HRESULT (__stdcall *SetNPatchMode)(IDirect3DDevice9 *this, float);
     float (__stdcall *GetNPatchMode)(IDirect3DDevice9 *this);
     HRESULT (__stdcall *DrawPrimitive)(IDirect3DDevice9 *this, _D3DPRIMITIVETYPE, unsigned int, unsigned int);
     HRESULT (__stdcall *DrawIndexedPrimitive)(IDirect3DDevice9 *this, _D3DPRIMITIVETYPE, int, unsigned int, unsigned int, unsigned int, unsigned int);
     HRESULT (__stdcall *DrawPrimitiveUP)(IDirect3DDevice9 *this, _D3DPRIMITIVETYPE, unsigned int, const void *, unsigned int);
     HRESULT (__stdcall *DrawIndexedPrimitiveUP)(IDirect3DDevice9 *this, _D3DPRIMITIVETYPE, unsigned int, unsigned int, unsigned int, const void *, _D3DFORMAT, const void *, unsigned int);
     HRESULT (__stdcall *ProcessVertices)(IDirect3DDevice9 *this, unsigned int, unsigned int, unsigned int, IDirect3DVertexBuffer9 *, IDirect3DVertexDeclaration9 *, unsigned int);
     HRESULT (__stdcall *CreateVertexDeclaration)(IDirect3DDevice9 *this, const _D3DVERTEXELEMENT9 *, IDirect3DVertexDeclaration9 **);
     HRESULT (__stdcall *SetVertexDeclaration)(IDirect3DDevice9 *this, IDirect3DVertexDeclaration9 *);
     HRESULT (__stdcall *GetVertexDeclaration)(IDirect3DDevice9 *this, IDirect3DVertexDeclaration9 **);
     HRESULT (__stdcall *SetFVF)(IDirect3DDevice9 *this, unsigned int);
     HRESULT (__stdcall *GetFVF)(IDirect3DDevice9 *this, unsigned int *);
     HRESULT (__stdcall *CreateVertexShader)(IDirect3DDevice9 *this, const unsigned int *, IDirect3DVertexShader9 **);
     HRESULT (__stdcall *SetVertexShader)(IDirect3DDevice9 *this, IDirect3DVertexShader9 *);
     HRESULT (__stdcall *GetVertexShader)(IDirect3DDevice9 *this, IDirect3DVertexShader9 **);
     HRESULT (__stdcall *SetVertexShaderConstantF)(IDirect3DDevice9 *this, unsigned int, const float *, unsigned int);
     HRESULT (__stdcall *GetVertexShaderConstantF)(IDirect3DDevice9 *this, unsigned int, float *, unsigned int);
     HRESULT (__stdcall *SetVertexShaderConstantI)(IDirect3DDevice9 *this, unsigned int, const int *, unsigned int);
     HRESULT (__stdcall *GetVertexShaderConstantI)(IDirect3DDevice9 *this, unsigned int, int *, unsigned int);
     HRESULT (__stdcall *SetVertexShaderConstantB)(IDirect3DDevice9 *this, unsigned int, const int *, unsigned int);
     HRESULT (__stdcall *GetVertexShaderConstantB)(IDirect3DDevice9 *this, unsigned int, int *, unsigned int);
     HRESULT (__stdcall *SetStreamSource)(IDirect3DDevice9 *this, unsigned int, IDirect3DVertexBuffer9 *, unsigned int, unsigned int);
     HRESULT (__stdcall *GetStreamSource)(IDirect3DDevice9 *this, unsigned int, IDirect3DVertexBuffer9 **, unsigned int *, unsigned int *);
     HRESULT (__stdcall *SetStreamSourceFreq)(IDirect3DDevice9 *this, unsigned int, unsigned int);
     HRESULT (__stdcall *GetStreamSourceFreq)(IDirect3DDevice9 *this, unsigned int, unsigned int *);
     HRESULT (__stdcall *SetIndices)(IDirect3DDevice9 *this, IDirect3DIndexBuffer9 *);
     HRESULT (__stdcall *GetIndices)(IDirect3DDevice9 *this, IDirect3DIndexBuffer9 **);
     HRESULT (__stdcall *CreatePixelShader)(IDirect3DDevice9 *this, const unsigned int *, IDirect3DPixelShader9 **);
     HRESULT (__stdcall *SetPixelShader)(IDirect3DDevice9 *this, IDirect3DPixelShader9 *);
     HRESULT (__stdcall *GetPixelShader)(IDirect3DDevice9 *this, IDirect3DPixelShader9 **);
     HRESULT (__stdcall *SetPixelShaderConstantF)(IDirect3DDevice9 *this, unsigned int, const float *, unsigned int);
     HRESULT (__stdcall *GetPixelShaderConstantF)(IDirect3DDevice9 *this, unsigned int, float *, unsigned int);
     HRESULT (__stdcall *SetPixelShaderConstantI)(IDirect3DDevice9 *this, unsigned int, const int *, unsigned int);
     HRESULT (__stdcall *GetPixelShaderConstantI)(IDirect3DDevice9 *this, unsigned int, int *, unsigned int);
     HRESULT (__stdcall *SetPixelShaderConstantB)(IDirect3DDevice9 *this, unsigned int, const int *, unsigned int);
     HRESULT (__stdcall *GetPixelShaderConstantB)(IDirect3DDevice9 *this, unsigned int, int *, unsigned int);
     HRESULT (__stdcall *DrawRectPatch)(IDirect3DDevice9 *this, unsigned int, const float *, const _D3DRECTPATCH_INFO *);
     HRESULT (__stdcall *DrawTriPatch)(IDirect3DDevice9 *this, unsigned int, const float *, const _D3DTRIPATCH_INFO *);
     HRESULT (__stdcall *DeletePatch)(IDirect3DDevice9 *this, unsigned int);
     HRESULT (__stdcall *CreateQuery)(IDirect3DDevice9 *this, _D3DQUERYTYPE, IDirect3DQuery9 **);
 };
 struct /*VFT*/ IDirect3DVertexDeclaration9_vtbl // sizeof=0x14
 {
     HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
     unsigned int (__stdcall *AddRef)(IUnknown *this);
     unsigned int (__stdcall *Release)(IUnknown *this);
     HRESULT (__stdcall *GetDevice)(IDirect3DVertexDeclaration9 *this, IDirect3DDevice9 **);
     HRESULT (__stdcall *GetDeclaration)(IDirect3DVertexDeclaration9 *this, _D3DVERTEXELEMENT9 *, unsigned int *);
 };
 struct MaterialVertexStreamRouting // sizeof=0x60
 {                                       // ...
     MaterialStreamRouting data[16];
     IDirect3DVertexDeclaration9 *decl[16];
 };
 struct MaterialVertexDeclaration // sizeof=0x64
 {                                       // ...
     unsigned __int8 streamCount;
     bool hasOptionalSource;
     bool isLoaded;
     // padding byte
     MaterialVertexStreamRouting routing;
 };
 struct GfxVertexShaderLoadDef // sizeof=0x8
 {                                       // ...
     unsigned int *program;
     unsigned __int16 programSize;
     unsigned __int16 loadForRenderer;
 };
 struct MaterialVertexShaderProgram // sizeof=0xC
 {                                       // ...
     IDirect3DVertexShader9 *vs;
     GfxVertexShaderLoadDef loadDef;
 };
 struct MaterialVertexShader // sizeof=0x10
 {                                       // ...
     const char *name;
     MaterialVertexShaderProgram prog;
 };
 struct GfxPixelShaderLoadDef // sizeof=0x8
 {                                       // ...
     unsigned int *program;
     unsigned __int16 programSize;
     unsigned __int16 loadForRenderer;
 };
 struct MaterialPixelShaderProgram // sizeof=0xC
 {                                       // ...
     IDirect3DPixelShader9 *ps;
     GfxPixelShaderLoadDef loadDef;
 };
 struct MaterialPixelShader // sizeof=0x10
 {                                       // ...
     const char *name;
     MaterialPixelShaderProgram prog;
 };
 struct MaterialArgumentCodeConst // sizeof=0x4
 {                                       // ...
     unsigned __int16 index;
     unsigned __int8 firstRow;
     unsigned __int8 rowCount;
 };
 union MaterialArgumentDef // sizeof=0x4
 {                                       // ...
     const float *literalConst;
     MaterialArgumentCodeConst codeConst;
     unsigned int codeSampler;
     unsigned int nameHash;
 };
 struct MaterialShaderArgument // sizeof=0x8
 {                                       // ...
     unsigned __int16 type;
     unsigned __int16 dest;
     MaterialArgumentDef u;
 };
 struct MaterialPass // sizeof=0x14
 {                                       // ...
     MaterialVertexDeclaration *vertexDecl; // ...
     MaterialVertexShader *vertexShader;
     MaterialPixelShader *pixelShader;
     unsigned __int8 perPrimArgCount;
     unsigned __int8 perObjArgCount;
     unsigned __int8 stableArgCount;
     unsigned __int8 customSamplerFlags;
     MaterialShaderArgument *args;
 };
 struct MaterialTechnique // sizeof=0x1C
 {
     const char *name;
     unsigned __int16 flags;
     unsigned __int16 passCount;
     MaterialPass passArray[1];
 };
 struct __declspec(align(4)) GfxImageLoadDef // sizeof=0x14
 {
     unsigned __int8 levelCount;
     unsigned __int8 flags;
     __int16 dimensions[3];
     int format;
     int resourceSize;
     unsigned __int8 data[1];
     // padding byte
     // padding byte
     // padding byte
 };
 union GfxTexture // sizeof=0x4
 {                                       // ...
     IDirect3DBaseTexture9 *basemap;
     IDirect3DTexture9 *map;
     IDirect3DVolumeTexture9 *volmap;
     IDirect3DCubeTexture9 *cubemap;
     GfxImageLoadDef *loadDef;
 };
 struct Picmip // sizeof=0x2
 {                                       // ...
     unsigned __int8 platform[2];        // ...
 };
 struct CardMemory // sizeof=0x8
 {                                       // ...
     int platform[2];                    // ...
 };
 struct GfxImage // sizeof=0x24
 {                                       // ...
     MapType mapType;                    // ...
     GfxTexture texture;
     Picmip picmip;
     bool noPicmip;
     unsigned __int8 semantic;
     unsigned __int8 track;
     // padding byte
     // padding byte
     // padding byte
     CardMemory cardMemory;
     unsigned __int16 width;
     unsigned __int16 height;
     unsigned __int16 depth;
     unsigned __int8 category;
     bool delayLoadPixels;
     const char *name;
 };
 struct WaterWritable // sizeof=0x4
 {                                       // ...
     float floatTime;
 };
 struct complex_s // sizeof=0x8
 {                                       // ...
     float real;                         // ...
     float imag;                         // ...
 };
 struct water_t // sizeof=0x44
 {                                       // ...
     WaterWritable writable;
     complex_s *H0;
     float *wTerm;
     int M;                              // ...
     int N;                              // ...
     float Lx;                           // ...
     float Lz;                           // ...
     float gravity;                      // ...
     float windvel;                      // ...
     float winddir[2];                   // ...
     float amplitude;                    // ...
     float codeConstant[4];
     GfxImage *image;                    // ...
 };
 union MaterialTextureDefInfo // sizeof=0x4
 {                                       // ...
     GfxImage *image;
     water_t *water;
 };
 struct MaterialTextureDef // sizeof=0xC
 {
     unsigned int nameHash;
     char nameStart;
     char nameEnd;
     unsigned __int8 samplerState;
     unsigned __int8 semantic;
     MaterialTextureDefInfo u;
 };
 struct MaterialConstantDef // sizeof=0x20
 {
     unsigned int nameHash;
     char name[12];
     float literal[4];
 };
 struct GfxStateBits // sizeof=0x8
 {
     unsigned int loadBits[2];
 };
 struct Material // sizeof=0x50
 {                                       // ...
     MaterialInfo info;
     unsigned __int8 stateBitsEntry[34];
     unsigned __int8 textureCount;
     unsigned __int8 constantCount;
     unsigned __int8 stateBitsCount;
     unsigned __int8 stateFlags;
     unsigned __int8 cameraRegion;
     // padding byte
     MaterialTechniqueSet *techniqueSet;
     MaterialTextureDef *textureTable;
     MaterialConstantDef *constantTable;
     GfxStateBits *stateBitsTable;
 };
 struct FxElemMarkVisuals // sizeof=0x8
 {                                       // ...
     Material *materials[2];
 };
 struct DObjAnimMat // sizeof=0x20
 {                                       // ...
     float quat[4];                      // ...
     float trans[3];                     // ...
     float transWeight;                  // ...
 };
 struct XSurfaceVertexInfo // sizeof=0xC
 {                                       // ...
     __int16 vertCount[4];
     unsigned __int16 *vertsBlend;
 };
 union GfxColor // sizeof=0x4
 {                                       // ...
     unsigned int packed;
     unsigned __int8 array[4];
 };
 union PackedTexCoords // sizeof=0x4
 {                                       // ...
     unsigned int packed;
 };
 union PackedUnitVec // sizeof=0x4
 {                                       // ...
     unsigned int packed;
     unsigned __int8 array[4];
 };
 struct GfxPackedVertex // sizeof=0x20
 {                                       // ...
     float xyz[3];
     float binormalSign;
     GfxColor color;
     PackedTexCoords texCoord;
     PackedUnitVec normal;
     PackedUnitVec tangent;
 };
 struct XSurfaceCollisionAabb // sizeof=0xC
 {                                       // ...
     unsigned __int16 mins[3];
     unsigned __int16 maxs[3];
 };
 struct XSurfaceCollisionNode // sizeof=0x10
 {
     XSurfaceCollisionAabb aabb;
     unsigned __int16 childBeginIndex;
     unsigned __int16 childCount;
 };
 struct XSurfaceCollisionLeaf // sizeof=0x2
 {
     unsigned __int16 triangleBeginIndex;
 };
 struct XSurfaceCollisionTree // sizeof=0x28
 {
     float trans[3];
     float scale[3];
     unsigned int nodeCount;
     XSurfaceCollisionNode *nodes;
     unsigned int leafCount;
     XSurfaceCollisionLeaf *leafs;
 };
 struct XRigidVertList // sizeof=0xC
 {                                       // ...
     unsigned __int16 boneOffset;        // ...
     unsigned __int16 vertCount;         // ...
     unsigned __int16 triOffset;         // ...
     unsigned __int16 triCount;          // ...
     XSurfaceCollisionTree *collisionTree;
 };
 struct XSurface // sizeof=0x38
 {
     unsigned __int8 tileMode;
     bool deformed;
     unsigned __int16 vertCount;
     unsigned __int16 triCount;
     unsigned __int8 zoneHandle;
     // padding byte
     unsigned __int16 baseTriIndex;
     unsigned __int16 baseVertIndex;
     unsigned __int16 *triIndices;
     XSurfaceVertexInfo vertInfo;
     GfxPackedVertex *verts0;
     unsigned int vertListCount;
     XRigidVertList *vertList;
     int partBits[4];
 };
 struct XModelLodInfo // sizeof=0x1C
 {                                       // ...
     float dist;
     unsigned __int16 numsurfs;
     unsigned __int16 surfIndex;
     int partBits[4];
     unsigned __int8 lod;
     unsigned __int8 smcIndexPlusOne;
     unsigned __int8 smcAllocBits;
     unsigned __int8 unused;
 };
 struct XModelCollSurf_s // sizeof=0x2C
 {
     XModelCollTri_s *collTris;
     int numCollTris;
     float mins[3];
     float maxs[3];
     int boneIdx;
     int contents;
     int surfFlags;
 };
 struct XBoneInfo // sizeof=0x28
 {                                       // ...
     float bounds[2][3];
     float offset[3];
     float radiusSquared;
 };
 struct __declspec(align(4)) PhysPreset // sizeof=0x2C
 {                                       // ...
     const char *name;                   // ...
     int type;                           // ...
     float mass;                         // ...
     float bounce;                       // ...
     float friction;                     // ...
     float bulletForceScale;             // ...
     float explosiveForceScale;          // ...
     const char *sndAliasPrefix;         // ...
     float piecesSpreadFraction;
     float piecesUpwardVelocity;
     bool tempDefaultToCylinder;
     // padding byte
     // padding byte
     // padding byte
 };
 struct PhysGeomInfo // sizeof=0x44
 {
     BrushWrapper *brush;
     int type;
     float orientation[3][3];
     float offset[3];
     float halfLengths[3];
 };
 struct PhysGeomList // sizeof=0x2C
 {
     unsigned int count;
     PhysGeomInfo *geoms;
     PhysMass mass;
 };
 struct XModel // sizeof=0xDC
 {                                       // ...
     const char *name;
     unsigned __int8 numBones;
     unsigned __int8 numRootBones;
     unsigned __int8 numsurfs;
     unsigned __int8 lodRampType;
     unsigned __int16 *boneNames;
     unsigned __int8 *parentList;
     __int16 *quats;
     float *trans;
     unsigned __int8 *partClassification;
     DObjAnimMat *baseMat;
     XSurface *surfs;
     Material **materialHandles;
     XModelLodInfo lodInfo[4];
     XModelCollSurf_s *collSurfs;
     int numCollSurfs;
     int contents;
     XBoneInfo *boneInfo;
     float radius;
     float mins[3];
     float maxs[3];
     __int16 numLods;
     __int16 collLod;
     XModelStreamInfo streamInfo;
     // padding byte
     // padding byte
     // padding byte
     int memUsage;
     unsigned __int8 flags;
     bool bad;
     // padding byte
     // padding byte
     PhysPreset *physPreset;
     PhysGeomList *physGeoms;
 };
 struct FxEffectDef // sizeof=0x20
 {                                       // ...
     const char *name;
     int flags;
     int totalSize;
     int msecLoopingLife;
     int elemDefCountLooping;
     int elemDefCountOneShot;
     int elemDefCountEmission;
     const FxElemDef *elemDefs;
 };
 union FxEffectDefRef // sizeof=0x4
 {                                       // ...
     const FxEffectDef *handle;
     const char *name;
 };
 union FxElemVisuals // sizeof=0x4
 {                                       // ...
     const void *anonymous;
     Material *material;
     XModel *model;
     FxEffectDefRef effectDef;
     const char *soundName;
 };
 union FxElemDefVisuals // sizeof=0x4
 {                                       // ...
     FxElemMarkVisuals *markArray;
     FxElemVisuals *array;
     FxElemVisuals instance;
 };
 struct FxTrailVertex // sizeof=0x14
 {                                       // ...
     float pos[2];
     float normal[2];
     float texCoord;
 };
 struct FxTrailDef // sizeof=0x1C
 {
     int scrollTimeMsec;
     int repeatDist;
     int splitDist;
     int vertCount;
     FxTrailVertex *verts;
     int indCount;
     unsigned __int16 *inds;
 };
 const struct FxElemDef // sizeof=0xFC
 {
     int flags;
     FxSpawnDef spawn;
     FxFloatRange spawnRange;
     FxFloatRange fadeInRange;
     FxFloatRange fadeOutRange;
     float spawnFrustumCullRadius;
     FxIntRange spawnDelayMsec;
     FxIntRange lifeSpanMsec;
     FxFloatRange spawnOrigin[3];
     FxFloatRange spawnOffsetRadius;
     FxFloatRange spawnOffsetHeight;
     FxFloatRange spawnAngles[3];
     FxFloatRange angularVelocity[3];
     FxFloatRange initialRotation;
     FxFloatRange gravity;
     FxFloatRange reflectionFactor;
     FxElemAtlas atlas;
     unsigned __int8 elemType;
     unsigned __int8 visualCount;
     unsigned __int8 velIntervalCount;
     unsigned __int8 visStateIntervalCount;
     const FxElemVelStateSample *velSamples;
     const FxElemVisStateSample *visSamples;
     FxElemDefVisuals visuals;
     float collMins[3];
     float collMaxs[3];
     FxEffectDefRef effectOnImpact;
     FxEffectDefRef effectOnDeath;
     FxEffectDefRef effectEmitted;
     FxFloatRange emitDist;
     FxFloatRange emitDistVariance;
     FxTrailDef *trailDef;
     unsigned __int8 sortOrder;
     unsigned __int8 lightingFrac;
     unsigned __int8 useItemClip;
     unsigned __int8 unused[1];
 };
 struct FxImpactEntry // sizeof=0x84
 {
     const FxEffectDef *nonflesh[29];
     const FxEffectDef *flesh[4];
 };
 struct LerpEntityStateLoopFx // sizeof=0x8
 {                                       // ...
     float cullDist;
     int period;
 };
 struct LerpEntityStateCustomExplode // sizeof=0x4
 {                                       // ...
     int startTime;
 };
 struct LerpEntityStateTurret // sizeof=0xC
 {                                       // ...
     float gunAngles[3];
 };
 struct ActionSlotParam_SpecifyWeapon // sizeof=0x4
 {                                       // ...
     unsigned int index;
 };
 struct LerpEntityStateAnonymous // sizeof=0x1C
 {                                       // ...
     int data[7];
 };
 struct netProfilePacket_t // sizeof=0xC
 {                                       // ...
     int iTime;
     int iSize;
     int bFragment;
 };
 struct netProfileStream_t // sizeof=0x2F0
 {                                       // ...
     netProfilePacket_t packets[60];
     int iCurrPacket;
     int iBytesPerSecond;
     int iLastBPSCalcTime;
     int iCountedPackets;
     int iCountedFragments;
     int iFragmentPercentage;
     int iLargestPacket;
     int iSmallestPacket;
 };
 struct LerpEntityStateExplosion // sizeof=0x8
 {                                       // ...
     float innerRadius;
     float magnitude;
 };
 struct LerpEntityStateBulletHit // sizeof=0xC
 {                                       // ...
     float start[3];
 };
 struct LerpEntityStatePrimaryLight // sizeof=0x14
 {                                       // ...
     unsigned __int8 colorAndExp[4];
     float intensity;
     float radius;
     float cosHalfFovOuter;
     float cosHalfFovInner;
 };
 struct MaterialInfoRaw // sizeof=0x28
 {                                       // ...
     unsigned int nameOffset;
     unsigned int refImageNameOffset;
     unsigned __int8 gameFlags;
     unsigned __int8 sortKey;
     unsigned __int8 textureAtlasRowCount;
     unsigned __int8 textureAtlasColumnCount;
     float maxDeformMove;
     unsigned __int8 deformFlags;
     unsigned __int8 usage;
     unsigned __int16 toolFlags;
     unsigned int locale;
     unsigned __int16 autoTexScaleWidth;
     unsigned __int16 autoTexScaleHeight;
     float tessSize;
     int surfaceFlags;
     int contents;
 };
 struct LerpEntityStateMissile // sizeof=0x4
 {                                       // ...
     int launchTime;
 };
 struct LerpEntityStateSoundBlend // sizeof=0x4
 {                                       // ...
     float lerp;
 };
 struct ProfileAtom // sizeof=0x4
 {                                       // ...
     unsigned int value[1];              // ...
 };
 struct ProfileWritable // sizeof=0x1C
 {                                       // ...
     int nesting;
     unsigned int hits;
     ProfileAtom start[3];
     ProfileAtom total;
     ProfileAtom child;
 };
 volatile struct ProfileReadable // sizeof=0xC
 {                                       // ...
     unsigned int hits;
     ProfileAtom total;                  // ...
     ProfileAtom self;                   // ...
 };
 struct profile_t // sizeof=0x28
 {                                       // ...
     ProfileWritable write;
     volatile ProfileReadable read;
 };
 struct profile_guard_t // sizeof=0x8
 {                                       // ...
     int id;
     profile_t **ppStack;
 };
 struct ProfileStack // sizeof=0x144BC
 {                                       // ...
     profile_t prof_root;
     profile_t *prof_pStack[16384];
     profile_t **prof_ppStack;
     profile_t prof_array[432];
     ProfileAtom prof_overhead_internal;
     ProfileAtom prof_overhead_external;
     profile_guard_t prof_guardstack[32];
     int prof_guardpos;
     float prof_timescale;
 };
 struct LerpEntityStateExplosionJolt // sizeof=0x10
 {                                       // ...
     float innerRadius;
     float impulse[3];
 };
 struct SprintState // sizeof=0x14
 {                                       // ...
     int sprintButtonUpRequired;
     int sprintDelay;
     int lastSprintStart;
     int lastSprintEnd;
     int sprintStartMaxLength;
 };
 struct MantleState // sizeof=0x10
 {                                       // ...
     float yaw;
     int timer;
     int transIndex;
     int flags;
 };
 struct ActionSlotParam // sizeof=0x4
 {                                       // ...
     ActionSlotParam_SpecifyWeapon specifyWeapon;
 };
 struct objective_t // sizeof=0x1C
 {                                       // ...
     objectiveState_t state;
     float origin[3];                    // ...
     int entNum;
     int teamNum;                        // ...
     int icon;
 };
 struct playerState_s::<unnamed_type_hud> // sizeof=0x26C0
 {                                       // ...
     hudelem_s current[31];              // ...
     hudelem_s archival[31];             // ...
 };
 struct playerState_s // sizeof=0x2F64
 {                                       // ...
     int commandTime;
     int pm_type;
     int bobCycle;                       // ...
     int pm_flags;
     int weapFlags;
     int otherFlags;                     // ...
     int pm_time;
     float origin[3];                    // ...
     float velocity[3];
     float oldVelocity[2];
     int weaponTime;
     int weaponDelay;
     int grenadeTimeLeft;
     int throwBackGrenadeOwner;
     int throwBackGrenadeTimeLeft;
     int weaponRestrictKickTime;
     int foliageSoundTime;
     int gravity;
     float leanf;
     int speed;
     float delta_angles[3];
     int groundEntityNum;
     float vLadderVec[3];
     int jumpTime;
     float jumpOriginZ;                  // ...
     int legsTimer;
     int legsAnim;
     int torsoTimer;
     int torsoAnim;
     int legsAnimDuration;
     int torsoAnimDuration;
     int damageTimer;
     int damageDuration;
     int flinchYawAnim;
     int movementDir;
     int eFlags;                         // ...
     int eventSequence;                  // ...
     int events[4];
     unsigned int eventParms[4];
     int oldEventSequence;
     int clientNum;
     int offHandIndex;
     OffhandSecondaryClass offhandSecondary;
     unsigned int weapon;
     int weaponstate;
     unsigned int weaponShotCount;
     float fWeaponPosFrac;
     int adsDelayTime;
     int spreadOverride;
     int spreadOverrideState;
     int viewmodelIndex;
     float viewangles[3];
     int viewHeightTarget;
     float viewHeightCurrent;
     int viewHeightLerpTime;
     int viewHeightLerpTarget;
     int viewHeightLerpDown;
     float viewAngleClampBase[2];
     float viewAngleClampRange[2];
     int damageEvent;
     int damageYaw;
     int damagePitch;
     int damageCount;
     int stats[5];                       // ...
     int ammo[128];
     int ammoclip[128];
     unsigned int weapons[4];
     unsigned int weaponold[4];
     unsigned int weaponrechamber[4];
     float proneDirection;
     float proneDirectionPitch;
     float proneTorsoPitch;
     ViewLockTypes viewlocked;
     int viewlocked_entNum;
     int cursorHint;
     int cursorHintString;
     int cursorHintEntIndex;
     int iCompassPlayerInfo;
     int radarEnabled;
     int locationSelectionInfo;
     SprintState sprintState;
     float fTorsoPitch;
     float fWaistPitch;
     float holdBreathScale;
     int holdBreathTimer;
     float moveSpeedScaleMultiplier;
     MantleState mantleState;
     float meleeChargeYaw;
     int meleeChargeDist;
     int meleeChargeTime;
     int perks;
     ActionSlotType actionSlotType[4];
     ActionSlotParam actionSlotParam[4];
     int entityEventSequence;
     int weapAnim;
     float aimSpreadScale;
     int shellshockIndex;
     int shellshockTime;
     int shellshockDuration;
     float dofNearStart;
     float dofNearEnd;
     float dofFarStart;
     float dofFarEnd;
     float dofNearBlur;
     float dofFarBlur;
     float dofViewmodelStart;
     float dofViewmodelEnd;
     int hudElemLastAssignedSoundID;
     objective_t objective[16];          // ...
     unsigned __int8 weaponmodels[128];
     int deltaTime;
     int killCamEntity;                  // ...
     playerState_s::<unnamed_type_hud> hud; // ...
 };
 struct FxImpactTable // sizeof=0x8
 {                                       // ...
     const char *name;
     FxImpactEntry *table;
 };
 struct XModelPiece // sizeof=0x10
 {
     XModel *model;
     float offset[3];
 };
 struct XModelPieces // sizeof=0xC
 {                                       // ...
     const char *name;
     int numpieces;
     XModelPiece *pieces;
 };
 union XAnimIndices // sizeof=0x4
 {                                       // ...
     unsigned __int8 *_1;
     unsigned __int16 *_2;
     void *data;
 };
 struct XAnimNotifyInfo // sizeof=0x8
 {
     unsigned __int16 name;
     // padding byte
     // padding byte
     float time;
 };
 union XAnimDynamicFrames // sizeof=0x4
 {                                       // ...
     unsigned __int8 (*_1)[3];
     unsigned __int16 (*_2)[3];
 };
 union XAnimDynamicIndices // sizeof=0x2
 {                                       // ...
     unsigned __int8 _1[1];
     unsigned __int16 _2[1];
 };
 struct __declspec(align(4)) XAnimPartTransFrames // sizeof=0x20
 {                                       // ...
     float mins[3];
     float size[3];
     XAnimDynamicFrames frames;
     XAnimDynamicIndices indices;
     // padding byte
     // padding byte
 };
 union XAnimPartTransData // sizeof=0x20
 {                                       // ...
     XAnimPartTransFrames frames;
     float frame0[3];
 };
 struct XAnimPartTrans // sizeof=0x24
 {
     unsigned __int16 size;
     unsigned __int8 smallTrans;
     // padding byte
     XAnimPartTransData u;
 };
 struct __declspec(align(4)) XAnimDeltaPartQuatDataFrames // sizeof=0x8
 {                                       // ...
     __int16 (*frames)[2];
     XAnimDynamicIndices indices;
     // padding byte
     // padding byte
 };
 union XAnimDeltaPartQuatData // sizeof=0x8
 {                                       // ...
     XAnimDeltaPartQuatDataFrames frames;
     __int16 frame0[2];
 };
 struct XAnimDeltaPartQuat // sizeof=0xC
 {
     unsigned __int16 size;
     // padding byte
     // padding byte
     XAnimDeltaPartQuatData u;
 };
 struct XAnimDeltaPart // sizeof=0x8
 {
     XAnimPartTrans *trans;
     XAnimDeltaPartQuat *quat;
 };
 struct XAnimParts // sizeof=0x58
 {                                       // ...
     const char *name;
     unsigned __int16 dataByteCount;
     unsigned __int16 dataShortCount;
     unsigned __int16 dataIntCount;
     unsigned __int16 randomDataByteCount;
     unsigned __int16 randomDataIntCount;
     unsigned __int16 numframes;
     bool bLoop;
     bool bDelta;
     unsigned __int8 boneCount[10];
     unsigned __int8 notifyCount;
     unsigned __int8 assetType;
     bool isDefault;
     // padding byte
     unsigned int randomDataShortCount;
     unsigned int indexCount;
     float framerate;
     float frequency;
     unsigned __int16 *names;
     unsigned __int8 *dataByte;
     __int16 *dataShort;
     int *dataInt;
     __int16 *randomDataShort;
     unsigned __int8 *randomDataByte;
     int *randomDataInt;
     XAnimIndices indices;
     XAnimNotifyInfo *notify;
     XAnimDeltaPart *deltaPart;
 };
 struct cStaticModelWritable // sizeof=0x2
 {                                       // ...
     unsigned __int16 nextModelInWorldSector;
 };
 struct cStaticModel_s // sizeof=0x50
 {
     cStaticModelWritable writable;
     // padding byte
     // padding byte
     XModel *xmodel;
     float origin[3];
     float invScaledAxis[3][3];
     float absmin[3];
     float absmax[3];
 };
 struct dmaterial_t // sizeof=0x48
 {
     char material[64];
     int surfaceFlags;
     int contentFlags;
 };
 struct cNode_t // sizeof=0x8
 {
     cplane_s *plane;
     __int16 children[2];
 };
 struct __declspec(align(4)) cLeaf_t // sizeof=0x2C
 {                                       // ...
     unsigned __int16 firstCollAabbIndex;
     unsigned __int16 collAabbCount;
     int brushContents;                  // ...
     int terrainContents;                // ...
     float mins[3];                      // ...
     float maxs[3];                      // ...
     int leafBrushNode;                  // ...
     __int16 cluster;
     // padding byte
     // padding byte
 };
 struct cLeafBrushNodeLeaf_t // sizeof=0x4
 {                                       // ...
     unsigned __int16 *brushes;
 };
 struct cLeafBrushNodeChildren_t // sizeof=0xC
 {                                       // ...
     float dist;
     float range;
     unsigned __int16 childOffset[2];
 };
 union cLeafBrushNodeData_t // sizeof=0xC
 {                                       // ...
     cLeafBrushNodeLeaf_t leaf;
     cLeafBrushNodeChildren_t children;
 };
 struct cLeafBrushNode_s // sizeof=0x14
 {
     unsigned __int8 axis;
     // padding byte
     __int16 leafBrushCount;
     int contents;
     cLeafBrushNodeData_t data;
 };
 struct CollisionBorder // sizeof=0x1C
 {
     float distEq[3];
     float zBase;
     float zSlope;
     float start;
     float length;
 };
 struct CollisionPartition // sizeof=0xC
 {
     unsigned __int8 triCount;
     unsigned __int8 borderCount;
     // padding byte
     // padding byte
     int firstTri;
     CollisionBorder *borders;
 };
 union CollisionAabbTreeIndex // sizeof=0x4
 {                                       // ...
     int firstChildIndex;
     int partitionIndex;
 };
 struct CollisionAabbTree // sizeof=0x20
 {
     float origin[3];
     float halfSize[3];
     unsigned __int16 materialIndex;
     unsigned __int16 childCount;
     CollisionAabbTreeIndex u;
 };
 struct cmodel_t // sizeof=0x48
 {                                       // ...
     float mins[3];
     float maxs[3];
     float radius;
     cLeaf_t leaf;                       // ...
 };
 struct __declspec(align(16)) cbrush_t // sizeof=0x50
 {                                       // ...
     float mins[3];
     int contents;
     float maxs[3];
     unsigned int numsides;
     cbrushside_t *sides;
     __int16 axialMaterialNum[2][3];
     unsigned __int8 *baseAdjacentSide;
     __int16 firstAdjacentSideOffsets[2][3];
     unsigned __int8 edgeCount[2][3];
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
 };
 struct MapEnts // sizeof=0xC
 {                                       // ...
     const char *name;
     char *entityString;
     int numEntityChars;
 };
 struct GfxPlacement // sizeof=0x1C
 {                                       // ...
     float quat[4];                      // ...
     float origin[3];                    // ...
 };
 struct DynEntityDef // sizeof=0x60
 {
     DynEntityType type;
     GfxPlacement pose;
     XModel *xModel;
     unsigned __int16 brushModel;
     unsigned __int16 physicsBrushModel;
     const FxEffectDef *destroyFx;
     XModelPieces *destroyPieces;
     PhysPreset *physPreset;
     int health;
     PhysMass mass;
     int contents;
 };
 struct DynEntityPose // sizeof=0x20
 {
     GfxPlacement pose;
     float radius;
 };
 struct DynEntityClient // sizeof=0xC
 {
     int physObjId;
     unsigned __int16 flags;
     unsigned __int16 lightingHandle;
     int health;
 };
 struct DynEntityColl // sizeof=0x14
 {
     unsigned __int16 sector;
     unsigned __int16 nextEntInSector;
     float linkMins[2];
     float linkMaxs[2];
 };
 struct clipMap_t // sizeof=0x11C
 {                                       // ...
     const char *name;                   // ...
     int isInUse;                        // ...
     int planeCount;                     // ...
     cplane_s *planes;                   // ...
     unsigned int numStaticModels;       // ...
     cStaticModel_s *staticModelList;    // ...
     unsigned int numMaterials;          // ...
     dmaterial_t *materials;             // ...
     unsigned int numBrushSides;         // ...
     cbrushside_t *brushsides;           // ...
     unsigned int numBrushEdges;         // ...
     unsigned __int8 *brushEdges;        // ...
     unsigned int numNodes;              // ...
     cNode_t *nodes;                     // ...
     unsigned int numLeafs;              // ...
     cLeaf_t *leafs;                     // ...
     unsigned int leafbrushNodesCount;   // ...
     cLeafBrushNode_s *leafbrushNodes;   // ...
     unsigned int numLeafBrushes;        // ...
     unsigned __int16 *leafbrushes;      // ...
     unsigned int numLeafSurfaces;       // ...
     unsigned int *leafsurfaces;         // ...
     unsigned int vertCount;             // ...
     float (*verts)[3];                  // ...
     int triCount;                       // ...
     unsigned __int16 *triIndices;       // ...
     unsigned __int8 *triEdgeIsWalkable; // ...
     int borderCount;                    // ...
     CollisionBorder *borders;           // ...
     int partitionCount;                 // ...
     CollisionPartition *partitions;     // ...
     int aabbTreeCount;                  // ...
     CollisionAabbTree *aabbTrees;       // ...
     unsigned int numSubModels;          // ...
     cmodel_t *cmodels;                  // ...
     unsigned __int16 numBrushes;        // ...
     // padding byte
     // padding byte
     cbrush_t *brushes;                  // ...
     int numClusters;                    // ...
     int clusterBytes;                   // ...
     unsigned __int8 *visibility;        // ...
     int vised;                          // ...
     MapEnts *mapEnts;                   // ...
     cbrush_t *box_brush;                // ...
     cmodel_t box_model;                 // ...
     unsigned __int16 dynEntCount[2];    // ...
     DynEntityDef *dynEntDefList[2];     // ...
     DynEntityPose *dynEntPoseList[2];   // ...
     DynEntityClient *dynEntClientList[2]; // ...
     DynEntityColl *dynEntCollList[2];   // ...
     unsigned int checksum;              // ...
 };
 struct ComPrimaryLight // sizeof=0x44
 {
     unsigned __int8 type;
     unsigned __int8 canUseShadowMap;
     unsigned __int8 exponent;
     unsigned __int8 unused;
     float color[3];
     float dir[3];
     float origin[3];
     float radius;
     float cosHalfFovOuter;
     float cosHalfFovInner;
     float cosHalfFovExpanded;
     float rotationLimit;
     float translationLimit;
     const char *defName;
 };
 struct ComWorld // sizeof=0x10
 {                                       // ...
     const char *name;                   // ...
     int isInUse;                        // ...
     unsigned int primaryLightCount;     // ...
     ComPrimaryLight *primaryLights;     // ...
 };
 struct pathlink_s // sizeof=0xC
 {
     float fDist;
     unsigned __int16 nodeNum;
     unsigned __int8 disconnectCount;
     unsigned __int8 negotiationLink;
     unsigned __int8 ubBadPlaceCount[4];
 };
 struct pathnode_constant_t // sizeof=0x44
 {                                       // ...
     nodeType type;
     unsigned __int16 spawnflags;
     unsigned __int16 targetname;
     unsigned __int16 script_linkName;
     unsigned __int16 script_noteworthy;
     unsigned __int16 target;
     unsigned __int16 animscript;
     int animscriptfunc;
     float vOrigin[3];
     float fAngle;
     float forward[2];
     float fRadius;
     float minUseDistSq;
     __int16 wOverlapNode[2];
     __int16 wChainId;
     __int16 wChainDepth;
     __int16 wChainParent;
     unsigned __int16 totalLinkCount;
     pathlink_s *Links;
 };
 struct pathnode_dynamic_t // sizeof=0x20
 {                                       // ...
     void *pOwner;
     int iFreeTime;
     int iValidTime[3];
     int inPlayerLOSTime;
     __int16 wLinkCount;
     __int16 wOverlapCount;
     __int16 turretEntNumber;
     __int16 userCount;
 };
 struct pathnode_t // sizeof=0x80
 {
     pathnode_constant_t constant;
     pathnode_dynamic_t dynamic;
     pathnode_transient_t transient;
 };
 struct pathnode_transient_t // sizeof=0x1C
 {
     int iSearchFrame;
     pathnode_t *pNextOpen;
     pathnode_t *pPrevOpen;
     pathnode_t *pParent;
     float fCost;
     float fHeuristic;
     float costFactor;
 };
 struct pathbasenode_t // sizeof=0x10
 {
     float vOrigin[3];
     unsigned int type;
 };
 struct pathnode_tree_t // sizeof=0x10
 {
     int axis;
     float dist;
     pathnode_tree_info_t u;
 };
 struct pathnode_tree_nodes_t // sizeof=0x8
 {                                       // ...
     int nodeCount;
     unsigned __int16 *nodes;
 };
 union pathnode_tree_info_t // sizeof=0x8
 {
     pathnode_tree_t *child[2];
     pathnode_tree_nodes_t s;
 };
 struct PathData // sizeof=0x28
 {                                       // ...
     unsigned int nodeCount;
     pathnode_t *nodes;
     pathbasenode_t *basenodes;
     unsigned int chainNodeCount;
     unsigned __int16 *chainNodeForNode;
     unsigned __int16 *nodeForChainNode;
     int visBytes;
     unsigned __int8 *pathVis;
     int nodeTreeCount;
     pathnode_tree_t *nodeTree;
 };
 struct GameWorldSp // sizeof=0x2C
 {
     const char *name;
     PathData path;
 };
 struct GameWorldMp // sizeof=0x4
 {                                       // ...
     const char *name;
 };
 struct __cppobj GfxWorldStreamInfo // sizeof=0x0
 {                                       // ...
 };
 struct GfxWorldVertex // sizeof=0x2C
 {                                       // ...
     float xyz[3];
     float binormalSign;
     GfxColor color;
     float texCoord[2];
     float lmapCoord[2];
     PackedUnitVec normal;
     PackedUnitVec tangent;
 };
 struct GfxWorldVertexData // sizeof=0x8
 {                                       // ...
     GfxWorldVertex *vertices;           // ...
     IDirect3DVertexBuffer9 *worldVb;    // ...
 };
 struct GfxWorldVertexLayerData // sizeof=0x8
 {                                       // ...
     unsigned __int8 *data;              // ...
     IDirect3DVertexBuffer9 *layerVb;    // ...
 };
 struct SunLightParseParams // sizeof=0x80
 {                                       // ...
     char name[64];
     float ambientScale;
     float ambientColor[3];
     float diffuseFraction;
     float sunLight;
     float sunColor[3];
     float diffuseColor[3];
     bool diffuseColorHasBeenSet;
     // padding byte
     // padding byte
     // padding byte
     float angles[3];
 };
 struct __declspec(align(4)) GfxLightImage // sizeof=0x8
 {                                       // ...
     GfxImage *image;
     unsigned __int8 samplerState;
     // padding byte
     // padding byte
     // padding byte
 };
 struct GfxLightDef // sizeof=0x10
 {                                       // ...
     const char *name;
     GfxLightImage attenuation;
     int lmapLookupStart;
 };
 struct GfxLight // sizeof=0x40
 {                                       // ...
     unsigned __int8 type;
     unsigned __int8 canUseShadowMap;
     unsigned __int8 unused[2];
     float color[3];
     float dir[3];
     float origin[3];
     float radius;
     float cosHalfFovOuter;
     float cosHalfFovInner;
     int exponent;
     unsigned int spotShadowIndex;
     GfxLightDef *def;
 };
 struct GfxReflectionProbe // sizeof=0x10
 {
     float origin[3];
     GfxImage *reflectionImage;
 };
 struct GfxWorldDpvsPlanes // sizeof=0x10
 {                                       // ...
     int cellCount;                      // ...
     cplane_s *planes;                   // ...
     unsigned __int16 *nodes;            // ...
     unsigned int *sceneEntCellBits;     // ...
 };
 struct GfxAabbTree // sizeof=0x2C
 {
     float mins[3];
     float maxs[3];
     unsigned __int16 childCount;
     unsigned __int16 surfaceCount;
     unsigned __int16 startSurfIndex;
     unsigned __int16 surfaceCountNoDecal;
     unsigned __int16 startSurfIndexNoDecal;
     unsigned __int16 smodelIndexCount;
     unsigned __int16 *smodelIndexes;
     int childrenOffset;
 };
 struct GfxPortal // sizeof=0x44
 {
     GfxPortalWritable writable;
     DpvsPlane plane;
     GfxCell *cell;
     float (*vertices)[3];
     unsigned __int8 vertexCount;
     // padding byte
     // padding byte
     // padding byte
     float hullAxis[2][3];
 };
 struct GfxPortalWritable // sizeof=0xC
 {
     bool isQueued;
     bool isAncestor;
     unsigned __int8 recursionDepth;
     unsigned __int8 hullPointCount;
     float (*hullPoints)[2];
     GfxPortal *queuedParent;
 };
 struct DpvsPlane // sizeof=0x14
 {                                       // ...
     float coeffs[4];                    // ...
     unsigned __int8 side[3];            // ...
     unsigned __int8 pad;
 };
 struct GfxCell // sizeof=0x38
 {
     float mins[3];
     float maxs[3];
     int aabbTreeCount;
     GfxAabbTree *aabbTree;
     int portalCount;
     GfxPortal *portals;
     int cullGroupCount;
     int *cullGroups;
     unsigned __int8 reflectionProbeCount;
     // padding byte
     // padding byte
     // padding byte
     unsigned __int8 *reflectionProbes;
 };
 struct GfxLightmapArray // sizeof=0x8
 {
     GfxImage *primary;
     GfxImage *secondary;
 };
 struct GfxLightGridEntry // sizeof=0x4
 {                                       // ...
     unsigned __int16 colorsIndex;
     unsigned __int8 primaryLightIndex;  // ...
     unsigned __int8 needsTrace;
 };
 struct GfxLightGridColors // sizeof=0xA8
 {                                       // ...
     unsigned __int8 rgb[56][3];
 };
 struct GfxLightGrid // sizeof=0x38
 {                                       // ...
     bool hasLightRegions;               // ...
     // padding byte
     // padding byte
     // padding byte
     unsigned int sunPrimaryLightIndex;  // ...
     unsigned __int16 mins[3];           // ...
     unsigned __int16 maxs[3];           // ...
     unsigned int rowAxis;               // ...
     unsigned int colAxis;               // ...
     unsigned __int16 *rowDataStart;     // ...
     unsigned int rawRowDataSize;        // ...
     unsigned __int8 *rawRowData;        // ...
     unsigned int entryCount;            // ...
     GfxLightGridEntry *entries;         // ...
     unsigned int colorCount;            // ...
     GfxLightGridColors *colors;         // ...
 };
 struct GfxBrushModelWritable // sizeof=0x18
 {                                       // ...
     float mins[3];
     float maxs[3];
 };
 struct __declspec(align(4)) GfxBrushModel // sizeof=0x38
 {
     GfxBrushModelWritable writable;
     float bounds[2][3];
     unsigned __int16 surfaceCount;
     unsigned __int16 startSurfIndex;
     unsigned __int16 surfaceCountNoDecal;
     // padding byte
     // padding byte
 };
 struct MaterialMemory // sizeof=0x8
 {                                       // ...
     Material *material;
     int memory;
 };
 struct sunflare_t // sizeof=0x60
 {                                       // ...
     bool hasValidData;
     // padding byte
     // padding byte
     // padding byte
     Material *spriteMaterial;
     Material *flareMaterial;
     float spriteSize;
     float flareMinSize;
     float flareMinDot;
     float flareMaxSize;
     float flareMaxDot;
     float flareMaxAlpha;
     int flareFadeInTime;
     int flareFadeOutTime;
     float blindMinDot;
     float blindMaxDot;
     float blindMaxDarken;
     int blindFadeInTime;
     int blindFadeOutTime;
     float glareMinDot;
     float glareMaxDot;
     float glareMaxLighten;
     int glareFadeInTime;
     int glareFadeOutTime;
     float sunFxPosition[3];
 };
 struct XModelDrawInfo // sizeof=0x4
 {                                       // ...
     unsigned __int16 lod;
     unsigned __int16 surfId;
 };
 struct GfxSceneDynModel // sizeof=0x6
 {
     XModelDrawInfo info;
     unsigned __int16 dynEntId;
 };
 struct BModelDrawInfo // sizeof=0x2
 {                                       // ...
     unsigned __int16 surfId;
 };
 struct GfxSceneDynBrush // sizeof=0x4
 {
     BModelDrawInfo info;
     unsigned __int16 dynEntId;
 };
 struct GfxShadowGeometry // sizeof=0xC
 {
     unsigned __int16 surfaceCount;
     unsigned __int16 smodelCount;
     unsigned __int16 *sortedSurfIndex;
     unsigned __int16 *smodelIndex;
 };
 struct GfxLightRegionAxis // sizeof=0x14
 {
     float dir[3];
     float midPoint;
     float halfSize;
 };
 struct GfxLightRegionHull // sizeof=0x50
 {
     float kdopMidPoint[9];
     float kdopHalfSize[9];
     unsigned int axisCount;
     GfxLightRegionAxis *axis;
 };
 struct GfxLightRegion // sizeof=0x8
 {
     unsigned int hullCount;
     GfxLightRegionHull *hulls;
 };
 struct GfxStaticModelInst // sizeof=0x1C
 {                                       // ...
     float mins[3];
     float maxs[3];
     GfxColor groundLighting;
 };
 struct srfTriangles_t // sizeof=0x10
 {                                       // ...
     int vertexLayerData;
     int firstVertex;
     unsigned __int16 vertexCount;
     unsigned __int16 triCount;
     int baseIndex;
 };
 struct GfxSurface // sizeof=0x30
 {                                       // ...
     srfTriangles_t tris;
     Material *material;
     unsigned __int8 lightmapIndex;
     unsigned __int8 reflectionProbeIndex;
     unsigned __int8 primaryLightIndex;
     unsigned __int8 flags;
     float bounds[2][3];
 };
 struct GfxCullGroup // sizeof=0x20
 {
     float mins[3];
     float maxs[3];
     int surfaceCount;
     int startSurfIndex;
 };
 struct GfxPackedPlacement // sizeof=0x34
 {                                       // ...
     float origin[3];
     float axis[3][3];
     float scale;
 };
 struct __declspec(align(4)) GfxStaticModelDrawInst // sizeof=0x4C
 {                                       // ...
     float cullDist;
     GfxPackedPlacement placement;
     XModel *model;
     unsigned __int16 smodelCacheIndex[4];
     unsigned __int8 reflectionProbeIndex;
     unsigned __int8 primaryLightIndex;
     unsigned __int16 lightingHandle;
     unsigned __int8 flags;
     // padding byte
     // padding byte
     // padding byte
 };
 struct GfxWorldDpvsStatic // sizeof=0x68
 {                                       // ...
     unsigned int smodelCount;           // ...
     unsigned int staticSurfaceCount;    // ...
     unsigned int staticSurfaceCountNoDecal; // ...
     unsigned int litSurfsBegin;         // ...
     unsigned int litSurfsEnd;           // ...
     unsigned int decalSurfsBegin;       // ...
     unsigned int decalSurfsEnd;         // ...
     unsigned int emissiveSurfsBegin;    // ...
     unsigned int emissiveSurfsEnd;      // ...
     unsigned int smodelVisDataCount;    // ...
     unsigned int surfaceVisDataCount;   // ...
     unsigned __int8 *smodelVisData[3];  // ...
     unsigned __int8 *surfaceVisData[3]; // ...
     unsigned int *lodData;              // ...
     unsigned __int16 *sortedSurfIndex;  // ...
     GfxStaticModelInst *smodelInsts;    // ...
     GfxSurface *surfaces;               // ...
     GfxCullGroup *cullGroups;           // ...
     GfxStaticModelDrawInst *smodelDrawInsts; // ...
     GfxDrawSurf *surfaceMaterials;      // ...
     unsigned int *surfaceCastsSunShadow; // ...
     volatile int usageCount;
 };
 struct GfxWorldDpvsDynamic // sizeof=0x30
 {                                       // ...
     unsigned int dynEntClientWordCount[2]; // ...
     unsigned int dynEntClientCount[2];  // ...
     unsigned int *dynEntCellBits[2];    // ...
     unsigned __int8 *dynEntVisData[2][3]; // ...
 };
 struct GfxWorld // sizeof=0x2DC
 {                                       // ...
     const char *name;                   // ...
     const char *baseName;               // ...
     int planeCount;                     // ...
     int nodeCount;                      // ...
     int indexCount;                     // ...
     unsigned __int16 *indices;          // ...
     int surfaceCount;                   // ...
     GfxWorldStreamInfo streamInfo;
     // padding byte
     // padding byte
     // padding byte
     int skySurfCount;                   // ...
     int *skyStartSurfs;                 // ...
     GfxImage *skyImage;                 // ...
     unsigned __int8 skySamplerState;    // ...
     // padding byte
     // padding byte
     // padding byte
     unsigned int vertexCount;           // ...
     GfxWorldVertexData vd;              // ...
     unsigned int vertexLayerDataSize;   // ...
     GfxWorldVertexLayerData vld;        // ...
     SunLightParseParams sunParse;       // ...
     GfxLight *sunLight;                 // ...
     float sunColorFromBsp[3];
     unsigned int sunPrimaryLightIndex;  // ...
     unsigned int primaryLightCount;     // ...
     int cullGroupCount;                 // ...
     unsigned int reflectionProbeCount;  // ...
     GfxReflectionProbe *reflectionProbes; // ...
     GfxTexture *reflectionProbeTextures; // ...
     GfxWorldDpvsPlanes dpvsPlanes;      // ...
     int cellBitsCount;                  // ...
     GfxCell *cells;                     // ...
     int lightmapCount;                  // ...
     GfxLightmapArray *lightmaps;        // ...
     GfxLightGrid lightGrid;             // ...
     GfxTexture *lightmapPrimaryTextures; // ...
     GfxTexture *lightmapSecondaryTextures; // ...
     int modelCount;                     // ...
     GfxBrushModel *models;              // ...
     float mins[3];                      // ...
     float maxs[3];                      // ...
     unsigned int checksum;
     int materialMemoryCount;            // ...
     MaterialMemory *materialMemory;     // ...
     sunflare_t sun;                     // ...
     float outdoorLookupMatrix[4][4];
     GfxImage *outdoorImage;
     unsigned int *cellCasterBits;       // ...
     GfxSceneDynModel *sceneDynModel;    // ...
     GfxSceneDynBrush *sceneDynBrush;    // ...
     unsigned int *primaryLightEntityShadowVis; // ...
     unsigned int *primaryLightDynEntShadowVis[2]; // ...
     unsigned __int8 *nonSunPrimaryLightForModelDynEnt; // ...
     GfxShadowGeometry *shadowGeom;      // ...
     GfxLightRegion *lightRegion;        // ...
     GfxWorldDpvsStatic dpvs;            // ...
     GfxWorldDpvsDynamic dpvsDyn;        // ...
 };
 struct Glyph // sizeof=0x18
 {
     unsigned __int16 letter;
     char x0;
     char y0;
     unsigned __int8 dx;
     unsigned __int8 pixelWidth;
     unsigned __int8 pixelHeight;
     // padding byte
     float s0;
     float t0;
     float s1;
     float t1;
 };
 struct Font_s // sizeof=0x18
 {                                       // ...
     const char *fontName;
     int pixelHeight;
     int glyphCount;
     Material *material;
     Material *glowMaterial;
     Glyph *glyphs;
 };
 struct rectDef_s // sizeof=0x18
 {                                       // ...
     float x;                            // ...
     float y;                            // ...
     float w;                            // ...
     float h;                            // ...
     int horzAlign;                      // ...
     int vertAlign;                      // ...
 };
 struct windowDef_t // sizeof=0x9C
 {                                       // ...
     const char *name;
     rectDef_s rect;
     rectDef_s rectClient;
     const char *group;
     int style;
     int border;
     int ownerDraw;
     int ownerDrawFlags;
     float borderSize;
     int staticFlags;
     int dynamicFlags[1];
     int nextTime;
     float foreColor[4];
     float backColor[4];
     float borderColor[4];
     float outlineColor[4];
     Material *background;
 };
 struct ItemKeyHandler // sizeof=0xC
 {
     int key;
     const char *action;
     ItemKeyHandler *next;
 };
 union operandInternalDataUnion // sizeof=0x4
 {                                       // ...
     int intVal;
     float floatVal;
     const char *string;
 };
 struct Operand // sizeof=0x8
 {                                       // ...
     expDataType dataType;               // ...
     operandInternalDataUnion internals; // ...
 };
 union entryInternalData // sizeof=0x8
 {                                       // ...
     operationEnum op;
     Operand operand;
 };
 struct expressionEntry // sizeof=0xC
 {
     int type;
     entryInternalData data;
 };
 struct statement_s // sizeof=0x8
 {                                       // ...
     int numEntries;
     expressionEntry **entries;
 };
 struct menuDef_t // sizeof=0x11C
 {                                       // ...
     windowDef_t window;
     const char *font;
     int fullScreen;
     int itemCount;
     int fontIndex;
     int cursorItem[1];
     int fadeCycle;
     float fadeClamp;
     float fadeAmount;
     float fadeInAmount;
     float blurRadius;
     const char *onOpen;
     const char *onClose;
     const char *onESC;
     ItemKeyHandler *onKey;
     statement_s visibleExp;
     const char *allowedBinding;
     const char *soundName;
     int imageTrack;
     float focusColor[4];
     float disableColor[4];
     statement_s rectXExp;
     statement_s rectYExp;
     itemDef_s **items;
 };
 struct columnInfo_s // sizeof=0x10
 {                                       // ...
     int pos;
     int width;
     int maxChars;
     int alignment;
 };
 struct listBoxDef_s // sizeof=0x154
 {
     int mousePos;
     int startPos[1];
     int endPos[1];
     int drawPadding;
     float elementWidth;
     float elementHeight;
     int elementStyle;
     int numColumns;
     columnInfo_s columnInfo[16];
     const char *doubleClick;
     int notselectable;
     int noScrollBars;
     int usePaging;
     float selectBorder[4];
     float disableColor[4];
     Material *selectIcon;
 };
 struct editFieldDef_s // sizeof=0x20
 {
     float minVal;
     float maxVal;
     float defVal;
     float range;
     int maxChars;
     int maxCharsGotoNext;
     int maxPaintChars;
     int paintOffset;
 };
 struct multiDef_s // sizeof=0x188
 {
     const char *dvarList[32];
     const char *dvarStr[32];
     float dvarValue[32];
     int count;
     int strDef;
 };
 union itemDefData_t // sizeof=0x4
 {                                       // ...
     listBoxDef_s *listBox;
     editFieldDef_s *editField;
     multiDef_s *multi;
     const char *enumDvarName;
     void *data;
 };
 struct itemDef_s // sizeof=0x174
 {                                       // ...
     windowDef_t window;
     rectDef_s textRect[1];
     int type;
     int dataType;
     int alignment;
     int fontEnum;
     int textAlignMode;
     float textalignx;
     float textaligny;
     float textscale;
     int textStyle;
     int gameMsgWindowIndex;
     int gameMsgWindowMode;
     const char *text;
     int itemFlags;
     menuDef_t *parent;                  // ...
     const char *mouseEnterText;
     const char *mouseExitText;
     const char *mouseEnter;
     const char *mouseExit;
     const char *action;
     const char *onAccept;
     const char *onFocus;
     const char *leaveFocus;
     const char *dvar;
     const char *dvarTest;
     ItemKeyHandler *onKey;
     const char *enableDvar;
     int dvarFlags;
     snd_alias_list_t *focusSound;
     float special;
     int cursorPos[1];
     itemDefData_t typeData;
     int imageTrack;
     statement_s visibleExp;
     statement_s textExp;
     statement_s materialExp;
     statement_s rectXExp;
     statement_s rectYExp;
     statement_s rectWExp;
     statement_s rectHExp;
     statement_s forecolorAExp;
 };
 struct MenuList // sizeof=0xC
 {                                       // ...
     const char *name;
     int menuCount;                      // ...
     menuDef_t **menus;                  // ...
 };
 struct LocalizeEntry // sizeof=0x8
 {                                       // ...
     const char *value;
     const char *name;
 };
 struct WeaponDef // sizeof=0x878
 {                                       // ...
     const char *szInternalName;
     const char *szDisplayName;
     const char *szOverlayName;
     XModel *gunXModel[16];
     XModel *handXModel;
     const char *szXAnims[33];
     const char *szModeName;
     unsigned __int16 hideTags[8];
     unsigned __int16 notetrackSoundMapKeys[16];
     unsigned __int16 notetrackSoundMapValues[16];
     int playerAnimType;
     weapType_t weapType;
     weapClass_t weapClass;
     PenetrateType penetrateType;
     ImpactType impactType;
     weapInventoryType_t inventoryType;
     weapFireType_t fireType;
     OffhandClass offhandClass;
     weapStance_t stance;
     const FxEffectDef *viewFlashEffect;
     const FxEffectDef *worldFlashEffect;
     snd_alias_list_t *pickupSound;
     snd_alias_list_t *pickupSoundPlayer;
     snd_alias_list_t *ammoPickupSound;
     snd_alias_list_t *ammoPickupSoundPlayer;
     snd_alias_list_t *projectileSound;
     snd_alias_list_t *pullbackSound;
     snd_alias_list_t *pullbackSoundPlayer;
     snd_alias_list_t *fireSound;
     snd_alias_list_t *fireSoundPlayer;
     snd_alias_list_t *fireLoopSound;
     snd_alias_list_t *fireLoopSoundPlayer;
     snd_alias_list_t *fireStopSound;
     snd_alias_list_t *fireStopSoundPlayer;
     snd_alias_list_t *fireLastSound;
     snd_alias_list_t *fireLastSoundPlayer;
     snd_alias_list_t *emptyFireSound;
     snd_alias_list_t *emptyFireSoundPlayer;
     snd_alias_list_t *meleeSwipeSound;
     snd_alias_list_t *meleeSwipeSoundPlayer;
     snd_alias_list_t *meleeHitSound;
     snd_alias_list_t *meleeMissSound;
     snd_alias_list_t *rechamberSound;
     snd_alias_list_t *rechamberSoundPlayer;
     snd_alias_list_t *reloadSound;
     snd_alias_list_t *reloadSoundPlayer;
     snd_alias_list_t *reloadEmptySound;
     snd_alias_list_t *reloadEmptySoundPlayer;
     snd_alias_list_t *reloadStartSound;
     snd_alias_list_t *reloadStartSoundPlayer;
     snd_alias_list_t *reloadEndSound;
     snd_alias_list_t *reloadEndSoundPlayer;
     snd_alias_list_t *detonateSound;
     snd_alias_list_t *detonateSoundPlayer;
     snd_alias_list_t *nightVisionWearSound;
     snd_alias_list_t *nightVisionWearSoundPlayer;
     snd_alias_list_t *nightVisionRemoveSound;
     snd_alias_list_t *nightVisionRemoveSoundPlayer;
     snd_alias_list_t *altSwitchSound;
     snd_alias_list_t *altSwitchSoundPlayer;
     snd_alias_list_t *raiseSound;
     snd_alias_list_t *raiseSoundPlayer;
     snd_alias_list_t *firstRaiseSound;
     snd_alias_list_t *firstRaiseSoundPlayer;
     snd_alias_list_t *putawaySound;
     snd_alias_list_t *putawaySoundPlayer;
     snd_alias_list_t **bounceSound;
     const FxEffectDef *viewShellEjectEffect;
     const FxEffectDef *worldShellEjectEffect;
     const FxEffectDef *viewLastShotEjectEffect;
     const FxEffectDef *worldLastShotEjectEffect;
     Material *reticleCenter;
     Material *reticleSide;
     int iReticleCenterSize;
     int iReticleSideSize;
     int iReticleMinOfs;
     activeReticleType_t activeReticleType;
     float vStandMove[3];
     float vStandRot[3];
     float vDuckedOfs[3];
     float vDuckedMove[3];
     float vDuckedRot[3];
     float vProneOfs[3];
     float vProneMove[3];
     float vProneRot[3];
     float fPosMoveRate;
     float fPosProneMoveRate;
     float fStandMoveMinSpeed;
     float fDuckedMoveMinSpeed;
     float fProneMoveMinSpeed;
     float fPosRotRate;
     float fPosProneRotRate;
     float fStandRotMinSpeed;
     float fDuckedRotMinSpeed;
     float fProneRotMinSpeed;
     XModel *worldModel[16];
     XModel *worldClipModel;
     XModel *rocketModel;
     XModel *knifeModel;
     XModel *worldKnifeModel;
     Material *hudIcon;
     weaponIconRatioType_t hudIconRatio;
     Material *ammoCounterIcon;
     weaponIconRatioType_t ammoCounterIconRatio;
     ammoCounterClipType_t ammoCounterClip;
     int iStartAmmo;
     const char *szAmmoName;
     int iAmmoIndex;
     const char *szClipName;
     int iClipIndex;
     int iMaxAmmo;
     int iClipSize;
     int shotCount;
     const char *szSharedAmmoCapName;
     int iSharedAmmoCapIndex;
     int iSharedAmmoCap;
     int damage;
     int playerDamage;
     int iMeleeDamage;
     int iDamageType;
     int iFireDelay;
     int iMeleeDelay;
     int meleeChargeDelay;
     int iDetonateDelay;
     int iFireTime;
     int iRechamberTime;
     int iRechamberBoltTime;
     int iHoldFireTime;
     int iDetonateTime;
     int iMeleeTime;
     int meleeChargeTime;
     int iReloadTime;
     int reloadShowRocketTime;
     int iReloadEmptyTime;
     int iReloadAddTime;
     int iReloadStartTime;
     int iReloadStartAddTime;
     int iReloadEndTime;
     int iDropTime;
     int iRaiseTime;
     int iAltDropTime;
     int iAltRaiseTime;
     int quickDropTime;
     int quickRaiseTime;
     int iFirstRaiseTime;
     int iEmptyRaiseTime;
     int iEmptyDropTime;
     int sprintInTime;
     int sprintLoopTime;
     int sprintOutTime;
     int nightVisionWearTime;
     int nightVisionWearTimeFadeOutEnd;
     int nightVisionWearTimePowerUp;
     int nightVisionRemoveTime;
     int nightVisionRemoveTimePowerDown;
     int nightVisionRemoveTimeFadeInStart;
     int fuseTime;
     int aiFuseTime;
     int requireLockonToFire;
     int noAdsWhenMagEmpty;
     int avoidDropCleanup;
     float autoAimRange;
     float aimAssistRange;
     float aimAssistRangeAds;
     float aimPadding;
     float enemyCrosshairRange;
     int crosshairColorChange;
     float moveSpeedScale;
     float adsMoveSpeedScale;
     float sprintDurationScale;
     float fAdsZoomFov;
     float fAdsZoomInFrac;
     float fAdsZoomOutFrac;
     Material *overlayMaterial;
     Material *overlayMaterialLowRes;
     weapOverlayReticle_t overlayReticle;
     WeapOverlayInteface_t overlayInterface;
     float overlayWidth;
     float overlayHeight;
     float fAdsBobFactor;
     float fAdsViewBobMult;
     float fHipSpreadStandMin;
     float fHipSpreadDuckedMin;
     float fHipSpreadProneMin;
     float hipSpreadStandMax;
     float hipSpreadDuckedMax;
     float hipSpreadProneMax;
     float fHipSpreadDecayRate;
     float fHipSpreadFireAdd;
     float fHipSpreadTurnAdd;
     float fHipSpreadMoveAdd;
     float fHipSpreadDuckedDecay;
     float fHipSpreadProneDecay;
     float fHipReticleSidePos;
     int iAdsTransInTime;
     int iAdsTransOutTime;
     float fAdsIdleAmount;
     float fHipIdleAmount;
     float adsIdleSpeed;
     float hipIdleSpeed;
     float fIdleCrouchFactor;
     float fIdleProneFactor;
     float fGunMaxPitch;
     float fGunMaxYaw;
     float swayMaxAngle;
     float swayLerpSpeed;
     float swayPitchScale;
     float swayYawScale;
     float swayHorizScale;
     float swayVertScale;
     float swayShellShockScale;
     float adsSwayMaxAngle;
     float adsSwayLerpSpeed;
     float adsSwayPitchScale;
     float adsSwayYawScale;
     float adsSwayHorizScale;
     float adsSwayVertScale;
     int bRifleBullet;
     int armorPiercing;
     int bBoltAction;
     int aimDownSight;
     int bRechamberWhileAds;
     float adsViewErrorMin;
     float adsViewErrorMax;
     int bCookOffHold;
     int bClipOnly;
     int adsFireOnly;
     int cancelAutoHolsterWhenEmpty;
     int suppressAmmoReserveDisplay;
     int enhanced;
     int laserSightDuringNightvision;
     Material *killIcon;
     weaponIconRatioType_t killIconRatio;
     int flipKillIcon;
     Material *dpadIcon;
     weaponIconRatioType_t dpadIconRatio;
     int bNoPartialReload;
     int bSegmentedReload;
     int iReloadAmmoAdd;
     int iReloadStartAdd;
     const char *szAltWeaponName;
     unsigned int altWeaponIndex;
     int iDropAmmoMin;
     int iDropAmmoMax;
     int blocksProne;
     int silenced;
     int iExplosionRadius;
     int iExplosionRadiusMin;
     int iExplosionInnerDamage;
     int iExplosionOuterDamage;
     float damageConeAngle;
     int iProjectileSpeed;
     int iProjectileSpeedUp;
     int iProjectileSpeedForward;
     int iProjectileActivateDist;
     float projLifetime;
     float timeToAccelerate;
     float projectileCurvature;
     XModel *projectileModel;
     weapProjExposion_t projExplosion;
     const FxEffectDef *projExplosionEffect;
     int projExplosionEffectForceNormalUp;
     const FxEffectDef *projDudEffect;
     snd_alias_list_t *projExplosionSound;
     snd_alias_list_t *projDudSound;
     int bProjImpactExplode;
     WeapStickinessType stickiness;
     int hasDetonator;
     int timedDetonation;
     int rotate;
     int holdButtonToThrow;
     int freezeMovementWhenFiring;
     float lowAmmoWarningThreshold;
     float parallelBounce[29];
     float perpendicularBounce[29];
     const FxEffectDef *projTrailEffect;
     float vProjectileColor[3];
     guidedMissileType_t guidedMissileType;
     float maxSteeringAccel;
     int projIgnitionDelay;
     const FxEffectDef *projIgnitionEffect;
     snd_alias_list_t *projIgnitionSound;
     float fAdsAimPitch;
     float fAdsCrosshairInFrac;
     float fAdsCrosshairOutFrac;
     int adsGunKickReducedKickBullets;
     float adsGunKickReducedKickPercent;
     float fAdsGunKickPitchMin;
     float fAdsGunKickPitchMax;
     float fAdsGunKickYawMin;
     float fAdsGunKickYawMax;
     float fAdsGunKickAccel;
     float fAdsGunKickSpeedMax;
     float fAdsGunKickSpeedDecay;
     float fAdsGunKickStaticDecay;
     float fAdsViewKickPitchMin;
     float fAdsViewKickPitchMax;
     float fAdsViewKickYawMin;
     float fAdsViewKickYawMax;
     float fAdsViewKickCenterSpeed;
     float fAdsViewScatterMin;
     float fAdsViewScatterMax;
     float fAdsSpread;
     int hipGunKickReducedKickBullets;
     float hipGunKickReducedKickPercent;
     float fHipGunKickPitchMin;
     float fHipGunKickPitchMax;
     float fHipGunKickYawMin;
     float fHipGunKickYawMax;
     float fHipGunKickAccel;
     float fHipGunKickSpeedMax;
     float fHipGunKickSpeedDecay;
     float fHipGunKickStaticDecay;
     float fHipViewKickPitchMin;
     float fHipViewKickPitchMax;
     float fHipViewKickYawMin;
     float fHipViewKickYawMax;
     float fHipViewKickCenterSpeed;
     float fHipViewScatterMin;
     float fHipViewScatterMax;
     float fightDist;
     float maxDist;
     const char *accuracyGraphName[2];
     float (*accuracyGraphKnots[2])[2];
     float (*originalAccuracyGraphKnots[2])[2];
     int accuracyGraphKnotCount[2];
     int originalAccuracyGraphKnotCount[2];
     int iPositionReloadTransTime;
     float leftArc;
     float rightArc;
     float topArc;
     float bottomArc;
     float accuracy;
     float aiSpread;
     float playerSpread;
     float minTurnSpeed[2];
     float maxTurnSpeed[2];
     float pitchConvergenceTime;
     float yawConvergenceTime;
     float suppressTime;
     float maxRange;
     float fAnimHorRotateInc;
     float fPlayerPositionDist;
     const char *szUseHintString;
     const char *dropHintString;
     int iUseHintStringIndex;
     int dropHintStringIndex;
     float horizViewJitter;
     float vertViewJitter;
     const char *szScript;
     float fOOPosAnimLength[2];
     int minDamage;
     int minPlayerDamage;
     float fMaxDamageRange;
     float fMinDamageRange;
     float destabilizationRateTime;
     float destabilizationCurvatureMax;
     int destabilizeDistance;
     float locationDamageMultipliers[19];
     const char *fireRumble;
     const char *meleeImpactRumble;
     float adsDofStart;
     float adsDofEnd;
 };
 struct SndDriverGlobals // sizeof=0x4
 {                                       // ...
     const char *name;
 };
 struct RawFile // sizeof=0xC
 {                                       // ...
     const char *name;
     int len;
     const char *buffer;
 };
 struct StringTable // sizeof=0x10
 {                                       // ...
     const char *name;
     int columnCount;
     int rowCount;
     const char **values;
 };
 union XAssetHeader // sizeof=0x4
 {                                       // ...
     XModelPieces *xmodelPieces;
     PhysPreset *physPreset;
     XAnimParts *parts;
     XModel *model;
     Material *material;
     MaterialPixelShader *pixelShader;
     MaterialVertexShader *vertexShader;
     MaterialTechniqueSet *techniqueSet;
     GfxImage *image;
     snd_alias_list_t *sound;
     SndCurve *sndCurve;
     LoadedSound *loadSnd;
     clipMap_t *clipMap;
     ComWorld *comWorld;
     GameWorldSp *gameWorldSp;
     GameWorldMp *gameWorldMp;
     MapEnts *mapEnts;
     GfxWorld *gfxWorld;
     GfxLightDef *lightDef;
     Font_s *font;
     MenuList *menuList;
     menuDef_t *menu;
     LocalizeEntry *localize;
     WeaponDef *weapon;
     SndDriverGlobals *sndDriverGlobals;
     const FxEffectDef *fx;
     FxImpactTable *impactFx;
     RawFile *rawfile;
     StringTable *stringTable;
     void *data;
 };
 struct MaterialConstantDefRaw // sizeof=0x14
 {
     unsigned int nameOffset;
     float literal[4];
 };
 struct clientState_s // sizeof=0x64
 {                                       // ...
     int clientIndex;
     team_t team;                        // ...
     int modelindex;
     int attachModelIndex[6];            // ...
     int attachTagIndex[6];              // ...
     char name[16];                      // ...
     float maxSprintTimeMultiplier;      // ...
     int rank;
     int prestige;
     int perks;
     int attachedVehEntNum;
     int attachedVehSlotIndex;           // ...
 };
 struct cmd_function_s // sizeof=0x14
 {                                       // ...
     cmd_function_s *next;
     const char *name;
     const char *autoCompleteDir;
     const char *autoCompleteExt;
     void (__cdecl *function)();
 };
 struct ClientVoicePacket_t // sizeof=0x104
 {                                       // ...
     unsigned __int8 data[256];
     int dataSize;
 };
 struct clSnapshot_t // sizeof=0x2F94
 {                                       // ...
     int valid;                          // ...
     int snapFlags;                      // ...
     int serverTime;                     // ...
     int messageNum;                     // ...
     int deltaNum;                       // ...
     int ping;
     int cmdNum;
     playerState_s ps;                   // ...
     int numEntities;
     int numClients;
     int parseEntitiesNum;
     int parseClientsNum;
     int serverCommandNum;               // ...
 };
 union LerpEntityStateTypeUnion // sizeof=0x1C
 {                                       // ...
     LerpEntityStateTurret turret;
     LerpEntityStateLoopFx loopFx;
     LerpEntityStatePrimaryLight primaryLight;
     LerpEntityStatePlayer player;
     LerpEntityStateVehicle vehicle;
     LerpEntityStateMissile missile;
     LerpEntityStateSoundBlend soundBlend;
     LerpEntityStateBulletHit bulletHit;
     LerpEntityStateEarthquake earthquake;
     LerpEntityStateCustomExplode customExplode;
     LerpEntityStateExplosion explosion;
     LerpEntityStateExplosionJolt explosionJolt;
     LerpEntityStatePhysicsJitter physicsJitter;
     LerpEntityStateAnonymous anonymous;
 };
 struct outPacket_t // sizeof=0xC
 {                                       // ...
     int p_cmdNumber;
     int p_serverTime;
     int p_realtime;
 };
 struct snd_save_stream_t // sizeof=0x20
 {                                       // ...
     float fraction;                     // ...
     int rate;                           // ...
     float basevolume;                   // ...
     float volume;
     float pan;
     float org[3];                       // ...
 };
 struct DObjSkelMat // sizeof=0x40
 {                                       // ...
     float axis[3][4];
     float origin[4];
 };
 struct stat // sizeof=0x30
 {
     unsigned int st_dev;
     unsigned __int16 st_ino;
     unsigned __int16 st_mode;
     __int16 st_nlink;
     __int16 st_uid;
     __int16 st_gid;
     // padding byte
     // padding byte
     unsigned int st_rdev;
     int st_size;
     __int64 st_atime;
     __int64 st_mtime;
     __int64 st_ctime;
 };
 struct gameState_t // sizeof=0x2262C
 {                                       // ...
     int stringOffsets[2442];
     char stringData[131072];
     int dataCount;
 };
 struct __declspec(align(2)) usercmd_s // sizeof=0x20
 {                                       // ...
     int serverTime;                     // ...
     int buttons;                        // ...
     int angles[3];                      // ...
     unsigned __int8 weapon;             // ...
     unsigned __int8 offHandIndex;
     char forwardmove;                   // ...
     char rightmove;                     // ...
     float meleeChargeYaw;               // ...
     unsigned __int8 meleeChargeDist;    // ...
     char selectedLocation[2];
     // padding byte
 };
 struct ClientArchiveData // sizeof=0x30
 {                                       // ...
     int serverTime;
     float origin[3];
     float velocity[3];
     int bobCycle;
     int movementDir;
     float viewangles[3];
 };
 struct LerpEntityState // sizeof=0x68
 {                                       // ...
     int eFlags;                         // ...
     trajectory_t pos;                   // ...
     trajectory_t apos;                  // ...
     LerpEntityStateTypeUnion u;
 };
 union entityState_s_type_index // sizeof=0x4
 {                                       // ...
     int brushmodel;
     int item;
     int xmodel;
     int primaryLight;
 };
 union entityState_s_un1 // sizeof=0x4
 {                                       // ...
     int scale;
     int eventParm2;
     int helicopterStage;
 };
 union entityState_s_un2 // sizeof=0x4
 {                                       // ...
     int hintString;
     int vehicleXModel;
 };
 struct entityState_s // sizeof=0xF4
 {                                       // ...
     int number;
     int eType;                          // ...
     LerpEntityState lerp;               // ...
     int time2;
     int otherEntityNum;                 // ...
     int attackerEntityNum;
     int groundEntityNum;
     int loopSound;
     int surfType;
     entityState_s_type_index index;     // ...
     int clientNum;
     int iHeadIcon;
     int iHeadIconTeam;                  // ...
     int solid;
     unsigned int eventParm;
     int eventSequence;
     int events[4];                      // ...
     int eventParms[4];
     int weapon;
     int weaponModel;
     int legsAnim;
     int torsoAnim;
     entityState_s_un1 un1;              // ...
     entityState_s_un2 un2;
     float fTorsoPitch;
     float fWaistPitch;
     unsigned int partBits[4];           // ...
 };
 struct clientActive_t // sizeof=0x1B1BDC
 {                                       // ...
     bool usingAds;
     // padding byte
     // padding byte
     // padding byte
     int timeoutcount;
     clSnapshot_t snap;
     bool alwaysFalse;
     // padding byte
     // padding byte
     // padding byte
     int serverTime;
     int oldServerTime;
     int oldFrameServerTime;
     int serverTimeDelta;
     int oldSnapServerTime;
     int extrapolatedSnapshot;
     int newSnapshots;
     gameState_t gameState;
     char mapname[64];
     int parseEntitiesNum;
     int parseClientsNum;
     int mouseDx[2];
     int mouseDy[2];
     int mouseIndex;
     bool stanceHeld;
     // padding byte
     // padding byte
     // padding byte
     StanceState stance;
     StanceState stancePosition;
     int stanceTime;
     int cgameUserCmdWeapon;
     int cgameUserCmdOffHandIndex;
     float cgameFOVSensitivityScale;
     float cgameMaxPitchSpeed;
     float cgameMaxYawSpeed;
     float cgameKickAngles[3];
     float cgameOrigin[3];
     float cgameVelocity[3];
     float cgameViewangles[3];
     int cgameBobCycle;
     int cgameMovementDir;
     int cgameExtraButtons;
     int cgamePredictedDataServerTime;
     float viewangles[3];
     int serverId;
     int skelTimeStamp;                  // ...
     volatile int skelMemPos;            // ...
     char skelMemory[262144];
     char *skelMemoryStart;              // ...
     bool allowedAllocSkel;
     // padding byte
     // padding byte
     // padding byte
     usercmd_s cmds[128];
     int cmdNumber;
     ClientArchiveData clientArchive[256];
     int clientArchiveIndex;
     outPacket_t outPackets[32];
     clSnapshot_t snapshots[32];         // ...
     entityState_s entityBaselines[1024];
     entityState_s parseEntities[2048];  // ...
     clientState_s parseClients[2048];   // ...
     int corruptedTranslationFile;
     char translationVersion[256];
     float vehicleViewYaw;
     float vehicleViewPitch;
 };
 struct MaterialRaw // sizeof=0x40
 {
     MaterialInfoRaw info;
     unsigned int refStateBits[2];
     unsigned __int16 textureCount;
     unsigned __int16 constantCount;
     unsigned int techSetNameOffset;
     unsigned int textureTableOffset;
     unsigned int constantTableOffset;
 };
 struct netProfileInfo_t // sizeof=0x5E0
 {                                       // ...
     netProfileStream_t send;
     netProfileStream_t recieve;         // ...
 };
 struct SndStartAliasInfo // sizeof=0x38
 {                                       // ...
     const snd_alias_t *alias0;          // ...
     const snd_alias_t *alias1;          // ...
     float lerp;                         // ...
     SndEntHandle sndEnt;                // ...
     float org[3];                       // ...
     float volume;                       // ...
     float pitch;                        // ...
     int timeshift;                      // ...
     float fraction;                     // ...
     int startDelay;                     // ...
     bool master;                        // ...
     bool timescale;                     // ...
     // padding byte
     // padding byte
     snd_alias_system_t system;          // ...
 };
 struct __cppobj ProfileEnder // sizeof=0x0
 {
 };
 struct snd_save_3D_sample_t // sizeof=0x18
 {                                       // ...
     float fraction;                     // ...
     float pitch;                        // ...
     float volume;
     float org[3];                       // ...
 };
 union MaterialTextureDefRaw::<unnamed_type_u> // sizeof=0x4
 {                                       // ...
     unsigned int imageNameOffset;
     unsigned int waterDefOffset;
 };
 struct MaterialTextureDefRaw // sizeof=0xC
 {
     unsigned int nameOffset;
     unsigned __int8 samplerState;
     unsigned __int8 semantic;
     // padding byte
     // padding byte
     MaterialTextureDefRaw::<unnamed_type_u> u;
 };
 struct netadr_t // sizeof=0x14
 {                                       // ...
     netadrtype_t type;                  // ...
     unsigned __int8 ip[4];              // ...
     unsigned __int16 port;              // ...
     unsigned __int8 ipx[10];            // ...
 };
 struct snd_overlay_info_t // sizeof=0x110
 {                                       // ...
     char pszSampleName[128];            // ...
     char aliasName[64];                 // ...
     char entchannel[64];                // ...
     float fBaseVolume;                  // ...
     float fCurVolume;                   // ...
     int dist;                           // ...
     float fPitch;                       // ...
 };
 struct __declspec(align(4)) SndEqParams // sizeof=0x14
 {                                       // ...
     SND_EQTYPE type;                    // ...
     float gain;                         // ...
     float freq;                         // ...
     float q;                            // ...
     bool enabled;                       // ...
     // padding byte
     // padding byte
     // padding byte
 };
 struct snd_eqoverlay_info_t // sizeof=0x1C
 {                                       // ...
     SndEqParams *params[2][3];
     float lerp;                         // ...
 };
 struct snd_save_2D_sample_t // sizeof=0x10
 {                                       // ...
     float fraction;                     // ...
     float pitch;                        // ...
     float volume;
     float pan;
 };
 struct netchan_t // sizeof=0x62C
 {                                       // ...
     int outgoingSequence;
     netsrc_t sock;
     int dropped;
     int incomingSequence;
     netadr_t remoteAddress;             // ...
     int qport;
     int fragmentSequence;
     int fragmentLength;
     unsigned __int8 *fragmentBuffer;
     int fragmentBufferSize;
     int unsentFragments;
     int unsentFragmentStart;
     int unsentLength;
     unsigned __int8 *unsentBuffer;
     int unsentBufferSize;
     netProfileInfo_t prof;
 };
 struct clientConnection_t // sizeof=0x615E8
 {                                       // ...
     int qport;
     int clientNum;
     int lastPacketSentTime;
     int lastPacketTime;
     netadr_t serverAddress;
     int connectTime;
     int connectPacketCount;
     char serverMessage[256];
     int challenge;
     int checksumFeed;
     int reliableSequence;
     int reliableAcknowledge;
     char reliableCommands[128][1024];
     int serverMessageSequence;
     int serverCommandSequence;
     int lastExecutedServerCommand;
     char serverCommands[128][1024];     // ...
     bool isServerRestarting;
     // padding byte
     // padding byte
     // padding byte
     int lastClientArchiveIndex;
     char demoName[64];
     int demorecording;
     int demoplaying;
     int isTimeDemo;
     int demowaiting;
     int firstDemoFrameSkipped;
     int demofile;
     int timeDemoLog;
     int timeDemoFrames;
     int timeDemoStart;
     int timeDemoPrev;
     int timeDemoBaseTime;
     netchan_t netchan;
     char netchanOutgoingBuffer[2048];
     char netchanIncomingBuffer[131072];
     netProfileInfo_t OOBProf;
     unsigned __int8 statPacketsToSend;
     // padding byte
     // padding byte
     // padding byte
     int statPacketSendTime[7];
 };
 struct XAnimParent // sizeof=0x4
 {                                       // ...
     unsigned __int16 flags;
     unsigned __int16 children;
 };
 union $7F333398CC08E12E110886895274CBFC // sizeof=0x4
 {                                       // ...
     XAnimParts *parts;
     XAnimParent animParent;
 };
 struct XAnimEntry // sizeof=0x8
 {                                       // ...
     unsigned __int16 numAnims;
     unsigned __int16 parent;
     $7F333398CC08E12E110886895274CBFC ___u2;
 };
 struct XAnim_s // sizeof=0x14
 {
     const char *debugName;
     unsigned int size;
     const char **debugAnimNames;
     XAnimEntry entries[1];
 };
 struct __declspec(align(4)) XAnimTree_s // sizeof=0x14
 {
     XAnim_s *anims;
     int info_usage;
     volatile int calcRefCount;
     volatile int modifyRefCount;
     unsigned __int16 children;
     // padding byte
     // padding byte
 };
 struct DSkelPartBits // sizeof=0x30
 {                                       // ...
     int anim[4];                        // ...
     int control[4];                     // ...
     int skel[4];                        // ...
 };
 struct DSkel // sizeof=0x38
 {                                       // ...
     DSkelPartBits partBits;             // ...
     int timeStamp;                      // ...
     DObjAnimMat *mat;                   // ...
 };
 struct DObj_s // sizeof=0x64
 {
     XAnimTree_s *tree;
     unsigned __int16 duplicateParts;
     unsigned __int16 entnum;
     unsigned __int8 duplicatePartsSize;
     unsigned __int8 numModels;
     unsigned __int8 numBones;
     // padding byte
     unsigned int ignoreCollision;
     volatile int locked;
     DSkel skel;
     float radius;
     unsigned int hidePartBits[4];
     XModel **models;
 };
 struct voiceCommunication_t // sizeof=0xA30
 {                                       // ...
     ClientVoicePacket_t voicePackets[10];
     int voicePacketCount;
     int voicePacketLastTransmit;
 };
 struct _stat64i32 // sizeof=0x30
 {                                       // ...
     unsigned int st_dev;
     unsigned __int16 st_ino;
     unsigned __int16 st_mode;
     __int16 st_nlink;
     __int16 st_uid;
     __int16 st_gid;
     // padding byte
     // padding byte
     unsigned int st_rdev;
     int st_size;
     __int64 st_atime;
     __int64 st_mtime;
     __int64 st_ctime;
 };
 struct __cppobj stPbSv // sizeof=0x168
 {                                       // ...
     unsigned int m_svId;
     void *m_Md5;
     void *m_SvInstance;                 // ...
     void *m_ClInstance;
     void *m_AgInstance;
     char m_msgPrefix[32];               // ...
     char m_cwd[257];
     // padding byte
     // padding byte
     // padding byte
     int m_ReloadServer;                 // ...
     char *(__cdecl *m_GameCommand)(char *, char *); // ...
     char *(__cdecl *m_GameQuery)(int, char *);
     char *(__cdecl *m_GameMsg)(char *, int);
     char *(__cdecl *m_SendToClient)(int, char *, int);
     char *(__cdecl *m_AddPbEvent)(void *, int, int, int, char *, int); // ...
     char *(__cdecl *m_ProcessPbEvents)(void *, int);
     char *(__cdecl *m_SendToAddrPort)(char *, unsigned __int16, int, char *);
     char *(__cdecl *m_PassConnectString)(void *, char *, char *); // ...
     char *(__cdecl *m_AuthClient)(void *, char *, int, char *); // ...
     void (__cdecl *m_TrapConsole)(void *, char *, int); // ...
     void *m_Agent;
 };
 struct HINSTANCE__ // sizeof=0x4
 {
     int unused;
 };
 struct Pb_Sv_Client_s // sizeof=0x68
 {
     char name[33];
     char guid[33];
     char ip[33];
     // padding byte
     int slotIndex;
 };
 struct MD5_CTX // sizeof=0x68
 {                                       // ...
     unsigned int i[2];
     unsigned int buf[4];
     unsigned __int8 in[64];
     unsigned __int8 digest[16];         // ...
 };
 struct __cppobj stPbCl // sizeof=0x1A8
 {                                       // ...
     int m_clId;
     void *m_Md5;
     void *m_ClInstance;                 // ...
     void *m_AgInstance;                 // ...
     int m_ReloadClient;
     char m_guid[33];
     char m_msgPrefix[32];               // ...
     char m_cwd[256];
     char m_CdKeyNums[17];
     // padding byte
     // padding byte
     unsigned int rk1;
     unsigned int rk2;
     unsigned int rk3;
     unsigned int rk4;
     char *(__cdecl *m_GameCommand)(char *, char *);
     char *(__cdecl *m_GameQuery)(int, char *);
     char *(__cdecl *m_GameMsg)(char *, int);
     char *(__cdecl *m_SendToServer)(int, char *);
     char *(__cdecl *m_AddPbEvent)(void *, int, int, char *, int);
     char *(__cdecl *m_ProcessPbEvents)(void *, int);
     char *(__cdecl *m_SendToAddrPort)(char *, unsigned __int16, int, char *);
     char *(__cdecl *m_GlQuery)(int);
     char *(__cdecl *m_ClientConnect)(void *, int, char *, int *); // ...
     int (__cdecl *m_TrapPreExecCmd)(void *, char *); // ...
     void (__cdecl *m_TrapConsole)(void *, char *, int); // ...
     void *pbsvptr;                      // ...
 };
 struct BINKIO // sizeof=0x144
 {                                       // ...
     unsigned int (__stdcall *ReadHeader)(BINKIO *, int, void *, unsigned int);
     unsigned int (__stdcall *ReadFrame)(BINKIO *, unsigned int, int, void *, unsigned int);
     unsigned int (__stdcall *GetBufferSize)(BINKIO *, unsigned int);
     void (__stdcall *SetInfo)(BINKIO *, void *, unsigned int, unsigned int, unsigned int);
     unsigned int (__stdcall *Idle)(BINKIO *);
     void (__stdcall *Close)(BINKIO *);
     int (__stdcall *BGControl)(BINKIO *, unsigned int);
     BINK *bink;
     volatile unsigned int ReadError;
     volatile unsigned int DoingARead;
     volatile unsigned int BytesRead;
     volatile unsigned int Working;
     volatile unsigned int TotalTime;
     volatile unsigned int ForegroundTime;
     volatile unsigned int IdleTime;
     volatile unsigned int ThreadTime;
     volatile unsigned int BufSize;
     volatile unsigned int BufHighUsed;
     volatile unsigned int CurBufSize;
     volatile unsigned int CurBufUsed;
     volatile unsigned int Suspended;
     volatile unsigned __int8 iodata[160];
     void (__stdcall *suspend_callback)(BINKIO *);
     int (__stdcall *try_suspend_callback)(BINKIO *);
     void (__stdcall *resume_callback)(BINKIO *);
     void (__stdcall *idle_on_callback)(BINKIO *);
     volatile unsigned int callback_control[16];
 };
 struct BINKRECT // sizeof=0x10
 {                                       // ...
     int Left;
     int Top;
     int Width;
     int Height;
 };
 struct BINKPLANE // sizeof=0xC
 {                                       // ...
     int Allocate;                       // ...
     void *Buffer;
     unsigned int BufferPitch;
 };
 struct BINKFRAMEPLANESET // sizeof=0x30
 {                                       // ...
     BINKPLANE YPlane;
     BINKPLANE cRPlane;
     BINKPLANE cBPlane;
     BINKPLANE APlane;                   // ...
 };
 struct BINKFRAMEBUFFERS // sizeof=0x78
 {                                       // ...
     int TotalFrames;                    // ...
     unsigned int YABufferWidth;
     unsigned int YABufferHeight;
     unsigned int cRcBBufferWidth;
     unsigned int cRcBBufferHeight;
     unsigned int FrameNum;              // ...
     BINKFRAMEPLANESET Frames[2];        // ...
 };
 struct BINKSND // sizeof=0x17C
 {
     int (__stdcall *Ready)(BINKSND *);
     int (__stdcall *Lock)(BINKSND *, unsigned __int8 **, unsigned int *);
     int (__stdcall *Unlock)(BINKSND *, unsigned int);
     void (__stdcall *Volume)(BINKSND *, int);
     void (__stdcall *Pan)(BINKSND *, int);
     int (__stdcall *Pause)(BINKSND *, int);
     int (__stdcall *SetOnOff)(BINKSND *, int);
     void (__stdcall *Close)(BINKSND *);
     void (__stdcall *MixBins)(BINKSND *, unsigned int *, unsigned int);
     void (__stdcall *MixBinVols)(BINKSND *, unsigned int *, int *, unsigned int);
     unsigned int sndbufsize;
     unsigned __int8 *sndbuf;
     unsigned __int8 *sndend;
     unsigned __int8 *sndwritepos;
     unsigned __int8 *sndreadpos;
     unsigned int sndcomp;
     unsigned int sndamt;
     unsigned int sndconvert8;
     unsigned int sndendframe;
     unsigned int sndprime;
     unsigned int sndpad;
     unsigned int BestSizeIn16;
     unsigned int BestSizeMask;
     unsigned int SoundDroppedOut;
     int NoThreadService;
     int OnOff;
     unsigned int Latency;
     unsigned int VideoScale;
     unsigned int freq;
     int bits;
     int chans;
     unsigned __int8 snddata[256];
 };
 struct BUNDLEPOINTERS // sizeof=0x24
 {                                       // ...
     void *typeptr;
     void *type16ptr;
     void *colorptr;
     void *bits2ptr;
     void *motionXptr;
     void *motionYptr;
     void *dctptr;
     void *mdctptr;
     void *patptr;
 };
 struct BINK // sizeof=0x388
 {
     unsigned int Width;
     unsigned int Height;
     unsigned int Frames;
     unsigned int FrameNum;
     unsigned int LastFrameNum;
     unsigned int FrameRate;
     unsigned int FrameRateDiv;
     unsigned int ReadError;
     unsigned int OpenFlags;
     unsigned int BinkType;
     unsigned int Size;
     unsigned int FrameSize;
     unsigned int SndSize;
     BINKRECT FrameRects[8];
     int NumRects;
     BINKFRAMEBUFFERS *FrameBuffers;
     void *MaskPlane;
     unsigned int MaskPitch;
     unsigned int MaskLength;
     unsigned int LargestFrameSize;
     unsigned int InternalFrames;
     int NumTracks;
     unsigned int Highest1SecRate;
     unsigned int Highest1SecFrame;
     int Paused;
     unsigned int BackgroundThread;
     void *compframe;
     void *preloadptr;
     unsigned int *frameoffsets;
     BINKIO bio;
     unsigned __int8 *ioptr;
     unsigned int iosize;
     unsigned int decompwidth;
     unsigned int decompheight;
     int *trackindexes;
     unsigned int *tracksizes;
     unsigned int *tracktypes;
     int *trackIDs;
     unsigned int numrects;
     unsigned int playedframes;
     unsigned int firstframetime;
     unsigned int startframetime;
     unsigned int startblittime;
     unsigned int startsynctime;
     unsigned int startsyncframe;
     unsigned int twoframestime;
     unsigned int entireframetime;
     unsigned int slowestframetime;
     unsigned int slowestframe;
     unsigned int slowest2frametime;
     unsigned int slowest2frame;
     unsigned int soundon;
     unsigned int videoon;
     unsigned int totalmem;
     unsigned int timevdecomp;
     unsigned int timeadecomp;
     unsigned int timeblit;
     unsigned int timeopen;
     unsigned int fileframerate;
     unsigned int fileframeratediv;
     unsigned int runtimeframes;
     int rtindex;
     unsigned int *rtframetimes;
     unsigned int *rtadecomptimes;
     unsigned int *rtvdecomptimes;
     unsigned int *rtblittimes;
     unsigned int *rtreadtimes;
     unsigned int *rtidlereadtimes;
     unsigned int *rtthreadreadtimes;
     unsigned int lastblitflags;
     unsigned int lastdecompframe;
     unsigned int lastresynctime;
     unsigned int doresync;
     unsigned int skipcount;
     unsigned int toofewskipstomask;
     unsigned int playingtracks;
     unsigned int soundskips;
     BINKSND *bsnd;
     unsigned int skippedlastblit;
     unsigned int skipped_status_this_frame;
     unsigned int very_delayed;
     unsigned int skippedblits;
     BUNDLEPOINTERS bunp;
     unsigned int skipped_in_a_row;
     unsigned int paused_sync_diff;
     unsigned int last_time_almost_empty;
     unsigned int last_read_count;
     unsigned int last_sound_count;
     unsigned int snd_callback_buffer[16];
     int allkeys;
     unsigned int compframesize;
     BINKFRAMEBUFFERS *allocatedframebuffers;
 };
 struct __cppobj D3DXCOLOR // sizeof=0x10
 {
     float r;
     float g;
     float b;
     float a;
 };
 struct __cppobj D3DXFLOAT16 // sizeof=0x2
 {                                       // ...
     unsigned __int16 value;
 };
 struct __cppobj D3DXVECTOR3 : _D3DVECTOR // sizeof=0xC
 {
 };
 struct _D3DXFONT_DESCA // sizeof=0x38
 {
     int Height;
     unsigned int Width;
     unsigned int Weight;
     unsigned int MipLevels;
     int Italic;
     unsigned __int8 CharSet;
     unsigned __int8 OutputPrecision;
     unsigned __int8 Quality;
     unsigned __int8 PitchAndFamily;
     char FaceName[32];
 };
 struct __declspec(align(4)) tagTEXTMETRICA // sizeof=0x38
 {
     int tmHeight;
     int tmAscent;
     int tmDescent;
     int tmInternalLeading;
     int tmExternalLeading;
     int tmAveCharWidth;
     int tmMaxCharWidth;
     int tmWeight;
     int tmOverhang;
     int tmDigitizedAspectX;
     int tmDigitizedAspectY;
     unsigned __int8 tmFirstChar;
     unsigned __int8 tmLastChar;
     unsigned __int8 tmDefaultChar;
     unsigned __int8 tmBreakChar;
     unsigned __int8 tmItalic;
     unsigned __int8 tmUnderlined;
     unsigned __int8 tmStruckOut;
     unsigned __int8 tmPitchAndFamily;
     unsigned __int8 tmCharSet;
     // padding byte
     // padding byte
     // padding byte
 };
 struct _D3DXMACRO // sizeof=0x8
 {
     const char *Name;
     const char *Definition;
 };
 struct BINKFRAMETEXTURES // sizeof=0x20
 {                                       // ...
     unsigned int Ysize;
     unsigned int cRsize;
     unsigned int cBsize;
     unsigned int Asize;
     IDirect3DTexture9 *Ytexture;
     IDirect3DTexture9 *cRtexture;
     IDirect3DTexture9 *cBtexture;
     IDirect3DTexture9 *Atexture;
 };
 struct _D3DXCONSTANT_DESC // sizeof=0x30
 {
     const char *Name;
     _D3DXREGISTER_SET RegisterSet;
     unsigned int RegisterIndex;
     unsigned int RegisterCount;
     _D3DXPARAMETER_CLASS Class;
     _D3DXPARAMETER_TYPE Type;
     unsigned int Rows;
     unsigned int Columns;
     unsigned int Elements;
     unsigned int StructMembers;
     unsigned int Bytes;
     const void *DefaultValue;
 };
 struct _D3DXCONSTANTTABLE_DESC // sizeof=0xC
 {
     const char *Creator;
     unsigned int Version;
     unsigned int Constants;
 };
 struct __cppobj ID3DXConstantTable : IUnknown // sizeof=0x4
 {
 };
 const struct __cppobj D3DXVECTOR4 // sizeof=0x10
 {
     float x;
     float y;
     float z;
     float w;
 };
 const struct __cppobj D3DXMATRIX : _D3DMATRIX // sizeof=0x40
 {                                       // ...
 };
 struct /*VFT*/ ID3DXConstantTable_vtbl // sizeof=0x6C
 {
     HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
     unsigned int (__stdcall *AddRef)(IUnknown *this);
     unsigned int (__stdcall *Release)(IUnknown *this);
     void *(__stdcall *GetBufferPointer)(ID3DXConstantTable *this);
     unsigned int (__stdcall *GetBufferSize)(ID3DXConstantTable *this);
     HRESULT (__stdcall *GetDesc)(ID3DXConstantTable *this, _D3DXCONSTANTTABLE_DESC *);
     HRESULT (__stdcall *GetConstantDesc)(ID3DXConstantTable *this, const char *, _D3DXCONSTANT_DESC *, unsigned int *);
     unsigned int (__stdcall *GetSamplerIndex)(ID3DXConstantTable *this, const char *);
     const char *(__stdcall *GetConstant)(ID3DXConstantTable *this, const char *, unsigned int);
     const char *(__stdcall *GetConstantByName)(ID3DXConstantTable *this, const char *, const char *);
     const char *(__stdcall *GetConstantElement)(ID3DXConstantTable *this, const char *, unsigned int);
     HRESULT (__stdcall *SetDefaults)(ID3DXConstantTable *this, IDirect3DDevice9 *);
     HRESULT (__stdcall *SetValue)(ID3DXConstantTable *this, IDirect3DDevice9 *, const char *, const void *, unsigned int);
     HRESULT (__stdcall *SetBool)(ID3DXConstantTable *this, IDirect3DDevice9 *, const char *, int);
     HRESULT (__stdcall *SetBoolArray)(ID3DXConstantTable *this, IDirect3DDevice9 *, const char *, const int *, unsigned int);
     HRESULT (__stdcall *SetInt)(ID3DXConstantTable *this, IDirect3DDevice9 *, const char *, int);
     HRESULT (__stdcall *SetIntArray)(ID3DXConstantTable *this, IDirect3DDevice9 *, const char *, const int *, unsigned int);
     HRESULT (__stdcall *SetFloat)(ID3DXConstantTable *this, IDirect3DDevice9 *, const char *, float);
     HRESULT (__stdcall *SetFloatArray)(ID3DXConstantTable *this, IDirect3DDevice9 *, const char *, const float *, unsigned int);
     HRESULT (__stdcall *SetVector)(ID3DXConstantTable *this, IDirect3DDevice9 *, const char *, const D3DXVECTOR4 *);
     HRESULT (__stdcall *SetVectorArray)(ID3DXConstantTable *this, IDirect3DDevice9 *, const char *, const D3DXVECTOR4 *, unsigned int);
     HRESULT (__stdcall *SetMatrix)(ID3DXConstantTable *this, IDirect3DDevice9 *, const char *, const D3DXMATRIX *);
     HRESULT (__stdcall *SetMatrixArray)(ID3DXConstantTable *this, IDirect3DDevice9 *, const char *, const D3DXMATRIX *, unsigned int);
     HRESULT (__stdcall *SetMatrixPointerArray)(ID3DXConstantTable *this, IDirect3DDevice9 *, const char *, const D3DXMATRIX **, unsigned int);
     HRESULT (__stdcall *SetMatrixTranspose)(ID3DXConstantTable *this, IDirect3DDevice9 *, const char *, const D3DXMATRIX *);
     HRESULT (__stdcall *SetMatrixTransposeArray)(ID3DXConstantTable *this, IDirect3DDevice9 *, const char *, const D3DXMATRIX *, unsigned int);
     HRESULT (__stdcall *SetMatrixTransposePointerArray)(ID3DXConstantTable *this, IDirect3DDevice9 *, const char *, const D3DXMATRIX **, unsigned int);
 };
 struct __cppobj D3DXVECTOR2 // sizeof=0x8
 {
     float x;
     float y;
 };
 struct __declspec(align(4)) tagTEXTMETRICW // sizeof=0x3C
 {
     int tmHeight;
     int tmAscent;
     int tmDescent;
     int tmInternalLeading;
     int tmExternalLeading;
     int tmAveCharWidth;
     int tmMaxCharWidth;
     int tmWeight;
     int tmOverhang;
     int tmDigitizedAspectX;
     int tmDigitizedAspectY;
     wchar_t tmFirstChar;
     wchar_t tmLastChar;
     wchar_t tmDefaultChar;
     wchar_t tmBreakChar;
     unsigned __int8 tmItalic;
     unsigned __int8 tmUnderlined;
     unsigned __int8 tmStruckOut;
     unsigned __int8 tmPitchAndFamily;
     unsigned __int8 tmCharSet;
     // padding byte
     // padding byte
     // padding byte
 };
 struct __cppobj D3DXVECTOR4_16F // sizeof=0x8
 {
     D3DXFLOAT16 x;
     D3DXFLOAT16 y;
     D3DXFLOAT16 z;
     D3DXFLOAT16 w;
 };
 struct __cppobj D3DXVECTOR3_16F // sizeof=0x6
 {
     D3DXFLOAT16 x;
     D3DXFLOAT16 y;
     D3DXFLOAT16 z;
 };
 struct __cppobj D3DXQUATERNION // sizeof=0x10
 {
     float x;
     float y;
     float z;
     float w;
 };
 struct _D3DXFONT_DESCW // sizeof=0x58
 {
     int Height;
     unsigned int Width;
     unsigned int Weight;
     unsigned int MipLevels;
     int Italic;
     unsigned __int8 CharSet;
     unsigned __int8 OutputPrecision;
     unsigned __int8 Quality;
     unsigned __int8 PitchAndFamily;
     wchar_t FaceName[32];
 };
 struct POS_TC_VERTEX // sizeof=0x18
 {
     float sx;
     float sy;
     float sz;
     float rhw;
     float tu;
     float tv;
 };
 struct BINKTEXTURESET // sizeof=0xD8
 {                                       // ...
     BINKFRAMETEXTURES textures[2];
     BINKFRAMEBUFFERS bink_buffers;      // ...
     BINKFRAMETEXTURES tex_draw;         // ...
 };
 struct __cppobj ID3DXBuffer : IUnknown // sizeof=0x4
 {
 };
 struct /*VFT*/ ID3DXBuffer_vtbl // sizeof=0x14
 {
     HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
     unsigned int (__stdcall *AddRef)(IUnknown *this);
     unsigned int (__stdcall *Release)(IUnknown *this);
     void *(__stdcall *GetBufferPointer)(ID3DXBuffer *this);
     unsigned int (__stdcall *GetBufferSize)(ID3DXBuffer *this);
 };
 struct __cppobj ID3DXSprite : IUnknown // sizeof=0x4
 {
 };
 struct /*VFT*/ ID3DXSprite_vtbl // sizeof=0x38
 {
     HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
     unsigned int (__stdcall *AddRef)(IUnknown *this);
     unsigned int (__stdcall *Release)(IUnknown *this);
     HRESULT (__stdcall *GetDevice)(ID3DXSprite *this, IDirect3DDevice9 **);
     HRESULT (__stdcall *GetTransform)(ID3DXSprite *this, D3DXMATRIX *);
     HRESULT (__stdcall *SetTransform)(ID3DXSprite *this, const D3DXMATRIX *);
     HRESULT (__stdcall *SetWorldViewRH)(ID3DXSprite *this, const D3DXMATRIX *, const D3DXMATRIX *);
     HRESULT (__stdcall *SetWorldViewLH)(ID3DXSprite *this, const D3DXMATRIX *, const D3DXMATRIX *);
     HRESULT (__stdcall *Begin)(ID3DXSprite *this, unsigned int);
     HRESULT (__stdcall *Draw)(ID3DXSprite *this, IDirect3DTexture9 *, const tagRECT *, const D3DXVECTOR3 *, const D3DXVECTOR3 *, unsigned int);
     HRESULT (__stdcall *Flush)(ID3DXSprite *this);
     HRESULT (__stdcall *End)(ID3DXSprite *this);
     HRESULT (__stdcall *OnLostDevice)(ID3DXSprite *this);
     HRESULT (__stdcall *OnResetDevice)(ID3DXSprite *this);
 };
 struct __cppobj _D3DXMATRIXA16 : D3DXMATRIX // sizeof=0x40
 {
 };
 struct __cppobj D3DXVECTOR2_16F // sizeof=0x4
 {
     D3DXFLOAT16 x;
     D3DXFLOAT16 y;
 };
 struct __cppobj ID3DXFont : IUnknown // sizeof=0x4
 {
 };
 struct /*VFT*/ ID3DXFont_vtbl // sizeof=0x48
 {
     HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
     unsigned int (__stdcall *AddRef)(IUnknown *this);
     unsigned int (__stdcall *Release)(IUnknown *this);
     HRESULT (__stdcall *GetDevice)(ID3DXFont *this, IDirect3DDevice9 **);
     HRESULT (__stdcall *GetDescA)(ID3DXFont *this, _D3DXFONT_DESCA *);
     HRESULT (__stdcall *GetDescW)(ID3DXFont *this, _D3DXFONT_DESCW *);
     int (__stdcall *GetTextMetricsA)(ID3DXFont *this, tagTEXTMETRICA *);
     int (__stdcall *GetTextMetricsW)(ID3DXFont *this, tagTEXTMETRICW *);
     HDC__ *(__stdcall *GetDC)(ID3DXFont *this);
     HRESULT (__stdcall *GetGlyphData)(ID3DXFont *this, unsigned int, IDirect3DTexture9 **, tagRECT *, tagPOINT *);
     HRESULT (__stdcall *PreloadCharacters)(ID3DXFont *this, unsigned int, unsigned int);
     HRESULT (__stdcall *PreloadGlyphs)(ID3DXFont *this, unsigned int, unsigned int);
     HRESULT (__stdcall *PreloadTextA)(ID3DXFont *this, const char *, int);
     HRESULT (__stdcall *PreloadTextW)(ID3DXFont *this, const wchar_t *, int);
     int (__stdcall *DrawTextA)(ID3DXFont *this, ID3DXSprite *, const char *, int, tagRECT *, unsigned int, unsigned int);
     int (__stdcall *DrawTextW)(ID3DXFont *this, ID3DXSprite *, const wchar_t *, int, tagRECT *, unsigned int, unsigned int);
     HRESULT (__stdcall *OnLostDevice)(ID3DXFont *this);
     HRESULT (__stdcall *OnResetDevice)(ID3DXFont *this);
 };
 struct __cppobj ID3DXInclude // sizeof=0x4
 {
     ID3DXInclude_vtbl *__vftable;
 };
 struct /*VFT*/ ID3DXInclude_vtbl // sizeof=0x8
 {
     HRESULT (__stdcall *Open)(ID3DXInclude *this, _D3DXINCLUDE_TYPE, const char *, const void *, const void **, unsigned int *);
     HRESULT (__stdcall *Close)(ID3DXInclude *this, const void *);
 };
 struct __cppobj D3DXPLANE // sizeof=0x10
 {
     float a;
     float b;
     float c;
     float d;
 };
 struct __declspec(align(4)) NetField // sizeof=0x10
 {                                       // ...
     char *name;
     int offset;
     int bits;
     unsigned __int8 changeHints;
     // padding byte
     // padding byte
     // padding byte
 };
 struct MD4_CTX // sizeof=0x58
 {                                       // ...
     unsigned int state[4];
     unsigned int count[2];
     unsigned __int8 buffer[64];
 };
 struct snapshot_s // sizeof=0x2307C
 {                                       // ...
     int snapFlags;
     int ping;
     int serverTime;
     playerState_s ps;
     int numEntities;
     int numClients;
     entityState_s entities[512];
     clientState_s clients[64];
     int serverCommandSequence;
 };
 struct GfxSkinCacheEntry // sizeof=0xC
 {                                       // ...
     unsigned int frameCount;
     int skinnedCachedOffset;
     unsigned __int16 numSkinnedVerts;
     unsigned __int16 ageCount;
 };
 struct clientControllers_t // sizeof=0x60
 {                                       // ...
     float angles[6][3];
     float tag_origin_angles[3];
     float tag_origin_offset[3];
 };
 struct __declspec(align(4)) CEntPlayerInfo // sizeof=0xC
 {                                       // ...
     clientControllers_t *control;       // ...
     unsigned __int8 tag[6];             // ...
     // padding byte
     // padding byte
 };
 struct CEntTurretAngles // sizeof=0x8
 {                                       // ...
     float pitch;
     float yaw;
 };
 union $06707BB8B07567CD0B9AB50B15101D6E // sizeof=0x8
 {                                       // ...
     CEntTurretAngles angles;
     const float *viewAngles;
 };
 struct CEntTurretInfo // sizeof=0x10
 {                                       // ...
     $06707BB8B07567CD0B9AB50B15101D6E ___u0;
     float barrelPitch;
     bool playerUsing;
     unsigned __int8 tag_aim;
     unsigned __int8 tag_aim_animated;
     unsigned __int8 tag_flash;
 };
 struct __declspec(align(2)) CEntVehicleInfo // sizeof=0x24
 {                                       // ...
     __int16 pitch;
     __int16 yaw;
     __int16 roll;
     __int16 barrelPitch;
     float barrelRoll;
     __int16 steerYaw;
     // padding byte
     // padding byte
     float time;
     unsigned __int16 wheelFraction[4];
     unsigned __int8 wheelBoneIndex[4];
     unsigned __int8 tag_body;
     unsigned __int8 tag_turret;
     unsigned __int8 tag_barrel;
     // padding byte
 };
 struct FxBoltAndSortOrder // sizeof=0x4
 {                                       // ...
.0   unsigned __int32 dobjHandle : 12;
.12  unsigned __int32 temporalBits : 2;
.14  unsigned __int32 boneIndex : 10;
.24  unsigned __int32 sortOrder : 8;
 };
 struct FxSpatialFrame // sizeof=0x1C
 {                                       // ...
     float quat[4];
     float origin[3];                    // ...
 };
 struct FxEffect // sizeof=0x80
 {                                       // ...
     const FxEffectDef *def;
     volatile int status;
     unsigned __int16 firstElemHandle[3];
     unsigned __int16 firstSortedElemHandle;
     unsigned __int16 firstTrailHandle;
     unsigned __int16 randomSeed;
     unsigned __int16 owner;
     unsigned __int16 packedLighting;
     FxBoltAndSortOrder boltAndSortOrder;
     volatile int frameCount;
     int msecBegin;
     int msecLastUpdate;
     FxSpatialFrame frameAtSpawn;
     FxSpatialFrame frameNow;
     FxSpatialFrame framePrev;
     float distanceTraveled;
 };
 struct CEntFx // sizeof=0x8
 {                                       // ...
     int triggerTime;
     FxEffect *effect;
 };
 union $9D88A49AD898204B3D6E378457DD8419 // sizeof=0x24
 {                                       // ...
     CEntPlayerInfo player;
     CEntTurretInfo turret;
     CEntVehicleInfo vehicle;
     CEntFx fx;
 };
 struct cpose_t // sizeof=0x64
 {                                       // ...
     unsigned __int16 lightingHandle;
     unsigned __int8 eType;
     unsigned __int8 eTypeUnion;
     unsigned __int8 localClientNum;
     // padding byte
     // padding byte
     // padding byte
     int cullIn;
     unsigned __int8 isRagdoll;
     // padding byte
     // padding byte
     // padding byte
     int ragdollHandle;
     int killcamRagdollHandle;
     int physObjId;
     float origin[3];
     float angles[3];
     GfxSkinCacheEntry skinCacheEntry;
     $9D88A49AD898204B3D6E378457DD8419 ___u12;
 };
 struct centity_s // sizeof=0x1DC
 {                                       // ...
     cpose_t pose;
     LerpEntityState currentState;
     entityState_s nextState;
     bool nextValid;
     bool bMuzzleFlash;
     bool bTrailMade;
     // padding byte
     int previousEventSequence;
     int miscTime;
     float lightingOrigin[3];
     XAnimTree_s *tree;
 };
 struct playerEntity_t // sizeof=0x30
 {                                       // ...
     float fLastWeaponPosFrac;
     int bPositionToADS;
     float vPositionLastOrg[3];
     float fLastIdleFactor;
     float vLastMoveOrg[3];
     float vLastMoveAng[3];
 };
 struct GfxDepthOfField // sizeof=0x20
 {                                       // ...
     float viewModelStart;
     float viewModelEnd;
     float nearStart;
     float nearEnd;
     float farStart;
     float farEnd;
     float nearBlur;
     float farBlur;
 };
 struct GfxFilm // sizeof=0x2C
 {                                       // ...
     bool enabled;
     // padding byte
     // padding byte
     // padding byte
     float brightness;
     float contrast;
     float desaturation;
     bool invert;
     // padding byte
     // padding byte
     // padding byte
     float tintDark[3];
     float tintLight[3];
 };
 struct GfxGlow // sizeof=0x14
 {                                       // ...
     bool enabled;
     // padding byte
     // padding byte
     // padding byte
     float bloomCutoff;
     float bloomDesaturation;
     float bloomIntensity;
     float radius;
 };
 struct GfxViewport // sizeof=0x10
 {                                       // ...
     int x;                              // ...
     int y;                              // ...
     int width;                          // ...
     int height;                         // ...
 };
 struct refdef_s // sizeof=0x4098
 {                                       // ...
     unsigned int x;
     unsigned int y;
     unsigned int width;
     unsigned int height;
     float tanHalfFovX;
     float tanHalfFovY;
     float vieworg[3];
     float viewaxis[3][3];
     float viewOffset[3];
     int time;
     float zNear;
     float blurRadius;
     GfxDepthOfField dof;
     GfxFilm film;
     GfxGlow glow;
     GfxLight primaryLights[255];
     GfxViewport scissorViewport;
     bool useScissorViewport;
     // padding byte
     // padding byte
     // padding byte
     int localClientNum;
 };
 struct score_t // sizeof=0x28
 {                                       // ...
     int client;
     int score;
     int ping;
     int deaths;
     int team;
     int kills;
     int rank;
     int assists;
     Material *hStatusIcon;
     Material *hRankIcon;
 };
 struct viewDamage_t // sizeof=0xC
 {                                       // ...
     int time;
     int duration;
     float yaw;
 };
 struct shellshock_parms_t::<unnamed_type_screenBlend> // sizeof=0x14
 {                                       // ...
     int blurredFadeTime;
     int blurredEffectTime;
     int flashWhiteFadeTime;
     int flashShotFadeTime;
     ShockViewTypes type;
 };
 struct shellshock_parms_t::<unnamed_type_view> // sizeof=0xC
 {                                       // ...
     int fadeTime;
     float kickRate;
     float kickRadius;
 };
 struct shellshock_parms_t::<unnamed_type_sound> // sizeof=0x230
 {                                       // ...
     bool affect;
     char loop[64];
     char loopSilent[64];
     char end[64];
     char endAbort[64];
     // padding byte
     // padding byte
     // padding byte
     int fadeInTime;
     int fadeOutTime;
     float drylevel;
     float wetlevel;
     char roomtype[16];
     float channelvolume[64];
     int modEndDelay;
     int loopFadeTime;
     int loopEndDelay;
 };
 struct shellshock_parms_t::<unnamed_type_lookControl> // sizeof=0x14
 {                                       // ...
     bool affect;
     // padding byte
     // padding byte
     // padding byte
     int fadeTime;
     float mouseSensitivity;
     float maxPitchSpeed;
     float maxYawSpeed;
 };
 struct shellshock_parms_t::<unnamed_type_movement> // sizeof=0x1
 {                                       // ...
     bool affect;
 };
 const struct __declspec(align(4)) shellshock_parms_t // sizeof=0x268
 {                                       // ...
     shellshock_parms_t::<unnamed_type_screenBlend> screenBlend;
     shellshock_parms_t::<unnamed_type_view> view;
     shellshock_parms_t::<unnamed_type_sound> sound;
     shellshock_parms_t::<unnamed_type_lookControl> lookControl;
     shellshock_parms_t::<unnamed_type_movement> movement;
     // padding byte
     // padding byte
     // padding byte
 };
 struct shellshock_t // sizeof=0x20
 {                                       // ...
     const shellshock_parms_t *parms;
     int startTime;
     int duration;
     int loopEndTime;
     float sensitivity;
     float viewDelta[2];
     int hasSavedScreen;
 };
 struct cg_s::<unnamed_type_testShock> // sizeof=0x8
 {                                       // ...
     int time;
     int duration;
 };
 struct __declspec(align(8)) animation_s // sizeof=0x68
 {                                       // ...
     char name[64];
     int initialLerp;
     float moveSpeed;
     int duration;
     int nameHash;
     int flags;
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     __int64 movetype;
     int noteType;
     // padding byte
     // padding byte
     // padding byte
     // padding byte
 };
 struct animScriptCondition_t // sizeof=0xC
 {                                       // ...
     int index;
     unsigned int value[2];
 };
 struct animScriptCommand_t // sizeof=0x10
 {                                       // ...
     __int16 bodyPart[2];
     __int16 animIndex[2];
     __int16 animDuration[2];
     snd_alias_list_t *soundAlias;
 };
 struct animScriptItem_t // sizeof=0x100
 {                                       // ...
     int numConditions;
     animScriptCondition_t conditions[10];
     int numCommands;
     animScriptCommand_t commands[8];
 };
 struct animScript_t // sizeof=0x204
 {                                       // ...
     int numItems;
     animScriptItem_t *items[128];
 };
 struct scr_animtree_t // sizeof=0x4
 {                                       // ...
     XAnim_s *anims;                     // ...
 };
 struct __declspec(align(8)) animScriptData_t // sizeof=0x9A9D0
 {                                       // ...
     animation_s animations[512];
     unsigned int numAnimations;
     animScript_t scriptAnims[1][43];
     animScript_t scriptCannedAnims[1][43];
     animScript_t scriptStateChange[1][1];
     animScript_t scriptEvents[21];
     animScriptItem_t scriptItems[2048];
     int numScriptItems;
     scr_animtree_t animTree;            // ...
     unsigned __int16 torsoAnim;
     unsigned __int16 legsAnim;
     unsigned __int16 turningAnim;
     // padding byte
     // padding byte
     snd_alias_list_t *(__cdecl *soundAlias)(const char *);
     int (__cdecl *playSoundAlias)(int, snd_alias_list_t *);
     // padding byte
     // padding byte
     // padding byte
     // padding byte
 };
 struct $6CB7272563F4458FB40A4A5E123C4ABA // sizeof=0x4
 {                                       // ...
     unsigned __int16 index;
     unsigned __int16 tree;
 };
 union $76411D3CC105A18E6E4A61D5A929E310 // sizeof=0x4
 {                                       // ...
     $6CB7272563F4458FB40A4A5E123C4ABA __s0;
     const char *linkPointer;
 };
 struct scr_anim_s // sizeof=0x4
 {                                       // ...
     $76411D3CC105A18E6E4A61D5A929E310 ___u0; // ...
 };
 struct bgs_t::<unnamed_type_generic_human> // sizeof=0x10
 {                                       // ...
     scr_animtree_t tree;                // ...
     scr_anim_s torso;
     scr_anim_s legs;
     scr_anim_s turning;
 };
 struct __declspec(align(2)) DObjModel_s // sizeof=0x8
 {                                       // ...
     XModel *model;                      // ...
     unsigned __int16 boneName;          // ...
     bool ignoreCollision;               // ...
     // padding byte
 };
 struct lerpFrame_t // sizeof=0x30
 {                                       // ...
     float yawAngle;
     int yawing;
     float pitchAngle;
     int pitching;
     int animationNumber;
     animation_s *animation;
     int animationTime;
     float oldFramePos[3];
     float animSpeedScale;
     int oldFrameSnapshotTime;
 };
 struct __declspec(align(4)) clientInfo_t // sizeof=0x4CC
 {                                       // ...
     int infoValid;                      // ...
     int nextValid;
     int clientNum;
     char name[16];
     team_t team;
     team_t oldteam;
     int rank;
     int prestige;
     int perks;
     int score;
     int location;
     int health;
     char model[64];
     char attachModelNames[6][64];
     char attachTagNames[6][64];
     lerpFrame_t legs;
     lerpFrame_t torso;
     float lerpMoveDir;
     float lerpLean;
     float playerAngles[3];              // ...
     int leftHandGun;
     int dobjDirty;
     clientControllers_t control;
     unsigned int clientConditions[10][2];
     XAnimTree_s *pXAnimTree;            // ...
     int iDObjWeapon;
     unsigned __int8 weaponModel;
     // padding byte
     // padding byte
     // padding byte
     int stanceTransitionTime;
     int turnAnimEndTime;
     char turnAnimType;
     // padding byte
     // padding byte
     // padding byte
     int attachedVehEntNum;
     int attachedVehSlotIndex;
     bool hideWeapon;
     bool usingKnife;
     // padding byte
     // padding byte
 };
 struct bgs_t // sizeof=0xADD08
 {                                       // ...
     animScriptData_t animScriptData;    // ...
     bgs_t::<unnamed_type_generic_human> generic_human; // ...
     int time;                           // ...
     int latestSnapshotTime;             // ...
     int frametime;                      // ...
     int anim_user;                      // ...
     XModel *(__cdecl *GetXModel)(const char *); // ...
     void (__cdecl *CreateDObj)(DObjModel_s *, unsigned __int16, XAnimTree_s *, int, int, clientInfo_t *); // ...
     unsigned __int16 (__cdecl *AttachWeapon)(DObjModel_s *, unsigned __int16, clientInfo_t *); // ...
     DObj_s *(__cdecl *GetDObj)(int, int); // ...
     void (__cdecl *SafeDObjFree)(int, int); // ...
     void *(__cdecl *AllocXAnim)(int);   // ...
     clientInfo_t clientinfo[64];        // ...
 };
 struct visionSetVars_t // sizeof=0x50
 {                                       // ...
     bool glowEnable;                    // ...
     // padding byte
     // padding byte
     // padding byte
     float glowBloomCutoff;              // ...
     float glowBloomDesaturation;        // ...
     float glowBloomIntensity0;          // ...
     float glowBloomIntensity1;          // ...
     float glowRadius0;                  // ...
     float glowRadius1;                  // ...
     float glowSkyBleedIntensity0;       // ...
     float glowSkyBleedIntensity1;       // ...
     bool filmEnable;                    // ...
     // padding byte
     // padding byte
     // padding byte
     float filmBrightness;               // ...
     float filmContrast;                 // ...
     float filmDesaturation;             // ...
     bool filmInvert;                    // ...
     // padding byte
     // padding byte
     // padding byte
     float filmLightTint[3];             // ...
     float filmDarkTint[3];              // ...
 };
 struct visionSetLerpData_t // sizeof=0xC
 {                                       // ...
     int timeStart;
     int timeDuration;
     visionSetLerpStyle_t style;
 };
 struct cg_s::<unnamed_type_lastFrame> // sizeof=0x4
 {                                       // ...
     float aimSpreadScale;
 };
 struct hudElemSoundInfo_t // sizeof=0x4
 {                                       // ...
     int lastPlayedTime;
 };
 struct cg_s // sizeof=0xFF580
 {
     int clientNum;
     int localClientNum;
     DemoType demoType;
     CubemapShot cubemapShot;
     int cubemapSize;
     int renderScreen;
     int latestSnapshotNum;
     int latestSnapshotTime;
     snapshot_s *snap;
     snapshot_s *nextSnap;
     snapshot_s activeSnapshots[2];
     float frameInterpolation;
     int frametime;
     int time;
     int oldTime;
     int physicsTime;
     int mapRestart;
     int renderingThirdPerson;
     playerState_s predictedPlayerState;
     centity_s predictedPlayerEntity;
     playerEntity_t playerEntity;
     int predictedErrorTime;
     float predictedError[3];
     float landChange;
     int landTime;
     float heightToCeiling;
     refdef_s refdef;
     float refdefViewAngles[3];
     float lastVieworg[3];
     float swayViewAngles[3];
     float swayAngles[3];
     float swayOffset[3];
     int iEntityLastType[1024];
     XModel *pEntityLastXModel[1024];
     float zoomSensitivity;
     bool isLoading;
     char objectiveText[1024];
     char scriptMainMenu[256];
     // padding byte
     // padding byte
     // padding byte
     int scoresRequestTime;
     int numScores;
     int teamScores[4];
     int teamPings[4];
     int teamPlayers[4];
     score_t scores[64];
     int scoreLimit;
     int showScores;
     int scoreFadeTime;
     int scoresTop;
     int scoresOffBottom;
     int scoresBottom;
     int drawHud;
     int crosshairClientNum;
     int crosshairClientLastTime;
     int crosshairClientStartTime;
     int identifyClientNum;
     int cursorHintIcon;
     int cursorHintTime;
     int cursorHintFade;
     int cursorHintString;
     int lastClipFlashTime;
     InvalidCmdHintType invalidCmdHintType;
     int invalidCmdHintTime;
     int lastHealthPulseTime;
     int lastHealthLerpDelay;
     int lastHealthClient;
     float lastHealth;
     float healthOverlayFromAlpha;
     float healthOverlayToAlpha;
     int healthOverlayPulseTime;
     int healthOverlayPulseDuration;
     int healthOverlayPulsePhase;
     bool healthOverlayHurt;
     // padding byte
     // padding byte
     // padding byte
     int healthOverlayLastHitTime;
     float healthOverlayOldHealth;
     int healthOverlayPulseIndex;
     int proneBlockedEndTime;
     int lastStance;
     int lastStanceChangeTime;
     int lastStanceFlashTime;
     int voiceTime;
     unsigned int weaponSelect;
     int weaponSelectTime;
     unsigned int weaponLatestPrimaryIdx;
     int prevViewmodelWeapon;
     int equippedOffHand;
     viewDamage_t viewDamage[8];
     int damageTime;
     float damageX;
     float damageY;
     float damageValue;
     float viewFade;
     int weapIdleTime;
     int nomarks;
     int v_dmg_time;
     float v_dmg_pitch;
     float v_dmg_roll;
     float fBobCycle;
     float xyspeed;
     float kickAVel[3];
     float kickAngles[3];
     float offsetAngles[3];
     float gunPitch;
     float gunYaw;
     float gunXOfs;
     float gunYOfs;
     float gunZOfs;
     float vGunOffset[3];
     float vGunSpeed[3];
     float viewModelAxis[4][3];
     float rumbleScale;
     float compassNorthYaw;
     float compassNorth[2];
     Material *compassMapMaterial;
     float compassMapUpperLeft[2];
     float compassMapWorldSize[2];
     int compassFadeTime;
     int healthFadeTime;
     int ammoFadeTime;
     int stanceFadeTime;
     int sprintFadeTime;
     int offhandFadeTime;
     int offhandFlashTime;
     shellshock_t shellshock;
     cg_s::<unnamed_type_testShock> testShock;
     int holdBreathTime;
     int holdBreathInTime;
     int holdBreathDelay;
     float holdBreathFrac;
     float radarProgress;
     float selectedLocation[2];
     SprintState sprintStates;
     int packetAnalysisFrameCount;
     unsigned __int8 bitsSent[100][13];
     int entBitsUsed[10][18];
     int numEntsSent[10][18];
     int numEntFields[10][18];
     int numSnapshots;
     int adsViewErrorDone;
     int inKillCam;
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     bgs_t bgs;
     cpose_t viewModelPose;
     visionSetVars_t visionSetPreLoaded[4];
     char visionSetPreLoadedName[4][64];
     visionSetVars_t visionSetFrom[2];
     visionSetVars_t visionSetTo[2];
     visionSetVars_t visionSetCurrent[2];
     visionSetLerpData_t visionSetLerpData[2];
     char visionNameNaked[64];
     char visionNameNight[64];
     int extraButtons;
     int lastActionSlotTime;
     bool playerTeleported;
     // padding byte
     // padding byte
     // padding byte
     int stepViewStart;
     float stepViewChange;
     cg_s::<unnamed_type_lastFrame> lastFrame;
     hudElemSoundInfo_t hudElemSound[32];
     int vehicleFrame;
 };
 struct Bone // sizeof=0x1C
 {                                       // ...
     int parentBone;
     unsigned __int8 animBones[2];
     // padding byte
     // padding byte
     int rigidBody;
     float length;
     float center[3];
 };
 struct __declspec(align(4)) LerpBone // sizeof=0x8
 {                                       // ...
     int parentBone;
     unsigned __int8 animBone;
     // padding byte
     // padding byte
     // padding byte
 };
 struct Joint // sizeof=0x8
 {                                       // ...
     int joint;
     int joint2;
 };
 struct BoneOrientation // sizeof=0x20
 {                                       // ...
     float origin[3];
     int boneFlags;
     float orientation[4];
 };
 struct RagdollBody // sizeof=0x9D4
 {
     int references;
     int ragdollDef;
     int dobj;
     DObj_s *obj;
     const cpose_t *pose;
     float poseOffset[3];
     int localClientNum;
     BodyState state;
     int stateMsec;
     int stateFrames;
     int velCaptureMsec;
     int numBones;
     Bone bones[14];
     int numLerpBones;
     LerpBone lerpBones[9];
     int numJoints;
     Joint joints[28];
     int curOrientationBuffer;
     BoneOrientation boneOrientations[2][23];
     BoneOrientation lerpBoneOffsets[9];
 };
 struct StateEnt // sizeof=0xC
 {                                       // ...
     bool (__cdecl *enterFunc)(RagdollBody *, BodyState, BodyState);
     bool (__cdecl *exitFunc)(RagdollBody *, BodyState, BodyState);
     void (__cdecl *updateFunc)(RagdollBody *);
 };
 struct gitem_s // sizeof=0x4
 {
     itemType_t giType;
 };
 struct weaponInfo_s // sizeof=0x44
 {                                       // ...
     DObj_s *viewModelDObj;
     XModel *handModel;
     XModel *gogglesModel;
     XModel *rocketModel;
     XModel *knifeModel;
     unsigned __int8 weapModelIdx;
     // padding byte
     // padding byte
     // padding byte
     unsigned int partBits[4];
     int iPrevAnim;
     XAnimTree_s *tree;
     int registered;
     const gitem_s *item;
     const char *translatedDisplayName;
     const char *translatedModename;
     const char *translatedAIOverlayDescription;
 };
 struct cgs_t // sizeof=0x3A24
 {                                       // ...
     int viewX;
     int viewY;
     int viewWidth;
     int viewHeight;
     float viewAspect;
     int serverCommandSequence;
     int processedSnapshotNum;
     int localServer;
     char gametype[32];
     char szHostName[256];
     int maxclients;
     char mapname[64];
     int gameEndTime;
     int voteTime;
     int voteYes;
     int voteNo;
     char voteString[256];
     XModel *gameModels[512];
     const FxEffectDef *fxs[100];
     const FxEffectDef *smokeGrenadeFx;
     shellshock_parms_t holdBreathParams;
     char teamChatMsgs[8][160];
     int teamChatMsgTimes[8];
     int teamChatPos;
     int teamLastChatPos;
     float compassWidth;
     float compassHeight;
     float compassY;
     clientInfo_t corpseinfo[8];
 };
 struct PhysContact // sizeof=0x24
 {                                       // ...
     float pos[3];
     float normal[3];                    // ...
     float depth;                        // ...
     float friction;                     // ...
     float bounce;                       // ...
 };
 struct BaseLerpBoneDef // sizeof=0x20
 {                                       // ...
     char animBoneTextName[20];
     unsigned int animBoneName;
     unsigned int parentBoneIndex;
     int lerpTime;
 };
 struct BoneDef // sizeof=0x4C
 {                                       // ...
     char animBoneTextNames[2][20];
     unsigned int animBoneNames[2];
     float radius;
     bool mirror;
     // padding byte
     // padding byte
     // padding byte
     float percent;
     float mass;
     float friction;
     int parentBone;
     PhysicsGeomType geomType;
 };
 struct SelfPairDef // sizeof=0x2
 {                                       // ...
     unsigned __int8 bones[2];
 };
 struct JointDef // sizeof=0x54
 {                                       // ...
     unsigned __int8 bone;
     // padding byte
     // padding byte
     // padding byte
     JointType type;
     int numLimitAxes;
     float limitAxes[3][3];
     float minAngles[3];
     float maxAngles[3];
     float axisFriction[3];
 };
 struct __declspec(align(4)) RagdollDef // sizeof=0xED0
 {
     bool inUse;
     bool bound;
     // padding byte
     // padding byte
     int numBones;
     BoneDef boneDefs[14];
     int numBaseLerpBones;
     BaseLerpBoneDef baseLerpBoneDefs[9];
     int numJoints;
     JointDef jointDefs[28];
     int numSelfPairs;
     SelfPairDef selfPairDefs[33];
     // padding byte
     // padding byte
 };
 struct $226EAEAF211E69CAF5BF90DB1F921A0C // sizeof=0x10
 {                                       // ...
     const char *name;                   // ...
     float axis[3];                      // ...
 };
 struct ScreenPlacement // sizeof=0x44
 {                                       // ...
     float scaleVirtualToReal[2];        // ...
     float scaleVirtualToFull[2];        // ...
     float scaleRealToVirtual[2];
     float virtualViewableMin[2];
     float virtualViewableMax[2];
     float realViewportSize[2];
     float realViewableMin[2];
     float realViewableMax[2];
     float subScreenLeft;
 };
 struct ConstraintRowData // sizeof=0x90
 {                                       // ...
     float J_body1Linear[3];
     float lambda;
     float J_body1Angular[3];
     int body1;
     float J_body2Linear[3];
     int body2;
     float J_body2Angular[3];
     float padding1;
     float iMJ_body1Linear[3];
     float padding2;
     float iMJ_body1Angular[3];
     float padding3;
     float iMJ_body2Linear[3];
     float padding4;
     float iMJ_body2Angular[3];
     float padding5;
     float lo;
     float hi;
     float rhs;
     float Ad;
 };
 struct _PMD // sizeof=0xC
 {                                       // ...
     int mdisp;
     int pdisp;
     int vdisp;
 };
 struct _TypeDescriptor // sizeof=0x8;variable_size
 {
     const void *pVFTable;
     void *spare;
     char name[];
 };
 struct _s__RTTIBaseClassDescriptor2 // sizeof=0x1C
 {
     _TypeDescriptor *pTypeDescriptor;
     unsigned int numContainedBases;
     _PMD where;
     unsigned int attributes;
     const _s__RTTIClassHierarchyDescriptor *pClassDescriptor;
 };
 const struct __unaligned __declspec(align(1)) _s__RTTIBaseClassArray // sizeof=0x0;variable_size
 {
     const _s__RTTIBaseClassDescriptor2 *arrayOfBaseClassDescriptors[];
 };
 const struct _s__RTTIClassHierarchyDescriptor // sizeof=0x10
 {
     unsigned int signature;
     unsigned int attributes;
     unsigned int numBaseClasses;
     const _s__RTTIBaseClassArray *pBaseClassArray;
 };
 struct QuickstepData // sizeof=0xF9C0
 {                                       // ...
     ConstraintRowData rowData[444];
 };
 struct _s__RTTICompleteObjectLocator // sizeof=0x14
 {
     unsigned int signature;
     unsigned int offset;
     unsigned int cdOffset;
     _TypeDescriptor *pTypeDescriptor;
     const _s__RTTIClassHierarchyDescriptor *pClassDescriptor;
 };
 struct dxQuickStepParameters // sizeof=0x8
 {                                       // ...
     int num_iterations;
     float w;
 };
 struct __cppobj dMass // sizeof=0x44
 {                                       // ...
     float mass;                         // ...
     float c[4];
     float I[12];                        // ...
 };
 struct __cppobj std::_Container_base_secure // sizeof=0x0
 {                                       // ...
 };
 struct __cppobj std::allocator<void> // sizeof=0x0
 {
 };
 struct __cppobj std::_Unsecure_char_traits_tag // sizeof=0x0
 {
 };
 struct __cppobj std::_Char_traits_base // sizeof=0x0
 {                                       // ...
 };
 struct __cppobj __declspec(align(8)) std::fpos<int> // sizeof=0x18
 {
     int _Myoff;
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     __int64 _Fpos;
     int _Mystate;
     // padding byte
     // padding byte
     // padding byte
     // padding byte
 };
 struct __cppobj std::char_traits<wchar_t> : std::_Char_traits_base // sizeof=0x0
 {
 };
 struct __cppobj std::char_traits<char> : std::_Char_traits_base // sizeof=0x0
 {
 };
 struct __cppobj std::_Unchanged_checked_iterator_base_type_tag // sizeof=0x0
 {
 };
 struct __cppobj std::exception // sizeof=0xC
 {                                       // ...
     std::exception_vtbl *__vftable;     // ...
     const char *_m_what;
     int _m_doFree;
 };
 struct /*VFT*/ std::exception_vtbl // sizeof=0x8
 {
     void (__thiscall *~exception)(std::exception *this);
     const char *(__thiscall *what)(std::exception *this);
 };
 struct __cppobj std::bad_exception : std::exception // sizeof=0xC
 {                                       // ...
 };
 struct /*VFT*/ std::bad_exception_vtbl // sizeof=0x8
 {
     void (__thiscall *~exception)(std::exception *this);
     const char *(__thiscall *what)(std::exception *this);
 };
 struct __cppobj std::_Unchecked_iterator_tag // sizeof=0x0
 {
 };
 struct __cppobj std::_Undefined_inner_type_tag // sizeof=0x0
 {
 };
 struct __cppobj std::_Iterator_base_universal // sizeof=0x0
 {                                       // ...
 };
 const struct __cppobj std::_Aux_cont // sizeof=0x4
 {
     const std::_Container_base_aux *_Mycontainer;
 };
 const struct __cppobj std::_Container_base_aux // sizeof=0x4
 {                                       // ...
     std::_Aux_cont *_Myownedaux;
 };
 struct __cppobj std::_Iterator_base_aux : std::_Iterator_base_universal // sizeof=0x4
 {                                       // ...
     const std::_Aux_cont *_Myaux;
 };
 struct __cppobj std::input_iterator_tag // sizeof=0x0
 {                                       // ...
 };
 struct __cppobj std::forward_iterator_tag : std::input_iterator_tag // sizeof=0x0
 {                                       // ...
 };
 struct __cppobj std::tr1::bad_weak_ptr : std::exception // sizeof=0xC
 {
 };
 struct /*VFT*/ std::tr1::bad_weak_ptr_vtbl // sizeof=0x8
 {
     void (__thiscall *~exception)(std::exception *this);
     const char *(__thiscall *what)(std::exception *this);
 };
 struct __cppobj std::tr1::_Ref_count_base // sizeof=0x10
 {
     std::tr1::_Ref_count_base_vtbl *__vftable;
     const volatile void *_Ptr;
     int _Uses;
     int _Weaks;
 };
 const struct __cppobj __declspec(align(4)) type_info // sizeof=0xC
 {                                       // ...
     type_info_vtbl *__vftable;
     void *_m_data;
     char _m_d_name[1];
     // padding byte
     // padding byte
     // padding byte
 };
 struct /*VFT*/ type_info_vtbl // sizeof=0x4
 {
     void (__thiscall *~type_info)(type_info *this);
 };
 struct /*VFT*/ std::tr1::_Ref_count_base_vtbl // sizeof=0x10
 {
     void (__thiscall *_Destroy)(std::tr1::_Ref_count_base *this);
     void (__thiscall *_Delete_this)(std::tr1::_Ref_count_base *this);
     void (__thiscall *~_Ref_count_base)(std::tr1::_Ref_count_base *this);
     void *(__thiscall *_Get_deleter)(std::tr1::_Ref_count_base *this, const type_info *);
 };
 struct __cppobj std::_Iterator_base_secure : std::_Iterator_base_universal // sizeof=0x4
 {                                       // ...
     const std::_Container_base_secure *_Mycont;
 };
 struct __cppobj std::_Range_checked_iterator_tag // sizeof=0x0
 {
 };
 struct __cppobj std::bidirectional_iterator_tag : std::forward_iterator_tag // sizeof=0x0
 {                                       // ...
 };
 struct __cppobj std::random_access_iterator_tag : std::bidirectional_iterator_tag // sizeof=0x0
 {
 };
 struct __cppobj std::bad_alloc : std::exception // sizeof=0xC
 {                                       // ...
 };
 struct /*VFT*/ std::bad_alloc_vtbl // sizeof=0x8
 {
     void (__thiscall *~exception)(std::exception *this);
     const char *(__thiscall *what)(std::exception *this);
 };
 struct __cppobj dBase // sizeof=0x0
 {                                       // ...
 };
 struct __cppobj dObject : dBase // sizeof=0x14
 {                                       // ...
     dxWorld *world;
     dObject *next;
     dObject **tome;
     void *userdata;
     int tag;
 };
 struct dxJointNode // sizeof=0x10
 {                                       // ...
     dxJoint *joint;
     dxBody *body;
     int bodyTag;
     dxJointNode *next;
 };
 struct __cppobj __declspec(align(4)) dxJoint : dObject // sizeof=0x40
 {                                       // ...
     int typenum;
     int flags;
     dxJointNode node[2];
     bool debug;
     // padding byte
     // padding byte
     // padding byte
 };
 struct __cppobj dxBody : dObject // sizeof=0x150
 {                                       // ...
     dxJointNode *firstjoint;
     int flags;
     dxGeom *geom;
     dMass mass;
     float invI[12];
     float invMass;
     float facc[4];
     float tacc[4];
     float finite_rot_axis[4];
     dxAutoDisable adis;
     float adis_timeleft;
     int adis_stepsleft;
     dxBodyInfo info;
 };
 struct __cppobj dxGeom : dBase // sizeof=0x4C
 {                                       // ...
     dxGeom_vtbl *__vftable;
     int type;
     int gflags;
     void *data;
     dxBody *body;
     dxGeom *body_next;
     float *pos;
     float *R;
     dxGeom *next;
     dxGeom **tome;
     dxSpace *parent_space;
     float aabb[6];
     unsigned int category_bits;
     unsigned int collide_bits;
 };
 struct /*VFT*/ dxGeom_vtbl // sizeof=0xC
 {
     void (__thiscall *~dxGeom)(dxGeom *this);
     void (__thiscall *computeAABB)(dxGeom *this);
     int (__thiscall *AABBTest)(dxGeom *this, dxGeom *, float *);
 };
 struct __cppobj __unaligned __declspec(align(4)) dxSpace : dxGeom // sizeof=0x64
 {                                       // ...
     int count;
     dxGeom *first;
     int cleanup;
     int current_index;
     dxGeom *current_geom;
     int lock_count;
 };
 struct /*VFT*/ dxSpace_vtbl // sizeof=0x28
 {
     void (__thiscall *~dxGeom)(dxGeom *this);
     void (__thiscall *computeAABB)(dxGeom *this);
     int (__thiscall *AABBTest)(dxGeom *this, dxGeom *, float *);
     dxGeom *(__thiscall *getGeom)(dxSpace *this, int);
     void (__thiscall *add)(dxSpace *this, dxGeom *);
     void (__thiscall *remove)(dxSpace *this, dxGeom *);
     void (__thiscall *dirty)(dxSpace *this, dxGeom *);
     void (__thiscall *cleanGeoms)(dxSpace *this);
     void (__thiscall *collide)(dxSpace *this, void *, void (__cdecl *)(void *, dxGeom *, dxGeom *));
     void (__thiscall *collide2)(dxSpace *this, void *, dxGeom *, void (__cdecl *)(void *, dxGeom *, dxGeom *));
 };
 struct dxAutoDisable // sizeof=0x10
 {                                       // ...
     float linear_threshold;
     float angular_threshold;
     float idle_time;
     int idle_steps;
 };
 struct dxBodyInfo // sizeof=0x70
 {                                       // ...
     float pos[4];
     float q[4];
     float R[12];
     float lvel[4];
     float avel[4];
 };
 struct dxContactParameters // sizeof=0x8
 {                                       // ...
     float max_vel;
     float min_depth;
 };
 struct dxWorldStepInfo // sizeof=0x2C
 {                                       // ...
     float gravity[4];
     float global_erp;
     float global_cfm;
     dxQuickStepParameters qs;
     unsigned int holdrand;
     dxContactParameters contactp;
 };
 struct SorLcpData // sizeof=0x6F0
 {                                       // ...
     int order[444];
 };
 struct __cppobj dxWorld : dBase // sizeof=0x10110
 {                                       // ...
     dxBody *firstbody;
     dxJoint *firstjoint;
     int nb;
     int nj;
     dxWorldStepInfo stepInfo;
     dxAutoDisable adis;
     int adis_flag;
     float seconds;
     SorLcpData sd;
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     QuickstepData qd;
 };
 struct __type_info_node // sizeof=0x8
 {                                       // ...
     void *memPtr;
     __type_info_node *next;             // ...
 };
 struct __unaligned __declspec(align(1)) $_TypeDescriptor$_extraBytes_27 // sizeof=0x23
 {
     const void *pVFTable;
     void *spare;
     char name[27];
 };
 struct $_TypeDescriptor$_extraBytes_24 // sizeof=0x20
 {
     const void *pVFTable;
     void *spare;
     char name[24];
 };
 struct __unaligned __declspec(align(1)) $_s__RTTIBaseClassArray$_extraBytes_8 // sizeof=0x9
 {
     const _s__RTTIBaseClassDescriptor2 *arrayOfBaseClassDescriptors[2];
     _BYTE gap8;
 };
 struct __unaligned __declspec(align(1)) $_s__RTTIBaseClassArray$_extraBytes_4 // sizeof=0x5
 {
     const _s__RTTIBaseClassDescriptor2 *arrayOfBaseClassDescriptors[1];
     _BYTE gap4;
 };
 struct __unaligned __declspec(align(2)) $_TypeDescriptor$_extraBytes_30 // sizeof=0x26
 {
     const void *pVFTable;
     void *spare;
     char name[30];
 };
 struct dArrayBase // sizeof=0xC
 {                                       // ...
     int _size;
     int _anum;
     void *_data;
 };
 struct __cppobj ShouldNotRemoveJoint // sizeof=0x8
 {                                       // ...
     const dxBody *const *body;          // ...
     int bodyCount;                      // ...
 };
 struct dxJoint::Info1 // sizeof=0x8
 {                                       // ...
     int m;                              // ...
     int nub;                            // ...
 };
 struct dxJoint::Info2 // sizeof=0x30
 {                                       // ...
     float fps;                          // ...
     float erp;                          // ...
     float *J1l;                         // ...
     float *J1a;                         // ...
     float *J2l;                         // ...
     float *J2a;                         // ...
     int rowskip;                        // ...
     float *c;                           // ...
     float *cfm;                         // ...
     float *lo;                          // ...
     float *hi;                          // ...
     int *findex;                        // ...
 };
 struct $_TypeDescriptor$_extraBytes_20 // sizeof=0x1C
 {
     const void *pVFTable;
     void *spare;
     char name[20];
 };
 struct dMatrixComparison::dMatInfo // sizeof=0x90
 {
     int n;
     int m;
     char name[128];
     float *data;
     int size;
 };
 struct __cppobj dArray<dMatrixComparison::dMatInfo *> : dArrayBase // sizeof=0xC
 {                                       // ...
 };
 struct __cppobj dMatrixComparison // sizeof=0x14
 {
     dArray<dMatrixComparison::dMatInfo *> mat;
     int afterfirst;
     int index;
 };
 union float4 // sizeof=0x10
 {                                       // ...
     float v[4];
     unsigned int u[4];
     PackedUnitVec unitVec[4];
 };
 struct vector3 // sizeof=0x30
 {                                       // ...
     float4 x;                           // ...
     float4 y;                           // ...
     float4 z;                           // ...
 };
 struct __cppobj vector4 : vector3 // sizeof=0x40
 {                                       // ...
     float4 w;                           // ...
 };
 struct ConstraintForce // sizeof=0x18
 {                                       // ...
     float linear[3];
     float angular[3];                   // ...
 };
 struct $_TypeDescriptor$_extraBytes_12 // sizeof=0x14
 {
     const void *pVFTable;
     void *spare;
     char name[12];
 };
 struct dSurfaceParameters // sizeof=0x2C
 {                                       // ...
     int mode;                           // ...
     float mu;                           // ...
     float mu2;                          // ...
     float bounce;                       // ...
     float bounce_vel;                   // ...
     float soft_erp;                     // ...
     float soft_cfm;                     // ...
     float motion1;
     float motion2;
     float slip1;
     float slip2;
 };
 struct dContactGeom // sizeof=0x2C
 {                                       // ...
     float pos[4];
     float normal[4];
     float depth;
     dxGeom *g1;
     dxGeom *g2;
 };
 struct dContact // sizeof=0x68
 {                                       // ...
     dSurfaceParameters surface;
     dContactGeom geom;
     float fdir1[4];
 };
 struct __cppobj dxJointContact : dxJoint // sizeof=0xAC
 {                                       // ...
     int the_m;
     dContact contact;
 };
 struct __cppobj dxUserGeom : dxGeom // sizeof=0x5C
 {                                       // ...
     char user_data[16];
 };
 struct /*VFT*/ dxUserGeom_vtbl // sizeof=0xC
 {
     void (__thiscall *~dxGeom)(dxGeom *this);
     void (__thiscall *computeAABB)(dxGeom *this);
     int (__thiscall *AABBTest)(dxGeom *this, dxGeom *, float *);
 };
 struct __unaligned __declspec(align(1)) $_TypeDescriptor$_extraBytes_13 // sizeof=0x15
 {
     const void *pVFTable;
     void *spare;
     char name[13];
 };
 struct __cppobj dxSimpleSpace : dxSpace // sizeof=0x64
 {                                       // ...
 };
 struct /*VFT*/ dxSimpleSpace_vtbl // sizeof=0x28
 {
     void (__thiscall *~dxGeom)(dxGeom *this);
     void (__thiscall *computeAABB)(dxGeom *this);
     int (__thiscall *AABBTest)(dxGeom *this, dxGeom *, float *);
     dxGeom *(__thiscall *getGeom)(dxSpace *this, int);
     void (__thiscall *add)(dxSpace *this, dxGeom *);
     void (__thiscall *remove)(dxSpace *this, dxGeom *);
     void (__thiscall *dirty)(dxSpace *this, dxGeom *);
     void (__thiscall *cleanGeoms)(dxSpace *this);
     void (__thiscall *collide)(dxSpace *this, void *, void (__cdecl *)(void *, dxGeom *, dxGeom *));
     void (__thiscall *collide2)(dxSpace *this, void *, dxGeom *, void (__cdecl *)(void *, dxGeom *, dxGeom *));
 };
 struct __cppobj dxJointGroup : dBase // sizeof=0xAC004
 {                                       // ...
     unsigned int num;
     dxJointContact joints[4096];
 };
 struct pooldata_t // sizeof=0x8
 {                                       // ...
     void *firstFree;
     int activeCount;
 };
 struct __cppobj odeGlob_t // sizeof=0x2C64E0
 {                                       // ...
     dxWorld world[3];
     dxSimpleSpace space[3];             // ...
     dxJointGroup contactsGroup[3];      // ...
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     dxBody bodies[512];                 // ...
     pooldata_t bodyPool;                // ...
     unsigned __int8 geoms[425984];      // ...
     pooldata_t geomPool;                // ...
     dxUserGeom worldGeom;               // ...
     // padding byte
     // padding byte
     // padding byte
     // padding byte
 };
 struct __cppobj dMatrix // sizeof=0xC
 {
     int n;
     int m;
     float *data;
 };
 struct __cppobj dLCP // sizeof=0x54
 {
     int n;
     int nskip;
     int nub;
     float **A;
     float *Adata;
     float *x;
     float *b;
     float *w;
     float *lo;
     float *hi;
     float *L;
     float *d;
     float *Dell;
     float *ell;
     float *tmp;
     int *state;
     int *findex;
     int *p;
     int *C;
     int nC;
     int nN;
 };
 struct dxJointLimitMotor // sizeof=0x2C
 {                                       // ...
     float vel;
     float fmax;
     float lostop;
     float histop;
     float fudge_factor;
     float normal_cfm;
     float stop_erp;
     float stop_cfm;
     float bounce;
     int limit;
     float limit_err;
 };
 struct __cppobj dxJointHinge : dxJoint // sizeof=0xBC
 {                                       // ...
     float anchor1[4];
     float anchor2[4];
     float axis1[4];
     float axis2[4];
     float qrel[4];
     dxJointLimitMotor limot;
 };
 struct __cppobj dxJointAMotor : dxJoint // sizeof=0x128
 {                                       // ...
     int num;
     int mode;
     int rel[3];
     float axis[3][4];
     dxJointLimitMotor limot[3];
     float reference1[4];
     float reference2[4];
 };
 struct __cppobj dxJointSlider : dxJoint // sizeof=0x9C
 {
     float axis1[4];
     float qrel[4];
     float offset[4];
     dxJointLimitMotor limot;
 };
 struct __cppobj dxJointFixed : dxJoint // sizeof=0x60
 {
     float qrel[4];
     float offset[4];
 };
 struct __cppobj dxJointNull : dxJoint // sizeof=0x40
 {
 };
 struct __cppobj dxJointUniversal : dxJoint // sizeof=0xF8
 {
     float anchor1[4];
     float anchor2[4];
     float axis1[4];
     float axis2[4];
     float qrel1[4];
     float qrel2[4];
     dxJointLimitMotor limot1;
     dxJointLimitMotor limot2;
 };
 struct __cppobj dxJointBall : dxJoint // sizeof=0x60
 {                                       // ...
     float anchor1[4];
     float anchor2[4];
 };
 struct PrintingContext // sizeof=0xC
 {
     _iobuf *file;
     int precision;
     int indent;
 };
 struct PhysStaticArray<dxJointHinge,192> // sizeof=0x8D04
 {                                       // ...
     int freeEntry;
     dxJointHinge entries[192];
 };
 struct PhysTriMeshInfo // sizeof=0x14
 {                                       // ...
     float *verts;                       // ...
     int vertStride;
     int vertCount;
     unsigned int *indices;
     unsigned int indexCount;
 };
 struct PhysStaticArray<dxJointBall,160> // sizeof=0x3C04
 {                                       // ...
     int freeEntry;
     dxJointBall entries[160];
 };
 struct Jitter // sizeof=0x24
 {                                       // ...
     float origin[3];
     float innerRadiusSq;
     float outerRadiusSq;
     float innerRadius;
     float outerRadius;
     float minDisplacement;
     float maxDisplacement;
 };
 struct PhysStaticArray<dxJointAMotor,160> // sizeof=0xB904
 {                                       // ...
     int freeEntry;
     dxJointAMotor entries[160];
 };
 struct PhysWorldData // sizeof=0xCC
 {                                       // ...
     int timeLastSnapshot;               // ...
     int timeLastUpdate;                 // ...
     float timeNowLerpFrac;              // ...
     void (__cdecl *collisionCallback)(); // ...
     int numJitterRegions;               // ...
     bool useContactCentroids;           // ...
     // padding byte
     // padding byte
     // padding byte
     Jitter jitterRegions[5];
 };
 struct __declspec(align(4)) PhysObjUserData // sizeof=0x70
 {                                       // ...
     float translation[3];
     dxBody *body;
     float savedPos[3];
     float savedRot[3][3];
     int sndClass;
     float friction;
     float bounce;
     physStuckState_t state;
     float contactCentroid[3];
     int timeLastAsleep;
     float awakeTooLongLastPos[3];
     bool hasDisplayedAwakeTooLongWarning;
     bool debugContacts;
     // padding byte
     // padding byte
 };
 struct PhysGlob // sizeof=0x26508
 {                                       // ...
     dxWorld *world[3];                  // ...
     PhysWorldData worldData[3];         // ...
     dxSpace *space[3];                  // ...
     dxJointGroup *contactgroup[3];      // ...
     PhysObjUserData userData[512];      // ...
     pooldata_t userDataPool;            // ...
     PhysTriMeshInfo triMeshInfo;        // ...
     dxTriMeshData *triMeshDataID;
     bool dumpContacts;                  // ...
     // padding byte
     // padding byte
     // padding byte
     dxGeom *visTrisGeom;                // ...
     dxGeom *worldGeom;                  // ...
     int debugActiveObjCount;            // ...
     PhysStaticArray<dxJointHinge,192> hingeArray; // ...
     PhysStaticArray<dxJointBall,160> ballArray; // ...
     PhysStaticArray<dxJointAMotor,160> aMotorArray; // ...
     float gravityDirection[3];          // ...
     unsigned int physPreviousFrameTimes[10]; // ...
     unsigned int physPerformanceFrame;  // ...
     float performanceAverage;           // ...
     unsigned int performanceMintime;    // ...
     unsigned int performanceMaxtime;    // ...
 };
 struct collData_t // sizeof=0xC4
 {                                       // ...
     float mHullBoxRot[12];              // ...
     float vHullBoxPos[4];               // ...
     float vBoxHalfSize[4];              // ...
     float vBestNormal[4];               // ...
     float fBestDepth;                   // ...
     int iBestAxis;
     float triangleEdge0[4];
     float triangleEdge1[4];
     float triangleEdge2[4];
     float triangleNormal[4];
     int iFlags;                         // ...
     dContactGeom *ContactGeoms;         // ...
     int iStride;                        // ...
     dxGeom *Geom1;
     dxGeom *Geom2;
     int ctContacts;                     // ...
     const float *bodyCenter;            // ...
 };
 struct __unaligned __declspec(align(2)) $_TypeDescriptor$_extraBytes_22 // sizeof=0x1E
 {
     const void *pVFTable;
     void *spare;
     char name[22];
 };
 struct __unaligned __declspec(align(1)) $_s__RTTIBaseClassArray$_extraBytes_12 // sizeof=0xD
 {
     const _s__RTTIBaseClassDescriptor2 *arrayOfBaseClassDescriptors[3];
     _BYTE gapC;
 };
 struct __cppobj dxGeomTransform : dxGeom // sizeof=0xD0
 {
     dxGeom *obj;
     int cleanup;
     int infomode;
     float localR[12];
     float localPos[3];
     float finalR[12];
     float finalPos[3];
 };
 struct /*VFT*/ dxGeomTransform_vtbl // sizeof=0xC
 {
     void (__thiscall *~dxGeom)(dxGeom *this);
     void (__thiscall *computeAABB)(dxGeom *this);
     int (__thiscall *AABBTest)(dxGeom *this, dxGeom *, float *);
 };
 struct __cppobj dxCCylinder : dxGeom // sizeof=0x54
 {
     float radius;
     float lz;
 };
 struct /*VFT*/ dxCCylinder_vtbl // sizeof=0xC
 {
     void (__thiscall *~dxGeom)(dxGeom *this);
     void (__thiscall *computeAABB)(dxGeom *this);
     int (__thiscall *AABBTest)(dxGeom *this, dxGeom *, float *);
 };
 struct __cppobj dxPlane : dxGeom // sizeof=0x5C
 {
     float p[4];
 };
 struct /*VFT*/ dxPlane_vtbl // sizeof=0xC
 {
     void (__thiscall *~dxGeom)(dxGeom *this);
     void (__thiscall *computeAABB)(dxGeom *this);
     int (__thiscall *AABBTest)(dxGeom *this, dxGeom *, float *);
 };
 struct __unaligned __declspec(align(1)) $_TypeDescriptor$_extraBytes_15 // sizeof=0x17
 {
     const void *pVFTable;
     void *spare;
     char name[15];
 };
 struct __unaligned __declspec(align(2)) $_TypeDescriptor$_extraBytes_14 // sizeof=0x16
 {
     const void *pVFTable;
     void *spare;
     char name[14];
 };
 struct __cppobj dxBox : dxGeom // sizeof=0x5C
 {
     float side[4];
 };
 struct /*VFT*/ dxBox_vtbl // sizeof=0xC
 {
     void (__thiscall *~dxGeom)(dxGeom *this);
     void (__thiscall *computeAABB)(dxGeom *this);
     int (__thiscall *AABBTest)(dxGeom *this, dxGeom *, float *);
 };
 struct __cppobj dxSphere : dxGeom // sizeof=0x50
 {
     float radius;
 };
 struct /*VFT*/ dxSphere_vtbl // sizeof=0xC
 {
     void (__thiscall *~dxGeom)(dxGeom *this);
     void (__thiscall *computeAABB)(dxGeom *this);
     int (__thiscall *AABBTest)(dxGeom *this, dxGeom *, float *);
 };
 struct __cppobj dxRay : dxGeom // sizeof=0x50
 {
     float length;
 };
 struct /*VFT*/ dxRay_vtbl // sizeof=0xC
 {
     void (__thiscall *~dxGeom)(dxGeom *this);
     void (__thiscall *computeAABB)(dxGeom *this);
     int (__thiscall *AABBTest)(dxGeom *this, dxGeom *, float *);
 };
 struct __unaligned __declspec(align(1)) $_s__RTTIBaseClassArray$_extraBytes_16 // sizeof=0x11
 {
     const _s__RTTIBaseClassDescriptor2 *arrayOfBaseClassDescriptors[4];
     _BYTE gap10;
 };
 struct __declspec(align(4)) dGeomClass // sizeof=0x14
 {                                       // ...
     int bytes;                          // ...
     int (__cdecl *(__cdecl *collider)(int))(dxGeom *, dxGeom *, int, dContactGeom *, int); // ...
     void (__cdecl *aabb)(dxGeom *, float *); // ...
     int (__cdecl *aabb_test)(dxGeom *, dxGeom *, float *); // ...
     bool isPlaceable;                   // ...
     // padding byte
     // padding byte
     // padding byte
 };
 struct dColliderEntry // sizeof=0x8
 {                                       // ...
     int (__cdecl *fn)(dxGeom *, dxGeom *, int, dContactGeom *, int); // ...
     int reverse;                        // ...
 };
 struct SpaceGeomColliderData // sizeof=0xC
 {                                       // ...
     int flags;                          // ...
     dContactGeom *contact;              // ...
     int skip;                           // ...
 };
 struct cspField_t // sizeof=0xC
 {                                       // ...
     const char *szName;                 // ...
     int iOffset;                        // ...
     int iFieldType;                     // ...
 };
 struct __declspec(align(4)) PhysPresetInfo // sizeof=0x28
 {
     float mass;
     float bounce;
     float friction;
     int isFrictionInfinity;
     float bulletForceScale;
     float explosiveForceScale;
     char *sndAliasPrefix;
     float piecesSpreadFraction;
     float piecesUpwardVelocity;
     bool tempDefaultToCylinder;
     // padding byte
     // padding byte
     // padding byte
 };
 struct EntHandle // sizeof=0x4
 {                                       // ...
     unsigned __int16 number;
     unsigned __int16 infoIndex;
 };
 struct entityShared_t // sizeof=0x68
 {                                       // ...
     unsigned __int8 linked;
     unsigned __int8 bmodel;
     unsigned __int8 svFlags;
     // padding byte
     int clientMask[2];
     unsigned __int8 inuse;              // ...
     // padding byte
     // padding byte
     // padding byte
     int broadcastTime;
     float mins[3];                      // ...
     float maxs[3];
     int contents;                       // ...
     float absmin[3];                    // ...
     float absmax[3];
     float currentOrigin[3];             // ...
     float currentAngles[3];
     EntHandle ownerNum;
     int eventTime;
 };
 struct playerTeamState_t // sizeof=0x4
 {                                       // ...
     int location;
 };
 struct clientSession_t // sizeof=0x110
 {                                       // ...
     sessionState_t sessionState;
     int forceSpectatorClient;
     int killCamEntity;
     int status_icon;
     int archiveTime;
     int score;
     int deaths;
     int kills;
     int assists;
     unsigned __int16 scriptPersId;
     // padding byte
     // padding byte
     clientConnected_t connected;
     usercmd_s cmd;
     usercmd_s oldcmd;
     int localClient;
     int predictItemPickup;
     char newnetname[16];
     int maxHealth;
     int enterTime;
     playerTeamState_t teamState;
     int voteCount;
     int teamVoteCount;
     float moveSpeedScaleMultiplier;
     int viewmodelIndex;
     int noSpectate;
     int teamInfo;
     clientState_s cs;
     int psOffsetTime;
 };
 struct gentity_s // sizeof=0x274
 {                                       // ...
     entityState_s s;                    // ...
     entityShared_t r;                   // ...
     gclient_s *client;                  // ...
     turretInfo_s *pTurretInfo;
     scr_vehicle_s *scr_vehicle;
     unsigned __int16 model;
     unsigned __int8 physicsObject;
     unsigned __int8 takedamage;
     unsigned __int8 active;
     unsigned __int8 nopickup;
     unsigned __int8 handler;
     unsigned __int8 team;
     unsigned __int16 classname;         // ...
     unsigned __int16 target;
     unsigned __int16 targetname;
     // padding byte
     // padding byte
     unsigned int attachIgnoreCollision;
     int spawnflags;                     // ...
     int flags;                          // ...
     int eventTime;
     int freeAfterEvent;
     int unlinkAfterEvent;
     int clipmask;
     int processedFrame;
     EntHandle parent;
     int nextthink;
     int health;                         // ...
     int maxHealth;
     int damage;
     int count;
     gentity_s *chain;
     $4FD1F2C094A0DF020529999C4E24827D ___u30;
     EntHandle missileTargetEnt;
     tagInfo_s *tagInfo;
     gentity_s *tagChildren;
     unsigned __int16 attachModelNames[19]; // ...
     unsigned __int16 attachTagNames[19];
     int useCount;
     gentity_s *nextFree;
 };
 struct gclient_s // sizeof=0x3184
 {                                       // ...
     playerState_s ps;
     clientSession_t sess;
     int spectatorClient;
     int noclip;
     int ufo;
     int bFrozen;
     int lastCmdTime;
     int buttons;
     int oldbuttons;
     int latched_buttons;
     int buttonsSinceLastFrame;
     float oldOrigin[3];
     float fGunPitch;
     float fGunYaw;
     int damage_blood;
     float damage_from[3];
     int damage_fromWorld;
     int accurateCount;
     int accuracy_shots;
     int accuracy_hits;
     int inactivityTime;
     int inactivityWarning;
     int lastVoiceTime;
     int switchTeamTime;
     float currentAimSpreadScale;
     gentity_s *persistantPowerup;
     int portalID;
     int dropWeaponTime;
     int sniperRifleFiredTime;
     float sniperRifleMuzzleYaw;
     int PCSpecialPickedUpCount;
     EntHandle useHoldEntity;
     int useHoldTime;
     int useButtonDone;
     int iLastCompassPlayerInfoEnt;
     int compassPingTime;
     int damageTime;
     float v_dmg_roll;
     float v_dmg_pitch;
     float swayViewAngles[3];
     float swayOffset[3];
     float swayAngles[3];
     float vLastMoveAng[3];
     float fLastIdleFactor;
     float vGunOffset[3];
     float vGunSpeed[3];
     int weapIdleTime;
     int lastServerTime;
     int lastSpawnTime;
     unsigned int lastWeapon;
     bool previouslyFiring;
     bool previouslyUsingNightVision;
     bool previouslySprinting;
     // padding byte
     int hasRadar;
     int lastStand;
     int lastStandTime;
 };
 struct turretInfo_s // sizeof=0x48
 {                                       // ...
     int inuse;                          // ...
     int flags;
     int fireTime;
     float arcmin[2];
     float arcmax[2];
     float dropPitch;
     int stance;
     int prevStance;
     int fireSndDelay;
     float userOrigin[3];
     float playerSpread;
     float pitchCap;
     int triggerDown;
     unsigned __int8 fireSnd;
     unsigned __int8 fireSndPlayer;
     unsigned __int8 stopSnd;
     unsigned __int8 stopSndPlayer;
 };
 struct vehicle_node_t // sizeof=0x44
 {                                       // ...
     unsigned __int16 name;
     unsigned __int16 target;
     unsigned __int16 script_linkname;
     unsigned __int16 script_noteworthy;
     __int16 index;
     // padding byte
     // padding byte
     int rotated;
     float speed;
     float lookAhead;
     float origin[3];
     float dir[3];
     float angles[3];
     float length;
     __int16 nextIdx;
     __int16 prevIdx;
 };
 struct vehicle_pathpos_t // sizeof=0xC0
 {                                       // ...
     __int16 nodeIdx;
     __int16 endOfPath;
     float frac;
     float speed;
     float lookAhead;
     float slide;
     float origin[3];
     float angles[3];
     float lookPos[3];
     vehicle_node_t switchNode[2];
 };
 struct vehicle_physic_t // sizeof=0xF8
 {                                       // ...
     float origin[3];
     float prevOrigin[3];
     float angles[3];
     float prevAngles[3];
     float maxAngleVel[3];
     float yawAccel;
     float yawDecel;
     char inputAccelerationOLD;
     char inputTurning;
     // padding byte
     // padding byte
     float driverPedal;
     float driverSteer;
     int onGround;
     float colVelDelta[3];
     float mins[3];
     float maxs[3];
     float vel[3];
     float bodyVel[3];
     float rotVel[3];
     float accel[3];
     float maxPitchAngle;
     float maxRollAngle;
     float wheelZVel[4];
     float wheelZPos[4];
     int wheelSurfType[4];
     float worldTilt[3];
     float worldTiltVel[3];
 };
 struct VehicleTurret // sizeof=0x14
 {                                       // ...
     int fireTime;
     int fireBarrel;
     float barrelOffset;
     int barrelBlocked;
     VehicleTurretState turretState;
 };
 struct VehicleJitter // sizeof=0x3C
 {                                       // ...
     int jitterPeriodMin;
     int jitterPeriodMax;
     int jitterEndTime;
     float jitterOffsetRange[3];
     float jitterDeltaAccel[3];
     float jitterAccel[3];
     float jitterPos[3];
 };
 struct VehicleHover // sizeof=0x1C
 {                                       // ...
     float hoverRadius;
     float hoverSpeed;
     float hoverAccel;
     float hoverGoalPos[3];
     int useHoverAccelForAngles;
 };
 struct VehicleRideSlot_t // sizeof=0xC
 {                                       // ...
     unsigned int tagName;
     int boneIdx;
     int entNum;
 };
 struct VehicleTags // sizeof=0x60
 {                                       // ...
     VehicleRideSlot_t riderSlots[3];
     int detach;
     int popout;
     int body;
     int turret;
     int turret_base;
     int barrel;
     int flash[5];
     int wheel[4];
 };
 struct scr_vehicle_s // sizeof=0x354
 {                                       // ...
     vehicle_pathpos_t pathPos;
     vehicle_physic_t phys;
     int entNum;                         // ...
     __int16 infoIdx;
     // padding byte
     // padding byte
     int flags;
     int team;
     VehicleMoveState moveState;
     __int16 waitNode;
     // padding byte
     // padding byte
     float waitSpeed;
     VehicleTurret turret;
     VehicleJitter jitter;
     VehicleHover hover;
     int drawOnCompass;
     unsigned __int16 lookAtText0;
     unsigned __int16 lookAtText1;
     int manualMode;
     float manualSpeed;
     float manualAccel;
     float manualDecel;
     float manualTime;
     float speed;
     float maxDragSpeed;
     float turningAbility;
     int hasTarget;
     int hasTargetYaw;
     int hasGoalYaw;
     int stopAtGoal;
     int stopping;
     int targetEnt;
     EntHandle lookAtEnt;
     float targetOrigin[3];
     float targetOffset[3];
     float targetYaw;
     float goalPosition[3];
     float goalYaw;
     float prevGoalYaw;
     float yawOverShoot;
     int yawSlowDown;
     float nearGoalNotifyDist;
     float joltDir[2];
     float joltTime;
     float joltWave;
     float joltSpeed;
     float joltDecel;
     int playEngineSound;
     EntHandle idleSndEnt;
     EntHandle engineSndEnt;
     float idleSndLerp;
     float engineSndLerp;
     VehicleTags boneIndex;
     int turretHitNum;
     float forcedMaterialSpeed;
 };
 struct item_ent_t // sizeof=0xC
 {                                       // ...
     int ammoCount;
     int clipAmmoCount;
     int index;
 };
 struct __declspec(align(4)) trigger_ent_t // sizeof=0x14
 {                                       // ...
     int threshold;
     int accumulate;
     int timestamp;
     int singleUserEntIndex;
     bool requireLookAt;
     // padding byte
     // padding byte
     // padding byte
 };
 struct mover_ent_t // sizeof=0x60
 {                                       // ...
     float decelTime;
     float aDecelTime;
     float speed;
     float aSpeed;
     float midTime;
     float aMidTime;
     float pos1[3];
     float pos2[3];
     float pos3[3];
     float apos1[3];
     float apos2[3];
     float apos3[3];
 };
 struct corpse_ent_t // sizeof=0x4
 {                                       // ...
     int deathAnimStartTime;
 };
 struct missile_ent_t // sizeof=0x3C
 {                                       // ...
     float time;
     int timeOfBirth;
     float travelDist;
     float surfaceNormal[3];
     team_t team;
     float curvature[3];
     float targetOffset[3];
     MissileStage stage;
     MissileFlightMode flightMode;
 };
 struct tagInfo_s // sizeof=0x70
 {
     gentity_s *parent;
     gentity_s *next;
     unsigned __int16 name;
     // padding byte
     // padding byte
     int index;
     float axis[4][3];
     float parentInvAxis[4][3];
 };
 union $4FD1F2C094A0DF020529999C4E24827D // sizeof=0x60
 {                                       // ...
     item_ent_t item[2];
     trigger_ent_t trigger;
     mover_ent_t mover;
     corpse_ent_t corpse;
     missile_ent_t missile;
 };
 struct TraceCheckCount // sizeof=0x8
 {                                       // ...
     int global;                         // ...
     int *partitions;                    // ...
 };
 struct GeomStateCylinder // sizeof=0xC
 {                                       // ...
     int direction;
     float radius;
     float halfHeight;
 };
 struct dContactGeomExt // sizeof=0x30
 {                                       // ...
     dContactGeom contact;
     int surfFlags;
 };
 struct leafList_s // sizeof=0x2C
 {                                       // ...
     int count;                          // ...
     int maxcount;                       // ...
     int overflowed;                     // ...
     unsigned __int16 *list;             // ...
     float bounds[2][3];                 // ...
     int lastLeaf;                       // ...
 };
 struct TraceThreadInfo // sizeof=0x10
 {                                       // ...
     TraceCheckCount checkcount;         // ...
     cbrush_t *box_brush;                // ...
     cmodel_t *box_model;                // ...
 };
 union objInfo::<unnamed_type_u> // sizeof=0xC
 {                                       // ...
     float sideExtents[3];
     const cmodel_t *brushModel;
     const cbrush_t *brush;
 };
 struct __declspec(align(4)) objInfo // sizeof=0xA8
 {                                       // ...
     int clipMask;                       // ...
     int cylDirection;                   // ...
     TraceThreadInfo threadInfo;         // ...
     float bounds[2][3];                 // ...
     float radius;                       // ...
     PhysicsGeomType type;               // ...
     float pos[3];                       // ...
     float R[3][3];                      // ...
     float RTransposed[3][3];            // ...
     objInfo::<unnamed_type_u> u;        // ...
     float bodyCenter[3];                // ...
     bool isNarrow;                      // ...
     // padding byte
     // padding byte
     // padding byte
 };
 struct Results // sizeof=0x10
 {                                       // ...
     dContactGeomExt *contacts;          // ...
     int contactCount;                   // ...
     int maxContacts;                    // ...
     int stride;                         // ...
 };
 struct InputOutput // sizeof=0x8
 {                                       // ...
     const objInfo *Input;               // ...
     Results *Output;                    // ...
 };
 union BrushInfo::<unnamed_type_u> // sizeof=0x4
 {                                       // ...
     unsigned __int16 brushModel;
     const cbrush_t *brush;
 };
 struct BrushInfo // sizeof=0x10
 {
     BrushInfo::<unnamed_type_u> u;
     float centerOfMass[3];
 };
 struct cgMedia_t // sizeof=0x27A8
 {                                       // ...
     Material *whiteMaterial;            // ...
     Material *teamStatusBar;            // ...
     Material *balloonMaterial;          // ...
     Material *connectionMaterial;       // ...
     Material *youInKillCamMaterial;     // ...
     Material *tracerMaterial;           // ...
     Material *laserMaterial;            // ...
     Material *laserLightMaterial;       // ...
     Material *lagometerMaterial;        // ...
     Material *hintMaterials[133];       // ...
     Material *stanceMaterials[4];       // ...
     Material *objectiveMaterials[1];    // ...
     Material *friendMaterials[2];       // ...
     Material *damageMaterial;           // ...
     Material *mantleHint;               // ...
     Font_s *smallDevFont;               // ...
     Font_s *bigDevFont;                 // ...
     snd_alias_list_t *landDmgSound;     // ...
     snd_alias_list_t *grenadeExplodeSound[29]; // ...
     snd_alias_list_t *rocketExplodeSound[29]; // ...
     snd_alias_list_t *bulletHitSmallSound[29]; // ...
     snd_alias_list_t *bulletHitLargeSound[29]; // ...
     snd_alias_list_t *bulletHitAPSound[29]; // ...
     snd_alias_list_t *shotgunHitSound[29]; // ...
     snd_alias_list_t *bulletExitSmallSound[29]; // ...
     snd_alias_list_t *bulletExitLargeSound[29]; // ...
     snd_alias_list_t *bulletExitAPSound[29]; // ...
     snd_alias_list_t *shotgunExitSound[29]; // ...
     snd_alias_list_t *stepSprintSound[58]; // ...
     snd_alias_list_t *stepSprintSoundPlayer[58]; // ...
     snd_alias_list_t *stepRunSound[58]; // ...
     snd_alias_list_t *stepRunSoundPlayer[58]; // ...
     snd_alias_list_t *stepWalkSound[58]; // ...
     snd_alias_list_t *stepWalkSoundPlayer[58]; // ...
     snd_alias_list_t *stepProneSound[58]; // ...
     snd_alias_list_t *stepProneSoundPlayer[58]; // ...
     snd_alias_list_t *landSound[58];    // ...
     snd_alias_list_t *landSoundPlayer[58]; // ...
     snd_alias_list_t *qsprintingEquipmentSound; // ...
     snd_alias_list_t *qsprintingEquipmentSoundPlayer; // ...
     snd_alias_list_t *qrunningEquipmentSound; // ...
     snd_alias_list_t *qrunningEquipmentSoundPlayer; // ...
     snd_alias_list_t *qwalkingEquipmentSound; // ...
     snd_alias_list_t *qwalkingEquipmentSoundPlayer; // ...
     snd_alias_list_t *sprintingEquipmentSound; // ...
     snd_alias_list_t *sprintingEquipmentSoundPlayer; // ...
     snd_alias_list_t *runningEquipmentSound; // ...
     snd_alias_list_t *runningEquipmentSoundPlayer; // ...
     snd_alias_list_t *walkingEquipmentSound; // ...
     snd_alias_list_t *walkingEquipmentSoundPlayer; // ...
     snd_alias_list_t *foliageMovement;  // ...
     snd_alias_list_t *bulletWhizby;     // ...
     snd_alias_list_t *meleeHit;         // ...
     snd_alias_list_t *meleeHitOther;    // ...
     snd_alias_list_t *meleeKnifeHit;    // ...
     snd_alias_list_t *meleeKnifeHitOther; // ...
     snd_alias_list_t *nightVisionOn;    // ...
     snd_alias_list_t *nightVisionOff;   // ...
     snd_alias_list_t *playerSprintGasp; // ...
     snd_alias_list_t *playerHeartBeatSound; // ...
     snd_alias_list_t *playerBreathInSound; // ...
     snd_alias_list_t *playerBreathOutSound; // ...
     snd_alias_list_t *playerBreathGaspSound; // ...
     snd_alias_list_t *playerSwapOffhand; // ...
     snd_alias_list_t *physCollisionSound[50][29]; // ...
     Material *compassping_friendlyfiring; // ...
     Material *compassping_friendlyyelling; // ...
     Material *compassping_enemy;        // ...
     Material *compassping_enemyfiring;  // ...
     Material *compassping_enemyyelling; // ...
     Material *compassping_grenade;      // ...
     Material *compassping_explosion;    // ...
     Material *compass_radarline;        // ...
     Material *compass_helicopter_friendly; // ...
     Material *compass_helicopter_enemy; // ...
     Material *compass_plane_friendly;   // ...
     Material *compass_plane_enemy;      // ...
     Material *grenadeIconFrag;          // ...
     Material *grenadeIconFlash;         // ...
     Material *grenadeIconThrowBack;     // ...
     Material *grenadePointer;           // ...
     Material *offscreenObjectivePointer; // ...
     FxImpactTable *fx;                  // ...
     const FxEffectDef *fxNoBloodFleshHit; // ...
     const FxEffectDef *fxKnifeBlood;    // ...
     const FxEffectDef *fxKnifeNoBlood;  // ...
     const FxEffectDef *heliDustEffect;  // ...
     const FxEffectDef *heliWaterEffect; // ...
     const FxEffectDef *helicopterLightSmoke; // ...
     const FxEffectDef *helicopterHeavySmoke; // ...
     const FxEffectDef *helicopterOnFire; // ...
     const FxEffectDef *jetAfterburner;  // ...
     const FxEffectDef *fxVehicleTireDust; // ...
     Material *nightVisionOverlay;       // ...
     Material *hudIconNVG;               // ...
     Material *hudDpadArrow;             // ...
     Material *ammoCounterBullet;        // ...
     Material *ammoCounterBeltBullet;    // ...
     Material *ammoCounterRifleBullet;   // ...
     Material *ammoCounterRocket;        // ...
     Material *ammoCounterShotgunShell;  // ...
     Material *textDecodeCharacters;     // ...
     Material *textDecodeCharactersGlow; // ...
 };
 struct GeomStateBox // sizeof=0xC
 {                                       // ...
     float extent[3];
 };
 union GeomStateBrush::<unnamed_type_u> // sizeof=0x4
 {                                       // ...
     unsigned __int16 brushModel;
     const cbrush_t *brush;
 };
 struct GeomStateBrush // sizeof=0x1C
 {                                       // ...
     GeomStateBrush::<unnamed_type_u> u;
     float momentsOfInertia[3];
     float productsOfInertia[3];
 };
 union GeomState::<unnamed_type_u> // sizeof=0x1C
 {                                       // ...
     GeomStateCylinder cylinderState;
     GeomStateBox boxState;
     GeomStateBrush brushState;
 };
 struct GeomState // sizeof=0x48
 {                                       // ...
     PhysicsGeomType type;               // ...
     bool isOriented;                    // ...
     // padding byte
     // padding byte
     // padding byte
     float orientation[3][3];            // ...
     GeomState::<unnamed_type_u> u;      // ...
 };
 struct ContactList // sizeof=0x1804
 {                                       // ...
     dContactGeomExt contacts[128];
     int contactCount;                   // ...
 };
 struct FrameInfo // sizeof=0x8
 {                                       // ...
     int localClientNum;                 // ...
     int worldIndex;                     // ...
 };
 struct Poly // sizeof=0x8
 {                                       // ...
     float (*pts)[3];                    // ...
     unsigned int ptCount;               // ...
 };
 struct SeparatingAxisInfo // sizeof=0x14
 {                                       // ...
     float bestDepth;                    // ...
     unsigned int bestAxis;              // ...
     float bestContactNormal[3];         // ...
 };
 struct LocalContactData // sizeof=0x24
 {                                       // ...
     float pos[3];
     float normal[3];                    // ...
     float depth;
     int surfFlags;                      // ...
     int inUse;                          // ...
 };
 struct AxisTestResults // sizeof=0x1C
 {                                       // ...
     float bestDepth;
     float bestCenter;                   // ...
     int bestAxis;
     float bestRt;                       // ...
     float normal[3];                    // ...
 };
 struct Capsule // sizeof=0x40
 {                                       // ...
     float p0[3];
     float p1[3];
     float center[3];
     float axis[3];
     float radius;
     float sqRadius;
     float halfLength;
     float halfHeight;
 };
 struct BrushTrimeshData // sizeof=0x18
 {                                       // ...
     const unsigned __int16 *indices;    // ...
     const float (*verts)[3];            // ...
     int triCount;                       // ...
     const objInfo *input;               // ...
     int surfaceFlags;                   // ...
     Results *results;                   // ...
 };
 struct BrushBrushData // sizeof=0xC
 {                                       // ...
     const cbrush_t *fixedBrush;         // ...
     const objInfo *input;               // ...
     Results *results;                   // ...
 };
 struct PostAttribute // sizeof=0x58
 {
     unsigned int Deref;
     SA_YesNoMaybe Valid;
     SA_YesNoMaybe Null;
     SA_YesNoMaybe Tainted;
     SA_AccessType Access;
     unsigned int ValidElementsConst;
     unsigned int ValidBytesConst;
     const wchar_t *ValidElements;
     const wchar_t *ValidBytes;
     const wchar_t *ValidElementsLength;
     const wchar_t *ValidBytesLength;
     unsigned int WritableElementsConst;
     unsigned int WritableBytesConst;
     const wchar_t *WritableElements;
     const wchar_t *WritableBytes;
     const wchar_t *WritableElementsLength;
     const wchar_t *WritableBytesLength;
     unsigned int ElementSizeConst;
     const wchar_t *ElementSize;
     SA_YesNoMaybe NullTerminated;
     SA_YesNoMaybe MustCheck;
     const wchar_t *Condition;
 };
 struct PreAttribute // sizeof=0x54
 {
     unsigned int Deref;
     SA_YesNoMaybe Valid;
     SA_YesNoMaybe Null;
     SA_YesNoMaybe Tainted;
     SA_AccessType Access;
     unsigned int ValidElementsConst;
     unsigned int ValidBytesConst;
     const wchar_t *ValidElements;
     const wchar_t *ValidBytes;
     const wchar_t *ValidElementsLength;
     const wchar_t *ValidBytesLength;
     unsigned int WritableElementsConst;
     unsigned int WritableBytesConst;
     const wchar_t *WritableElements;
     const wchar_t *WritableBytes;
     const wchar_t *WritableElementsLength;
     const wchar_t *WritableBytesLength;
     unsigned int ElementSizeConst;
     const wchar_t *ElementSize;
     SA_YesNoMaybe NullTerminated;
     const wchar_t *Condition;
 };
 struct FormatStringAttribute // sizeof=0x8
 {
     const wchar_t *Style;
     const wchar_t *UnformattedAlternative;
 };
 struct unz_global_info_s // sizeof=0x8
 {                                       // ...
     unsigned int number_entry;          // ...
     unsigned int size_comment;          // ...
 };
 struct tm_unz_s // sizeof=0x18
 {                                       // ...
     unsigned int tm_sec;
     unsigned int tm_min;
     unsigned int tm_hour;
     unsigned int tm_mday;
     unsigned int tm_mon;
     unsigned int tm_year;
 };
 struct unz_file_info_s // sizeof=0x50
 {                                       // ...
     unsigned int version;
     unsigned int version_needed;        // ...
     unsigned int flag;                  // ...
     unsigned int compression_method;    // ...
     unsigned int dosDate;               // ...
     unsigned int crc;                   // ...
     unsigned int compressed_size;       // ...
     unsigned int uncompressed_size;     // ...
     unsigned int size_filename;         // ...
     unsigned int size_file_extra;       // ...
     unsigned int size_file_comment;     // ...
     unsigned int disk_num_start;        // ...
     unsigned int internal_fa;           // ...
     unsigned int external_fa;           // ...
     tm_unz_s tmu_date;                  // ...
 };
 struct unz_file_info_internal_s // sizeof=0x4
 {                                       // ...
     unsigned int offset_curfile;        // ...
 };
 struct $A1AD60A7CB977A1DBF6E2660B1E40DE7 // sizeof=0x8
 {                                       // ...
     unsigned int was;
     unsigned int need;
 };
 union $1F0878CB33AB691FEEFD309FEF732A16 // sizeof=0x8
 {                                       // ...
     unsigned int method;
     $A1AD60A7CB977A1DBF6E2660B1E40DE7 check;
     unsigned int marker;
 };
 struct inflate_blocks_state // sizeof=0x4
 {
     int dummy;
 };
 struct internal_state // sizeof=0x18
 {
     inflate_mode mode;
     $1F0878CB33AB691FEEFD309FEF732A16 sub;
     int nowrap;
     unsigned int wbits;
     inflate_blocks_state *blocks;
 };
 struct z_stream_s // sizeof=0x34
 {                                       // ...
     unsigned __int8 *next_in;           // ...
     unsigned int avail_in;              // ...
     unsigned int total_in;
     unsigned __int8 *next_out;          // ...
     unsigned int avail_out;             // ...
     unsigned int total_out;
     char *msg;
     internal_state *state;
     unsigned __int8 *(__cdecl *zalloc)(unsigned __int8 *, unsigned int, unsigned int);
     void (__cdecl *zfree)(unsigned __int8 *, unsigned __int8 *);
     unsigned __int8 *opaque;
     int data_type;
     unsigned int adler;
 };
 struct file_in_zip_read_info_s // sizeof=0x60
 {
     char *read_buffer;
     z_stream_s stream;
     unsigned int pos_in_zipfile;
     unsigned int stream_initialised;
     unsigned int offset_local_extrafield;
     unsigned int size_local_extrafield;
     unsigned int pos_local_extrafield;
     unsigned int rest_read_compressed;
     unsigned int rest_read_uncompressed;
     _iobuf *file;
     unsigned int compression_method;
     unsigned int byte_before_the_zipfile;
 };
 struct unz_s // sizeof=0x80
 {                                       // ...
     _iobuf *file;                       // ...
     unz_global_info_s gi;               // ...
     unsigned int byte_before_the_zipfile; // ...
     unsigned int num_file;
     unsigned int pos_in_central_dir;
     unsigned int current_file_ok;
     unsigned int central_pos;           // ...
     unsigned int size_central_dir;      // ...
     unsigned int offset_central_dir;    // ...
     unz_file_info_s cur_file_info;
     unz_file_info_internal_s cur_file_info_internal;
     file_in_zip_read_info_s *pfile_in_zip_read; // ...
 };
 struct $BC236CFBD570C18489EB46681F52D83D // sizeof=0x10
 {
     char *locale;
     unsigned __int16 *wlocale;
     int *refcount;
     int *wrefcount;
 };
 union $3FED14670831426F78C1F126725788C0 // sizeof=0x2
 {                                       // ...
     unsigned __int16 freq;
     unsigned __int16 code;
 };
 union $2467CA9704E0472D4CCF1296A763D23A // sizeof=0x2
 {                                       // ...
     unsigned __int16 dad;
     unsigned __int16 len;
 };
 struct ct_data_s // sizeof=0x4
 {                                       // ...
     $3FED14670831426F78C1F126725788C0 fc; // ...
     $2467CA9704E0472D4CCF1296A763D23A dl; // ...
 };
 struct static_tree_desc_s // sizeof=0x14
 {                                       // ...
     const ct_data_s *static_tree;
     const int *extra_bits;
     int extra_base;
     int elems;
     int max_length;
 };
 struct tree_desc_s // sizeof=0xC
 {
     ct_data_s *dyn_tree;
     int max_code;
     static_tree_desc_s *stat_desc;
 };
 struct $9E513960E3E38BAB9A689A3467F7F411 // sizeof=0x2
 {                                       // ...
     unsigned __int8 Exop;
     unsigned __int8 Bits;
 };
 union $F78B1E0A5ED19C7EB77B9D9E007A3D19 // sizeof=0x4
 {                                       // ...
     $9E513960E3E38BAB9A689A3467F7F411 what;
     unsigned int pad;
 };
 struct inflate_huft_s // sizeof=0x8
 {                                       // ...
     $F78B1E0A5ED19C7EB77B9D9E007A3D19 word; // ...
     unsigned int base;                  // ...
 };
 struct $350957C7E6FF2CE32950C2CF41971002 // sizeof=0x14
 {                                       // ...
     unsigned int table;
     unsigned int index;
     unsigned int *blens;
     unsigned int bb;
     inflate_huft_s *tb;
 };
 struct $77952A61BE64D46274FCBAD62CE807D1 // sizeof=0x8
 {                                       // ...
     inflate_huft_s *tree;
     unsigned int need;
 };
 struct $A30D36EE59FB41C132336408835C9B9C // sizeof=0x8
 {                                       // ...
     unsigned int get;
     unsigned int dist;
 };
 union $7AE100FC09BFED0479A7EA408CA150EC // sizeof=0x8
 {                                       // ...
     $77952A61BE64D46274FCBAD62CE807D1 code;
     unsigned int lit;
     $A30D36EE59FB41C132336408835C9B9C copy;
 };
 struct inflate_codes_state // sizeof=0x1C
 {
     inflate_codes_mode mode;
     unsigned int len;
     $7AE100FC09BFED0479A7EA408CA150EC sub;
     unsigned __int8 lbits;
     unsigned __int8 dbits;
     // padding byte
     // padding byte
     inflate_huft_s *ltree;
     inflate_huft_s *dtree;
 };
 struct $00C36CF2B283F692F21D79683E545BE9 // sizeof=0x4
 {                                       // ...
     inflate_codes_state *codes;
 };
 union $5DF3AF00FB12D3204DB852D53FE0F087 // sizeof=0x14
 {
     unsigned int left;
     $350957C7E6FF2CE32950C2CF41971002 trees;
     $00C36CF2B283F692F21D79683E545BE9 decode;
 };
 struct config_s // sizeof=0xC
 {                                       // ...
     unsigned __int16 good_length;       // ...
     unsigned __int16 max_lazy;          // ...
     unsigned __int16 nice_length;       // ...
     unsigned __int16 max_chain;         // ...
     block_state (__cdecl *func)(internal_state *, int); // ...
 };
 struct TestLod // sizeof=0x8
 {                                       // ...
     bool enabled;                       // ...
     // padding byte
     // padding byte
     // padding byte
     float dist;                         // ...
 };
 struct __declspec(align(4)) XAnimState // sizeof=0x20
 {                                       // ...
     float currentAnimTime;              // ...
     float oldTime;                      // ...
     __int16 cycleCount;                 // ...
     __int16 oldCycleCount;              // ...
     float goalTime;                     // ...
     float goalWeight;                   // ...
     float weight;                       // ...
     float rate;                         // ...
     bool instantWeightChange;           // ...
     // padding byte
     // padding byte
     // padding byte
 };
 struct XAnimInfo // sizeof=0x40
 {                                       // ...
     unsigned __int16 notifyChild;
     __int16 notifyIndex;
     unsigned __int16 notifyName;
     unsigned __int16 notifyType;
     unsigned __int16 prev;              // ...
     unsigned __int16 next;              // ...
     unsigned __int16 children;          // ...
     unsigned __int16 parent;            // ...
     unsigned __int16 animIndex;         // ...
     unsigned __int16 animToModel;
     bool inuse;                         // ...
     // padding byte
     // padding byte
     // padding byte
     XAnimTree_s *tree;
     $7F333398CC08E12E110886895274CBFC ___u12;
     XAnimState state;                   // ...
 };
 struct adjacencyWinding_t // sizeof=0x34
 {                                       // ...
     int numsides;                       // ...
     int sides[12];
 };
 struct SimplePlaneIntersection // sizeof=0x18
 {                                       // ...
     float xyz[3];                       // ...
     int planeIndex[3];
 };
 struct GfxRenderTargetSurface // sizeof=0x8
 {                                       // ...
     IDirect3DSurface9 *color;           // ...
     IDirect3DSurface9 *depthStencil;    // ...
 };
 struct GfxRenderTarget // sizeof=0x14
 {                                       // ...
     GfxImage *image;                    // ...
     GfxRenderTargetSurface surface;     // ...
     unsigned int width;                 // ...
     unsigned int height;                // ...
 };
 struct XModelConfigEntry // sizeof=0x404
 {                                       // ...
     char filename[1024];                // ...
     float dist;                         // ...
 };
 struct __declspec(align(4)) XModelConfig // sizeof=0x1430
 {                                       // ...
     XModelConfigEntry entries[4];       // ...
     float mins[3];
     float maxs[3];                      // ...
     int collLod;                        // ...
     unsigned __int8 flags;              // ...
     char physicsPresetFilename[1024];   // ...
     // padding byte
     // padding byte
     // padding byte
 };
 struct XModelSurfs // sizeof=0x14
 {                                       // ...
     XSurface *surfs;                    // ...
     int partBits[4];                    // ...
 };
 struct XModelPartsLoad // sizeof=0x1C
 {                                       // ...
     unsigned __int8 numBones;
     unsigned __int8 numRootBones;
     // padding byte
     // padding byte
     unsigned __int16 *boneNames;
     unsigned __int8 *parentList;
     __int16 *quats;
     float *trans;
     unsigned __int8 *partClassification;
     DObjAnimMat *baseMat;
 };
 struct XModelDefault // sizeof=0x4C
 {                                       // ...
     unsigned __int16 boneNames[1];
     unsigned __int8 parentList[1];      // ...
     // padding byte
     XModelPartsLoad modelParts;         // ...
     XBoneInfo boneInfo;                 // ...
     unsigned __int8 partClassification[1]; // ...
     // padding byte
     unsigned __int16 surfNames[1];
 };
 struct TraceExtents // sizeof=0x24
 {                                       // ...
     float start[3];                     // ...
     float end[3];                       // ...
     float invDelta[3];
 };
 struct QueueElement // sizeof=0x8
 {                                       // ...
     unsigned int beginIndex;            // ...
     unsigned int count;                 // ...
 };
 struct XSurfaceGetTriCandidatesLocals // sizeof=0x2A4
 {                                       // ...
     int mins[3];
     int maxs[3];                        // ...
     const XSurfaceCollisionTree *tree;  // ...
     const unsigned __int16 *inIndices;  // ...
     const GfxPackedVertex *inVertices0; // ...
     bool (__cdecl *visitorFunc)(void *, const GfxPackedVertex **, const GfxPackedVertex **); // ...
     void *visitorContext;               // ...
     unsigned int nodeQueueBegin;        // ...
     unsigned int nodeQueueEnd;          // ...
     unsigned int leafQueueBegin;        // ...
     unsigned int leafQueueEnd;          // ...
     unsigned int triangleQueueBegin;    // ...
     unsigned int triangleQueueEnd;      // ...
     unsigned int vertexQueueBegin;      // ...
     unsigned int vertexQueueEnd;        // ...
     QueueElement nodeQueue[64];         // ...
     QueueElement leafQueue[4];
     QueueElement triangleQueue[4];
     unsigned __int16 vertexQueue[4][3];
 };
 union XAnimPartQuatFrames // sizeof=0x4
 {                                       // ...
     __int16 (*frames)[4];
     __int16 (*frames2)[2];
 };
 struct __declspec(align(4)) XAnimPartQuatDataFrames // sizeof=0x8
 {                                       // ...
     XAnimPartQuatFrames u;
     XAnimDynamicIndices indices;
     // padding byte
     // padding byte
 };
 union XAnimPartQuatData // sizeof=0x8
 {                                       // ...
     XAnimPartQuatDataFrames frames;
     __int16 frame0[4];
     __int16 frame02[2];
 };
 struct XAnimPartQuat // sizeof=0xC
 {
     unsigned __int16 size;
     // padding byte
     // padding byte
     XAnimPartQuatData u;
 };
 struct __declspec(align(4)) XAnimPartQuatPtr // sizeof=0x8
 {                                       // ...
     XAnimPartQuat *quat;                // ...
     unsigned __int8 partIndex;          // ...
     // padding byte
     // padding byte
     // padding byte
 };
 struct __declspec(align(4)) XAnimPartTransPtr // sizeof=0x8
 {                                       // ...
     XAnimPartTrans *trans;              // ...
     unsigned __int8 partIndex;          // ...
     // padding byte
     // padding byte
     // padding byte
 };
 struct __declspec(align(4)) HunkUser // sizeof=0x24
 {
     HunkUser *current;
     HunkUser *next;
     int maxSize;
     int end;
     int pos;
     const char *name;
     bool fixed;
     bool tempMem;
     // padding byte
     // padding byte
     int type;
     unsigned __int8 buf[1];
     // padding byte
     // padding byte
     // padding byte
 };
 struct XAnimTime // sizeof=0xC
 {                                       // ...
     float time;
     float frameFrac;
     int frameIndex;
 };
 struct bitarray<128> // sizeof=0x10
 {                                       // ...
     int array[4];                       // ...
 };
 struct XAnimCalcAnimInfo // sizeof=0x6020
 {
     DObjAnimMat rotTransArray[768];
     bitarray<128> animPartBits;
     bitarray<128> ignorePartBits;
 };
 struct __declspec(align(4)) XAnimToXModel // sizeof=0x94
 {                                       // ...
     bitarray<128> partBits;             // ...
     unsigned __int8 boneCount;          // ...
     unsigned __int8 boneIndex[128];     // ...
     // padding byte
     // padding byte
     // padding byte
 };
 struct FastCriticalSection // sizeof=0x8
 {                                       // ...
     volatile int readCount;
     volatile int writeCount;            // ...
 };
 struct XAnimNotify_s // sizeof=0xC
 {                                       // ...
     const char *name;
     unsigned int type;
     float timeFrac;
 };
 struct XModelNameMap // sizeof=0x4
 {                                       // ...
     unsigned __int16 name;              // ...
     unsigned __int16 index;
 };
 struct XAnimSimpleRotPos // sizeof=0x18
 {                                       // ...
     float rot[2];                       // ...
     float posWeight;                    // ...
     float pos[3];                       // ...
 };
 struct XAnimDeltaInfo // sizeof=0x4
 {                                       // ...
     bool bClear;                        // ...
     bool bNormQuat;                     // ...
     bool bAbs;                          // ...
     bool bUseGoalWeight;                // ...
 };
 struct SavedDObjModel // sizeof=0x2
 {                                       // ...
     unsigned __int16 boneName;
 };
 struct __declspec(align(4)) DObjTrace_s // sizeof=0x1C
 {                                       // ...
     float fraction;                     // ...
     int surfaceflags;                   // ...
     float normal[3];                    // ...
     unsigned __int16 modelIndex;        // ...
     unsigned __int16 partName;          // ...
     unsigned __int16 partGroup;         // ...
     // padding byte
     // padding byte
 };
 struct SavedDObj // sizeof=0x60
 {                                       // ...
     SavedDObjModel dobjModels[32];
     XModel **models;                    // ...
     unsigned int ignoreCollision;       // ...
     unsigned __int16 numModels;         // ...
     unsigned __int16 entnum;            // ...
     XAnimTree_s *tree;                  // ...
     unsigned int hidePartBits[4];       // ...
 };
 struct search_node_s // sizeof=0x10
 {
     const SimplePlaneIntersection *edge;
     int plane;
     int depth;
     search_node_s *prevNode;
 };
 struct clientLogo_t // sizeof=0x18
 {                                       // ...
     int startTime;                      // ...
     int duration;                       // ...
     int fadein;                         // ...
     int fadeout;                        // ...
     Material *material[2];              // ...
 };
 struct __declspec(align(4)) serverInfo_t // sizeof=0x94
 {                                       // ...
     netadr_t adr;                       // ...
     unsigned __int8 allowAnonymous;     // ...
     unsigned __int8 bPassword;
     unsigned __int8 pure;
     char consoleDisabled;
     unsigned __int8 netType;            // ...
     unsigned __int8 clients;            // ...
     unsigned __int8 maxClients;         // ...
     unsigned __int8 dirty;              // ...
     char friendlyfire;
     char killcam;
     unsigned __int8 hardware;
     unsigned __int8 mod;
     unsigned __int8 voice;
     unsigned __int8 punkbuster;         // ...
     unsigned __int8 requestCount;       // ...
     // padding byte
     __int16 minPing;                    // ...
     __int16 maxPing;                    // ...
     __int16 ping;                       // ...
     char hostName[32];                  // ...
     char mapName[32];                   // ...
     char game[24];                      // ...
     char gameType[16];                  // ...
     // padding byte
     // padding byte
 };
 struct __declspec(align(4)) vidConfig_t // sizeof=0x30
 {                                       // ...
     unsigned int sceneWidth;            // ...
     unsigned int sceneHeight;           // ...
     unsigned int displayWidth;          // ...
     unsigned int displayHeight;         // ...
     unsigned int displayFrequency;      // ...
     int isFullscreen;                   // ...
     float aspectRatioWindow;            // ...
     float aspectRatioScenePixel;        // ...
     float aspectRatioDisplayPixel;      // ...
     unsigned int maxTextureSize;        // ...
     unsigned int maxTextureMaps;        // ...
     bool deviceSupportsGamma;           // ...
     // padding byte
     // padding byte
     // padding byte
 };
 struct trDebugString_t // sizeof=0x80
 {
     float xyz[3];
     float color[4];
     float scale;
     char text[96];
 };
 struct clientDebugStringInfo_t // sizeof=0x10
 {                                       // ...
     int max;                            // ...
     int num;                            // ...
     trDebugString_t *strings;           // ...
     int *durations;                     // ...
 };
 struct trDebugLine_t // sizeof=0x2C
 {
     float start[3];
     float end[3];
     float color[4];
     int depthTest;
 };
 struct clientDebugLineInfo_t // sizeof=0x10
 {                                       // ...
     int max;                            // ...
     int num;                            // ...
     trDebugLine_t *lines;               // ...
     int *durations;                     // ...
 };
 struct clientDebug_t // sizeof=0x68
 {                                       // ...
     int prevFromServer;
     int fromServer;                     // ...
     clientDebugStringInfo_t clStrings;  // ...
     clientDebugStringInfo_t svStringsBuffer; // ...
     clientDebugStringInfo_t svStrings;  // ...
     clientDebugLineInfo_t clLines;      // ...
     clientDebugLineInfo_t svLinesBuffer; // ...
     clientDebugLineInfo_t svLines;      // ...
 };
 struct clientStatic_t // sizeof=0x2DD070
 {                                       // ...
     int quit;                           // ...
     int hunkUsersStarted;               // ...
     char servername[256];               // ...
     int rendererStarted;                // ...
     int soundStarted;                   // ...
     int uiStarted;                      // ...
     int devGuiStarted;                  // ...
     int frametime;                      // ...
     int realtime;                       // ...
     int realFrametime;                  // ...
     clientLogo_t logo;                  // ...
     float mapCenter[3];                 // ...
     int numlocalservers;                // ...
     serverInfo_t localServers[128];     // ...
     int waitglobalserverresponse;       // ...
     int numglobalservers;               // ...
     serverInfo_t globalServers[20000];  // ...
     int numfavoriteservers;             // ...
     serverInfo_t favoriteServers[128];  // ...
     int pingUpdateSource;               // ...
     netadr_t updateServer;
     char updateChallenge[1024];
     char updateInfoString[1024];        // ...
     netadr_t authorizeServer;           // ...
     Material *whiteMaterial;            // ...
     Material *consoleMaterial;          // ...
     Font_s *consoleFont;                // ...
     char autoupdateServerNames[5][64];  // ...
     netadr_t autoupdateServer;          // ...
     vidConfig_t vidConfig;              // ...
     clientDebug_t debug;                // ...
     int download;                       // ...
     char downloadTempName[256];         // ...
     char downloadName[256];             // ...
     int downloadNumber;
     int downloadBlock;                  // ...
     int downloadCount;                  // ...
     int downloadSize;                   // ...
     char downloadList[1024];            // ...
     int downloadRestart;                // ...
     int gameDirChanged;                 // ...
     int wwwDlDisconnected;              // ...
     int wwwDlInProgress;                // ...
     int downloadFlags;                  // ...
     char originalDownloadName[64];      // ...
     float debugRenderPos[3];            // ...
 };
 struct WinVars_t // sizeof=0x20
 {                                       // ...
     HINSTANCE__ *reflib_library;
     int reflib_active;
     HWND__ *hWnd;                       // ...
     HINSTANCE__ *hInstance;             // ...
     int activeApp;                      // ...
     int isMinimized;                    // ...
     int recenterMouse;                  // ...
     unsigned int sysMsgTime;            // ...
 };
 struct tagMONITORINFO // sizeof=0x28
 {                                       // ...
     unsigned int cbSize;                // ...
     tagRECT rcMonitor;                  // ...
     tagRECT rcWork;
     unsigned int dwFlags;
 };
 struct _DSCBCAPS // sizeof=0x10
 {
     unsigned int dwSize;
     unsigned int dwFlags;
     unsigned int dwBufferBytes;
     unsigned int dwReserved;
 };
 struct __cppobj IDirectSoundCaptureBuffer : IUnknown // sizeof=0x4
 {
 };
 struct __unaligned __declspec(align(2)) tWAVEFORMATEX // sizeof=0x12
 {                                       // ...
     unsigned __int16 wFormatTag;        // ...
     unsigned __int16 nChannels;         // ...
     unsigned int nSamplesPerSec;        // ...
     unsigned int nAvgBytesPerSec;       // ...
     unsigned __int16 nBlockAlign;       // ...
     unsigned __int16 wBitsPerSample;    // ...
     unsigned __int16 cbSize;            // ...
 };
 struct _DSCEFFECTDESC // sizeof=0x30
 {
     unsigned int dwSize;
     unsigned int dwFlags;
     _GUID guidDSCFXClass;
     _GUID guidDSCFXInstance;
     unsigned int dwReserved1;
     unsigned int dwReserved2;
 };
 const struct _DSCBUFFERDESC // sizeof=0x1C
 {                                       // ...
     unsigned int dwSize;                // ...
     unsigned int dwFlags;               // ...
     unsigned int dwBufferBytes;         // ...
     unsigned int dwReserved;            // ...
     tWAVEFORMATEX *lpwfxFormat;         // ...
     unsigned int dwFXCount;             // ...
     _DSCEFFECTDESC *lpDSCFXDesc;        // ...
 };
 struct __cppobj IDirectSoundCapture : IUnknown // sizeof=0x4
 {
 };
 struct _DSCCAPS // sizeof=0x10
 {
     unsigned int dwSize;
     unsigned int dwFlags;
     unsigned int dwFormats;
     unsigned int dwChannels;
 };
 struct /*VFT*/ IDirectSoundCapture_vtbl // sizeof=0x18
 {
     HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
     unsigned int (__stdcall *AddRef)(IUnknown *this);
     unsigned int (__stdcall *Release)(IUnknown *this);
     HRESULT (__stdcall *CreateCaptureBuffer)(IDirectSoundCapture *this, const _DSCBUFFERDESC *, IDirectSoundCaptureBuffer **, IUnknown *);
     HRESULT (__stdcall *GetCaps)(IDirectSoundCapture *this, _DSCCAPS *);
     HRESULT (__stdcall *Initialize)(IDirectSoundCapture *this, const _GUID *);
 };
 struct /*VFT*/ IDirectSoundCaptureBuffer_vtbl // sizeof=0x30
 {
     HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
     unsigned int (__stdcall *AddRef)(IUnknown *this);
     unsigned int (__stdcall *Release)(IUnknown *this);
     HRESULT (__stdcall *GetCaps)(IDirectSoundCaptureBuffer *this, _DSCBCAPS *);
     HRESULT (__stdcall *GetCurrentPosition)(IDirectSoundCaptureBuffer *this, unsigned int *, unsigned int *);
     HRESULT (__stdcall *GetFormat)(IDirectSoundCaptureBuffer *this, tWAVEFORMATEX *, unsigned int, unsigned int *);
     HRESULT (__stdcall *GetStatus)(IDirectSoundCaptureBuffer *this, unsigned int *);
     HRESULT (__stdcall *Initialize)(IDirectSoundCaptureBuffer *this, IDirectSoundCapture *, const _DSCBUFFERDESC *);
     HRESULT (__stdcall *Lock)(IDirectSoundCaptureBuffer *this, unsigned int, unsigned int, void **, unsigned int *, void **, unsigned int *, unsigned int);
     HRESULT (__stdcall *Start)(IDirectSoundCaptureBuffer *this, unsigned int);
     HRESULT (__stdcall *Stop)(IDirectSoundCaptureBuffer *this);
     HRESULT (__stdcall *Unlock)(IDirectSoundCaptureBuffer *this, void *, unsigned int, void *, unsigned int);
 };
 struct _DSBCAPS // sizeof=0x14
 {
     unsigned int dwSize;
     unsigned int dwFlags;
     unsigned int dwBufferBytes;
     unsigned int dwUnlockTransferRate;
     unsigned int dwPlayCpuOverhead;
 };
 struct __cppobj IDirectSoundBuffer : IUnknown // sizeof=0x4
 {
 };
 const struct _DSBUFFERDESC // sizeof=0x24
 {                                       // ...
     unsigned int dwSize;                // ...
     unsigned int dwFlags;               // ...
     unsigned int dwBufferBytes;         // ...
     unsigned int dwReserved;            // ...
     tWAVEFORMATEX *lpwfxFormat;         // ...
     _GUID guid3DAlgorithm;              // ...
 };
 struct __cppobj IDirectSound : IUnknown // sizeof=0x4
 {                                       // ...
 };
 struct _DSCAPS // sizeof=0x60
 {
     unsigned int dwSize;
     unsigned int dwFlags;
     unsigned int dwMinSecondarySampleRate;
     unsigned int dwMaxSecondarySampleRate;
     unsigned int dwPrimaryBuffers;
     unsigned int dwMaxHwMixingAllBuffers;
     unsigned int dwMaxHwMixingStaticBuffers;
     unsigned int dwMaxHwMixingStreamingBuffers;
     unsigned int dwFreeHwMixingAllBuffers;
     unsigned int dwFreeHwMixingStaticBuffers;
     unsigned int dwFreeHwMixingStreamingBuffers;
     unsigned int dwMaxHw3DAllBuffers;
     unsigned int dwMaxHw3DStaticBuffers;
     unsigned int dwMaxHw3DStreamingBuffers;
     unsigned int dwFreeHw3DAllBuffers;
     unsigned int dwFreeHw3DStaticBuffers;
     unsigned int dwFreeHw3DStreamingBuffers;
     unsigned int dwTotalHwMemBytes;
     unsigned int dwFreeHwMemBytes;
     unsigned int dwMaxContigFreeHwMemBytes;
     unsigned int dwUnlockTransferRateHwBuffers;
     unsigned int dwPlayCpuOverheadSwBuffers;
     unsigned int dwReserved1;
     unsigned int dwReserved2;
 };
 struct /*VFT*/ IDirectSound_vtbl // sizeof=0x2C
 {
     HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
     unsigned int (__stdcall *AddRef)(IUnknown *this);
     unsigned int (__stdcall *Release)(IUnknown *this);
     HRESULT (__stdcall *CreateSoundBuffer)(IDirectSound *this, const _DSBUFFERDESC *, IDirectSoundBuffer **, IUnknown *);
     HRESULT (__stdcall *GetCaps)(IDirectSound *this, _DSCAPS *);
     HRESULT (__stdcall *DuplicateSoundBuffer)(IDirectSound *this, IDirectSoundBuffer *, IDirectSoundBuffer **);
     HRESULT (__stdcall *SetCooperativeLevel)(IDirectSound *this, HWND__ *, unsigned int);
     HRESULT (__stdcall *Compact)(IDirectSound *this);
     HRESULT (__stdcall *GetSpeakerConfig)(IDirectSound *this, unsigned int *);
     HRESULT (__stdcall *SetSpeakerConfig)(IDirectSound *this, unsigned int);
     HRESULT (__stdcall *Initialize)(IDirectSound *this, const _GUID *);
 };
 struct /*VFT*/ IDirectSoundBuffer_vtbl // sizeof=0x54
 {
     HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
     unsigned int (__stdcall *AddRef)(IUnknown *this);
     unsigned int (__stdcall *Release)(IUnknown *this);
     HRESULT (__stdcall *GetCaps)(IDirectSoundBuffer *this, _DSBCAPS *);
     HRESULT (__stdcall *GetCurrentPosition)(IDirectSoundBuffer *this, unsigned int *, unsigned int *);
     HRESULT (__stdcall *GetFormat)(IDirectSoundBuffer *this, tWAVEFORMATEX *, unsigned int, unsigned int *);
     HRESULT (__stdcall *GetVolume)(IDirectSoundBuffer *this, int *);
     HRESULT (__stdcall *GetPan)(IDirectSoundBuffer *this, int *);
     HRESULT (__stdcall *GetFrequency)(IDirectSoundBuffer *this, unsigned int *);
     HRESULT (__stdcall *GetStatus)(IDirectSoundBuffer *this, unsigned int *);
     HRESULT (__stdcall *Initialize)(IDirectSoundBuffer *this, IDirectSound *, const _DSBUFFERDESC *);
     HRESULT (__stdcall *Lock)(IDirectSoundBuffer *this, unsigned int, unsigned int, void **, unsigned int *, void **, unsigned int *, unsigned int);
     HRESULT (__stdcall *Play)(IDirectSoundBuffer *this, unsigned int, unsigned int, unsigned int);
     HRESULT (__stdcall *SetCurrentPosition)(IDirectSoundBuffer *this, unsigned int);
     HRESULT (__stdcall *SetFormat)(IDirectSoundBuffer *this, const tWAVEFORMATEX *);
     HRESULT (__stdcall *SetVolume)(IDirectSoundBuffer *this, int);
     HRESULT (__stdcall *SetPan)(IDirectSoundBuffer *this, int);
     HRESULT (__stdcall *SetFrequency)(IDirectSoundBuffer *this, unsigned int);
     HRESULT (__stdcall *Stop)(IDirectSoundBuffer *this);
     HRESULT (__stdcall *Unlock)(IDirectSoundBuffer *this, void *, unsigned int, void *, unsigned int);
     HRESULT (__stdcall *Restore)(IDirectSoundBuffer *this);
 };
 struct __declspec(align(4)) dsound_sample_t // sizeof=0x48
 {                                       // ...
     IDirectSoundCaptureBuffer *DSCB;
     IDirectSoundBuffer *DSB;
     unsigned int dwBufferSize;
     unsigned int dwCaptureOffset;
     unsigned int currentOffset;
     unsigned int lastOffset;
     unsigned int currentBufferLength;
     int stopPosition;
     unsigned int lastPlayPos;
     int bytesBuffered;
     int mode;
     int frequency;
     int volume;
     int pan;
     int channels;
     bool playing;
     // padding byte
     // padding byte
     // padding byte
     int channel;
     unsigned __int8 playMode;
     // padding byte
     // padding byte
     // padding byte
 };
 struct tagMIXERCONTROLDETAILS_LISTTEXTA // sizeof=0x48
 {
     unsigned int dwParam1;
     unsigned int dwParam2;
     char szName[64];
 };
 struct $0D057425CB83406CCB6CB71DF3FA0A4C // sizeof=0x8
 {                                       // ...
     int lMinimum;
     int lMaximum;
 };
 struct $E50C0F09BB6F8C50FF087E1E76EA2CA0 // sizeof=0x8
 {                                       // ...
     unsigned int dwMinimum;
     unsigned int dwMaximum;
 };
 union tagMIXERCONTROLA::<unnamed_type_Bounds> // sizeof=0x18
 {                                       // ...
     $0D057425CB83406CCB6CB71DF3FA0A4C __s0;
     $E50C0F09BB6F8C50FF087E1E76EA2CA0 __s1;
     unsigned int dwReserved[6];
 };
 union tagMIXERCONTROLA::<unnamed_type_Metrics> // sizeof=0x18
 {                                       // ...
     unsigned int cSteps;
     unsigned int cbCustomData;
     unsigned int dwReserved[6];
 };
 struct tagMIXERCONTROLA // sizeof=0x94
 {                                       // ...
     unsigned int cbStruct;
     unsigned int dwControlID;           // ...
     unsigned int dwControlType;
     unsigned int fdwControl;
     unsigned int cMultipleItems;
     char szShortName[16];
     char szName[64];
     tagMIXERCONTROLA::<unnamed_type_Bounds> Bounds;
     tagMIXERCONTROLA::<unnamed_type_Metrics> Metrics;
 };
 struct tagMIXERLINEA::<unnamed_type_Target> // sizeof=0x30
 {                                       // ...
     unsigned int dwType;
     unsigned int dwDeviceID;
     unsigned __int16 wMid;
     unsigned __int16 wPid;
     unsigned int vDriverVersion;
     char szPname[32];
 };
 struct tagMIXERLINEA // sizeof=0xA8
 {                                       // ...
     unsigned int cbStruct;              // ...
     unsigned int dwDestination;
     unsigned int dwSource;              // ...
     unsigned int dwLineID;              // ...
     unsigned int fdwLine;
     unsigned int dwUser;
     unsigned int dwComponentType;       // ...
     unsigned int cChannels;             // ...
     unsigned int cConnections;          // ...
     unsigned int cControls;             // ...
     char szShortName[16];
     char szName[64];                    // ...
     tagMIXERLINEA::<unnamed_type_Target> Target;
 };
 struct HMIXER__ // sizeof=0x4
 {
     int unused;
 };
 struct tMIXERCONTROLDETAILS_BOOLEAN // sizeof=0x4
 {                                       // ...
     int fValue;                         // ...
 };
 union $476D211351DA30503E50D2F0E6E515B0 // sizeof=0x4
 {                                       // ...
     unsigned int dwControlID;
     unsigned int dwControlType;
 };
 struct tagMIXERLINECONTROLSA // sizeof=0x18
 {                                       // ...
     unsigned int cbStruct;              // ...
     unsigned int dwLineID;              // ...
     $476D211351DA30503E50D2F0E6E515B0 ___u2; // ...
     unsigned int cControls;             // ...
     unsigned int cbmxctrl;              // ...
     tagMIXERCONTROLA *pamxctrl;         // ...
 };
 union $905574A73381EA19EDAF519BB8D2D5C5 // sizeof=0x4
 {                                       // ...
     HWND__ *hwndOwner;
     unsigned int cMultipleItems;
 };
 struct tMIXERCONTROLDETAILS // sizeof=0x18
 {                                       // ...
     unsigned int cbStruct;              // ...
     unsigned int dwControlID;           // ...
     unsigned int cChannels;             // ...
     $905574A73381EA19EDAF519BB8D2D5C5 ___u3; // ...
     unsigned int cbDetails;             // ...
     void *paDetails;                    // ...
 };
 struct tMIXERCONTROLDETAILS_UNSIGNED // sizeof=0x4
 {                                       // ...
     unsigned int dwValue;               // ...
 };
 struct HMIXEROBJ__ // sizeof=0x4
 {
     int unused;
 };
 struct HFONT__ // sizeof=0x4
 {
     int unused;
 };
 struct WinConData // sizeof=0x620
 {                                       // ...
     HWND__ *hWnd;                       // ...
     HWND__ *hwndBuffer;                 // ...
     HWND__ *codLogo;                    // ...
     HFONT__ *hfBufferFont;              // ...
     HWND__ *hwndInputLine;              // ...
     char errorString[512];              // ...
     char consoleText[512];              // ...
     char returnedText[512];             // ...
     int windowWidth;                    // ...
     int windowHeight;                   // ...
     int (__stdcall *SysInputLineWndProc)(HWND__ *, unsigned int, unsigned int, int); // ...
 };
 struct HICON__ // sizeof=0x4
 {
     int unused;
 };
 struct HBRUSH__ // sizeof=0x4
 {
     int unused;
 };
 struct HMENU__ // sizeof=0x4
 {
     int unused;
 };
 struct tagWNDCLASSA // sizeof=0x28
 {                                       // ...
     unsigned int style;                 // ...
     int (__stdcall *lpfnWndProc)(HWND__ *, unsigned int, unsigned int, int); // ...
     int cbClsExtra;                     // ...
     int cbWndExtra;                     // ...
     HINSTANCE__ *hInstance;             // ...
     HICON__ *hIcon;                     // ...
     HICON__ *hCursor;                   // ...
     HBRUSH__ *hbrBackground;            // ...
     const char *lpszMenuName;           // ...
     const char *lpszClassName;          // ...
 };
 struct playerStatNetworkData // sizeof=0x2002
 {                                       // ...
     unsigned __int8 playerStats[8192];  // ...
     bool statsFetched;                  // ...
     bool statWriteNeeded;               // ...
 };
 struct StatsData // sizeof=0x2104
 {                                       // ...
     char path[260];
     unsigned __int8 stats[8192];        // ...
 };
 struct StatsFile::<unnamed_type_body> // sizeof=0x2114
 {                                       // ...
     unsigned int hash[4];
     StatsData statsData;                // ...
 };
 struct StatsFile // sizeof=0x211C
 {                                       // ...
     unsigned __int8 magic[4];
     unsigned int nonce;
     StatsFile::<unnamed_type_body> body; // ...
 };
 struct tagSIZE // sizeof=0x8
 {                                       // ...
     int cx;                             // ...
     int cy;                             // ...
 };
 struct sockaddr // sizeof=0x10
 {                                       // ...
     unsigned __int16 sa_family;         // ...
     char sa_data[14];                   // ...
 };
 struct WSAData // sizeof=0x190
 {                                       // ...
     unsigned __int16 wVersion;          // ...
     unsigned __int16 wHighVersion;
     char szDescription[257];
     char szSystemStatus[129];
     unsigned __int16 iMaxSockets;
     unsigned __int16 iMaxUdpDg;
     // padding byte
     // padding byte
     char *lpVendorInfo;
 };
 struct fd_set // sizeof=0x104
 {                                       // ...
     unsigned int fd_count;              // ...
     unsigned int fd_array[64];          // ...
 };
 struct in_addr::<unnamed_type_S_un>::<unnamed_type_S_un_b> // sizeof=0x4
 {                                       // ...
     unsigned __int8 s_b1;
     unsigned __int8 s_b2;
     unsigned __int8 s_b3;
     unsigned __int8 s_b4;
 };
 struct in_addr::<unnamed_type_S_un>::<unnamed_type_S_un_w> // sizeof=0x4
 {                                       // ...
     unsigned __int16 s_w1;
     unsigned __int16 s_w2;
 };
 union in_addr::<unnamed_type_S_un> // sizeof=0x4
 {                                       // ...
     in_addr::<unnamed_type_S_un>::<unnamed_type_S_un_b> S_un_b;
     in_addr::<unnamed_type_S_un>::<unnamed_type_S_un_w> S_un_w;
     unsigned int S_addr;
 };
 struct in_addr // sizeof=0x4
 {                                       // ...
     in_addr::<unnamed_type_S_un> S_un;  // ...
 };
 struct sockaddr_in // sizeof=0x10
 {                                       // ...
     __int16 sin_family;                 // ...
     unsigned __int16 sin_port;          // ...
     in_addr sin_addr;                   // ...
     char sin_zero[8];
 };
 struct hostent // sizeof=0x10
 {
     char *h_name;
     char **h_aliases;
     __int16 h_addrtype;
     __int16 h_length;
     char **h_addr_list;
 };
 struct msg_t // sizeof=0x28
 {                                       // ...
     int overflowed;                     // ...
     int readOnly;                       // ...
     unsigned __int8 *data;              // ...
     unsigned __int8 *splitData;         // ...
     int maxsize;                        // ...
     int cursize;                        // ...
     int splitSize;                      // ...
     int readcount;                      // ...
     int bit;                            // ...
     int lastEntityRef;                  // ...
 };
 struct timeval // sizeof=0x8
 {                                       // ...
     int tv_sec;                         // ...
     int tv_usec;                        // ...
 };
 struct sockaddr_ipx // sizeof=0xE
 {
     __int16 sa_family;                  // ...
     char sa_netnum[4];                  // ...
     char sa_nodenum[6];                 // ...
     unsigned __int16 sa_socket;         // ...
 };
 struct sysEvent_t // sizeof=0x18
 {                                       // ...
     int evTime;                         // ...
     sysEventType_t evType;              // ...
     int evValue;                        // ...
     int evValue2;                       // ...
     int evPtrLength;                    // ...
     void *evPtr;                        // ...
 };
 struct __declspec(align(8)) SysInfo // sizeof=0x260
 {                                       // ...
     long double cpuGHz;                 // ...
     long double configureGHz;           // ...
     int logicalCpuCount;                // ...
     int physicalCpuCount;               // ...
     int sysMB;                          // ...
     char gpuDescription[512];           // ...
     bool SSE;                           // ...
     char cpuVendor[13];                 // ...
     char cpuName[49];                   // ...
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
 };
 struct _SECURITY_ATTRIBUTES // sizeof=0xC
 {                                       // ...
     unsigned int nLength;               // ...
     void *lpSecurityDescriptor;         // ...
     int bInheritHandle;                 // ...
 };
 struct tagMODULEENTRY32 // sizeof=0x224
 {                                       // ...
     unsigned int dwSize;                // ...
     unsigned int th32ModuleID;
     unsigned int th32ProcessID;
     unsigned int GlblcntUsage;
     unsigned int ProccntUsage;
     unsigned __int8 *modBaseAddr;
     unsigned int modBaseSize;
     HINSTANCE__ *hModule;
     char szModule[256];                 // ...
     char szExePath[260];
 };
 struct _STARTUPINFOA // sizeof=0x44
 {                                       // ...
     unsigned int cb;
     char *lpReserved;
     char *lpDesktop;
     char *lpTitle;
     unsigned int dwX;
     unsigned int dwY;
     unsigned int dwXSize;
     unsigned int dwYSize;
     unsigned int dwXCountChars;
     unsigned int dwYCountChars;
     unsigned int dwFillAttribute;
     unsigned int dwFlags;               // ...
     unsigned __int16 wShowWindow;       // ...
     unsigned __int16 cbReserved2;       // ...
     unsigned __int8 *lpReserved2;       // ...
     void *hStdInput;
     void *hStdOutput;
     void *hStdError;
 };
 struct tagMSG // sizeof=0x1C
 {                                       // ...
     HWND__ *hwnd;
     unsigned int message;
     unsigned int wParam;
     int lParam;
     unsigned int time;                  // ...
     tagPOINT pt;
 };
 struct tagWNDCLASSEXA // sizeof=0x30
 {                                       // ...
     unsigned int cbSize;                // ...
     unsigned int style;
     int (__stdcall *lpfnWndProc)(HWND__ *, unsigned int, unsigned int, int); // ...
     int cbClsExtra;
     int cbWndExtra;
     HINSTANCE__ *hInstance;             // ...
     HICON__ *hIcon;                     // ...
     HICON__ *hCursor;                   // ...
     HBRUSH__ *hbrBackground;            // ...
     const char *lpszMenuName;
     const char *lpszClassName;          // ...
     HICON__ *hIconSm;
 };
 struct _OSVERSIONINFOA // sizeof=0x94
 {                                       // ...
     unsigned int dwOSVersionInfoSize;   // ...
     unsigned int dwMajorVersion;        // ...
     unsigned int dwMinorVersion;
     unsigned int dwBuildNumber;
     unsigned int dwPlatformId;          // ...
     char szCSDVersion[128];
 };
 struct _PROCESS_INFORMATION // sizeof=0x10
 {                                       // ...
     void *hProcess;
     void *hThread;
     unsigned int dwProcessId;
     unsigned int dwThreadId;
 };
 union $A5A483E05FC9B52B872A8DCFA58CFF52 // sizeof=0x4
 {                                       // ...
     unsigned int Offset;
     void *Pointer;
 };
 struct _OVERLAPPED // sizeof=0x14
 {                                       // ...
     unsigned int Internal;
     unsigned int InternalHigh;
     $A5A483E05FC9B52B872A8DCFA58CFF52 ___u2; // ...
     unsigned int OffsetHigh;
     void *hEvent;
 };
 struct $8CB265A9D3778DFC1F2AA7A5F0192391 // sizeof=0x8
 {                                       // ...
     char *language;                     // ...
     char *strings;                      // ...
 };
 struct __declspec(align(4)) WinMouseVars_t // sizeof=0x10
 {                                       // ...
     int oldButtonState;                 // ...
     tagPOINT oldPos;                    // ...
     bool mouseActive;                   // ...
     bool mouseInitialized;              // ...
     // padding byte
     // padding byte
 };
 struct DIDEVCAPS // sizeof=0x2C
 {
     unsigned int dwSize;
     unsigned int dwFlags;
     unsigned int dwDevType;
     unsigned int dwAxes;
     unsigned int dwButtons;
     unsigned int dwPOVs;
     unsigned int dwFFSamplePeriod;
     unsigned int dwFFMinTimeResolution;
     unsigned int dwFirmwareRevision;
     unsigned int dwHardwareRevision;
     unsigned int dwFFDriverVersion;
 };
 struct __cppobj IDirectInputDeviceA : IUnknown // sizeof=0x4
 {
 };
 const struct DIDEVICEOBJECTINSTANCEA // sizeof=0x13C
 {
     unsigned int dwSize;
     _GUID guidType;
     unsigned int dwOfs;
     unsigned int dwType;
     unsigned int dwFlags;
     char tszName[260];
     unsigned int dwFFMaxForce;
     unsigned int dwFFForceResolution;
     unsigned __int16 wCollectionNumber;
     unsigned __int16 wDesignatorIndex;
     unsigned __int16 wUsagePage;
     unsigned __int16 wUsage;
     unsigned int dwDimension;
     unsigned __int16 wExponent;
     unsigned __int16 wReportId;
 };
 struct DIPROPHEADER // sizeof=0x10
 {
     unsigned int dwSize;
     unsigned int dwHeaderSize;
     unsigned int dwObj;
     unsigned int dwHow;
 };
 struct DIDEVICEOBJECTDATA // sizeof=0x14
 {
     unsigned int dwOfs;
     unsigned int dwData;
     unsigned int dwTimeStamp;
     unsigned int dwSequence;
     unsigned int uAppData;
 };
 struct _DIOBJECTDATAFORMAT // sizeof=0x10
 {
     const _GUID *pguid;
     unsigned int dwOfs;
     unsigned int dwType;
     unsigned int dwFlags;
 };
 const struct _DIDATAFORMAT // sizeof=0x18
 {
     unsigned int dwSize;
     unsigned int dwObjSize;
     unsigned int dwFlags;
     unsigned int dwDataSize;
     unsigned int dwNumObjs;
     _DIOBJECTDATAFORMAT *rgodf;
 };
 struct DIDEVICEINSTANCEA // sizeof=0x244
 {
     unsigned int dwSize;
     _GUID guidInstance;
     _GUID guidProduct;
     unsigned int dwDevType;
     char tszInstanceName[260];
     char tszProductName[260];
     _GUID guidFFDriver;
     unsigned __int16 wUsagePage;
     unsigned __int16 wUsage;
 };
 struct /*VFT*/ IDirectInputDeviceA_vtbl // sizeof=0x48
 {
     HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
     unsigned int (__stdcall *AddRef)(IUnknown *this);
     unsigned int (__stdcall *Release)(IUnknown *this);
     HRESULT (__stdcall *GetCapabilities)(IDirectInputDeviceA *this, DIDEVCAPS *);
     HRESULT (__stdcall *EnumObjects)(IDirectInputDeviceA *this, int (__stdcall *)(const DIDEVICEOBJECTINSTANCEA *, void *), void *, unsigned int);
     HRESULT (__stdcall *GetProperty)(IDirectInputDeviceA *this, const _GUID *, DIPROPHEADER *);
     HRESULT (__stdcall *SetProperty)(IDirectInputDeviceA *this, const _GUID *, const DIPROPHEADER *);
     HRESULT (__stdcall *Acquire)(IDirectInputDeviceA *this);
     HRESULT (__stdcall *Unacquire)(IDirectInputDeviceA *this);
     HRESULT (__stdcall *GetDeviceState)(IDirectInputDeviceA *this, unsigned int, void *);
     HRESULT (__stdcall *GetDeviceData)(IDirectInputDeviceA *this, unsigned int, DIDEVICEOBJECTDATA *, unsigned int *, unsigned int);
     HRESULT (__stdcall *SetDataFormat)(IDirectInputDeviceA *this, const _DIDATAFORMAT *);
     HRESULT (__stdcall *SetEventNotification)(IDirectInputDeviceA *this, void *);
     HRESULT (__stdcall *SetCooperativeLevel)(IDirectInputDeviceA *this, HWND__ *, unsigned int);
     HRESULT (__stdcall *GetObjectInfo)(IDirectInputDeviceA *this, DIDEVICEOBJECTINSTANCEA *, unsigned int, unsigned int);
     HRESULT (__stdcall *GetDeviceInfo)(IDirectInputDeviceA *this, DIDEVICEINSTANCEA *);
     HRESULT (__stdcall *RunControlPanel)(IDirectInputDeviceA *this, HWND__ *, unsigned int);
     HRESULT (__stdcall *Initialize)(IDirectInputDeviceA *this, HINSTANCE__ *, unsigned int, const _GUID *);
 };
 struct __cppobj IDirectInputA : IUnknown // sizeof=0x4
 {
 };
 struct /*VFT*/ IDirectInputA_vtbl // sizeof=0x20
 {
     HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
     unsigned int (__stdcall *AddRef)(IUnknown *this);
     unsigned int (__stdcall *Release)(IUnknown *this);
     HRESULT (__stdcall *CreateDevice)(IDirectInputA *this, const _GUID *, IDirectInputDeviceA **, IUnknown *);
     HRESULT (__stdcall *EnumDevices)(IDirectInputA *this, unsigned int, int (__stdcall *)(const DIDEVICEINSTANCEA *, void *), void *, unsigned int);
     HRESULT (__stdcall *GetDeviceStatus)(IDirectInputA *this, const _GUID *);
     HRESULT (__stdcall *RunControlPanel)(IDirectInputA *this, HWND__ *, unsigned int);
     HRESULT (__stdcall *Initialize)(IDirectInputA *this, HINSTANCE__ *, unsigned int);
 };
 struct _MEMORYSTATUSEX // sizeof=0x40
 {                                       // ...
     unsigned int dwLength;              // ...
     unsigned int dwMemoryLoad;
     unsigned __int64 ullTotalPhys;      // ...
     unsigned __int64 ullAvailPhys;
     unsigned __int64 ullTotalPageFile;
     unsigned __int64 ullAvailPageFile;
     unsigned __int64 ullTotalVirtual;
     unsigned __int64 ullAvailVirtual;   // ...
     unsigned __int64 ullAvailExtendedVirtual;
 };
 struct _MEMORYSTATUS // sizeof=0x20
 {                                       // ...
     unsigned int dwLength;              // ...
     unsigned int dwMemoryLoad;
     unsigned int dwTotalPhys;           // ...
     unsigned int dwAvailPhys;
     unsigned int dwTotalPageFile;
     unsigned int dwAvailPageFile;
     unsigned int dwTotalVirtual;
     unsigned int dwAvailVirtual;        // ...
 };
 struct Sys_DetectCpuVendorAndName::__l2::<unnamed_type_cpuid_vendor>::<unnamed_type_reg> // sizeof=0xC
 {                                       // ...
     unsigned int ebx;
     unsigned int edx;
     unsigned int ecx;
 };
 union Sys_DetectCpuVendorAndName::__l2::<unnamed_type_cpuid_vendor> // sizeof=0xC
 {                                       // ...
     Sys_DetectCpuVendorAndName::__l2::<unnamed_type_cpuid_vendor>::<unnamed_type_reg> reg;
     char name[12];
 };
 struct Sys_DetectCpuVendorAndName::__l2::<unnamed_type_cpuid_desc>::<unnamed_type_s>::<unnamed_type_reg0> // sizeof=0x10
 {                                       // ...
     unsigned int eax;
     unsigned int ebx;
     unsigned int ecx;
     unsigned int edx;
 };
 struct Sys_DetectCpuVendorAndName::__l2::<unnamed_type_cpuid_desc>::<unnamed_type_s> // sizeof=0x30
 {                                       // ...
     Sys_DetectCpuVendorAndName::__l2::<unnamed_type_cpuid_desc>::<unnamed_type_s>::<unnamed_type_reg0> reg0;
     Sys_DetectCpuVendorAndName::__l2::<unnamed_type_cpuid_desc>::<unnamed_type_s>::<unnamed_type_reg0> reg1;
     Sys_DetectCpuVendorAndName::__l2::<unnamed_type_cpuid_desc>::<unnamed_type_s>::<unnamed_type_reg0> reg2;
 };
 union Sys_DetectCpuVendorAndName::__l2::<unnamed_type_cpuid_desc> // sizeof=0x34
 {                                       // ...
     Sys_DetectCpuVendorAndName::__l2::<unnamed_type_cpuid_desc>::<unnamed_type_s> s;
     char string[52];
 };
 struct Sys_BenchmarkGHz::__l2::<unnamed_type_start>::<unnamed_type_u32> // sizeof=0x8
 {                                       // ...
     unsigned int _0;
     unsigned int _1;
 };
 union Sys_BenchmarkGHz::__l2::<unnamed_type_start> // sizeof=0x8
 {                                       // ...
     Sys_BenchmarkGHz::__l2::<unnamed_type_start>::<unnamed_type_u32> u32;
     unsigned __int64 u64;
 };
 struct _MSSVECTOR3D // sizeof=0xC
 {                                       // ...
     float x;
     float y;
     float z;
 };
 struct _MSS_RECEIVER_LIST // sizeof=0xA0
 {                                       // ...
     _MSSVECTOR3D direction;
     int speaker_index[18];
     float speaker_level[18];
     int n_speakers_affected;
 };
 struct _D3DSTATE // sizeof=0x173C
 {                                       // ...
     int mute_at_max;
     _MSSVECTOR3D listen_position;
     _MSSVECTOR3D listen_face;
     _MSSVECTOR3D listen_up;
     _MSSVECTOR3D listen_cross;
     _MSSVECTOR3D listen_velocity;
     float rolloff_factor;
     float doppler_factor;
     float distance_factor;
     float falloff_power;
     int ambient_channels[18];
     int n_ambient_channels;
     int directional_channels[19];
     _MSSVECTOR3D listener_to_speaker[19];
     int n_directional_channels;
     _MSS_RECEIVER_LIST receiver_specifications[32];
     int n_receiver_specs;
     _MSSVECTOR3D speaker_positions[18];
     float speaker_wet_reverb_response[18];
     float speaker_dry_reverb_response[18];
 };
 struct _DIG_DRIVER // sizeof=0x1ACC
 {
     char tag[4];
     int backgroundtimer;
     float master_volume;
     int DMA_rate;
     int hw_format;
     int n_active_samples;
     MSS_MC_SPEC channel_spec;
     _D3DSTATE D3D;
     int quiet;
     unsigned int hw_mode_flags;
     int playing;
     int bytes_per_channel;
     int samples_per_buffer;
     int physical_channels_per_sample;
     int logical_channels_per_sample;
     _SAMPLE *samples;
     unsigned int *sample_status;
     int n_samples;
     int system_data[8];
     _MSS_BB build[19];
     int n_build_buffers;
     int build_size;
     int hardware_buffer_size;
     HWAVEOUT__ *hWaveOut;
     unsigned int reset_works;
     unsigned int request_reset;
     wavehdr_tag *first;
     int n_buffers;
     wavehdr_tag *volatile *return_list;
     volatile int return_head;
     volatile int return_tail;
     unsigned int guid;
     void *pDS;
     unsigned int ds_priority;
     int emulated_ds;
     void *lppdsb;
     unsigned int dsHwnd;
     void **lpbufflist;
     _SAMPLE **samp_list;
     int *sec_format;
     int max_buffs;
     Mpcmwaveformat_tag wformat;
     char wfextra[32];
     int released;
     unsigned int foreground_timer;
     _DIG_DRIVER *next;
     int callingCT;
     int callingDS;
     int DS_initialized;
     void *DS_sec_buff;
     void *DS_out_buff;
     int DS_buffer_size;
     int DS_frag_cnt;
     int DS_frag_size;
     int DS_last_frag;
     int DS_last_write;
     int DS_last_timer;
     int DS_skip_time;
     int DS_use_default_format;
     unsigned int position_error;
     unsigned int last_ds_play;
     unsigned int last_ds_write;
     unsigned int last_ds_move;
     int use_MMX;
     unsigned int us_count;
     unsigned int ms_count;
     unsigned int last_ms_polled;
     unsigned int last_percent;
     DPINFO pipeline[6];
     _FLTPROVIDER *voice_filter;
     int (__stdcall *stream_callback)(_SAMPLE *, __int16 *, int);
     _FLTPROVIDER *matrix_filter;
     int room_type;
     float master_wet;
     float master_dry;
     REVERB_INFO ri;
     int *reverb_build_buffer;
     int reverb_total_size;
     int reverb_fragment_size;
     int reverb_buffer_size;
     int reverb_on;
     unsigned int reverb_off_time_ms;
     unsigned int reverb_duration_ms;
     float reverb_decay_time_s;
     float reverb_predelay_s;
     float reverb_damping;
     int reverb_head;
     int reverb_tail;
     int no_wom_done;
     unsigned int wom_done_buffers;
 };
 struct LOWPASS_UPDATED_INFO // sizeof=0x20
 {                                       // ...
     int XL0;
     int XL1;
     int YL0;
     int YL1;
     int XR0;
     int XR1;
     int YR0;
     int YR1;
 };
 struct LOWPASS_CONSTANT_INFO // sizeof=0xC
 {                                       // ...
     int A;
     int B0;
     int B1;
 };
 struct LOWPASS_INFO // sizeof=0x34
 {                                       // ...
     LOWPASS_UPDATED_INFO u;
     LOWPASS_CONSTANT_INFO c;
     float cutoff;
     int on;
 };
 struct _SAMPLE // sizeof=0x820
 {
     char tag[4];
     _DIG_DRIVER *driver;
     int index;
     const void *start[2];
     unsigned int len[2];
     unsigned int pos[2];
     unsigned int done[2];
     int reset_ASI[2];
     int reset_seek_pos[2];
     int exhaust_ASI;
     unsigned int src_fract;
     int left_val;
     int right_val;
     int current_buffer;
     int last_buffer;
     int starved;
     int loop_count;
     int loop_start;
     int loop_end;
     int orig_loop_count;
     int orig_loop_start;
     int orig_loop_end;
     int format;
     unsigned int flags;
     int playback_rate;
     float save_volume;
     float save_pan;
     float left_volume;
     float right_volume;
     float wet_level;
     float dry_level;
     float obstruction;
     float occlusion;
     float exclusion;
     float auto_3D_channel_levels[18];
     float user_channel_levels[18];
     int cur_scale[18];
     int prev_scale[18];
     int ramps_left[18];
     LOWPASS_INFO lp;
     float cutoff_param;
     float calculated_cut;
     int service_type;
     void (__stdcall *SOB)(_SAMPLE *);
     void (__stdcall *EOB)(_SAMPLE *);
     void (__stdcall *EOS)(_SAMPLE *);
     int user_data[8];
     int system_data[8];
     _ADPCMDATATAG adpcm;
     int last_decomp_left;
     int last_decomp_right;
     int doeob;
     int dosob;
     int doeos;
     SPINFO pipeline[10];
     int n_active_filters;
     int is_3D;
     _S3DSTATE S3D;
     void *voice;
     float leftb_volume;
     float rightb_volume;
     float center_volume;
     float low_volume;
     float save_fb_pan;
     float save_center;
     float save_low;
     int service_interval;
     int service_tick;
     int buffer_segment_size;
     int prev_segment;
     int prev_cursor;
     int bytes_remaining;
     int direct_control;
 };
 struct ASISTAGE // sizeof=0x6C
 {                                       // ...
     int (__stdcall *ASI_stream_open)(unsigned int, int (__stdcall *)(unsigned int, void *, int, int), unsigned int);
     int (__stdcall *ASI_stream_process)(int, void *, int);
     int (__stdcall *ASI_stream_seek)(int, int);
     int (__stdcall *ASI_stream_close)(int);
     int (__stdcall *ASI_stream_property)(int, unsigned int, void *, const void *, void *);
     unsigned int INPUT_BIT_RATE;
     unsigned int INPUT_SAMPLE_RATE;
     unsigned int INPUT_BITS;
     unsigned int INPUT_CHANNELS;
     unsigned int OUTPUT_BIT_RATE;
     unsigned int OUTPUT_SAMPLE_RATE;
     unsigned int OUTPUT_BITS;
     unsigned int OUTPUT_CHANNELS;
     unsigned int OUTPUT_RESERVOIR;
     unsigned int POSITION;
     unsigned int PERCENT_DONE;
     unsigned int MIN_INPUT_BLOCK_SIZE;
     unsigned int RAW_RATE;
     unsigned int RAW_BITS;
     unsigned int RAW_CHANNELS;
     unsigned int REQUESTED_RATE;
     unsigned int REQUESTED_BITS;
     unsigned int REQUESTED_CHANS;
     unsigned int STREAM_SEEK_POS;
     unsigned int DATA_START_OFFSET;
     unsigned int DATA_LEN;
     int stream;
 };
 struct _FLTPROVIDER // sizeof=0x5C
 {
     int (__stdcall *PROVIDER_property)(unsigned int, void *, const void *, void *);
     int (__stdcall *startup)();
     char *(__stdcall *error)();
     int (__stdcall *shutdown)();
     int (__stdcall *open_driver)(_DIG_DRIVER *);
     int (__stdcall *close_driver)(int);
     void (__stdcall *premix_process)(int);
     int (__stdcall *postmix_process)(int, void *);
     int (__stdcall *open_sample)(int, _SAMPLE *);
     int (__stdcall *close_sample)(int);
     void (__stdcall *sample_process)(int, void *, void *, int, int, int);
     int (__stdcall *sample_property)(int, unsigned int, void *, const void *, void *);
     int (__stdcall *assign_sample_voice)(int, _SAMPLE *);
     void (__stdcall *release_sample_voice)(int, _SAMPLE *);
     int (__stdcall *start_sample_voice)(int, _SAMPLE *);
     int (__stdcall *driver_property)(int, unsigned int, void *, const void *, void *);
     int (__stdcall *force_update)(int);
     int (__stdcall *output_sample_property)(_SAMPLE *, unsigned int, void *, const void *, void *);
     _DIG_DRIVER *dig;
     unsigned int provider;
     int driver_state;
     int provider_flags;
     _FLTPROVIDER *next;
 };
 struct FLTSTAGE // sizeof=0x8
 {                                       // ...
     _FLTPROVIDER *provider;
     int sample_state;
 };
 union SPINFO::<unnamed_type_TYPE> // sizeof=0x6C
 {                                       // ...
     ASISTAGE ASI;
     void (__stdcall *MSS_mixer_merge)(const void **, unsigned int *, const void *, int **, void *, int *, int *, int, int, int, unsigned int, unsigned int);
     FLTSTAGE FLT;
 };
 struct SPINFO // sizeof=0x74
 {
     int active;
     unsigned int provider;
     SPINFO::<unnamed_type_TYPE> TYPE;
 };
 struct _S3DSTATE // sizeof=0x64
 {
     _MSSVECTOR3D position;
     _MSSVECTOR3D face;
     _MSSVECTOR3D up;
     _MSSVECTOR3D velocity;
     int doppler_valid;
     float doppler_shift;
     float inner_angle;
     float outer_angle;
     float outer_volume;
     int cone_enabled;
     float max_dist;
     float min_dist;
     int dist_changed;
     int auto_3D_atten;
     float atten_3D;
     _SAMPLE *owner;
     float (__stdcall *falloff_function)(_SAMPLE *, float, float, float, float);
 };
 struct _MSS_BB // sizeof=0x10
 {
     int *buffer;
     int bytes;
     int chans;
     int speaker_offset;
 };
 struct HWAVEOUT__ // sizeof=0x4
 {
     int unused;
 };
 struct wavehdr_tag // sizeof=0x20
 {
     char *lpData;
     unsigned int dwBufferLength;
     unsigned int dwBytesRecorded;
     unsigned int dwUser;
     unsigned int dwFlags;
     unsigned int dwLoops;
     wavehdr_tag *lpNext;
     unsigned int reserved;
 };
 struct __unaligned __declspec(align(2)) Mwaveformat_tag // sizeof=0xE
 {                                       // ...
     unsigned __int16 wFormatTag;
     unsigned __int16 nChannels;
     unsigned int nSamplesPerSec;
     unsigned int nAvgBytesPerSec;
     unsigned __int16 nBlockAlign;
 };
 struct Mpcmwaveformat_tag // sizeof=0x10
 {
     Mwaveformat_tag wf;
     unsigned __int16 wBitsPerSample;
 };
 union DPINFO::<unnamed_type_TYPE> // sizeof=0x4
 {                                       // ...
     void (__stdcall *MSS_mixer_flush)(int *, int, unsigned int);
     void (__stdcall *MSS_mixer_copy)(const void *, int, void *, unsigned int, unsigned int);
     void (__stdcall *MSS_mixer_mc_copy)(_MSS_BB *, int, void *, int, int, int, int);
     void (__stdcall *MSS_mixer_adpcm_decode)(void *, const void *, int, int, int, _ADPCMDATATAG *);
 };
 struct DPINFO // sizeof=0xC
 {
     int active;
     unsigned int provider;
     DPINFO::<unnamed_type_TYPE> TYPE;
 };
 struct REVERB_UPDATED_INFO // sizeof=0x28
 {                                       // ...
     float *address0;
     float *address1;
     float *address2;
     float *address3;
     float *address4;
     float *address5;
     float X0;
     float X1;
     float Y0;
     float Y1;
 };
 struct REVERB_CONSTANT_INFO // sizeof=0x54
 {                                       // ...
     float *start0;
     float *start1;
     float *start2;
     float *start3;
     float *start4;
     float *start5;
     float *end0;
     float *end1;
     float *end2;
     float *end3;
     float *end4;
     float *end5;
     float C0;
     float C1;
     float C2;
     float C3;
     float C4;
     float C5;
     float A;
     float B0;
     float B1;
 };
 struct REVERB_INFO // sizeof=0x7C
 {
     REVERB_UPDATED_INFO u;
     REVERB_CONSTANT_INFO c;
 };
 struct _STREAM // sizeof=0x11C
 {
     int block_oriented;
     int using_ASI;
     ASISTAGE *ASI;
     _SAMPLE *samp;
     unsigned int fileh;
     unsigned __int8 *bufs[3];
     unsigned int bufsizes[3];
     int reset_ASI[3];
     int reset_seek_pos[3];
     int bufstart[3];
     void *asyncs[3];
     int loadedbufstart[2];
     int loadedorder[2];
     int loadorder;
     int bufsize;
     int readsize;
     unsigned int buf1;
     int size1;
     unsigned int buf2;
     int size2;
     unsigned int buf3;
     int size3;
     unsigned int datarate;
     int filerate;
     int filetype;
     unsigned int fileflags;
     int totallen;
     int substart;
     int sublen;
     int subpadding;
     unsigned int blocksize;
     int padding;
     int padded;
     int loadedsome;
     unsigned int startpos;
     unsigned int totalread;
     unsigned int loopsleft;
     unsigned int error;
     int preload;
     unsigned int preloadpos;
     int noback;
     int alldone;
     int primeamount;
     int readatleast;
     int playcontrol;
     void (__stdcall *callback)(_STREAM *);
     int user_data[8];
     void *next;
     int autostreaming;
     int docallback;
 };
 struct MssEqInfo // sizeof=0xF00
 {                                       // ...
     SndEqParams params[3][64];
 };
 struct MssFileHandle // sizeof=0x9C
 {                                       // ...
     unsigned int id;
     MssFileHandle *next;
     int handle;
     char fileName[128];
     unsigned int hashCode;
     int offset;
     int fileOffset;
     int fileLength;
 };
 struct __declspec(align(4)) MssLocal // sizeof=0x26D0
 {                                       // ...
     _DIG_DRIVER *driver;                // ...
     _SAMPLE *handle_sample[40];         // ...
     _STREAM *handle_stream[13];
     MssEqInfo eq[2];                    // ...
     unsigned int eqFilter;              // ...
     MssFileHandle fileHandle[13];
     MssFileHandle *freeFileHandle;
     bool isMultiChannel;                // ...
     // padding byte
     // padding byte
     // padding byte
 };
 struct _RTL_CRITICAL_SECTION // sizeof=0x18
 {                                       // ...
     _RTL_CRITICAL_SECTION_DEBUG *DebugInfo;
     int LockCount;
     int RecursionCount;
     void *OwningThread;
     void *LockSemaphore;
     unsigned int SpinCount;
 };
 struct _LIST_ENTRY // sizeof=0x8
 {                                       // ...
     _LIST_ENTRY *Flink;
     _LIST_ENTRY *Blink;
 };
 struct _RTL_CRITICAL_SECTION_DEBUG // sizeof=0x20
 {
     unsigned __int16 Type;
     unsigned __int16 CreatorBackTraceIndex;
     _RTL_CRITICAL_SECTION *CriticalSection;
     _LIST_ENTRY ProcessLocksList;
     unsigned int EntryCount;
     unsigned int ContentionCount;
     unsigned int Flags;
     unsigned __int16 CreatorBackTraceIndexHigh;
     unsigned __int16 SpareWORD;
 };
 struct _finddata64i32_t // sizeof=0x128
 {                                       // ...
     unsigned int attrib;                // ...
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     __int64 time_create;
     __int64 time_access;
     __int64 time_write;
     unsigned int size;
     char name[260];                     // ...
 };
 struct __cppobj LargeLocal // sizeof=0x8
 {                                       // ...
     int startPos;
     int size;
 };
 struct infoParm_t // sizeof=0x14
 {
     char *name;
     int clearSolid;
     int surfaceFlags;
     int contents;
     int toolFlags;
 };
 struct RedBlackTreeNode // sizeof=0x18
 {                                       // ...
     unsigned __int64 key;
     unsigned int color;
     RedBlackTreeNode *parent;
     RedBlackTreeNode *child[2];
 };
 struct __declspec(align(8)) RedBlackTree // sizeof=0x38
 {                                       // ...
     RedBlackTreeNode null;
     RedBlackTreeNode root;
     RedBlackTreeNode *(__cdecl *AllocNodeCallback)();
     // padding byte
     // padding byte
     // padding byte
     // padding byte
 };
 struct __declspec(align(8)) RedBlackCacheNode // sizeof=0x20
 {
     RedBlackTreeNode rbNode;
     unsigned int timeStamp;
     // padding byte
     // padding byte
     // padding byte
     // padding byte
 };
 struct __declspec(align(8)) RedBlackCache // sizeof=0x60
 {
     RedBlackTree rbTree;
     RedBlackCacheNode *firstNode;
     unsigned int sizeofNode;
     unsigned int nodeCount;
     unsigned int minTimeToFree;
     unsigned int allocCount;
     unsigned int freeWalk;
     unsigned int timeStamp;
     bool isNewNode;
     // padding byte
     // padding byte
     // padding byte
     void (__cdecl *FreeCallback)(RedBlackCacheNode *);
     // padding byte
     // padding byte
     // padding byte
     // padding byte
 };
 struct va_info_t // sizeof=0x804
 {                                       // ...
     char va_string[2][1024];
     int index;
 };
 union FloatReadSwap::__l2::<unnamed_type_dat1> // sizeof=0x4
 {                                       // ...
     float f;
     int n;
     unsigned __int8 b[4];
 };
 union FloatWriteSwap::__l2::<unnamed_type_dat1> // sizeof=0x4
 {                                       // ...
     float f;
     int n;
     unsigned __int8 b[4];
 };
 struct parseInfo_t // sizeof=0x420
 {                                       // ...
     char token[1024];
     int lines;
     bool ungetToken;
     bool spaceDelimited;
     bool keepStringQuotes;
     bool csv;
     bool negativeNumbers;
     // padding byte
     // padding byte
     // padding byte
     const char *errorPrefix;
     const char *warningPrefix;
     int backup_lines;
     const char *backup_text;
     const char *parseFile;
 };
 struct ParseThreadInfo // sizeof=0x460C
 {                                       // ...
     parseInfo_t parseInfo[16];
     int parseInfoNum;
     const char *tokenPos;
     const char *prevTokenPos;
     char line[1024];
 };
 struct com_parse_mark_t // sizeof=0x14
 {                                       // ...
     int lines;                          // ...
     const char *text;
     int ungetToken;
     int backup_lines;
     const char *backup_text;
 };
 struct profilemem_t // sizeof=0x20
 {                                       // ...
     profilemem_t *child;
     profilemem_t *parent;
     profilemem_t *nextSibling;
     profilemem_t *prevSibling;
     unsigned int startSize;
     unsigned int totalSize;
     unsigned int hits;
     const char *name;
 };
 struct ProfileMemTree // sizeof=0x2008
 {                                       // ...
     profilemem_t *currentNode;
     profilemem_t nodePool[256];
     unsigned int treeSize;
 };
 struct profMemTreeIter_t // sizeof=0x8
 {
     profilemem_t *node;
     int nesting;
 };
 struct ProfileDrawInfo // sizeof=0x8
 {                                       // ...
     int probeIndex;
     int indentation;
 };
 struct ProfileSettings // sizeof=0x20
 {
     const char *name;
     const ProfileDrawInfo *profDrawInfo;
     int infoCount;
     int defaultProbeIndex[5];
 };
 struct UiContext::<unnamed_type_cursor> // sizeof=0x8
 {                                       // ...
     float x;
     float y;
 };
 union UILocalVar::<unnamed_type_u> // sizeof=0x4
 {                                       // ...
     int integer;
     float value;
     const char *string;
 };
 struct UILocalVar // sizeof=0xC
 {                                       // ...
     UILocalVarType type;
     const char *name;
     UILocalVar::<unnamed_type_u> u;
 };
 struct UILocalVarContext // sizeof=0xC00
 {                                       // ...
     UILocalVar table[256];
 };
 struct UiContext // sizeof=0x1678
 {                                       // ...
     int localClientNum;
     float bias;
     int realTime;
     int frameTime;
     UiContext::<unnamed_type_cursor> cursor;
     int isCursorVisible;
     int screenWidth;
     int screenHeight;
     float screenAspect;
     float FPS;
     float blurRadiusOut;
     menuDef_t *Menus[640];
     int menuCount;
     menuDef_t *menuStack[16];
     int openMenuCount;
     UILocalVarContext localVars;        // ...
 };
 struct freenode // sizeof=0x4
 {
     freenode *next;
 };
 struct PhysicalMemoryAllocation // sizeof=0x8
 {                                       // ...
     const char *name;                   // ...
     unsigned int pos;                   // ...
 };
 struct PhysicalMemoryPrim // sizeof=0x10C
 {                                       // ...
     const char *allocName;
     unsigned int allocListCount;        // ...
     unsigned int pos;                   // ...
     PhysicalMemoryAllocation allocList[32]; // ...
 };
 struct PhysicalMemory // sizeof=0x21C
 {                                       // ...
     unsigned __int8 *buf;
     PhysicalMemoryPrim prim[2];         // ...
 };
 struct complex4_t // sizeof=0x20
 {
     float real[4];
     float imag[4];
 };
 struct _s__CatchableType // sizeof=0x1C
 {
     unsigned int properties;
     _TypeDescriptor *pType;
     _PMD thisDisplacement;
     int sizeOrOffset;
     void (__cdecl *copyFunction)();
 };
 struct _s__CatchableTypeArray // sizeof=0x4;variable_size
 {
     int nCatchableTypes;
     const _s__CatchableType *arrayOfCatchableTypes[];
 };
 struct __unaligned __declspec(align(1)) $_TypeDescriptor$_extraBytes_5 // sizeof=0xD
 {
     const void *pVFTable;
     void *spare;
     char name[5];
 };
 struct _s__ThrowInfo // sizeof=0x10
 {                                       // ...
     unsigned int attributes;
     void (__cdecl *pmfnUnwind)();
     int (*pForwardCompat)(...);
     const _s__CatchableTypeArray *pCatchableTypeArray;
 };
 struct $_s__CatchableTypeArray$_extraBytes_8 // sizeof=0xC
 {
     int nCatchableTypes;
     const _s__CatchableType *arrayOfCatchableTypes[2];
 };
 union EvalValue::<unnamed_type_u> // sizeof=0x8
 {                                       // ...
     long double d;
     int i;
     char *s;
 };
 struct EvalValue // sizeof=0x10
 {                                       // ...
     EvalValueType type;
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     EvalValue::<unnamed_type_u> u;
 };
 struct __declspec(align(4)) Eval // sizeof=0x5010
 {                                       // ...
     EvalOperatorType opStack[1024];
     EvalValue valStack[1024];
     int opStackPos;                     // ...
     int valStackPos;                    // ...
     int parenCount;                     // ...
     bool pushedOp;                      // ...
     // padding byte
     // padding byte
     // padding byte
 };
 struct __cppobj std::pair<dvar_s const * *,dvar_s const * *> // sizeof=0x8
 {
     const dvar_s **first;
     const dvar_s **second;
 };
 struct __cppobj std::_Scalar_ptr_iterator_tag // sizeof=0x0
 {
 };
 struct snd_alias_build_s // sizeof=0x19C
 {                                       // ...
     char szSourceFile[64];
     char aliasName[64];                 // ...
     char secondaryAliasName[64];
     char chainAliasName[64];
     char *subtitleText;
     int sequence;
     char soundFile[64];                 // ...
     SoundFile *permSoundFile;
     float volMin;
     float volMax;
     float fVolMod;
     float pitchMin;
     float pitchMax;
     float distMin;
     float distMax;
     int iChannel;
     snd_alias_type_t eType;
     SndCurve *volumeFalloffCurve;
     SpeakerMap *speakerMap;
     float slavePercentage;
     float probability;
     float lfePercentage;
     float centerPercentage;
     int startDelay;
     unsigned __int8 bLooping;
     unsigned __int8 bMaster;
     unsigned __int8 bSlave;
     unsigned __int8 bFullDryLevel;
     unsigned __int8 bNoWetLevel;
     unsigned __int8 bRandomLooping;
     bool error;                         // ...
     bool keep;                          // ...
     snd_alias_build_s *pSameSoundFile;
     snd_alias_build_s *pNext;
 };
 struct VolumeModGroup // sizeof=0x44
 {                                       // ...
     char name[64];
     float value;
 };
 struct __declspec(align(4)) SoundAliasLoadGlobals // sizeof=0x1894
 {                                       // ...
     snd_alias_build_s *tempAliases;     // ...
     int tempAliasCount;                 // ...
     VolumeModGroup volumeModGroups[32]; // ...
     bool volumeModGroupsInitialized;    // ...
     char entChannels[64][64];           // ...
     // padding byte
     // padding byte
     // padding byte
     int entChannelCount;                // ...
     bool refreshVolumeModGroupsCommandInitialized; // ...
     // padding byte
     // padding byte
     // padding byte
 };
 struct SpeakerMapInfo // sizeof=0x1D8
 {                                       // ...
     char name[64];
     SpeakerMap speakerMap;              // ...
 };
 struct SoundFileInfo // sizeof=0x8
 {                                       // ...
     int count;                          // ...
     SoundFile *files;                   // ...
 };
 struct __declspec(align(4)) DevGraph // sizeof=0x20
 {                                       // ...
     float (*knots)[2];                  // ...
     int *knotCount;                     // ...
     int knotCountMax;                   // ...
     int selectedKnot;
     void (__cdecl *eventCallback)(const DevGraph *, DevEventType, int); // ...
     void (__cdecl *textCallback)(const DevGraph *, const float, const float, char *, const int);
     void *data;                         // ...
     bool disableEditingEndPoints;       // ...
     // padding byte
     // padding byte
     // padding byte
 };
 struct SoundAliasGlobals // sizeof=0x2858
 {                                       // ...
     unsigned __int8 initialized[3];     // ...
     // padding byte
     DevGraph curveDevGraphs[16];        // ...
     int randSeed;                       // ...
     unsigned int hashUsed;              // ...
     unsigned int hashSize;              // ...
     snd_alias_list_t **hash;            // ...
     snd_alias_list_t aliasInfo[3];      // ...
     SoundFileInfo soundFileInfo[3];     // ...
     bool curvesInitialized;             // ...
     // padding byte
     // padding byte
     // padding byte
     SndCurve volumeFalloffCurves[16];   // ...
     char volumeFalloffCurveNames[16][64]; // ...
     bool speakerMapsInitialized;        // ...
     // padding byte
     // padding byte
     // padding byte
     SpeakerMapInfo speakerMaps[16];     // ...
 };
 struct snd_mem_node_s // sizeof=0x8
 {
     void *ptr;
     snd_mem_node_s *next;
 };
 struct tm // sizeof=0x24
 {                                       // ...
     int tm_sec;                         // ...
     int tm_min;                         // ...
     int tm_hour;                        // ...
     int tm_mday;                        // ...
     int tm_mon;                         // ...
     int tm_year;                        // ...
     int tm_wday;
     int tm_yday;                        // ...
     int tm_isdst;                       // ...
 };
 struct qtime_s // sizeof=0x24
 {                                       // ...
     int tm_sec;
     int tm_min;                         // ...
     int tm_hour;                        // ...
     int tm_mday;                        // ...
     int tm_mon;                         // ...
     int tm_year;                        // ...
     int tm_wday;
     int tm_yday;
     int tm_isdst;
 };
 struct __declspec(align(4)) fileData_s // sizeof=0xC
 {
     void *data;
     fileData_s *next;
     unsigned __int8 type;
     char name[1];
     // padding byte
     // padding byte
 };
 struct hunkUsed_t // sizeof=0x8
 {                                       // ...
     int permanent;                      // ...
     int temp;                           // ...
 };
 struct hunkHeader_t // sizeof=0x10
 {
     unsigned int magic;
     int size;
     const char *name;
     int dummy;
 };
 struct __declspec(align(4)) mem_track_t // sizeof=0x14
 {                                       // ...
     const char *name;                   // ...
     const char *filename;
     int size;                           // ...
     int pos;                            // ...
     unsigned __int8 type;               // ...
     unsigned __int8 usageType;          // ...
     // padding byte
     // padding byte
 };
 struct mem_track_node_s // sizeof=0x20
 {
     mem_track_t data;
     int project;
     mem_track_node_s *prev;
     mem_track_node_s *next;
 };
 struct AssetList // sizeof=0xC
 {                                       // ...
     int assetCount;                     // ...
     int maxCount;                       // ...
     XAssetHeader *assets;               // ...
 };
 struct searchpath_s // sizeof=0x1C
 {
     searchpath_s *next;
     iwd_t *iwd;
     directory_t *dir;
     int bLocalized;
     int ignore;
     int ignorePureCheck;
     int language;
 };
 struct fileInIwd_s // sizeof=0xC
 {
     unsigned int pos;
     char *name;
     fileInIwd_s *next;
 };
 struct iwd_t // sizeof=0x324
 {
     char iwdFilename[256];
     char iwdBasename[256];
     char iwdGamename[256];
     unsigned __int8 *handle;
     int checksum;
     int pure_checksum;
     volatile int hasOpenFile;
     int numfiles;
     unsigned __int8 referenced;
     // padding byte
     // padding byte
     // padding byte
     unsigned int hashSize;
     fileInIwd_s **hashTable;
     fileInIwd_s *buildBuffer;
 };
 struct directory_t // sizeof=0x200
 {
     char path[256];
     char gamedir[256];
 };
 union qfile_gus // sizeof=0x4
 {                                       // ...
     _iobuf *o;
     unsigned __int8 *z;
 };
 struct qfile_us // sizeof=0x8
 {                                       // ...
     qfile_gus file;
     int iwdIsClone;
 };
 struct fileHandleData_t // sizeof=0x11C
 {
     qfile_us handleFiles;
     int handleSync;
     int fileSize;
     int zipFilePos;
     iwd_t *zipFile;
     int streamed;
     char name[256];
 };
 struct constantConfigString // sizeof=0x10
 {
     int configStringNum;
     char *configString;
     int configStringHash;
     int lowercaseConfigStringHash;
 };
 struct AddressInfo // sizeof=0x110
 {                                       // ...
     unsigned int address;               // ...
     char moduleName[64];
     char bestFunction[64];
     char bestFunctionFilename[64];
     unsigned int bestFunctionAddress;
     char bestLineFilename[64];
     unsigned int bestLineAddress;
     unsigned int bestLineNumber;
 };
 struct __declspec(align(4)) _WIN32_FIND_DATAA // sizeof=0x140
 {                                       // ...
     unsigned int dwFileAttributes;      // ...
     _FILETIME ftCreationTime;           // ...
     _FILETIME ftLastAccessTime;         // ...
     _FILETIME ftLastWriteTime;          // ...
     unsigned int nFileSizeHigh;         // ...
     unsigned int nFileSizeLow;          // ...
     unsigned int dwReserved0;           // ...
     unsigned int dwReserved1;
     char cFileName[260];                // ...
     char cAlternateFileName[14];        // ...
     // padding byte
     // padding byte
 };
 struct _tagADDRESS64 // sizeof=0x10
 {
     unsigned __int64 Offset;
     unsigned __int16 Segment;
     // padding byte
     // padding byte
     ADDRESS_MODE Mode;
 };
 struct _POINTL // sizeof=0x8
 {                                       // ...
     int x;
     int y;
 };
 struct _KDHELP // sizeof=0x40
 {
     unsigned int Thread;
     unsigned int ThCallbackStack;
     unsigned int NextCallback;
     unsigned int FramePointer;
     unsigned int KiCallUserMode;
     unsigned int KeUserCallbackDispatcher;
     unsigned int SystemRangeStart;
     unsigned int ThCallbackBStore;
     unsigned int KiUserExceptionDispatcher;
     unsigned int StackBase;
     unsigned int StackLimit;
     unsigned int Reserved[5];
 };
 struct $5ACE225D4D14CE0550A9F5A217E306C5 // sizeof=0x8
 {                                       // ...
     __int16 dmOrientation;
     __int16 dmPaperSize;
     __int16 dmPaperLength;
     __int16 dmPaperWidth;
 };
 union $48683AFCAE9D2EFF1195AA1F5F779833 // sizeof=0x8
 {                                       // ...
     $5ACE225D4D14CE0550A9F5A217E306C5 __s0;
     _POINTL dmPosition;
 };
 struct $84BDF2D0EF3E6D92B6C33770B276E406 // sizeof=0x4
 {                                       // ...
     __int16 dmScale;
     __int16 dmCopies;
 };
 union $A8F038F911C79CE841E4E4A459804D2B // sizeof=0x4
 {                                       // ...
     $84BDF2D0EF3E6D92B6C33770B276E406 __s0;
     unsigned int dmDisplayOrientation;
 };
 struct $319163E49F0A6F35652FDFBFBA0FF503 // sizeof=0x4
 {                                       // ...
     __int16 dmDefaultSource;
     __int16 dmPrintQuality;
 };
 union $0463E18C5ADDCCF289DE0A6EA5C5142F // sizeof=0x4
 {                                       // ...
     $319163E49F0A6F35652FDFBFBA0FF503 __s0;
     unsigned int dmDisplayFixedOutput;
 };
 union $309666D137CBB19809FA597AD348B415 // sizeof=0x4
 {                                       // ...
     unsigned int dmDisplayFlags;
     unsigned int dmNup;
 };
 struct _devicemodeA // sizeof=0x9C
 {
     unsigned __int8 dmDeviceName[32];
     unsigned __int16 dmSpecVersion;
     unsigned __int16 dmDriverVersion;
     unsigned __int16 dmSize;
     unsigned __int16 dmDriverExtra;
     unsigned int dmFields;
     $48683AFCAE9D2EFF1195AA1F5F779833 ___u6;
     $A8F038F911C79CE841E4E4A459804D2B ___u7;
     $0463E18C5ADDCCF289DE0A6EA5C5142F ___u8;
     __int16 dmColor;
     __int16 dmDuplex;
     __int16 dmYResolution;
     __int16 dmTTOption;
     __int16 dmCollate;
     unsigned __int8 dmFormName[32];
     unsigned __int16 dmLogPixels;
     unsigned int dmBitsPerPel;
     unsigned int dmPelsWidth;
     unsigned int dmPelsHeight;
     $309666D137CBB19809FA597AD348B415 ___u19;
     unsigned int dmDisplayFrequency;
     unsigned int dmICMMethod;
     unsigned int dmICMIntent;
     unsigned int dmMediaType;
     unsigned int dmDitherType;
     unsigned int dmReserved1;
     unsigned int dmReserved2;
     unsigned int dmPanningWidth;
     unsigned int dmPanningHeight;
 };
 struct _KDHELP64 // sizeof=0x70
 {
     unsigned __int64 Thread;
     unsigned int ThCallbackStack;
     unsigned int ThCallbackBStore;
     unsigned int NextCallback;
     unsigned int FramePointer;
     unsigned __int64 KiCallUserMode;
     unsigned __int64 KeUserCallbackDispatcher;
     unsigned __int64 SystemRangeStart;
     unsigned __int64 KiUserExceptionDispatcher;
     unsigned __int64 StackBase;
     unsigned __int64 StackLimit;
     unsigned __int64 Reserved[5];
 };
 struct _tagADDRESS // sizeof=0xC
 {
     unsigned int Offset;
     unsigned __int16 Segment;
     // padding byte
     // padding byte
     ADDRESS_MODE Mode;
 };
 struct GenericAabbTree // sizeof=0x10
 {
     int firstItem;
     int itemCount;
     int firstChild;
     int childCount;
 };
 struct GenericAabbTreeOptions // sizeof=0x28
 {                                       // ...
     void *items;                        // ...
     int itemCount;                      // ...
     int itemSize;                       // ...
     int maintainValidBounds;            // ...
     float (*mins)[3];                   // ...
     float (*maxs)[3];                   // ...
     GenericAabbTree *treeNodePool;      // ...
     int treeNodeLimit;                  // ...
     int minItemsPerLeaf;                // ...
     int maxItemsPerLeaf;                // ...
 };
 struct stringDef_s // sizeof=0x8
 {
     stringDef_s *next;
     const char *str;
 };
 struct KeywordHashEntry<menuDef_t,128,128> // sizeof=0x8
 {                                       // ...
     const char *keyword;
     int (__cdecl *func)(menuDef_t *, int);
 };
 struct loadAssets_t // sizeof=0x10
 {                                       // ...
     float fadeClamp;                    // ...
     int fadeCycle;                      // ...
     float fadeAmount;                   // ...
     float fadeInAmount;                 // ...
 };
 struct $F99A9AECA2B60514CA5C8024B8EAC369 // sizeof=0xC1C
 {                                       // ...
     loadAssets_t loadAssets;            // ...
     MenuList menuList;                  // ...
     itemDef_s *items[256];              // ...
     menuDef_t *menus[512];              // ...
 };
 struct KeywordHashEntry<itemDef_s,256,3855> // sizeof=0x8
 {                                       // ...
     const char *keyword;
     int (__cdecl *func)(itemDef_s *, int);
 };
 struct pc_token_s // sizeof=0x410
 {                                       // ...
     int type;                           // ...
     int subtype;
     int intvalue;                       // ...
     float floatvalue;                   // ...
     char string[1024];                  // ...
 };
 struct scrollInfo_s // sizeof=0x20
 {                                       // ...
     int nextScrollTime;                 // ...
     int nextAdjustTime;                 // ...
     int adjustValue;                    // ...
     int scrollKey;                      // ...
     float xStart;                       // ...
     float yStart;                       // ...
     itemDef_s *item;                    // ...
     int scrollDir;                      // ...
 };
 struct commandDef_t // sizeof=0x8
 {                                       // ...
     const char *name;                   // ...
     void (__cdecl *handler)(UiContext *, itemDef_s *, const char **); // ...
 };
 struct CachedAssets_t // sizeof=0x48
 {                                       // ...
     Material *scrollBarArrowUp;         // ...
     Material *scrollBarArrowDown;       // ...
     Material *scrollBarArrowLeft;       // ...
     Material *scrollBarArrowRight;      // ...
     Material *scrollBar;                // ...
     Material *scrollBarThumb;           // ...
     Material *sliderBar;                // ...
     Material *sliderThumb;              // ...
     Material *whiteMaterial;            // ...
     Material *cursor;                   // ...
     Font_s *bigFont;                    // ...
     Font_s *smallFont;                  // ...
     Font_s *consoleFont;                // ...
     Font_s *boldFont;                   // ...
     Font_s *textFont;                   // ...
     Font_s *extraBigFont;               // ...
     Font_s *objectiveFont;              // ...
     snd_alias_list_t *itemFocusSound;
 };
 struct gameTypeInfo // sizeof=0x8
 {                                       // ...
     const char *gameType;               // ...
     const char *gameTypeName;           // ...
 };
 struct mapInfo // sizeof=0xA0
 {                                       // ...
     const char *mapName;                // ...
     const char *mapLoadName;            // ...
     const char *imageName;              // ...
     const char *opponentName;
     int teamMembers;
     int typeBits;                       // ...
     int timeToBeat[32];
     Material *levelShot;                // ...
     int active;                         // ...
 };
 struct modInfo_t // sizeof=0x8
 {                                       // ...
     const char *modName;                // ...
     const char *modDescr;               // ...
 };
 struct serverStatus_s // sizeof=0x2028
 {                                       // ...
     char string[8192];                  // ...
     netadr_t address;                   // ...
     int time;
     int startTime;                      // ...
     int pending;
     int print;
     int retrieved;                      // ...
 };
 struct serverStatusInfo_t // sizeof=0xD04
 {                                       // ...
     char address[64];
     const char *lines[128][4];          // ...
     char text[1024];
     char pings[192];
     int numLines;                       // ...
 };
 struct pendingServer_t // sizeof=0x8C
 {                                       // ...
     char adrstr[64];
     char name[64];                      // ...
     int startTime;                      // ...
     int serverNum;
     int valid;                          // ...
 };
 struct pendingServerStatus_t // sizeof=0x8C4
 {                                       // ...
     int num;                            // ...
     pendingServer_t server[16];         // ...
 };
 struct sharedUiInfo_t // sizeof=0x1C5B0
 {                                       // ...
     CachedAssets_t assets;              // ...
     int playerCount;                    // ...
     char playerNames[64][32];           // ...
     char teamNames[64][32];
     int playerClientNums[64];           // ...
     int numGameTypes;                   // ...
     gameTypeInfo gameTypes[32];         // ...
     int numCustomGameTypes;             // ...
     gameTypeInfo customGameTypes[32];
     char customGameTypeCancelState[2048];
     int numJoinGameTypes;               // ...
     gameTypeInfo joinGameTypes[32];     // ...
     int mapCount;                       // ...
     mapInfo mapList[128];               // ...
     Material *serverHardwareIconList[10]; // ...
     modInfo_t modList[64];              // ...
     int modCount;                       // ...
     int modIndex;                       // ...
     serverStatus_s serverStatus;        // ...
     _BYTE gap8EB4[73968];               // ...
     char serverStatusAddress[64];       // ...
     serverStatusInfo_t serverStatusInfo; // ...
     int nextServerStatusRefresh;        // ...
     pendingServerStatus_t pendingServerStatus; // ...
 };
 struct pinglist_t // sizeof=0x44
 {
     char adrstr[64];
     int start;
 };
 struct __cppobj std::iterator<std::random_access_iterator_tag,char,int,char *,char &> : std::_Iterator_base_universal // sizeof=0x0
 {
 };
 struct __cppobj std::_Revranit<char *,std::iterator<std::random_access_iterator_tag,char,int,char *,char &> > : std::iterator<std::random_access_iterator_tag,char,int,char *,char &> // sizeof=0x4
 {                                       // ...
     char *current;                      // ...
 };
 struct __cppobj std::reverse_iterator<char *> : std::_Revranit<char *,std::iterator<std::random_access_iterator_tag,char,int,char *,char &> > // sizeof=0x4
 {                                       // ...
 };
 struct __cppobj std::_Different_checked_iterator_base_type_tag // sizeof=0x0
 {
 };
 struct serverStatusDvar_t // sizeof=0xC
 {
     const char *name;
     const char *altName;
     sscType_t type;
 };
 struct LegacyHacks // sizeof=0x4C
 {                                       // ...
     int cl_downloadSize;                // ...
     int cl_downloadCount;               // ...
     int cl_downloadTime;                // ...
     char cl_downloadName[64];           // ...
 };
 struct PlayerProfileStatus // sizeof=0x104
 {                                       // ...
     int sortDir;
     int displayProfile[64];
 };
 struct uiInfo_s // sizeof=0x24B0
 {
     UiContext uiDC;
     int myTeamCount;
     int playerRefresh;
     int playerIndex;
     int playerProfileCount;
     const char *playerProfileName[64];
     PlayerProfileStatus playerProfileStatus;
     int timeIndex;
     int previousTimes[4];
     uiMenuCommand_t currentMenuType;
     bool allowScriptMenuResponse;
     char findPlayerName[1024];
     char foundPlayerServerAddresses[16][64];
     char foundPlayerServerNames[16][64];
     // padding byte
     // padding byte
     // padding byte
     int numFoundPlayerServers;
     int nextFindPlayerRefresh;
 };
 struct serverFilter_s // sizeof=0x8
 {                                       // ...
     const char *description;            // ...
     const char *basedir;                // ...
 };
 struct uiClientState_s // sizeof=0xC08
 {                                       // ...
     connstate_t connState;              // ...
     int connectPacketCount;             // ...
     char servername[1024];              // ...
     char updateInfoString[1024];
     char messageString[1024];           // ...
 };
 struct ConversionArguments // sizeof=0x28
 {                                       // ...
     int argCount;                       // ...
     const char *args[9];                // ...
 };
 struct ValidOperation // sizeof=0x10
 {
     operationEnum op;
     expDataType leftSide;
     expDataType rightSide;
     void (__cdecl *function)(Operand *, Operand *, Operand *);
 };
 struct OperandList // sizeof=0x54
 {                                       // ...
     Operand operands[10];
     int operandCount;
 };
 struct OperandStack // sizeof=0x13B4
 {
     OperandList stack[60];
     int numOperandLists;
 };
 struct OperatorStack // sizeof=0xF4
 {                                       // ...
     operationEnum stack[60];            // ...
     int numOperators;                   // ...
 };
 struct UI_Component_data_t // sizeof=0xAC
 {                                       // ...
     float screenWidth;                  // ...
     float screenHeight;                 // ...
     float charWidth;                    // ...
     float charHeight;                   // ...
     float scrollBarSize;                // ...
     Material *cursor;                   // ...
     float cursorPos[2];                 // ...
     int hideCursor;                     // ...
     Material *filledCircle;             // ...
     int consoleReason;                  // ...
     char findText[128];                 // ...
 };
 struct __cppobj UI_Component // sizeof=0x10
 {                                       // ...
     UI_Component_vtbl *__vftable;
     float size[2];
     UI_Component *selectionParent;      // ...
 };
 struct /*VFT*/ UI_Component_vtbl // sizeof=0x1C
 {
     void (__thiscall *Init)(UI_Component *this);
     void (__thiscall *Shutdown)(UI_Component *this);
     void (__thiscall *~UI_Component)(UI_Component *this);
     void (__thiscall *Draw)(UI_Component *this, float, float, float, float, float, float);
     bool (__thiscall *KeyEvent)(UI_Component *this, float *, int);
     UI_Component *(__thiscall *GetCompAtLocation)(UI_Component *this, float *);
     void (__thiscall *AddText)(UI_Component *this, const char *);
 };
 struct __cppobj UI_LinesComponent : UI_Component // sizeof=0x24
 {                                       // ...
     int selectedLine;                   // ...
     bool focusOnSelectedLine;
     bool focusOnSelectedLineUser;
     // padding byte
     // padding byte
     int numLines;                       // ...
     float pos[2];
 };
 struct /*VFT*/ UI_LinesComponent_vtbl // sizeof=0x20
 {
     void (__thiscall *Init)(UI_Component *this);
     void (__thiscall *Shutdown)(UI_Component *this);
     void (__thiscall *~UI_Component)(UI_Component *this);
     void (__thiscall *Draw)(UI_Component *this, float, float, float, float, float, float);
     bool (__thiscall *KeyEvent)(UI_Component *this, float *, int);
     UI_Component *(__thiscall *GetCompAtLocation)(UI_Component *this, float *);
     void (__thiscall *AddText)(UI_Component *this, const char *);
     bool (__thiscall *SetSelectedLineFocus)(UI_LinesComponent *this, int, bool);
 };
 struct __cppobj __declspec(align(4)) UI_ScrollPane : UI_Component // sizeof=0x34
 {                                       // ...
     UI_LinesComponent *comp;            // ...
     bool forceHorScoll;                 // ...
     // padding byte
     // padding byte
     // padding byte
     float mouseHeldScale[2];
     float mouseHeldPos[2];
     float mouseHeldCompPos[2];
     bool mouseWasDown[2];
     // padding byte
     // padding byte
 };
 struct /*VFT*/ UI_ScrollPane_vtbl // sizeof=0x1C
 {
     void (__thiscall *Init)(UI_Component *this);
     void (__thiscall *Shutdown)(UI_Component *this);
     void (__thiscall *~UI_Component)(UI_Component *this);
     void (__thiscall *Draw)(UI_Component *this, float, float, float, float, float, float);
     bool (__thiscall *KeyEvent)(UI_Component *this, float *, int);
     UI_Component *(__thiscall *GetCompAtLocation)(UI_Component *this, float *);
     void (__thiscall *AddText)(UI_Component *this, const char *);
 };
 struct __unaligned __declspec(align(1)) $_TypeDescriptor$_extraBytes_19 // sizeof=0x1B
 {
     const void *pVFTable;
     void *spare;
     char name[19];
 };
 struct __cppobj UI_VerticalDivider : UI_Component // sizeof=0x1C
 {                                       // ...
     UI_ScrollPane *topComp;             // ...
     UI_ScrollPane *bottomComp;          // ...
     float posY;                         // ...
 };
 struct /*VFT*/ UI_VerticalDivider_vtbl // sizeof=0x1C
 {
     void (__thiscall *Init)(UI_Component *this);
     void (__thiscall *Shutdown)(UI_Component *this);
     void (__thiscall *~UI_Component)(UI_Component *this);
     void (__thiscall *Draw)(UI_Component *this, float, float, float, float, float, float);
     bool (__thiscall *KeyEvent)(UI_Component *this, float *, int);
     UI_Component *(__thiscall *GetCompAtLocation)(UI_Component *this, float *);
     void (__thiscall *AddText)(UI_Component *this, const char *);
 };
 struct __cppobj LocalizeName // sizeof=0x0
 {                                       // ...
 };
 struct __cppobj std::_Ranit_base<char,int,char const *,char const &,std::_Iterator_base_secure> : std::_Iterator_base_secure // sizeof=0x4
 {                                       // ...
 };
 struct __cppobj std::wstreambuf // sizeof=0x3C
 {
     std::wstreambuf_vtbl *__vftable;
     std::_Mutex _Mylock;
     wchar_t *_Gfirst;
     wchar_t *_Pfirst;
     wchar_t **_IGfirst;
     wchar_t **_IPfirst;
     wchar_t *_Gnext;
     wchar_t *_Pnext;
     wchar_t **_IGnext;
     wchar_t **_IPnext;
     int _Gcount;
     int _Pcount;
     int *_IGcount;
     int *_IPcount;
     std::locale *_Plocale;
 };
 struct __cppobj std::_Locbase<int> // sizeof=0x0
 {                                       // ...
 };
 struct __cppobj std::locale::facet // sizeof=0x8
 {                                       // ...
     std::locale::facet_vtbl *__vftable;
     unsigned int _Refs;
 };
 struct /*VFT*/ std::locale::facet_vtbl // sizeof=0x4
 {
     void (__thiscall *~facet)(std::locale::facet *this);
 };
 struct __cppobj std::_String_base : std::_Container_base_secure // sizeof=0x0
 {                                       // ...
 };
 struct __cppobj std::_Allocator_base<char> // sizeof=0x0
 {                                       // ...
 };
 struct __cppobj std::allocator<char> : std::_Allocator_base<char> // sizeof=0x0
 {                                       // ...
 };
 struct __cppobj std::_String_val<char> : std::_String_base // sizeof=0x1
 {                                       // ...
     std::allocator<char> _Alval;
 };
 union std::string::_Bxty // sizeof=0x10
 {                                       // ...
     char _Buf[16];
     char *_Ptr;
 };
 struct __cppobj std::string : std::_String_val<char> // sizeof=0x1C
 {                                       // ...
     // padding byte
     // padding byte
     // padding byte
     std::string::_Bxty _Bx;
     unsigned int _Mysize;
     unsigned int _Myres;
 };
 struct __cppobj std::locale::_Locimp : std::locale::facet // sizeof=0x34
 {
     std::locale::facet **_Facetvec;
     unsigned int _Facetcount;
     int _Catmask;
     bool _Xparent;
     // padding byte
     // padding byte
     // padding byte
     std::string _Name;
 };
 struct /*VFT*/ std::locale::_Locimp_vtbl // sizeof=0x4
 {
     void (__thiscall *~facet)(std::locale::facet *this);
 };
 const struct __cppobj std::locale : std::_Locbase<int> // sizeof=0x4
 {
     std::locale::_Locimp *_Ptr;
 };
 struct /*VFT*/ std::wstreambuf_vtbl // sizeof=0x38
 {
     void (__thiscall *~basic_streambuf<wchar_t,std::char_traits<wchar_t> >)(std::wstreambuf *this);
     unsigned __int16 (__thiscall *overflow)(std::wstreambuf *this, unsigned __int16);
     unsigned __int16 (__thiscall *pbackfail)(std::wstreambuf *this, unsigned __int16);
     int (__thiscall *showmanyc)(std::wstreambuf *this);
     unsigned __int16 (__thiscall *underflow)(std::wstreambuf *this);
     unsigned __int16 (__thiscall *uflow)(std::wstreambuf *this);
     int (__thiscall *xsgetn)(std::wstreambuf *this, wchar_t *, int);
     int (__thiscall *_Xsgetn_s)(std::wstreambuf *this, wchar_t *, unsigned int, int);
     int (__thiscall *xsputn)(std::wstreambuf *this, const wchar_t *, int);
     std::fpos<int> *(__thiscall *seekoff)(std::wstreambuf *this, std::fpos<int> *result, int, int, int);
     std::fpos<int> *(__thiscall *seekpos)(std::wstreambuf *this, std::fpos<int> *result, std::fpos<int>, int);
     std::wstreambuf *(__thiscall *setbuf)(std::wstreambuf *this, wchar_t *, int);
     int (__thiscall *sync)(std::wstreambuf *this);
     void (__thiscall *imbue)(std::wstreambuf *this, const std::locale *);
 };
 struct __cppobj std::_Mutex // sizeof=0x4
 {                                       // ...
     void *_Mtx;
 };
 struct __cppobj std::logic_error : std::exception // sizeof=0x28
 {                                       // ...
     std::string _Str;
 };
 struct /*VFT*/ std::logic_error_vtbl // sizeof=0x8
 {
     void (__thiscall *~exception)(std::exception *this);
     const char *(__thiscall *what)(std::exception *this);
 };
 struct __cppobj std::length_error : std::logic_error // sizeof=0x28
 {                                       // ...
 };
 struct /*VFT*/ std::length_error_vtbl // sizeof=0x8
 {
     void (__thiscall *~exception)(std::exception *this);
     const char *(__thiscall *what)(std::exception *this);
 };
 struct __cppobj std::runtime_error : std::exception // sizeof=0x28
 {                                       // ...
     std::string _Str;
 };
 struct /*VFT*/ std::runtime_error_vtbl // sizeof=0x8
 {
     void (__thiscall *~exception)(std::exception *this);
     const char *(__thiscall *what)(std::exception *this);
 };
 struct __cppobj std::ctype_base : std::locale::facet // sizeof=0x8
 {                                       // ...
 };
 struct /*VFT*/ std::ctype_base_vtbl // sizeof=0x4
 {
     void (__thiscall *~facet)(std::locale::facet *this);
 };
 struct __cppobj std::ctype<char> : std::ctype_base // sizeof=0x18
 {                                       // ...
     _Ctypevec _Ctype;
 };
 struct _Ctypevec // sizeof=0x10
 {                                       // ...
     unsigned int _Hand;
     unsigned int _Page;
     const __int16 *_Table;
     int _Delfl;
 };
 struct /*VFT*/ std::ctype<char>_vtbl // sizeof=0x2C
 {
     void (__thiscall *~facet)(std::locale::facet *this);
     const char *(__thiscall *do_tolower)(std::ctype<char> *this, char *, const char *);
     char (__thiscall *do_tolower)(std::ctype<char> *this, char);
     const char *(__thiscall *do_toupper)(std::ctype<char> *this, char *, const char *);
     char (__thiscall *do_toupper)(std::ctype<char> *this, char);
     const char *(__thiscall *do_widen)(std::ctype<char> *this, const char *, const char *, char *);
     char (__thiscall *do_widen)(std::ctype<char> *this, char);
     const char *(__thiscall *_Do_widen_s)(std::ctype<char> *this, const char *, const char *, char *, unsigned int);
     const char *(__thiscall *do_narrow)(std::ctype<char> *this, const char *, const char *, char, char *);
     char (__thiscall *do_narrow)(std::ctype<char> *this, char, char);
     const char *(__thiscall *_Do_narrow_s)(std::ctype<char> *this, const char *, const char *, char, char *, unsigned int);
 };
 struct __cppobj std::locale::id // sizeof=0x4
 {
     unsigned int _Id;
 };
 struct __cppobj std::_Lockit // sizeof=0x4
 {                                       // ...
     int _Locktype;
 };
 struct __cppobj std::_Locinfo // sizeof=0x74
 {
     std::_Lockit _Lock;
     std::string _Days;
     std::string _Months;
     std::string _Oldlocname;
     std::string _Newlocname;
 };
 struct __cppobj std::ctype_byname<char> : std::ctype<char> // sizeof=0x18
 {
 };
 struct /*VFT*/ std::ctype_byname<char>_vtbl // sizeof=0x2C
 {
     void (__thiscall *~facet)(std::locale::facet *this);
     const char *(__thiscall *do_tolower)(std::ctype<char> *this, char *, const char *);
     char (__thiscall *do_tolower)(std::ctype<char> *this, char);
     const char *(__thiscall *do_toupper)(std::ctype<char> *this, char *, const char *);
     char (__thiscall *do_toupper)(std::ctype<char> *this, char);
     const char *(__thiscall *do_widen)(std::ctype<char> *this, const char *, const char *, char *);
     char (__thiscall *do_widen)(std::ctype<char> *this, char);
     const char *(__thiscall *_Do_widen_s)(std::ctype<char> *this, const char *, const char *, char *, unsigned int);
     const char *(__thiscall *do_narrow)(std::ctype<char> *this, const char *, const char *, char, char *);
     char (__thiscall *do_narrow)(std::ctype<char> *this, char, char);
     const char *(__thiscall *_Do_narrow_s)(std::ctype<char> *this, const char *, const char *, char, char *, unsigned int);
 };
 struct __cppobj std::allocator<char>::rebind<char> // sizeof=0x0
 {
 };
 struct __cppobj std::_Iosb<int> // sizeof=0x0
 {                                       // ...
 };
 struct __cppobj std::ios_base : std::_Iosb<int> // sizeof=0x28
 {                                       // ...
     std::ios_base_vtbl *__vftable;
     unsigned int _Stdstr;
     int _Mystate;
     int _Except;
     int _Fmtfl;
     int _Prec;
     int _Wide;
     std::ios_base::_Iosarray *_Arr;
     std::ios_base::_Fnarray *_Calls;
     std::locale *_Ploc;
 };
 struct /*VFT*/ std::ios_base_vtbl // sizeof=0x4
 {
     void (__thiscall *~ios_base)(std::ios_base *this);
 };
 struct __cppobj std::ios_base::_Iosarray // sizeof=0x10
 {
     std::ios_base::_Iosarray *_Next;
     int _Index;
     int _Lo;
     void *_Vp;
 };
 struct __cppobj std::ios_base::_Fnarray // sizeof=0xC
 {
     std::ios_base::_Fnarray *_Next;
     int _Index;
     void (__cdecl *_Pfn)(std::ios_base::event, std::ios_base *, int);
 };
 struct __cppobj std::streambuf // sizeof=0x3C
 {
     std::streambuf_vtbl *__vftable;
     std::_Mutex _Mylock;
     char *_Gfirst;
     char *_Pfirst;
     char **_IGfirst;
     char **_IPfirst;
     char *_Gnext;
     char *_Pnext;
     char **_IGnext;
     char **_IPnext;
     int _Gcount;
     int _Pcount;
     int *_IGcount;
     int *_IPcount;
     std::locale *_Plocale;
 };
 struct /*VFT*/ std::streambuf_vtbl // sizeof=0x38
 {
     void (__thiscall *~basic_streambuf<char,std::char_traits<char> >)(std::streambuf *this);
     int (__thiscall *overflow)(std::streambuf *this, int);
     int (__thiscall *pbackfail)(std::streambuf *this, int);
     int (__thiscall *showmanyc)(std::streambuf *this);
     int (__thiscall *underflow)(std::streambuf *this);
     int (__thiscall *uflow)(std::streambuf *this);
     int (__thiscall *xsgetn)(std::streambuf *this, char *, int);
     int (__thiscall *_Xsgetn_s)(std::streambuf *this, char *, unsigned int, int);
     int (__thiscall *xsputn)(std::streambuf *this, const char *, int);
     std::fpos<int> *(__thiscall *seekoff)(std::streambuf *this, std::fpos<int> *result, int, int, int);
     std::fpos<int> *(__thiscall *seekpos)(std::streambuf *this, std::fpos<int> *result, std::fpos<int>, int);
     std::streambuf *(__thiscall *setbuf)(std::streambuf *this, char *, int);
     int (__thiscall *sync)(std::streambuf *this);
     void (__thiscall *imbue)(std::streambuf *this, const std::locale *);
 };
 struct __cppobj std::ostream // sizeof=0x38
 {
     _BYTE gap0[56];
 };
 struct /*VFT*/ std::ostream_vtbl // sizeof=0x4
 {
     void *(__thiscall *__vecDelDtor)(std::ostream *this, unsigned int);
 };
 struct __cppobj __declspec(align(4)) std::ios : std::ios_base // sizeof=0x34
 {
     std::streambuf *_Mystrbuf;
     std::ostream *_Tiestr;
     char _Fillch;
     // padding byte
     // padding byte
     // padding byte
 };
 struct /*VFT*/ std::ios_vtbl // sizeof=0x4
 {
     void (__thiscall *~ios_base)(std::ios_base *this);
 };
 struct __cppobj std::ostream::_Sentry_base // sizeof=0x4
 {                                       // ...
     std::ostream *_Myostr;
 };
 struct __cppobj __declspec(align(4)) std::ostream::sentry : std::ostream::_Sentry_base // sizeof=0x8
 {
     bool _Ok;
     // padding byte
     // padding byte
     // padding byte
 };
 struct __cppobj std::bad_cast : std::exception // sizeof=0xC
 {
 };
 struct /*VFT*/ std::bad_cast_vtbl // sizeof=0x8
 {
     void (__thiscall *~exception)(std::exception *this);
     const char *(__thiscall *what)(std::exception *this);
 };
 struct __cppobj std::invalid_argument : std::logic_error // sizeof=0x28
 {
 };
 struct /*VFT*/ std::invalid_argument_vtbl // sizeof=0x8
 {
     void (__thiscall *~exception)(std::exception *this);
     const char *(__thiscall *what)(std::exception *this);
 };
 struct __cppobj std::codecvt_base : std::locale::facet // sizeof=0x8
 {                                       // ...
 };
 struct /*VFT*/ std::codecvt_base_vtbl // sizeof=0x10
 {
     void (__thiscall *~facet)(std::locale::facet *this);
     bool (__thiscall *do_always_noconv)(std::codecvt_base *this);
     int (__thiscall *do_max_length)(std::codecvt_base *this);
     int (__thiscall *do_encoding)(std::codecvt_base *this);
 };
 struct __cppobj std::underflow_error : std::runtime_error // sizeof=0x28
 {
 };
 struct /*VFT*/ std::underflow_error_vtbl // sizeof=0x8
 {
     void (__thiscall *~exception)(std::exception *this);
     const char *(__thiscall *what)(std::exception *this);
 };
 struct __cppobj std::_String_const_iterator<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > : std::_Ranit_base<char,int,char const *,char const &,std::_Iterator_base_secure> // sizeof=0x8
 {
     const char *_Myptr;
 };
 struct __cppobj Allocator<char,LocalizeStringName> // sizeof=0x0
 {                                       // ...
 };
 struct __cppobj std::_String_val<char,Allocator<char,LocalizeStringName> > : std::_String_base // sizeof=0x1
 {                                       // ...
     Allocator<char,LocalizeStringName> _Alval;
 };
 union std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >::_Bxty // sizeof=0x10
 {                                       // ...
     char _Buf[16];
     char *_Ptr;
 };
 struct __cppobj std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > : std::_String_val<char,Allocator<char,LocalizeStringName> > // sizeof=0x1C
 {                                       // ...
     // padding byte
     // padding byte
     // padding byte
     std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >::_Bxty _Bx; // ...
     unsigned int _Mysize;               // ...
     unsigned int _Myres;                // ...
 };
 struct __cppobj __declspec(align(4)) std::istream // sizeof=0x3C
 {
     _BYTE gap0[4];
     int _Chcount;
     _BYTE gap8[52];
 };
 struct /*VFT*/ std::istream_vtbl // sizeof=0x4
 {
     void *(__thiscall *__vecDelDtor)(std::istream *this, unsigned int);
 };
 struct __cppobj std::istream::_Sentry_base // sizeof=0x4
 {                                       // ...
     std::istream *_Myistr;
 };
 struct __cppobj __declspec(align(4)) std::istream::sentry : std::istream::_Sentry_base // sizeof=0x8
 {
     bool _Ok;
     // padding byte
     // padding byte
     // padding byte
 };
 struct __cppobj std::codecvt<unsigned short,char,int> : std::codecvt_base // sizeof=0x10
 {
     _Cvtvec _Cvt;
 };
 struct _Cvtvec // sizeof=0x8
 {                                       // ...
     unsigned int _Hand;
     unsigned int _Page;
 };
 struct /*VFT*/ std::codecvt<unsigned short,char,int>_vtbl // sizeof=0x20
 {
     void (__thiscall *~facet)(std::locale::facet *this);
     bool (__thiscall *do_always_noconv)(std::codecvt_base *this);
     int (__thiscall *do_max_length)(std::codecvt_base *this);
     int (__thiscall *do_encoding)(std::codecvt_base *this);
     int (__thiscall *do_in)(std::codecvt<unsigned short,char,int> *this, int *, const char *, const char *, const char **, unsigned __int16 *, unsigned __int16 *, unsigned __int16 **);
     int (__thiscall *do_out)(std::codecvt<unsigned short,char,int> *this, int *, const unsigned __int16 *, const unsigned __int16 *, const unsigned __int16 **, char *, char *, char **);
     int (__thiscall *do_unshift)(std::codecvt<unsigned short,char,int> *this, int *, char *, char *, char **);
     int (__thiscall *do_length)(std::codecvt<unsigned short,char,int> *this, const int *, const char *, const char *, unsigned int);
 };
 struct __cppobj std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > : std::_Ranit_base<char,int,char const *,char const &,std::_Iterator_base_secure> // sizeof=0x8
 {
     const char *_Myptr;
 };
 struct __cppobj std::ctype<wchar_t> : std::ctype_base // sizeof=0x20
 {
     _Ctypevec _Ctype;
     _Cvtvec _Cvt;
 };
 struct /*VFT*/ std::ctype<wchar_t>_vtbl // sizeof=0x3C
 {
     void (__thiscall *~facet)(std::locale::facet *this);
     const wchar_t *(__thiscall *do_is)(std::ctype<wchar_t> *this, const wchar_t *, const wchar_t *, __int16 *);
     bool (__thiscall *do_is)(std::ctype<wchar_t> *this, __int16, wchar_t);
     const wchar_t *(__thiscall *do_scan_is)(std::ctype<wchar_t> *this, __int16, const wchar_t *, const wchar_t *);
     const wchar_t *(__thiscall *do_scan_not)(std::ctype<wchar_t> *this, __int16, const wchar_t *, const wchar_t *);
     const wchar_t *(__thiscall *do_tolower)(std::ctype<wchar_t> *this, wchar_t *, const wchar_t *);
     wchar_t (__thiscall *do_tolower)(std::ctype<wchar_t> *this, wchar_t);
     const wchar_t *(__thiscall *do_toupper)(std::ctype<wchar_t> *this, wchar_t *, const wchar_t *);
     wchar_t (__thiscall *do_toupper)(std::ctype<wchar_t> *this, wchar_t);
     const char *(__thiscall *do_widen)(std::ctype<wchar_t> *this, const char *, const char *, wchar_t *);
     wchar_t (__thiscall *do_widen)(std::ctype<wchar_t> *this, char);
     const char *(__thiscall *_Do_widen_s)(std::ctype<wchar_t> *this, const char *, const char *, wchar_t *, unsigned int);
     const wchar_t *(__thiscall *do_narrow)(std::ctype<wchar_t> *this, const wchar_t *, const wchar_t *, char, char *);
     char (__thiscall *do_narrow)(std::ctype<wchar_t> *this, wchar_t, char);
     const wchar_t *(__thiscall *_Do_narrow_s)(std::ctype<wchar_t> *this, const wchar_t *, const wchar_t *, char, char *, unsigned int);
 };
 struct __cppobj std::domain_error : std::logic_error // sizeof=0x28
 {
 };
 struct /*VFT*/ std::domain_error_vtbl // sizeof=0x8
 {
     void (__thiscall *~exception)(std::exception *this);
     const char *(__thiscall *what)(std::exception *this);
 };
 struct __cppobj std::overflow_error : std::runtime_error // sizeof=0x28
 {
 };
 struct /*VFT*/ std::overflow_error_vtbl // sizeof=0x8
 {
     void (__thiscall *~exception)(std::exception *this);
     const char *(__thiscall *what)(std::exception *this);
 };
 struct __cppobj std::ctype<unsigned short> : std::ctype_base // sizeof=0x20
 {
     _Ctypevec _Ctype;
     _Cvtvec _Cvt;
 };
 struct /*VFT*/ std::ctype<unsigned short>_vtbl // sizeof=0x3C
 {
     void (__thiscall *~facet)(std::locale::facet *this);
     const unsigned __int16 *(__thiscall *do_is)(std::ctype<unsigned short> *this, const unsigned __int16 *, const unsigned __int16 *, __int16 *);
     bool (__thiscall *do_is)(std::ctype<unsigned short> *this, __int16, unsigned __int16);
     const unsigned __int16 *(__thiscall *do_scan_is)(std::ctype<unsigned short> *this, __int16, const unsigned __int16 *, const unsigned __int16 *);
     const unsigned __int16 *(__thiscall *do_scan_not)(std::ctype<unsigned short> *this, __int16, const unsigned __int16 *, const unsigned __int16 *);
     const unsigned __int16 *(__thiscall *do_tolower)(std::ctype<unsigned short> *this, unsigned __int16 *, const unsigned __int16 *);
     unsigned __int16 (__thiscall *do_tolower)(std::ctype<unsigned short> *this, unsigned __int16);
     const unsigned __int16 *(__thiscall *do_toupper)(std::ctype<unsigned short> *this, unsigned __int16 *, const unsigned __int16 *);
     unsigned __int16 (__thiscall *do_toupper)(std::ctype<unsigned short> *this, unsigned __int16);
     const char *(__thiscall *do_widen)(std::ctype<unsigned short> *this, const char *, const char *, unsigned __int16 *);
     unsigned __int16 (__thiscall *do_widen)(std::ctype<unsigned short> *this, char);
     const char *(__thiscall *_Do_widen_s)(std::ctype<unsigned short> *this, const char *, const char *, unsigned __int16 *, unsigned int);
     const unsigned __int16 *(__thiscall *do_narrow)(std::ctype<unsigned short> *this, const unsigned __int16 *, const unsigned __int16 *, char, char *);
     char (__thiscall *do_narrow)(std::ctype<unsigned short> *this, unsigned __int16, char);
     const unsigned __int16 *(__thiscall *_Do_narrow_s)(std::ctype<unsigned short> *this, const unsigned __int16 *, const unsigned __int16 *, char, char *, unsigned int);
 };
 struct __cppobj std::range_error : std::runtime_error // sizeof=0x28
 {
 };
 struct /*VFT*/ std::range_error_vtbl // sizeof=0x8
 {
     void (__thiscall *~exception)(std::exception *this);
     const char *(__thiscall *what)(std::exception *this);
 };
 struct __cppobj std::wostream // sizeof=0x38
 {
     _BYTE gap0[56];
 };
 struct /*VFT*/ std::wostream_vtbl // sizeof=0x4
 {
     void *(__thiscall *__vecDelDtor)(std::wostream *this, unsigned int);
 };
 struct __cppobj __declspec(align(4)) std::wios : std::ios_base // sizeof=0x34
 {
     std::wstreambuf *_Mystrbuf;
     std::wostream *_Tiestr;
     wchar_t _Fillch;
     // padding byte
     // padding byte
 };
 struct /*VFT*/ std::wios_vtbl // sizeof=0x4
 {
     void (__thiscall *~ios_base)(std::ios_base *this);
 };
 struct _Collvec // sizeof=0x8
 {
     unsigned int _Hand;
     unsigned int _Page;
 };
 struct __cppobj std::_Timevec // sizeof=0x4
 {
     void *_Timeptr;
 };
 struct __cppobj std::out_of_range : std::logic_error // sizeof=0x28
 {                                       // ...
 };
 struct /*VFT*/ std::out_of_range_vtbl // sizeof=0x8
 {
     void (__thiscall *~exception)(std::exception *this);
     const char *(__thiscall *what)(std::exception *this);
 };
 struct __cppobj __declspec(align(4)) std::wistream // sizeof=0x3C
 {
     _BYTE gap0[4];
     int _Chcount;
     _BYTE gap8[52];
 };
 struct /*VFT*/ std::wistream_vtbl // sizeof=0x4
 {
     void *(__thiscall *__vecDelDtor)(std::wistream *this, unsigned int);
 };
 struct __cppobj std::wistream::_Sentry_base // sizeof=0x4
 {                                       // ...
     std::wistream *_Myistr;
 };
 struct __cppobj __declspec(align(4)) std::wistream::sentry : std::wistream::_Sentry_base // sizeof=0x8
 {
     bool _Ok;
     // padding byte
     // padding byte
     // padding byte
 };
 struct __cppobj std::codecvt<wchar_t,char,int> : std::codecvt_base // sizeof=0x10
 {
     _Cvtvec _Cvt;
 };
 struct /*VFT*/ std::codecvt<wchar_t,char,int>_vtbl // sizeof=0x20
 {
     void (__thiscall *~facet)(std::locale::facet *this);
     bool (__thiscall *do_always_noconv)(std::codecvt_base *this);
     int (__thiscall *do_max_length)(std::codecvt_base *this);
     int (__thiscall *do_encoding)(std::codecvt_base *this);
     int (__thiscall *do_in)(std::codecvt<wchar_t,char,int> *this, int *, const char *, const char *, const char **, wchar_t *, wchar_t *, wchar_t **);
     int (__thiscall *do_out)(std::codecvt<wchar_t,char,int> *this, int *, const wchar_t *, const wchar_t *, const wchar_t **, char *, char *, char **);
     int (__thiscall *do_unshift)(std::codecvt<wchar_t,char,int> *this, int *, char *, char *, char **);
     int (__thiscall *do_length)(std::codecvt<wchar_t,char,int> *this, const int *, const char *, const char *, unsigned int);
 };
 struct __cppobj std::wostream::_Sentry_base // sizeof=0x4
 {                                       // ...
     std::wostream *_Myostr;
 };
 struct __cppobj __declspec(align(4)) std::wostream::sentry : std::wostream::_Sentry_base // sizeof=0x8
 {
     bool _Ok;
     // padding byte
     // padding byte
     // padding byte
 };
 struct __cppobj std::ios_base::failure : std::runtime_error // sizeof=0x28
 {
 };
 struct /*VFT*/ std::ios_base::failure_vtbl // sizeof=0x8
 {
     void (__thiscall *~exception)(std::exception *this);
     const char *(__thiscall *what)(std::exception *this);
 };
 struct __cppobj std::ios_base::Init // sizeof=0x0
 {
 };
 struct __cppobj std::_Secure_char_traits_tag // sizeof=0x0
 {
 };
 struct __unaligned __declspec(align(2)) $_TypeDescriptor$_extraBytes_50 // sizeof=0x3A
 {
     const void *pVFTable;
     void *spare;
     char name[50];
 };
 struct __unaligned __declspec(align(1)) $_TypeDescriptor$_extraBytes_21 // sizeof=0x1D
 {
     const void *pVFTable;
     void *spare;
     char name[21];
 };
 struct $_TypeDescriptor$_extraBytes_52 // sizeof=0x3C
 {
     const void *pVFTable;
     void *spare;
     char name[52];
 };
 struct __unaligned __declspec(align(2)) $_TypeDescriptor$_extraBytes_26 // sizeof=0x22
 {
     const void *pVFTable;
     void *spare;
     char name[26];
 };
 struct $_s__CatchableTypeArray$_extraBytes_12 // sizeof=0x10
 {
     int nCatchableTypes;
     const _s__CatchableType *arrayOfCatchableTypes[3];
 };
 struct __cppobj LocalizeStringName : LocalizeName // sizeof=0x0
 {
 };
 struct __unaligned __declspec(align(1)) $_TypeDescriptor$_extraBytes_23 // sizeof=0x1F
 {
     const void *pVFTable;
     void *spare;
     char name[23];
 };
 struct __cppobj Allocator<char,LocalizeStringName>::rebind<char> // sizeof=0x0
 {
 };
 struct __unaligned __declspec(align(1)) $_TypeDescriptor$_extraBytes_25 // sizeof=0x21
 {
     const void *pVFTable;
     void *spare;
     char name[25];
 };
 struct __cppobj Allocator<std::_Aux_cont,mapStringEntriesName_t> // sizeof=0x0
 {                                       // ...
 };
 struct __cppobj __declspec(align(4)) std::_Container_base_aux_alloc_real<Allocator<std::pair<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,mapStringEntriesName_t> > : std::_Container_base_aux // sizeof=0x8
 {                                       // ...
     Allocator<std::_Aux_cont,mapStringEntriesName_t> _Alaux;
     // padding byte
     // padding byte
     // padding byte
 };
 struct __cppobj std::binary_function<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,bool> // sizeof=0x0
 {                                       // ...
 };
 struct __cppobj std::less<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > > : std::binary_function<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,bool> // sizeof=0x0
 {                                       // ...
 };
 struct __cppobj __declspec(align(4)) std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::less<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,mapStringEntriesName_t>,0> : std::_Container_base_aux_alloc_real<Allocator<std::pair<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,mapStringEntriesName_t> > // sizeof=0xC
 {                                       // ...
     std::less<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > > comp;
     // padding byte
     // padding byte
     // padding byte
 };
 struct __cppobj Allocator<std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::less<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,mapStringEntriesName_t>,0> >::_Node,mapStringEntriesName_t> // sizeof=0x0
 {
 };
 struct __cppobj __declspec(align(4)) std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::less<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,mapStringEntriesName_t>,0> > : std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::less<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,mapStringEntriesName_t>,0> // sizeof=0x10
 {
     Allocator<std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::less<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,mapStringEntriesName_t>,0> >::_Node,mapStringEntriesName_t> _Alnod;
     // padding byte
     // padding byte
     // padding byte
 };
 struct __cppobj Allocator<std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::less<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,mapStringEntriesName_t>,0> >::_Node *,mapStringEntriesName_t> // sizeof=0x0
 {
 };
 struct __cppobj __declspec(align(4)) std::_Tree_ptr<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::less<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,mapStringEntriesName_t>,0> > : std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::less<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,mapStringEntriesName_t>,0> > // sizeof=0x14
 {
     Allocator<std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::less<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,mapStringEntriesName_t>,0> >::_Node *,mapStringEntriesName_t> _Alptr;
     // padding byte
     // padding byte
     // padding byte
 };
 struct __cppobj Allocator<std::pair<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > const ,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,mapStringEntriesName_t> // sizeof=0x0
 {                                       // ...
 };
 struct __cppobj __declspec(align(4)) std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::less<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,mapStringEntriesName_t>,0> > : std::_Tree_ptr<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::less<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,mapStringEntriesName_t>,0> > // sizeof=0x18
 {
     Allocator<std::pair<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > const ,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,mapStringEntriesName_t> _Alval;
     // padding byte
     // padding byte
     // padding byte
 };
 struct __cppobj __declspec(align(4)) std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::less<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,mapStringEntriesName_t>,0> >::_Node // sizeof=0x48
 {
     std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::less<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,mapStringEntriesName_t>,0> >::_Node *_Left;
     std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::less<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,mapStringEntriesName_t>,0> >::_Node *_Parent;
     std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::less<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,mapStringEntriesName_t>,0> >::_Node *_Right;
     std::pair<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > const ,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > > _Myval;
     char _Color;
     char _Isnil;
     // padding byte
     // padding byte
 };
 struct __cppobj std::pair<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > const ,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > > // sizeof=0x38
 {
     const std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > first;
     std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > second;
 };
 struct __cppobj std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::less<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,mapStringEntriesName_t>,0> > : std::_Tree_val<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::less<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,mapStringEntriesName_t>,0> > // sizeof=0x20
 {                                       // ...
     std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::less<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,mapStringEntriesName_t>,0> >::_Node *_Myhead;
     unsigned int _Mysize;
 };
 struct __cppobj std::map<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::less<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,mapStringEntriesName_t> > : std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::less<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,mapStringEntriesName_t>,0> > // sizeof=0x20
 {                                       // ...
 };
 struct __cppobj CStringEdPackage // sizeof=0x78
 {
     int m_bEndMarkerFound_ParseOnly;
     std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > m_strCurrentEntryRef_ParseOnly;
     std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > m_strCurrentEntryEnglish_ParseOnly;
     std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > m_strCurrentFileRef_ParseOnly;
     std::map<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::less<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,mapStringEntriesName_t> > m_StringEntries;
 };
 struct __cppobj mapStringEntriesName_t : LocalizeName // sizeof=0x0
 {
 };
 struct __cppobj std::_Allocator_base<wchar_t> // sizeof=0x0
 {                                       // ...
 };
 struct __cppobj std::allocator<wchar_t> : std::_Allocator_base<wchar_t> // sizeof=0x0
 {                                       // ...
 };
 struct __cppobj std::_String_val<wchar_t> : std::_String_base // sizeof=0x1
 {                                       // ...
     std::allocator<wchar_t> _Alval;
 };
 union std::wstring::_Bxty // sizeof=0x10
 {                                       // ...
     wchar_t _Buf[8];
     wchar_t *_Ptr;
 };
 struct __cppobj std::wstring : std::_String_val<wchar_t> // sizeof=0x1C
 {
     // padding byte
     // padding byte
     // padding byte
     std::wstring::_Bxty _Bx;
     unsigned int _Mysize;
     unsigned int _Myres;
 };
 struct __cppobj std::_Iterator_with_base<std::bidirectional_iterator_tag,std::pair<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > const ,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,int,std::pair<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > const ,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > > const *,std::pair<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > const ,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > > const &,std::_Iterator_base_aux> : std::_Iterator_base_aux // sizeof=0x4
 {
 };
 struct __cppobj std::_Bidit<std::pair<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > const ,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,int,std::pair<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > const ,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > > const *,std::pair<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > const ,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > > const &> : std::_Iterator_with_base<std::bidirectional_iterator_tag,std::pair<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > const ,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,int,std::pair<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > const ,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > > const *,std::pair<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > const ,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > > const &,std::_Iterator_base_aux> // sizeof=0x4
 {
 };
 struct __cppobj std::unary_function<std::wstring,unsigned int> // sizeof=0x0
 {                                       // ...
 };
 struct __cppobj std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::less<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,mapStringEntriesName_t>,0> >::const_iterator : std::_Bidit<std::pair<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > const ,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,int,std::pair<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > const ,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > > const *,std::pair<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > const ,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > > const &> // sizeof=0x8
 {                                       // ...
     std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::less<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,mapStringEntriesName_t>,0> >::_Node *_Ptr;
 };
 struct __cppobj std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::less<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,mapStringEntriesName_t>,0> >::iterator : std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::less<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,mapStringEntriesName_t>,0> >::const_iterator // sizeof=0x8
 {                                       // ...
 };
 struct __cppobj __declspec(align(4)) std::pair<std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::less<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,mapStringEntriesName_t>,0> >::iterator,bool> // sizeof=0xC
 {
     std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::less<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,mapStringEntriesName_t>,0> >::iterator first;
     bool second;
     // padding byte
     // padding byte
     // padding byte
 };
 struct __cppobj std::allocator<wchar_t>::rebind<wchar_t> // sizeof=0x0
 {
 };
 struct __cppobj Allocator<std::pair<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,mapStringEntriesName_t> // sizeof=0x0
 {
 };
 struct __cppobj std::tr1::_Ph<9> // sizeof=0x0
 {
 };
 struct __cppobj std::tr1::_Ph<7> // sizeof=0x0
 {
 };
 struct __cppobj std::tr1::_Ph<8> // sizeof=0x0
 {
 };
 struct __cppobj std::tr1::_Ph<10> // sizeof=0x0
 {
 };
 struct __cppobj std::tr1::_Ph<1> // sizeof=0x0
 {
 };
 struct __cppobj std::tr1::_Ph<6> // sizeof=0x0
 {
 };
 struct __cppobj std::tr1::_Ph<5> // sizeof=0x0
 {
 };
 struct __cppobj std::tr1::_Ph<4> // sizeof=0x0
 {
 };
 struct __cppobj std::tr1::_Ph<2> // sizeof=0x0
 {
 };
 struct __cppobj std::tr1::_Ph<3> // sizeof=0x0
 {
 };
 struct __cppobj std::tr1::_Nil // sizeof=0x0
 {
 };
 struct __cppobj std::tr1::bad_function_call : std::exception // sizeof=0xC
 {
 };
 struct /*VFT*/ std::tr1::bad_function_call_vtbl // sizeof=0x8
 {
     void (__thiscall *~exception)(std::exception *this);
     const char *(__thiscall *what)(std::exception *this);
 };
 struct __cppobj std::unary_function<std::string,unsigned int> // sizeof=0x0
 {                                       // ...
 };
 struct __cppobj std::tr1::hash<std::string > : std::unary_function<std::string,unsigned int> // sizeof=0x0
 {
 };
 struct __cppobj std::tr1::hash<std::wstring > : std::unary_function<std::wstring,unsigned int> // sizeof=0x0
 {
 };
 struct __cppobj Allocator<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,mapStringEntriesName_t> // sizeof=0x0
 {
 };
 struct __cppobj Allocator<char,mapStringEntriesName_t> // sizeof=0x0
 {
 };
 struct __cppobj LocalizeStringVectorName : LocalizeName // sizeof=0x0
 {
 };
 struct __cppobj Allocator<std::pair<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,mapStringEntriesName_t>::rebind<std::_Aux_cont> // sizeof=0x0
 {
 };
 struct __cppobj Allocator<std::pair<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,mapStringEntriesName_t>::rebind<std::pair<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > const ,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > > > // sizeof=0x0
 {
 };
 struct __cppobj Allocator<std::pair<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > const ,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,mapStringEntriesName_t>::rebind<std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::less<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,mapStringEntriesName_t>,0> >::_Node> // sizeof=0x0
 {
 };
 struct __cppobj Allocator<std::pair<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > const ,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,mapStringEntriesName_t>::rebind<std::_Tree_nod<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::less<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,Allocator<std::pair<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> >,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,mapStringEntriesName_t>,0> >::_Node *> // sizeof=0x0
 {
 };
 struct __cppobj Allocator<std::pair<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > const ,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,mapStringEntriesName_t>::rebind<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > > // sizeof=0x0
 {
 };
 struct __cppobj Allocator<std::pair<std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > const ,std::basic_string<char,std::char_traits<char>,Allocator<char,LocalizeStringName> > >,mapStringEntriesName_t>::rebind<char> // sizeof=0x0
 {
 };
 struct __cppobj mapFlagMasksName_t : LocalizeName // sizeof=0x0
 {
 };
 struct __cppobj LocalizeStringSetName : LocalizeName // sizeof=0x0
 {
 };
 struct languageInfo_t // sizeof=0x8
 {                                       // ...
     const char *pszName;                // ...
     int bPresent;                       // ...
 };
 struct archivedEntityShared_t // sizeof=0x24
 {                                       // ...
     int svFlags;                        // ...
     int clientMask[2];                  // ...
     float absmin[3];                    // ...
     float absmax[3];                    // ...
 };
 struct archivedEntity_s // sizeof=0x118
 {                                       // ...
     entityState_s s;                    // ...
     archivedEntityShared_t r;           // ...
 };
 struct svEntity_s // sizeof=0x178
 {                                       // ...
     unsigned __int16 worldSector;
     unsigned __int16 nextEntityInWorldSector; // ...
     archivedEntity_s baseline;          // ...
     int numClusters;
     int clusternums[16];                // ...
     int lastCluster;
     int linkcontents;
     float linkmin[2];
     float linkmax[2];
 };
 struct ServerProfileTimes // sizeof=0x8
 {                                       // ...
     float frameTime;                    // ...
     float wallClockTime;                // ...
 };
 struct server_t // sizeof=0x5FC60
 {                                       // ...
     serverState_t state;                // ...
     int timeResidual;                   // ...
     bool inFrame;                       // ...
     // padding byte
     // padding byte
     // padding byte
     int restarting;                     // ...
     int start_frameTime;                // ...
     int checksumFeed;                   // ...
     cmodel_t *models[512];
     unsigned __int16 emptyConfigString; // ...
     unsigned __int16 configstrings[2442]; // ...
     // padding byte
     // padding byte
     svEntity_s svEntities[1024];        // ...
     gentity_s *gentities;               // ...
     int gentitySize;                    // ...
     int num_entities;                   // ...
     playerState_s *gameClients;         // ...
     int gameClientSize;                 // ...
     int skelTimeStamp;                  // ...
     int skelMemPos;                     // ...
     int bpsWindow[20];                  // ...
     int bpsWindowSteps;                 // ...
     int bpsTotalBytes;                  // ...
     int bpsMaxBytes;                    // ...
     int ubpsWindow[20];                 // ...
     int ubpsTotalBytes;                 // ...
     int ubpsMaxBytes;                   // ...
     float ucompAve;                     // ...
     int ucompNum;                       // ...
     volatile ServerProfileTimes profile; // ...
     volatile float serverFrameTimeMin;  // ...
     volatile float serverFrameTimeMax;  // ...
     char gametype[64];                  // ...
     bool killServer;                    // ...
     // padding byte
     // padding byte
     // padding byte
     const char *killReason;             // ...
 };
 struct moveclip_t // sizeof=0x54
 {
     float mins[3];
     float maxs[3];
     float outerSize[3];
     TraceExtents extents;
     int passEntityNum;
     int passOwnerNum;
     int contentmask;
 };
 struct IgnoreEntParams // sizeof=0xC
 {                                       // ...
     int baseEntity;                     // ...
     int parentEntity;                   // ...
     bool ignoreSelf;                    // ...
     bool ignoreParent;                  // ...
     bool ignoreSiblings;                // ...
     bool ignoreChildren;                // ...
 };
 struct pointtrace_t // sizeof=0x34
 {                                       // ...
     TraceExtents extents;               // ...
     const IgnoreEntParams *ignoreEntParams; // ...
     int contentmask;                    // ...
     int bLocational;                    // ...
     unsigned __int8 *priorityMap;       // ...
 };
 struct sightclip_t // sizeof=0x48
 {
     float mins[3];
     float maxs[3];
     float outerSize[3];
     float start[3];
     float end[3];
     int passEntityNum[2];
     int contentmask;
 };
 struct sightpointtrace_t // sizeof=0x2C
 {                                       // ...
     float start[3];                     // ...
     float end[3];                       // ...
     int passEntityNum[2];               // ...
     int contentmask;                    // ...
     int locational;                     // ...
     unsigned __int8 *priorityMap;       // ...
 };
 struct cachedSnapshot_t // sizeof=0x1C
 {                                       // ...
     int archivedFrame;
     int time;
     int num_entities;
     int first_entity;
     int num_clients;
     int first_client;
     int usesDelta;
 };
 struct clientHeader_t // sizeof=0x64C
 {                                       // ...
     int state;                          // ...
     int sendAsActive;
     int deltaMessage;
     int rateDelayed;
     netchan_t netchan;                  // ...
     float predictedOrigin[3];
     int predictedOriginServerTime;      // ...
 };
 struct svscmd_info_t // sizeof=0x408
 {                                       // ...
     char cmd[1024];                     // ...
     int time;
     int type;
 };
 struct clientSnapshot_t // sizeof=0x2F84
 {                                       // ...
     playerState_s ps;                   // ...
     int num_entities;
     int num_clients;                    // ...
     int first_entity;
     int first_client;
     int messageSent;
     int messageAcked;
     int messageSize;
     int serverTime;
 };
 struct __unaligned __declspec(align(1)) VoicePacket_t // sizeof=0x105
 {                                       // ...
     unsigned __int8 talker;             // ...
     unsigned __int8 data[256];          // ...
     int dataSize;                       // ...
 };
 struct __declspec(align(2)) client_t // sizeof=0xA5638
 {                                       // ...
     clientHeader_t header;              // ...
     const char *dropReason;
     char userinfo[1024];                // ...
     svscmd_info_t reliableCommandInfo[128]; // ...
     int reliableSequence;
     int reliableAcknowledge;
     int reliableSent;
     int messageAcknowledge;
     int gamestateMessageNum;
     int challenge;
     usercmd_s lastUsercmd;              // ...
     int lastClientCommand;
     char lastClientCommandString[1024];
     gentity_s *gentity;                 // ...
     char name[16];                      // ...
     int downloading;
     char downloadName[64];
     int download;
     int downloadSize;
     int downloadCount;
     int downloadClientBlock;
     int downloadCurrentBlock;
     int downloadXmitBlock;
     unsigned __int8 *downloadBlocks[8];
     int downloadBlockSize[8];
     int downloadEOF;
     int downloadSendTime;
     char downloadURL[256];
     int wwwOk;
     int downloadingWWW;
     int clientDownloadingWWW;
     int wwwFallback;
     int nextReliableTime;
     int lastPacketTime;
     int lastConnectTime;
     int nextSnapshotTime;
     int timeoutCount;
     clientSnapshot_t frames[32];        // ...
     int ping;                           // ...
     int rate;
     int snapshotMsec;
     int snapshotBackoffCount;
     int pureAuthentic;
     char netchanOutgoingBuffer[131072]; // ...
     char netchanIncomingBuffer[2048];
     char cdkeyHash[33];                 // ...
     // padding byte
     unsigned __int16 scriptId;          // ...
     int bIsTestClient;
     int serverId;
     VoicePacket_t voicePackets[40];     // ...
     int voicePacketCount;
     bool muteList[64];                  // ...
     bool sendVoice;                     // ...
     unsigned __int8 stats[8192];        // ...
     unsigned __int8 statPacketsReceived; // ...
     bool tempPacketDebugging;
     // padding byte
 };
 struct archivedSnapshot_s // sizeof=0x8
 {                                       // ...
     int start;
     int size;
 };
 struct cachedClient_s // sizeof=0x2FCC
 {                                       // ...
     int playerStateExists;
     clientState_s cs;
     playerState_s ps;                   // ...
 };
 struct __declspec(align(4)) challenge_t // sizeof=0x50
 {                                       // ...
     netadr_t adr;
     int challenge;                      // ...
     int time;
     int pingTime;                       // ...
     int firstTime;
     int firstPing;                      // ...
     int connected;                      // ...
     char cdkeyHash[33];                 // ...
     // padding byte
     // padding byte
     // padding byte
 };
 struct tempBanSlot_t // sizeof=0x24
 {                                       // ...
     char cdkeyHash[32];                 // ...
     int banTime;                        // ...
 };
 struct __declspec(align(128)) serverStatic_t // sizeof=0xB227480
 {                                       // ...
     cachedSnapshot_t cachedSnapshotFrames[512];
     archivedEntity_s cachedSnapshotEntities[16384]; // ...
     int initialized;                    // ...
     int time;                           // ...
     int snapFlagServerBit;              // ...
     client_t clients[64];               // ...
     int numSnapshotEntities;            // ...
     int numSnapshotClients;             // ...
     int nextSnapshotEntities;           // ...
     int nextSnapshotClients;            // ...
     entityState_s snapshotEntities[172032]; // ...
     clientState_s snapshotClients[131072]; // ...
     int nextArchivedSnapshotFrames;     // ...
     archivedSnapshot_s archivedSnapshotFrames[1200]; // ...
     unsigned __int8 archivedSnapshotBuffer[33554432]; // ...
     int nextArchivedSnapshotBuffer;     // ...
     int nextCachedSnapshotEntities;     // ...
     int nextCachedSnapshotClients;      // ...
     int nextCachedSnapshotFrames;       // ...
     cachedClient_s cachedSnapshotClients[4096]; // ...
     int nextHeartbeatTime;              // ...
     int nextStatusResponseTime;
     challenge_t challenges[1024];       // ...
     netadr_t redirectAddress;           // ...
     netadr_t authorizeAddress;          // ...
     int sv_lastTimeMasterServerCommunicated; // ...
     netProfileInfo_t OOBProf;           // ...
     tempBanSlot_t tempBans[16];         // ...
     float mapCenter[3];                 // ...
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
 };
 struct ClientSnapshotData // sizeof=0x44
 {
     int snapshotSize[8];
     int compressedSize[8];
     int index;
 };
 struct NetFieldList // sizeof=0x8
 {                                       // ...
     const NetField *array;
     unsigned int count;
 };
 struct serverStaticHeader_t // sizeof=0x84
 {                                       // ...
     client_t *clients;                  // ...
     int time;                           // ...
     int snapFlagServerBit;              // ...
     int numSnapshotEntities;            // ...
     int numSnapshotClients;             // ...
     int nextSnapshotEntities;           // ...
     int nextSnapshotClients;            // ...
     entityState_s *snapshotEntities;    // ...
     clientState_s *snapshotClients;     // ...
     svEntity_s *svEntities;             // ...
     float mapCenter[3];                 // ...
     archivedEntity_s *cachedSnapshotEntities; // ...
     cachedClient_s *cachedSnapshotClients; // ...
     unsigned __int8 *archivedSnapshotBuffer; // ...
     cachedSnapshot_t *cachedSnapshotFrames; // ...
     int nextCachedSnapshotFrames;       // ...
     int nextArchivedSnapshotFrames;     // ...
     int nextCachedSnapshotEntities;     // ...
     int nextCachedSnapshotClients;      // ...
     int num_entities;                   // ...
     int maxclients;                     // ...
     int fps;                            // ...
     int clientArchive;                  // ...
     gentity_s *gentities;               // ...
     int gentitySize;                    // ...
     clientState_s *firstClientState;    // ...
     playerState_s *firstPlayerState;    // ...
     int clientSize;                     // ...
     unsigned int pad[3];
 };
 struct SnapshotInfo_s // sizeof=0x18
 {                                       // ...
     int clientNum;                      // ...
     const clientHeader_t *client;       // ...
     int snapshotDeltaTime;              // ...
     bool fromBaseline;                  // ...
     bool archived;                      // ...
     // padding byte
     // padding byte
     int *fieldChanges;                  // ...
     PacketEntityType packetEntityType;  // ...
 };
 struct snapshotEntityNumbers_t // sizeof=0x1004
 {                                       // ...
     int numSnapshotEntities;            // ...
     int snapshotEntities[1024];         // ...
 };
 struct XZoneInfo // sizeof=0xC
 {                                       // ...
     const char *name;                   // ...
     int allocFlags;                     // ...
     int freeFlags;                      // ...
 };
 struct ucmd_t // sizeof=0xC
 {                                       // ...
     char *name;
     void (__cdecl *func)(client_t *);
     int allowFromOldServer;
 };
 struct yy_buffer_state // sizeof=0x28
 {                                       // ...
     _iobuf *yy_input_file;
     char *yy_ch_buf;                    // ...
     char *yy_buf_pos;
     unsigned int yy_buf_size;           // ...
     int yy_n_chars;
     int yy_is_our_buffer;               // ...
     int yy_is_interactive;
     int yy_at_bol;
     int yy_fill_buffer;
     int yy_buffer_status;
 };
 struct scrCompilePub_t // sizeof=0x21034
 {                                       // ...
     int value_count;                    // ...
     int far_function_count;             // ...
     unsigned int loadedscripts;         // ...
     unsigned int scripts;               // ...
     unsigned int builtinFunc;           // ...
     unsigned int builtinMeth;           // ...
     unsigned __int16 canonicalStrings[65536]; // ...
     const char *in_ptr;                 // ...
     const char *parseBuf;               // ...
     bool script_loading;                // ...
     bool allowedBreakpoint;             // ...
     // padding byte
     // padding byte
     int developer_statement;            // ...
     unsigned __int8 *opcodePos;         // ...
     unsigned int programLen;            // ...
     int func_table_size;                // ...
     int func_table[1024];               // ...
 };
 union sval_u // sizeof=0x4
 {                                       // ...
     int type;
     unsigned int stringValue;
     unsigned int idValue;
     float floatValue;
     int intValue;
     sval_u *node;
     unsigned int sourcePosValue;
     const char *codePosValue;
     const char *debugString;
     scr_block_s *block;
 };
 struct scr_localVar_t // sizeof=0x8
 {                                       // ...
     unsigned int name;                  // ...
     unsigned int sourcePos;             // ...
 };
 struct scr_block_s // sizeof=0x218
 {
     int abortLevel;
     int localVarsCreateCount;
     int localVarsPublicCount;
     int localVarsCount;
     unsigned __int8 localVarsInitBits[8];
     scr_localVar_t localVars[64];
 };
 struct stype_t // sizeof=0x8
 {                                       // ...
     sval_u val;                         // ...
     unsigned int pos;                   // ...
 };
 struct __declspec(align(4)) scrAnimPub_t // sizeof=0x41C
 {                                       // ...
     unsigned int animtrees;             // ...
     unsigned int animtree_node;         // ...
     unsigned int animTreeNames;         // ...
     scr_animtree_t xanim_lookup[2][128]; // ...
     unsigned int xanim_num[2];          // ...
     unsigned int animTreeIndex;         // ...
     bool animtree_loading;              // ...
     // padding byte
     // padding byte
     // padding byte
 };
 struct VariableStackBuffer // sizeof=0xC
 {
     const char *pos;
     unsigned __int16 size;
     unsigned __int16 bufLen;
     unsigned __int16 localId;
     unsigned __int8 time;
     char buf[1];
 };
 union VariableUnion // sizeof=0x4
 {                                       // ...
     int intValue;
     float floatValue;
     unsigned int stringValue;
     const float *vectorValue;
     const char *codePosValue;
     unsigned int pointerValue;
     VariableStackBuffer *stackValue;
     unsigned int entityOffset;
 };
 struct VariableValue // sizeof=0x8
 {                                       // ...
     VariableUnion u;                    // ...
     int type;                           // ...
 };
 struct scrVmGlob_t // sizeof=0x2028
 {                                       // ...
     VariableValue eval_stack[2];        // ...
     const char *dialog_error_message;   // ...
     int loading;                        // ...
     int starttime;                      // ...
     unsigned int localVarsStack[2048];  // ...
     bool recordPlace;                   // ...
     // padding byte
     // padding byte
     // padding byte
     char *lastFileName;                 // ...
     int lastLine;                       // ...
 };
 struct function_stack_t // sizeof=0x14
 {                                       // ...
     const char *pos;                    // ...
     unsigned int localId;               // ...
     unsigned int localVarCount;         // ...
     VariableValue *top;                 // ...
     VariableValue *startTop;            // ...
 };
 struct scrVarPub_t // sizeof=0x2007C
 {                                       // ...
     const char *fieldBuffer;            // ...
     unsigned __int16 canonicalStrCount; // ...
     bool developer;                     // ...
     bool developer_script;              // ...
     bool evaluate;                      // ...
     // padding byte
     // padding byte
     // padding byte
     const char *error_message;          // ...
     int error_index;                    // ...
     unsigned int time;                  // ...
     unsigned int timeArrayId;           // ...
     unsigned int pauseArrayId;          // ...
     unsigned int levelId;               // ...
     unsigned int gameId;                // ...
     unsigned int animId;                // ...
     unsigned int freeEntList;           // ...
     unsigned int tempVariable;          // ...
     bool bInited;                       // ...
     // padding byte
     unsigned __int16 savecount;
     unsigned int checksum;              // ...
     unsigned int entId;                 // ...
     unsigned int entFieldName;          // ...
     HunkUser *programHunkUser;          // ...
     const char *programBuffer;          // ...
     const char *endScriptBuffer;        // ...
     unsigned __int16 saveIdMap[32768];
     unsigned __int16 saveIdMapRev[32768];
     bool bScriptProfile;                // ...
     // padding byte
     // padding byte
     // padding byte
     float scriptProfileMinTime;         // ...
     bool bScriptProfileBuiltin;         // ...
     // padding byte
     // padding byte
     // padding byte
     float scriptProfileBuiltinMinTime;  // ...
     unsigned int numScriptThreads;      // ...
     unsigned int numScriptValues;       // ...
     unsigned int numScriptObjects;      // ...
     const char *varUsagePos;            // ...
     int ext_threadcount;                // ...
     int totalObjectRefCount;            // ...
     volatile int totalVectorRefCount;   // ...
 };
 struct __declspec(align(4)) scrVarDebugPub_t // sizeof=0xE0004
 {                                       // ...
     const char *varUsage[98304];
     unsigned __int16 extRefCount[32768];
     unsigned __int16 refCount[32768];
     int leakCount[98304];
     bool dummy;
     // padding byte
     // padding byte
     // padding byte
 };
 struct scrStringDebugGlob_t // sizeof=0x40008
 {                                       // ...
     volatile int refCount[65536];
     volatile int totalRefCount;
     int ignoreLeaks;
 };
 struct function_frame_t // sizeof=0x18
 {                                       // ...
     function_stack_t fs;                // ...
     int topType;
 };
 struct scrVmPub_t // sizeof=0x4328
 {                                       // ...
     unsigned int *localVars;            // ...
     VariableValue *maxstack;            // ...
     int function_count;                 // ...
     function_frame_t *function_frame;   // ...
     VariableValue *top;                 // ...
     bool debugCode;                     // ...
     bool abort_on_error;                // ...
     bool terminal_error;                // ...
     // padding byte
     unsigned int inparamcount;          // ...
     unsigned int outparamcount;         // ...
     unsigned int breakpointOutparamcount; // ...
     bool showError;                     // ...
     // padding byte
     // padding byte
     // padding byte
     function_frame_t function_frame_start[32]; // ...
     VariableValue stack[2048];          // ...
 };
 struct FuncDebugData // sizeof=0x10
 {                                       // ...
     int breakpointCount;                // ...
     const char *name;                   // ...
     int prof;                           // ...
     int usage;                          // ...
 };
 struct scrVmDebugPub_t // sizeof=0x24210
 {                                       // ...
     FuncDebugData func_table[1024];     // ...
     int checkBreakon;                   // ...
     int profileEnable[32768];           // ...
     int builtInTime;                    // ...
     const char *jumpbackHistory[128];   // ...
     int jumpbackHistoryIndex;           // ...
     int dummy;
 };
 struct scr_entref_t // sizeof=0x4
 {                                       // ...
     unsigned __int16 entnum;            // ...
     unsigned __int16 classnum;          // ...
 };
 struct scr_classStruct_t // sizeof=0xC
 {                                       // ...
     unsigned __int16 id;                // ...
     unsigned __int16 entArrayId;        // ...
     char charId;                        // ...
     // padding byte
     // padding byte
     // padding byte
     const char *name;                   // ...
 };
 union Variable_u // sizeof=0x2
 {                                       // ...
     unsigned __int16 prev;
     unsigned __int16 prevSibling;
 };
 struct Variable // sizeof=0x4
 {                                       // ...
     unsigned __int16 id;                // ...
     Variable_u u;                       // ...
 };
 union ObjectInfo_u // sizeof=0x2
 {                                       // ...
     unsigned __int16 size;
     unsigned __int16 entnum;
     unsigned __int16 nextEntId;
     unsigned __int16 self;
 };
 struct ObjectInfo // sizeof=0x4
 {                                       // ...
     unsigned __int16 refCount;
     ObjectInfo_u u;
 };
 union VariableValueInternal_u // sizeof=0x4
 {                                       // ...
     unsigned __int16 next;
     VariableUnion u;
     ObjectInfo o;
 };
 union VariableValueInternal_w // sizeof=0x4
 {                                       // ...
     unsigned int status;
     unsigned int type;
     unsigned int name;
     unsigned int classnum;
     unsigned int notifyName;
     unsigned int waitTime;
     unsigned int parentLocalId;
 };
 union VariableValueInternal_v // sizeof=0x2
 {                                       // ...
     unsigned __int16 next;
     unsigned __int16 index;
 };
 struct VariableValueInternal // sizeof=0x10
 {                                       // ...
     Variable hash;                      // ...
     VariableValueInternal_u u;          // ...
     VariableValueInternal_w w;          // ...
     VariableValueInternal_v v;          // ...
     unsigned __int16 nextSibling;       // ...
 };
 struct scrVarGlob_t // sizeof=0x180000
 {                                       // ...
     VariableValueInternal variableList[98304]; // ...
 };
 struct scrMemTreePub_t // sizeof=0x4
 {                                       // ...
     char *mt_buffer;                    // ...
 };
 struct ThreadDebugInfo // sizeof=0x8C
 {                                       // ...
     const char *pos[32];                // ...
     int posSize;                        // ...
     float varUsage;                     // ...
     float endonUsage;                   // ...
 };
 struct VariableDebugInfo // sizeof=0x10
 {
     const char *pos;
     const char *fileName;
     const char *functionName;
     int varUsage;
 };
 union HashEntry_unnamed_type_u // sizeof=0x4
 {                                       // ...
     unsigned int prev;
     unsigned int str;
 };
 struct HashEntry // sizeof=0x8
 {                                       // ...
     unsigned int status_next;           // ...
     HashEntry_unnamed_type_u u;         // ...
 };
 struct __declspec(align(128)) scrStringGlobb // sizeof=0x27180
 {                                       // ...
     HashEntry hashTable[20000];         // ...
     bool inited;                        // ...
     // padding byte
     // padding byte
     // padding byte
     HashEntry *nextFreeEntry;           // ...
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
 };
 struct $119B815E6C15BED54461C272BD343858 // sizeof=0x4
 {                                       // ...
     uint16_t refCount;
     uint8_t user;
     uint8_t byteLen;
 };
 union $62B5D821F4358051071D6AFDBF8DC1EF // sizeof=0x4
 {                                       // ...
     $119B815E6C15BED54461C272BD343858 struct_;
     volatile int data;
 };
 struct __declspec(align(4)) RefString // sizeof=0x8
 {
     $62B5D821F4358051071D6AFDBF8DC1EF union_;
     char str[1];
     // padding byte
     // padding byte
     // padding byte
 };
 struct debugger_sval_s // sizeof=0x4
 {
     debugger_sval_s *next;
 };
 struct ScriptExpression_t // sizeof=0xC
 {                                       // ...
     sval_u parseData;                   // ...
     int breakonExpr;                    // ...
     debugger_sval_s *exprHead;          // ...
 };
 struct SourceBufferInfo // sizeof=0x2C
 {
     const char *codePos;
     char *buf;
     const char *sourceBuf;
     int len;
     int sortedIndex;
     bool archive;
     // padding byte
     // padding byte
     // padding byte
     int time;
     int avgTime;
     int maxTime;
     float totalTime;
     float totalBuiltIn;
 };
 struct scrParserPub_t // sizeof=0x10
 {                                       // ...
     SourceBufferInfo *sourceBufferLookup; // ...
     unsigned int sourceBufferLookupLen; // ...
     const char *scriptfilename;         // ...
     const char *sourceBuf;              // ...
 };
 struct OpcodeLookup // sizeof=0x18
 {
     const char *codePos;
     unsigned int sourcePosIndex;
     unsigned int sourcePosCount;
     int profileTime;
     int profileBuiltInTime;
     int profileUsage;
 };
 struct SourceLookup // sizeof=0x8
 {
     unsigned int sourcePos;
     int type;
 };
 struct SaveSourceBufferInfo // sizeof=0x8
 {
     char *sourceBuf;
     int len;
 };
 struct scrParserGlob_t // sizeof=0x34
 {                                       // ...
     OpcodeLookup *opcodeLookup;         // ...
     unsigned int opcodeLookupMaxLen;    // ...
     unsigned int opcodeLookupLen;       // ...
     SourceLookup *sourcePosLookup;      // ...
     unsigned int sourcePosLookupMaxLen; // ...
     unsigned int sourcePosLookupLen;    // ...
     unsigned int sourceBufferLookupMaxLen; // ...
     const unsigned __int8 *currentCodePos; // ...
     unsigned int currentSourcePosCount; // ...
     SaveSourceBufferInfo *saveSourceBufferLookup; // ...
     unsigned int saveSourceBufferLookupLen; // ...
     int delayedSourceIndex;             // ...
     int threadStartSourceIndex;         // ...
 };
 struct __cppobj std::pair<int *,int *> // sizeof=0x8
 {
     int *first;
     int *second;
 };
 struct __cppobj std::pair<OpcodeLookup *,OpcodeLookup *> // sizeof=0x8
 {
     OpcodeLookup *first;
     OpcodeLookup *second;
 };
 struct __cppobj std::_Nonscalar_ptr_iterator_tag // sizeof=0x0
 {
 };
 struct Scr_SourcePos_t // sizeof=0xC
 {                                       // ...
     unsigned int bufferIndex;           // ...
     int lineNum;                        // ...
     unsigned int sourcePos;             // ...
 };
 struct MemoryNode // sizeof=0xC
 {                                       // ...
     unsigned __int16 prev;              // ...
     unsigned __int16 next;              // ...
     unsigned int padding[2];            // ...
 };
 struct __declspec(align(128)) scrMemTreeGlob_t // sizeof=0xC0380
 {                                       // ...
     MemoryNode nodes[65536];            // ...
     unsigned __int8 leftBits[256];      // ...
     unsigned __int8 numBits[256];       // ...
     unsigned __int8 logBits[256];       // ...
     unsigned __int16 head[17];          // ...
     // padding byte
     // padding byte
     int totalAlloc;                     // ...
     int totalAllocBuckets;              // ...
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
 };
 struct scrMemTreeDebugGlob_t // sizeof=0x20000
 {                                       // ...
     unsigned __int8 mt_usage[65536];    // ...
     unsigned __int8 mt_usage_size[65536]; // ...
 };
 struct PrecacheEntry // sizeof=0x8
 {                                       // ...
     unsigned __int16 filename;
     bool include;
     // padding byte
     unsigned int sourcePos;
 };
 struct ArchivedCanonicalStringInfo // sizeof=0x8
 {
     unsigned __int16 canonicalStr;
     // padding byte
     // padding byte
     const char *value;
 };
 struct __declspec(align(2)) scrEvaluateGlob_t // sizeof=0x10
 {                                       // ...
     char *archivedCanonicalStringsBuf;  // ...
     ArchivedCanonicalStringInfo *archivedCanonicalStrings; // ...
     int *canonicalStringLookup;         // ...
     bool freezeScope;                   // ...
     bool freezeObjects;                 // ...
     bool objectChanged;                 // ...
     // padding byte
 };
 struct Scr_Breakpoint // sizeof=0x1C
 {                                       // ...
     int line;
     unsigned int bufferIndex;
     char *codePos;
     Scr_WatchElement_s *element;
     int builtinIndex;
     Scr_Breakpoint *next;               // ...
     Scr_Breakpoint **prev;
 };
 struct Scr_WatchElement_s // sizeof=0x64
 {
     ScriptExpression_t expr;
     const char *valueText;
     const char *refText;
     bool directObject;
     // padding byte
     // padding byte
     // padding byte
     unsigned int objectId;
     unsigned __int8 objectType;
     unsigned __int8 oldObjectType;
     bool expand;
     unsigned __int8 breakpointType;
     bool hitBreakpoint;
     bool changed;
     bool valueDefined;
     bool threadList;
     bool endonList;
     // padding byte
     // padding byte
     // padding byte
     VariableValue value;
     unsigned int fieldName;
     unsigned int childCount;
     unsigned int hardcodedCount;
     int id;
     Scr_Breakpoint *breakpoint;
     const char *deadCodePos;
     unsigned int bufferIndex;
     unsigned int sourcePos;
     int changedTime;
     Scr_WatchElement_s *parent;
     Scr_WatchElement_s *childArrayHead;
     Scr_WatchElement_s *childHead;
     Scr_WatchElement_s *next;
 };
 struct __cppobj Scr_ScriptWindow : UI_LinesComponent // sizeof=0x3C
 {
     unsigned int bufferIndex;
     int currentTopLine;
     const char *currentBufPos;
     Scr_Breakpoint *breakpointHead;
     Scr_Breakpoint *builtinHead;
     int numCols;
 };
 struct /*VFT*/ Scr_ScriptWindow_vtbl // sizeof=0x20
 {
     void (__thiscall *Init)(UI_Component *this);
     void (__thiscall *Shutdown)(UI_Component *this);
     void (__thiscall *~UI_Component)(UI_Component *this);
     void (__thiscall *Draw)(UI_Component *this, float, float, float, float, float, float);
     bool (__thiscall *KeyEvent)(UI_Component *this, float *, int);
     UI_Component *(__thiscall *GetCompAtLocation)(UI_Component *this, float *);
     void (__thiscall *AddText)(UI_Component *this, const char *);
     bool (__thiscall *SetSelectedLineFocus)(UI_LinesComponent *this, int, bool);
 };
 struct __cppobj Scr_AbstractScriptList : UI_LinesComponent // sizeof=0x28
 {                                       // ...
     Scr_ScriptWindow **scriptWindows;   // ...
 };
 struct /*VFT*/ Scr_AbstractScriptList_vtbl // sizeof=0x20
 {
     void (__thiscall *Init)(UI_Component *this);
     void (__thiscall *Shutdown)(UI_Component *this);
     void (__thiscall *~UI_Component)(UI_Component *this);
     void (__thiscall *Draw)(UI_Component *this, float, float, float, float, float, float);
     bool (__thiscall *KeyEvent)(UI_Component *this, float *, int);
     UI_Component *(__thiscall *GetCompAtLocation)(UI_Component *this, float *);
     void (__thiscall *AddText)(UI_Component *this, const char *);
     bool (__thiscall *SetSelectedLineFocus)(UI_LinesComponent *this, int, bool);
 };
 struct __cppobj Scr_ScriptList : Scr_AbstractScriptList // sizeof=0x28
 {                                       // ...
 };
 struct /*VFT*/ Scr_ScriptList_vtbl // sizeof=0x20
 {
     void (__thiscall *Init)(UI_Component *this);
     void (__thiscall *Shutdown)(UI_Component *this);
     void (__thiscall *~UI_Component)(UI_Component *this);
     void (__thiscall *Draw)(UI_Component *this, float, float, float, float, float, float);
     bool (__thiscall *KeyEvent)(UI_Component *this, float *, int);
     UI_Component *(__thiscall *GetCompAtLocation)(UI_Component *this, float *);
     void (__thiscall *AddText)(UI_Component *this, const char *);
     bool (__thiscall *SetSelectedLineFocus)(UI_LinesComponent *this, int, bool);
 };
 struct Scr_StringNode_s // sizeof=0x8
 {
     const char *text;
     Scr_StringNode_s *next;
 };
 struct __cppobj Scr_OpenScriptList : Scr_AbstractScriptList // sizeof=0x2C
 {                                       // ...
     Scr_StringNode_s *usedHead;
 };
 struct /*VFT*/ Scr_OpenScriptList_vtbl // sizeof=0x20
 {
     void (__thiscall *Init)(UI_Component *this);
     void (__thiscall *Shutdown)(UI_Component *this);
     void (__thiscall *~UI_Component)(UI_Component *this);
     void (__thiscall *Draw)(UI_Component *this, float, float, float, float, float, float);
     bool (__thiscall *KeyEvent)(UI_Component *this, float *, int);
     UI_Component *(__thiscall *GetCompAtLocation)(UI_Component *this, float *);
     void (__thiscall *AddText)(UI_Component *this, const char *);
     bool (__thiscall *SetSelectedLineFocus)(UI_LinesComponent *this, int, bool);
 };
 struct __cppobj Scr_ScriptWatch : UI_LinesComponent // sizeof=0x34
 {                                       // ...
     Scr_WatchElement_s *elementHead;    // ...
     int elementId;                      // ...
     unsigned int localId;               // ...
     int dirty;                          // ...
 };
 struct /*VFT*/ Scr_ScriptWatch_vtbl // sizeof=0x20
 {
     void (__thiscall *Init)(UI_Component *this);
     void (__thiscall *Shutdown)(UI_Component *this);
     void (__thiscall *~UI_Component)(UI_Component *this);
     void (__thiscall *Draw)(UI_Component *this, float, float, float, float, float, float);
     bool (__thiscall *KeyEvent)(UI_Component *this, float *, int);
     UI_Component *(__thiscall *GetCompAtLocation)(UI_Component *this, float *);
     void (__thiscall *AddText)(UI_Component *this, const char *);
     bool (__thiscall *SetSelectedLineFocus)(UI_LinesComponent *this, int, bool);
 };
 struct Scr_SourcePos2_t // sizeof=0x8
 {                                       // ...
     unsigned int bufferIndex;           // ...
     unsigned int sourcePos;             // ...
 };
 struct __cppobj Scr_ScriptCallStack : UI_LinesComponent // sizeof=0x12C
 {                                       // ...
     Scr_SourcePos2_t stack[33];         // ...
 };
 struct /*VFT*/ Scr_ScriptCallStack_vtbl // sizeof=0x20
 {
     void (__thiscall *Init)(UI_Component *this);
     void (__thiscall *Shutdown)(UI_Component *this);
     void (__thiscall *~UI_Component)(UI_Component *this);
     void (__thiscall *Draw)(UI_Component *this, float, float, float, float, float, float);
     bool (__thiscall *KeyEvent)(UI_Component *this, float *, int);
     UI_Component *(__thiscall *GetCompAtLocation)(UI_Component *this, float *);
     void (__thiscall *AddText)(UI_Component *this, const char *);
     bool (__thiscall *SetSelectedLineFocus)(UI_LinesComponent *this, int, bool);
 };
 struct Scr_OpcodeList_s // sizeof=0x8
 {
     char *codePos;
     Scr_OpcodeList_s *next;
 };
 struct Scr_WatchElementNode_s // sizeof=0x8
 {
     Scr_WatchElement_s *element;
     Scr_WatchElementNode_s *next;
 };
 struct Scr_WatchElementDoubleNode_t // sizeof=0x8
 {
     Scr_WatchElementNode_s *list;
     Scr_WatchElementNode_s *removedList;
 };
 struct __cppobj scrDebuggerGlob_t // sizeof=0x2B8
 {                                       // ...
     int prevMouseTime;                  // ...
     float prevMousePos[2];              // ...
     UI_ScrollPane scriptScrollPane;     // ...
     UI_ScrollPane miscScrollPane;       // ...
     Scr_ScriptList scriptList;          // ...
     Scr_OpenScriptList openScriptList;  // ...
     Scr_ScriptWatch scriptWatch;        // ...
     Scr_ScriptCallStack scriptCallStack; // ...
     UI_VerticalDivider mainWindow;      // ...
     char *breakpoints;                  // ...
     int breakpointOpcode;               // ...
     const char *breakpointCodePos;      // ...
     Scr_SourcePos_t breakpointPos;      // ...
     bool atBreakpoint;                  // ...
     // padding byte
     // padding byte
     // padding byte
     char *nextBreakpointCodePos;        // ...
     unsigned int nextBreakpointThreadId; // ...
     bool nextBreakpointCodePosMasked;   // ...
     // padding byte
     // padding byte
     // padding byte
     char *killThreadCodePos;            // ...
     bool kill_thread;                   // ...
     // padding byte
     // padding byte
     // padding byte
     VariableValue *breakpointTop;       // ...
     bool run_debugger;                  // ...
     // padding byte
     // padding byte
     // padding byte
     int step_mode;                      // ...
     Scr_OpcodeList_s *assignHead;       // ...
     char *assignHeadCodePos;            // ...
     bool assignBreakpointSet;           // ...
     bool add;                           // ...
     // padding byte
     // padding byte
     Scr_WatchElement_s *currentElement; // ...
     unsigned int removeId;              // ...
     Scr_WatchElementDoubleNode_t **variableBreakpoints; // ...
     bool debugger_inited_main;          // ...
     bool debugger_inited;               // ...
     bool debugger_inited_system;        // ...
     // padding byte
     unsigned int objectId;              // ...
     char *colBuf;                       // ...
     int prevBreakpointLineNum;          // ...
     bool disableBreakpoints;            // ...
     bool showConsole;                   // ...
     // padding byte
     // padding byte
     volatile int disableDebuggerRemote;
     int breakpointCount;                // ...
     int gainFocusTime;                  // ...
 };
 struct field_t // sizeof=0x118
 {                                       // ...
     int cursor;                         // ...
     int scroll;
     int drawWidth;                      // ...
     int widthInPixels;                  // ...
     float charHeight;                   // ...
     int fixedSize;                      // ...
     char buffer[256];                   // ...
 };
 struct Scr_AddFileInfo // sizeof=0xC
 {                                       // ...
     int maxNumCols;                     // ...
     int to;                             // ...
     int from;                           // ...
 };
 struct __unaligned __declspec(align(1)) $_TypeDescriptor$_extraBytes_29 // sizeof=0x25
 {
     const void *pVFTable;
     void *spare;
     char name[29];
 };
 struct __declspec(align(4)) Scr_SelectedLineInfo // sizeof=0xC
 {                                       // ...
     int selectedId;
     int oldSelectedLine;
     bool oldFocusOnSelectedLine;
     // padding byte
     // padding byte
     // padding byte
 };
 struct CaseStatementInfo // sizeof=0x10
 {
     unsigned int name;
     const char *codePos;
     unsigned int sourcePos;
     CaseStatementInfo *next;
 };
 struct BreakStatementInfo // sizeof=0xC
 {
     const char *codePos;
     const char *nextCodePos;
     BreakStatementInfo *next;
 };
 struct ContinueStatementInfo // sizeof=0xC
 {
     const char *codePos;
     const char *nextCodePos;
     ContinueStatementInfo *next;
 };
 struct VariableCompileValue // sizeof=0xC
 {                                       // ...
     VariableValue value;                // ...
     sval_u sourcePos;
 };
 struct scrCompileGlob_t // sizeof=0x1D8
 {                                       // ...
     unsigned __int8 *codePos;           // ...
     unsigned __int8 *prevOpcodePos;     // ...
     unsigned int fileId;                // ...
     unsigned int threadId;              // ...
     int cumulOffset;                    // ...
     int maxOffset;                      // ...
     int maxCallOffset;                  // ...
     bool bConstRefCount;                // ...
     bool in_developer_thread;           // ...
     // padding byte
     // padding byte
     unsigned int developer_thread_sourcePos; // ...
     bool firstThread[2];                // ...
     // padding byte
     // padding byte
     CaseStatementInfo *currentCaseStatement; // ...
     bool bCanBreak;                     // ...
     // padding byte
     // padding byte
     // padding byte
     BreakStatementInfo *currentBreakStatement; // ...
     bool bCanContinue;                  // ...
     // padding byte
     // padding byte
     // padding byte
     ContinueStatementInfo *currentContinueStatement; // ...
     scr_block_s **breakChildBlocks;     // ...
     int *breakChildCount;               // ...
     scr_block_s *breakBlock;            // ...
     scr_block_s **continueChildBlocks;  // ...
     int *continueChildCount;            // ...
     bool forceNotCreate;                // ...
     // padding byte
     // padding byte
     // padding byte
     PrecacheEntry *precachescriptList;  // ...
     VariableCompileValue value_start[32]; // ...
 };
 struct scrAnimGlob_t // sizeof=0x20C
 {                                       // ...
     const char *start;                  // ...
     const char *pos;                    // ...
     unsigned __int16 using_xanim_lookup[2][128]; // ...
     int bAnimCheck;                     // ...
 };
 struct tagTHREADNAME_INFO // sizeof=0x10
 {                                       // ...
     unsigned int type;                  // ...
     const char *name;                   // ...
     unsigned int threadId;              // ...
     unsigned int flags;                 // ...
 };
 struct netFieldOrderInfo_t // sizeof=0x6C0
 {                                       // ...
     int entState[64];
     int arcEntState[128];               // ...
     int clientState[32];                // ...
     int playerState[160];               // ...
     int objective[8];                   // ...
     int hudElem[40];                    // ...
 };
 struct nodetype // sizeof=0x14
 {                                       // ...
     nodetype *left;
     nodetype *right;
     nodetype *parent;
     int weight;
     int symbol;
 };
 struct huff_t // sizeof=0x4C14
 {                                       // ...
     int blocNode;
     int blocPtrs;
     nodetype *tree;                     // ...
     nodetype *loc[257];
     nodetype **freelist;
     nodetype nodeList[768];
     nodetype *nodePtrs[768];
 };
 struct huffman_t // sizeof=0x4C14
 {                                       // ...
     huff_t compressDecompress;          // ...
 };
 struct statmonitor_s // sizeof=0x8
 {                                       // ...
     int endtime;                        // ...
     Material *material;                 // ...
 };
 struct loopmsg_t // sizeof=0x580
 {                                       // ...
     unsigned __int8 data[1400];
     int datalen;
     int port;
 };
 struct loopback_t // sizeof=0x5808
 {                                       // ...
     loopmsg_t msgs[16];
     volatile int get;
     volatile int send;
 };
 struct fakedLatencyPackets_t // sizeof=0x50
 {
     bool outbound;
     bool loopback;
     // padding byte
     // padding byte
     netsrc_t sock;
     netadr_t addr;
     unsigned int length;
     unsigned __int8 *data;
     int startTime;
     msg_t msg;
 };
 struct meminfo_t // sizeof=0xA0
 {                                       // ...
     int total;                          // ...
     int nonSwapTotal;                   // ...
     int nonSwapMinSpecTotal;            // ...
     int typeTotal[37];                  // ...
 };
 struct TempMemInfo // sizeof=0x28
 {                                       // ...
     int permanent;
     int high;
     int highExtra;
     int hunkSize;
     int low;
     mem_track_t data;                   // ...
 };
 struct __cppobj std::pair<TempMemInfo *,TempMemInfo *> // sizeof=0x8
 {                                       // ...
     TempMemInfo *first;                 // ...
     TempMemInfo *second;                // ...
 };
 struct GraphFloat // sizeof=0x168
 {                                       // ...
     char name[64];
     float knots[32][2];
     int knotCount;
     float scale;
     DevGraph devguiGraph;
 };
 struct DvarDumpInfo // sizeof=0xC
 {                                       // ...
     int count;                          // ...
     int channel;                        // ...
     const char *match;                  // ...
 };
 struct DvarSetConfigInfo // sizeof=0xC
 {                                       // ...
     int start;                          // ...
     int max;                            // ...
     int bit;                            // ...
 };
 struct _HTList // sizeof=0x8
 {
     void *object;
     _HTList *next;
 };
 struct _HTMIMEParseSet // sizeof=0xC
 {
     int size;
     struct _HTMIMEParseEl **parsers;
     struct _HTMIMEParseEl *regexParsers;
 };
 struct _HTAtom // sizeof=0x8
 {
     _HTAtom *next;
     char *name;
 };
 struct __declspec(align(8)) _HTRequest // sizeof=0x128
 {
     int internal;
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     __int64 date;
     HTMethod method;
     int flush;
     _HTPriority priority;
     struct _HTUserProfile *userprofile;
     struct _HTNet *net;
     struct _HTResponse *response;
     _HTList *error_stack;
     int retrys;
     int max_forwards;
     int AAretrys;
     int preemptive;
     int ContentNegotiation;
     _HTPreconditions preconditions;
     _HTGnHd GenMask;
     _HTRsHd ResponseMask;
     _HTRqHd RequestMask;
     _HTEnHd EntityMask;
     _HTMIMEParseSet *parseSet;
     int pars_local;
     _HTList *conversions;
     int conv_local;
     _HTList *encodings;
     int enc_local;
     _HTList *tes;
     int te_local;
     _HTList *languages;
     int lang_local;
     _HTList *charsets;
     int char_local;
     _HTList *befores;
     int befores_local;
     _HTList *afters;
     int afters_local;
     char *proxy;
     int full_uri;
     _HTReload reload;
     _HTList *cache_control;
     char *default_put_name;
     _HTList *byte_ranges;
     _HTList *connection;
     _HTList *expect;
     char *realm;
     _HTList *credentials;
     _HTList *extra_headers;
     _HTList *generators;
     int gens_local;
     _HTList *mandatory;
     _HTList *optional;
     struct _HTParentAnchor *anchor;
     struct _HTChildAnchor *childAnchor;
     struct _HTParentAnchor *parentAnchor;
     struct _HTStream *output_stream;
     struct _HTStream *orig_output_stream;
     _HTAtom *output_format;
     int connected;
     struct _HTStream *debug_stream;
     struct _HTStream *orig_debug_stream;
     _HTAtom *debug_format;
     struct _HTStream *input_stream;
     _HTAtom *input_format;
     int (__cdecl *PostCallback)(_HTRequest *, struct _HTStream *);
     int (__cdecl *callback)(_HTRequest *, void *);
     void *context;
     _HTRequest *source;
     struct _HTParentAnchor *source_anchor;
     _HTRequest *mainDestination;
     _HTList *destinations;
     int destRequests;
     int destStreams;
     // padding byte
     // padding byte
     // padding byte
     // padding byte
 };
 struct _HTBasic // sizeof=0x10
 {
     char *uid;
     char *pw;
     int retry;
     int proxy;
 };
 struct HKEY__ // sizeof=0x4
 {
     int unused;
 };
 struct CaCItem // sizeof=0xC
 {                                       // ...
     int itemIndex;                      // ...
     int minLevel;
     StatType type;
 };
 struct MapProfileEntry // sizeof=0x70
 {                                       // ...
     const char *label;
     int accessCount;
     unsigned __int64 ticksStart;
     unsigned __int64 ticksTotal;
     unsigned __int64 ticksSelf;
     int indent;
     MapProfileEntry *parent;
     MapProfileElement elements[3];
 };
 struct MapProfileElement // sizeof=0x18
 {                                       // ...
     unsigned __int64 ticksStart;
     unsigned __int64 ticksTotal;
     unsigned __int64 ticksSelf;
 };
 struct mapLoadProfile_t // sizeof=0xA880
 {                                       // ...
     bool isLoading;                     // ...
     // padding byte
     // padding byte
     // padding byte
     int profileEntryCount;              // ...
     MapProfileEntry profileEntries[384]; // ...
     MapProfileEntry *currentEntry;      // ...
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     unsigned __int64 ticksStart;        // ...
     unsigned __int64 ticksFinish;       // ...
     unsigned __int64 ticksProfiled;     // ...
     int elementAccessCount[3];          // ...
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     MapProfileElement elements[3];      // ...
 };
 struct MapProfileHotSpot // sizeof=0x18
 {                                       // ...
     const char *label;                  // ...
     int accessCount;                    // ...
     __int64 ticksSelf;                  // ...
     __int64 ticksFile;                  // ...
 };
 struct __cppobj std::pair<MapProfileHotSpot *,MapProfileHotSpot *> // sizeof=0x8
 {                                       // ...
     MapProfileHotSpot *first;           // ...
     MapProfileHotSpot *second;          // ...
 };
 struct BspChunk // sizeof=0x8
 {                                       // ...
     LumpType type;                      // ...
     unsigned int length;                // ...
 };
 struct BspHeader // sizeof=0x32C
 {                                       // ...
     unsigned int ident;                 // ...
     unsigned int version;               // ...
     unsigned int chunkCount;            // ...
     BspChunk chunks[100];               // ...
 };
 struct $0368CFE3C958026DEB0A011CBC6EA813 // sizeof=0x54
 {                                       // ...
     char name[64];                      // ...
     BspHeader *header;                  // ...
     unsigned int fileSize;              // ...
     unsigned int checksum;              // ...
     LumpType loadedLumpType;
     const void *loadedLumpData;         // ...
 };
 struct BspLump // sizeof=0x8
 {                                       // ...
     unsigned int length;
     unsigned int offset;
 };
 struct OldBspHeader // sizeof=0x180
 {
     unsigned int ident;
     unsigned int version;
     BspLump lumps[47];
 };
 struct DiskPrimaryLight_Version16 // sizeof=0x60
 {
     unsigned __int16 falloffStart;
     unsigned __int8 falloffSizeLessOne;
     unsigned __int8 type;
     float color[3];
     float dir[3];
     float origin[3];
     float radius;
     float cosHalfFovOuter;
     float cosHalfFovInner;
     int exponent;
     char defName[40];
 };
 struct DiskPrimaryLight // sizeof=0x80
 {
     unsigned __int8 type;
     unsigned __int8 canUseShadowMap;
     unsigned __int8 unused[2];
     float color[3];
     float dir[3];
     float origin[3];
     float radius;
     float cosHalfFovOuter;
     float cosHalfFovInner;
     int exponent;
     float rotationLimit;
     float translationLimit;
     char defName[64];
 };
 struct CmdArgsPrivate // sizeof=0x2828
 {                                       // ...
     char textPool[8192];
     const char *argvPool[512];
     int usedTextPool[8];
     int totalUsedArgvPool;              // ...
     int totalUsedTextPool;
 };
 struct CmdText // sizeof=0xC
 {                                       // ...
     unsigned __int8 *data;              // ...
     int maxsize;                        // ...
     int cmdsize;                        // ...
 };
 struct worldContents_s // sizeof=0x10
 {                                       // ...
     int contentsStaticModels;           // ...
     int contentsEntities;               // ...
     int linkcontentsEntities;           // ...
     unsigned __int16 entities;          // ...
     unsigned __int16 staticModels;      // ...
 };
 union worldTree_s::<unnamed_type_u> // sizeof=0x2
 {                                       // ...
     unsigned __int16 parent;
     unsigned __int16 nextFree;
 };
 struct worldTree_s // sizeof=0xC
 {                                       // ...
     float dist;                         // ...
     unsigned __int16 axis;              // ...
     worldTree_s::<unnamed_type_u> u;    // ...
     unsigned __int16 child[2];          // ...
 };
 struct worldSector_s // sizeof=0x1C
 {                                       // ...
     worldContents_s contents;           // ...
     worldTree_s tree;                   // ...
 };
 struct cm_world_t // sizeof=0x701C
 {                                       // ...
     float mins[3];                      // ...
     float maxs[3];                      // ...
     unsigned __int16 freeHead;          // ...
     // padding byte
     // padding byte
     worldSector_s sectors[1024];        // ...
 };
 struct staticmodeltrace_t // sizeof=0x28
 {                                       // ...
     TraceExtents extents;               // ...
     int contents;                       // ...
 };
 struct areaParms_t // sizeof=0x18
 {                                       // ...
     const float *mins;                  // ...
     const float *maxs;                  // ...
     int *list;                          // ...
     int count;                          // ...
     int maxcount;                       // ...
     int contentmask;                    // ...
 };
 struct locTraceWork_t // sizeof=0x28
 {                                       // ...
     int contents;                       // ...
     TraceExtents extents;               // ...
 };
 struct traceWork_t // sizeof=0xB0
 {                                       // ...
     TraceExtents extents;               // ...
     float delta[3];                     // ...
     float deltaLen;                     // ...
     float deltaLenSq;                   // ...
     float midpoint[3];                  // ...
     float halfDelta[3];                 // ...
     float halfDeltaAbs[3];              // ...
     float size[3];                      // ...
     float bounds[2][3];                 // ...
     int contents;                       // ...
     bool isPoint;                       // ...
     bool axialCullOnly;
     // padding byte
     // padding byte
     float radius;                       // ...
     float offsetZ;                      // ...
     float radiusOffset[3];              // ...
     float boundingRadius;               // ...
     TraceThreadInfo threadInfo;         // ...
 };
 struct leafList2_t // sizeof=0x1C
 {
     unsigned int count;
     unsigned int maxcount;
     unsigned __int16 *list;
     float origin[3];
     float radius;
 };
 struct winding_t // sizeof=0x34
 {
     int numpoints;
     float p[4][3];
 };
 struct __declspec(align(4)) ShowCollisionBrushPt // sizeof=0x14
 {                                       // ...
     float xyz[3];
     __int16 sideIndex[3];
     // padding byte
     // padding byte
 };
 struct dbrush_t // sizeof=0x4
 {
     __int16 numSides;
     __int16 materialNum;
 };
 struct DiskBrushModel // sizeof=0x30
 {
     float mins[3];
     float maxs[3];
     unsigned __int16 firstTriSoup[2];
     unsigned __int16 triSoupCount[2];
     int firstSurface;
     int numSurfaces;
     int firstBrush;
     int numBrushes;
 };
 union DiskCollAabbTree::<unnamed_type_u> // sizeof=0x4
 {                                       // ...
     int firstChildIndex;
     int partitionIndex;
 };
 struct DiskCollAabbTree // sizeof=0x20
 {
     float origin[3];
     float halfSize[3];
     unsigned __int16 materialIndex;
     unsigned __int16 childCount;
     DiskCollAabbTree::<unnamed_type_u> u;
 };
 struct DiskCollBorder // sizeof=0x1C
 {
     float distEq[3];
     float zBase;
     float zSlope;
     float start;
     float length;
 };
 struct dplane_t // sizeof=0x10
 {
     float normal[3];
     float dist;
 };
 struct dnode_t // sizeof=0x24
 {
     int planeNum;
     int children[2];
     int mins[3];
     int maxs[3];
 };
 union dbrushside_t::<unnamed_type_u> // sizeof=0x4
 {                                       // ...
     int planeNum;
     float bound;
 };
 struct dbrushside_t // sizeof=0x8
 {
     dbrushside_t::<unnamed_type_u> u;
     int materialNum;
 };
 struct DiskLeaf_Version14 // sizeof=0x24
 {
     int cluster;
     int unused0;
     int firstCollAabbIndex;
     int collAabbCount;
     int firstLeafBrush;
     int numLeafBrushes;
     int cellNum;
     int unused1;
     int unused2;
 };
 struct DiskCollPartition // sizeof=0xC
 {
     unsigned __int16 checkStamp;
     unsigned __int8 triCount;
     unsigned __int8 borderCount;
     int firstTriIndex;
     int firstBorderIndex;
 };
 struct SpawnVar // sizeof=0xA0C
 {                                       // ...
     bool spawnVarsValid;                // ...
     // padding byte
     // padding byte
     // padding byte
     int numSpawnVars;                   // ...
     char *spawnVars[64][2];             // ...
     int numSpawnVarChars;
     char spawnVarChars[2048];
 };
 struct DiskLeaf // sizeof=0x18
 {
     int cluster;
     int firstCollAabbIndex;
     int collAabbCount;
     int firstLeafBrush;
     int numLeafBrushes;
     int cellNum;
 };
 struct EdgeInfo // sizeof=0x44
 {
     float v_v[3];
     float discNormalDist;
     float discriminant;
     float discEdgeAxis[3];
     float midpoint[3];
     float start_v[3];
     float discNormalAxis[3];
 };
 struct audioSample_t // sizeof=0x20
 {                                       // ...
     unsigned __int8 *buffer;            // ...
     int lengthInBytes;                  // ...
     int lengthInSamples;                // ...
     int bytesPerSample;                 // ...
     int frequency;                      // ...
     bool stereo;                        // ...
     // padding byte
     // padding byte
     // padding byte
     int channels;                       // ...
     int sampleOffset;                   // ...
 };
 struct __cppobj IDirectSound8 : IDirectSound // sizeof=0x4
 {
 };
 struct /*VFT*/ IDirectSound8_vtbl // sizeof=0x30
 {
     HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
     unsigned int (__stdcall *AddRef)(IUnknown *this);
     unsigned int (__stdcall *Release)(IUnknown *this);
     HRESULT (__stdcall *CreateSoundBuffer)(IDirectSound *this, const _DSBUFFERDESC *, IDirectSoundBuffer **, IUnknown *);
     HRESULT (__stdcall *GetCaps)(IDirectSound *this, _DSCAPS *);
     HRESULT (__stdcall *DuplicateSoundBuffer)(IDirectSound *this, IDirectSoundBuffer *, IDirectSoundBuffer **);
     HRESULT (__stdcall *SetCooperativeLevel)(IDirectSound *this, HWND__ *, unsigned int);
     HRESULT (__stdcall *Compact)(IDirectSound *this);
     HRESULT (__stdcall *GetSpeakerConfig)(IDirectSound *this, unsigned int *);
     HRESULT (__stdcall *SetSpeakerConfig)(IDirectSound *this, unsigned int);
     HRESULT (__stdcall *Initialize)(IDirectSound *this, const _GUID *);
     HRESULT (__stdcall *VerifyCertification)(IDirectSound8 *this, unsigned int *);
 };
 struct SpeexMode // sizeof=0x34
 {                                       // ...
     const void *mode;
     int (__cdecl *query)(const void *, int, void *);
     const char *modeName;
     int modeID;
     int bitstream_version;
     void *(__cdecl *enc_init)(const SpeexMode *);
     void (__cdecl *enc_destroy)(void *);
     int (__cdecl *enc)(void *, void *, SpeexBits *);
     void *(__cdecl *dec_init)(const SpeexMode *);
     void (__cdecl *dec_destroy)(void *);
     int (__cdecl *dec)(void *, SpeexBits *, void *);
     int (__cdecl *enc_ctl)(void *, int, void *);
     int (__cdecl *dec_ctl)(void *, int, void *);
 };
 struct SpeexBits // sizeof=0x24
 {                                       // ...
     char *chars;
     int nbBits;
     int charPtr;
     int bitPtr;
     int owner;
     int overflow;
     int buf_size;
     int reserved1;
     void *reserved2;
 };
 struct scr_const_t // sizeof=0x174
 {                                       // ...
     unsigned __int16 _;                 // ...
     unsigned __int16 active;            // ...
     unsigned __int16 aim_bone;          // ...
     unsigned __int16 aim_highest_bone;  // ...
     unsigned __int16 aim_vis_bone;      // ...
     unsigned __int16 all;               // ...
     unsigned __int16 allies;            // ...
     unsigned __int16 axis;              // ...
     unsigned __int16 bad_path;          // ...
     unsigned __int16 begin_firing;      // ...
     unsigned __int16 cancel_location;   // ...
     unsigned __int16 confirm_location;  // ...
     unsigned __int16 crouch;            // ...
     unsigned __int16 current;           // ...
     unsigned __int16 damage;            // ...
     unsigned __int16 dead;              // ...
     unsigned __int16 death;             // ...
     unsigned __int16 detonate;          // ...
     unsigned __int16 direct;            // ...
     unsigned __int16 dlight;            // ...
     unsigned __int16 done;              // ...
     unsigned __int16 empty;             // ...
     unsigned __int16 end_firing;        // ...
     unsigned __int16 entity;            // ...
     unsigned __int16 explode;           // ...
     unsigned __int16 failed;            // ...
     unsigned __int16 free;              // ...
     unsigned __int16 fraction;          // ...
     unsigned __int16 goal;              // ...
     unsigned __int16 goal_changed;      // ...
     unsigned __int16 goal_yaw;          // ...
     unsigned __int16 grenade;           // ...
     unsigned __int16 grenadedanger;     // ...
     unsigned __int16 grenade_fire;      // ...
     unsigned __int16 grenade_pullback;  // ...
     unsigned __int16 info_notnull;      // ...
     unsigned __int16 invisible;         // ...
     unsigned __int16 key1;              // ...
     unsigned __int16 key2;              // ...
     unsigned __int16 killanimscript;    // ...
     unsigned __int16 left;              // ...
     unsigned __int16 light;             // ...
     unsigned __int16 movedone;          // ...
     unsigned __int16 noclass;           // ...
     unsigned __int16 none;              // ...
     unsigned __int16 normal;            // ...
     unsigned __int16 player;            // ...
     unsigned __int16 position;          // ...
     unsigned __int16 projectile_impact; // ...
     unsigned __int16 prone;             // ...
     unsigned __int16 right;             // ...
     unsigned __int16 reload;            // ...
     unsigned __int16 reload_start;      // ...
     unsigned __int16 rocket;            // ...
     unsigned __int16 rotatedone;        // ...
     unsigned __int16 script_brushmodel; // ...
     unsigned __int16 script_model;      // ...
     unsigned __int16 script_origin;     // ...
     unsigned __int16 snd_enveffectsprio_level; // ...
     unsigned __int16 snd_enveffectsprio_shellshock; // ...
     unsigned __int16 snd_channelvolprio_holdbreath; // ...
     unsigned __int16 snd_channelvolprio_pain; // ...
     unsigned __int16 snd_channelvolprio_shellshock; // ...
     unsigned __int16 stand;             // ...
     unsigned __int16 suppression;       // ...
     unsigned __int16 suppression_end;   // ...
     unsigned __int16 surfacetype;       // ...
     unsigned __int16 tag_aim;           // ...
     unsigned __int16 tag_aim_animated;  // ...
     unsigned __int16 tag_brass;         // ...
     unsigned __int16 tag_butt;          // ...
     unsigned __int16 tag_clip;          // ...
     unsigned __int16 tag_flash;         // ...
     unsigned __int16 tag_flash_11;      // ...
     unsigned __int16 tag_flash_2;       // ...
     unsigned __int16 tag_flash_22;      // ...
     unsigned __int16 tag_flash_3;       // ...
     unsigned __int16 tag_fx;            // ...
     unsigned __int16 tag_inhand;        // ...
     unsigned __int16 tag_knife_attach;  // ...
     unsigned __int16 tag_knife_fx;      // ...
     unsigned __int16 tag_laser;         // ...
     unsigned __int16 tag_origin;        // ...
     unsigned __int16 tag_weapon;        // ...
     unsigned __int16 tag_player;        // ...
     unsigned __int16 tag_camera;        // ...
     unsigned __int16 tag_weapon_right;  // ...
     unsigned __int16 tag_gasmask;       // ...
     unsigned __int16 tag_gasmask2;      // ...
     unsigned __int16 tag_sync;          // ...
     unsigned __int16 target_script_trigger; // ...
     unsigned __int16 tempEntity;        // ...
     unsigned __int16 top;               // ...
     unsigned __int16 touch;             // ...
     unsigned __int16 trigger;           // ...
     unsigned __int16 trigger_use;       // ...
     unsigned __int16 trigger_use_touch; // ...
     unsigned __int16 trigger_damage;    // ...
     unsigned __int16 trigger_lookat;    // ...
     unsigned __int16 truck_cam;         // ...
     unsigned __int16 weapon_change;     // ...
     unsigned __int16 weapon_fired;      // ...
     unsigned __int16 worldspawn;        // ...
     unsigned __int16 flashbang;         // ...
     unsigned __int16 flash;             // ...
     unsigned __int16 smoke;             // ...
     unsigned __int16 night_vision_on;   // ...
     unsigned __int16 night_vision_off;  // ...
     unsigned __int16 mod_unknown;       // ...
     unsigned __int16 mod_pistol_bullet; // ...
     unsigned __int16 mod_rifle_bullet;  // ...
     unsigned __int16 mod_grenade;       // ...
     unsigned __int16 mod_grenade_splash; // ...
     unsigned __int16 mod_projectile;    // ...
     unsigned __int16 mod_projectile_splash; // ...
     unsigned __int16 mod_melee;         // ...
     unsigned __int16 mod_head_shot;     // ...
     unsigned __int16 mod_crush;         // ...
     unsigned __int16 mod_telefrag;      // ...
     unsigned __int16 mod_falling;       // ...
     unsigned __int16 mod_suicide;       // ...
     unsigned __int16 mod_trigger_hurt;  // ...
     unsigned __int16 mod_explosive;     // ...
     unsigned __int16 mod_impact;        // ...
     unsigned __int16 script_vehicle;    // ...
     unsigned __int16 script_vehicle_collision; // ...
     unsigned __int16 script_vehicle_collmap; // ...
     unsigned __int16 script_vehicle_corpse; // ...
     unsigned __int16 turret_fire;       // ...
     unsigned __int16 turret_on_target;  // ...
     unsigned __int16 turret_not_on_target; // ...
     unsigned __int16 turret_on_vistarget; // ...
     unsigned __int16 turret_no_vis;     // ...
     unsigned __int16 turret_rotate_stopped; // ...
     unsigned __int16 turret_deactivate; // ...
     unsigned __int16 turretstatechange; // ...
     unsigned __int16 turretownerchange; // ...
     unsigned __int16 reached_end_node;  // ...
     unsigned __int16 reached_wait_node; // ...
     unsigned __int16 reached_wait_speed; // ...
     unsigned __int16 near_goal;         // ...
     unsigned __int16 veh_collision;     // ...
     unsigned __int16 veh_predictedcollision; // ...
     unsigned __int16 auto_change;       // ...
     unsigned __int16 back_low;          // ...
     unsigned __int16 back_mid;          // ...
     unsigned __int16 back_up;           // ...
     unsigned __int16 begin;             // ...
     unsigned __int16 call_vote;         // ...
     unsigned __int16 freelook;          // ...
     unsigned __int16 head;              // ...
     unsigned __int16 intermission;      // ...
     unsigned __int16 j_head;            // ...
     unsigned __int16 manual_change;     // ...
     unsigned __int16 menuresponse;      // ...
     unsigned __int16 neck;              // ...
     unsigned __int16 pelvis;            // ...
     unsigned __int16 pistol;            // ...
     unsigned __int16 plane_waypoint;    // ...
     unsigned __int16 playing;           // ...
     unsigned __int16 spectator;         // ...
     unsigned __int16 vote;              // ...
     unsigned __int16 sprint_begin;      // ...
     unsigned __int16 sprint_end;        // ...
     unsigned __int16 tag_driver;        // ...
     unsigned __int16 tag_passenger;     // ...
     unsigned __int16 tag_gunner;        // ...
     unsigned __int16 tag_wheel_front_left; // ...
     unsigned __int16 tag_wheel_front_right; // ...
     unsigned __int16 tag_wheel_back_left; // ...
     unsigned __int16 tag_wheel_back_right; // ...
     unsigned __int16 tag_wheel_middle_left; // ...
     unsigned __int16 tag_wheel_middle_right; // ...
     unsigned __int16 tag_detach;        // ...
     unsigned __int16 tag_popout;        // ...
     unsigned __int16 tag_body;          // ...
     unsigned __int16 tag_turret;        // ...
     unsigned __int16 tag_turret_base;   // ...
     unsigned __int16 tag_barrel;        // ...
     unsigned __int16 tag_engine_left;   // ...
     unsigned __int16 tag_engine_right;  // ...
     unsigned __int16 front_left;        // ...
     unsigned __int16 front_right;       // ...
     unsigned __int16 back_left;         // ...
     unsigned __int16 back_right;        // ...
     unsigned __int16 tag_gunner_pov;    // ...
 };
 struct trigger_info_t // sizeof=0xC
 {                                       // ...
     unsigned __int16 entnum;
     unsigned __int16 otherEntnum;
     int useCount;
     int otherUseCount;
 };
 struct cached_tag_mat_t // sizeof=0x3C
 {                                       // ...
     int time;
     int entnum;
     unsigned __int16 name;              // ...
     // padding byte
     // padding byte
     float tagMat[4][3];                 // ...
 };
 struct level_locals_t // sizeof=0x2E6C
 {                                       // ...
     gclient_s *clients;                 // ...
     gentity_s *gentities;               // ...
     int gentitySize;
     int num_entities;                   // ...
     gentity_s *firstFreeEnt;            // ...
     gentity_s *lastFreeEnt;             // ...
     int logFile;                        // ...
     int initializing;                   // ...
     int clientIsSpawning;               // ...
     objective_t objectives[16];         // ...
     int maxclients;                     // ...
     int framenum;                       // ...
     int time;                           // ...
     int previousTime;                   // ...
     int frametime;                      // ...
     int startTime;                      // ...
     int teamScores[4];                  // ...
     int lastTeammateHealthTime;         // ...
     int bUpdateScoresForIntermission;   // ...
     bool teamHasRadar[4];               // ...
     int manualNameChange;               // ...
     int numConnectedClients;            // ...
     int sortedClients[64];              // ...
     char voteString[1024];              // ...
     char voteDisplayString[1024];       // ...
     int voteTime;                       // ...
     int voteExecuteTime;                // ...
     int voteYes;                        // ...
     int voteNo;                         // ...
     int numVotingClients;               // ...
     SpawnVar spawnVar;                  // ...
     int savepersist;                    // ...
     EntHandle droppedWeaponCue[32];
     float fFogOpaqueDist;               // ...
     float fFogOpaqueDistSqrd;           // ...
     int remapCount;
     int currentPlayerClone;             // ...
     trigger_info_t pendingTriggerList[256]; // ...
     trigger_info_t currentTriggerList[256]; // ...
     int pendingTriggerListSize;         // ...
     int currentTriggerListSize;         // ...
     int finished;                       // ...
     int bPlayerIgnoreRadiusDamage;      // ...
     int bPlayerIgnoreRadiusDamageLatched; // ...
     int registerWeapons;                // ...
     int bRegisterItems;                 // ...
     int currentEntityThink;             // ...
     int openScriptIOFileHandles[1];     // ...
     char *openScriptIOFileBuffers[1];   // ...
     com_parse_mark_t currentScriptIOLineMark[1]; // ...
     cached_tag_mat_t cachedTagMat;      // ...
     int scriptPrintChannel;             // ...
     float compassMapUpperLeft[2];       // ...
     float compassMapWorldSize[2];       // ...
     float compassNorth[2];              // ...
     scr_vehicle_s *vehicles;            // ...
 };
 struct entityHandler_t // sizeof=0x28
 {
     void (__cdecl *think)(gentity_s *);
     void (__cdecl *reached)(gentity_s *);
     void (__cdecl *blocked)(gentity_s *, gentity_s *);
     void (__cdecl *touch)(gentity_s *, gentity_s *, int);
     void (__cdecl *use)(gentity_s *, gentity_s *, gentity_s *);
     void (__cdecl *pain)(gentity_s *, gentity_s *, int, const float *, const int, const float *, const hitLocation_t, const int);
     void (__cdecl *die)(gentity_s *, gentity_s *, gentity_s *, int, int, const int, const float *, const hitLocation_t, int);
     void (__cdecl *controller)(const gentity_s *, int *);
     int methodOfDeath;
     int splashMethodOfDeath;
 };
 struct useList_t // sizeof=0x8
 {                                       // ...
     gentity_s *ent;                     // ...
     float score;
 };
 struct AntilagClientStore // sizeof=0x340
 {                                       // ...
     float realClientPositions[64][3];
     bool clientMoved[64];
 };
 struct weaponParms // sizeof=0x40
 {                                       // ...
     float forward[3];                   // ...
     float right[3];                     // ...
     float up[3];                        // ...
     float muzzleTrace[3];               // ...
     float gunForward[3];                // ...
     WeaponDef *weapDef;                 // ...
 };
 struct vehicle_info_t // sizeof=0x270
 {                                       // ...
     char name[64];
     __int16 type;
     // padding byte
     // padding byte
     int steerWheels;
     int texScroll;
     int quadBarrel;
     int bulletDamage;
     int armorPiercingDamage;
     int grenadeDamage;
     int projectileDamage;
     int projectileSplashDamage;
     int heavyExplosiveDamage;
     float texScrollScale;
     float maxSpeed;
     float accel;
     float rotRate;
     float rotAccel;
     float maxBodyPitch;
     float maxBodyRoll;
     float collisionDamage;
     float collisionSpeed;
     float suspensionTravel;
     char turretWeapon[64];
     float turretHorizSpanLeft;
     float turretHorizSpanRight;
     float turretVertSpanUp;
     float turretVertSpanDown;
     float turretRotRate;
     char sndNames[6][64];
     unsigned __int8 sndIndices[6];
     // padding byte
     // padding byte
     float engineSndSpeed;
 };
 struct VehicleLocalPhysics // sizeof=0x34
 {                                       // ...
     trace_t groundTrace;                // ...
     int hasGround;                      // ...
     int onGround;                       // ...
 };
 struct VehiclePhysicsBackup // sizeof=0x1B8
 {                                       // ...
     vehicle_pathpos_t pathPos;
     vehicle_physic_t phys;              // ...
 };
 struct gameTypeScript_t // sizeof=0x84
 {                                       // ...
     char pszScript[64];
     char pszName[64];                   // ...
     int bTeamBased;
 };
 struct scr_data_t::<unnamed_type_gametype> // sizeof=0x10A8
 {                                       // ...
     int main;                           // ...
     int startupgametype;                // ...
     int playerconnect;                  // ...
     int playerdisconnect;               // ...
     int playerdamage;                   // ...
     int playerkilled;                   // ...
     int votecalled;
     int playervote;
     int playerlaststand;                // ...
     int iNumGameTypes;                  // ...
     gameTypeScript_t list[32];          // ...
 };
 struct __declspec(align(4)) corpseInfo_t // sizeof=0x4DC
 {                                       // ...
     XAnimTree_s *tree;                  // ...
     int entnum;                         // ...
     int time;
     clientInfo_t ci;
     bool falling;
     // padding byte
     // padding byte
     // padding byte
 };
 struct scr_data_t // sizeof=0x379C
 {                                       // ...
     int levelscript;                    // ...
     int gametypescript;
     scr_data_t::<unnamed_type_gametype> gametype; // ...
     int delete_;                        // ...
     int initstructs;                    // ...
     int createstruct;                   // ...
     corpseInfo_t playerCorpseInfo[8];   // ...
 };
 struct ipFilter_s // sizeof=0x8
 {                                       // ...
     unsigned int mask;                  // ...
     unsigned int compare;               // ...
 };
 struct ent_field_t // sizeof=0x10
 {                                       // ...
     const char *name;
     int ofs;
     fieldtype_t type;
     void (__cdecl *callback)(gentity_s *, int);
 };
 struct SpawnFuncEntry // sizeof=0x8
 {                                       // ...
     const char *classname;
     void (__cdecl *callback)(gentity_s *);
 };
 struct game_hudelem_s // sizeof=0xAC
 {
     hudelem_s elem;
     int clientNum;
     int team;
     int archived;
 };
 struct BuiltinMethodDef // sizeof=0xC
 {                                       // ...
     const char *actionString;           // ...
     void (__cdecl *actionFunc)(scr_entref_t); // ...
     int type;                           // ...
 };
 struct BuiltinFunctionDef // sizeof=0xC
 {
     const char *actionString;
     void (__cdecl *actionFunc)();
     int type;
 };
 struct pushed_t // sizeof=0x2C
 {                                       // ...
     gentity_s *ent;
     float origin[3];
     float angles[3];
     float surfaceNormal[3];
     float deltayaw;
 };
 struct AttractorRepulsor_t // sizeof=0x1C
 {                                       // ...
     bool inUse;                         // ...
     bool isAttractor;                   // ...
     // padding byte
     // padding byte
     int entnum;                         // ...
     float origin[3];                    // ...
     float strength;
     float maxDist;
 };
 struct $BC9161899B8BF9011D942B4F1507C18F // sizeof=0x380
 {                                       // ...
     AttractorRepulsor_t attractors[32]; // ...
 };
 struct game_hudelem_field_t // sizeof=0x1C
 {                                       // ...
     const char *name;
     int ofs;                            // ...
     fieldtype_t type;
     int mask;
     int shift;
     void (__cdecl *setter)(game_hudelem_s *, int);
     void (__cdecl *getter)(game_hudelem_s *, int);
 };
 struct DebugDrawBrushInfo // sizeof=0x38
 {                                       // ...
     int depthTest;
     int duration;
     float transform[4][3];
 };
 struct client_fields_s // sizeof=0x14
 {                                       // ...
     const char *name;
     int ofs;
     fieldtype_t type;
     void (__cdecl *setter)(gclient_s *, const client_fields_s *);
     void (__cdecl *getter)(gclient_s *, const client_fields_s *);
 };
 struct weaponState_t // sizeof=0x54
 {                                       // ...
     const playerState_s *ps;            // ...
     float xyspeed;                      // ...
     float frametime;                    // ...
     float vLastMoveAng[3];              // ...
     float fLastIdleFactor;              // ...
     int time;                           // ...
     int damageTime;                     // ...
     float v_dmg_pitch;                  // ...
     float v_dmg_roll;                   // ...
     float vGunOffset[3];                // ...
     float vGunSpeed[3];                 // ...
     float swayAngles[3];                // ...
     int *weapIdleTime;                  // ...
 };
 struct viewState_t // sizeof=0x24
 {                                       // ...
     playerState_s *ps;                  // ...
     int damageTime;                     // ...
     int time;                           // ...
     float v_dmg_pitch;                  // ...
     float v_dmg_roll;                   // ...
     float xyspeed;                      // ...
     float frametime;                    // ...
     float fLastIdleFactor;              // ...
     int *weapIdleTime;                  // ...
 };
 struct __declspec(align(4)) pmove_t // sizeof=0x110
 {                                       // ...
     playerState_s *ps;                  // ...
     usercmd_s cmd;                      // ...
     usercmd_s oldcmd;                   // ...
     int tracemask;                      // ...
     int numtouch;
     int touchents[32];
     float mins[3];                      // ...
     float maxs[3];                      // ...
     float xyspeed;
     int proneChange;
     float maxSprintTimeMultiplier;
     bool mantleStarted;                 // ...
     // padding byte
     // padding byte
     // padding byte
     float mantleEndPos[3];              // ...
     int mantleDuration;                 // ...
     int viewChangeTime;                 // ...
     float viewChange;
     unsigned __int8 handler;            // ...
     // padding byte
     // padding byte
     // padding byte
 };
 struct EntHandleInfo // sizeof=0x8
 {                                       // ...
     void *handle;
     unsigned __int16 next;              // ...
     unsigned __int16 prev;              // ...
 };
 struct EntHandleList // sizeof=0x2
 {                                       // ...
     unsigned __int16 infoIndex;
 };
 struct BulletFireParams // sizeof=0x40
 {                                       // ...
     int weaponEntIndex;                 // ...
     int ignoreEntIndex;                 // ...
     float damageMultiplier;             // ...
     int methodOfDeath;                  // ...
     float origStart[3];                 // ...
     float start[3];                     // ...
     float end[3];                       // ...
     float dir[3];                       // ...
 };
 struct BulletTraceResults // sizeof=0x44
 {                                       // ...
     trace_t trace;                      // ...
     gentity_s *hitEnt;                  // ...
     float hitPos[3];                    // ...
     bool ignoreHitEnt;                  // ...
     // padding byte
     // padding byte
     // padding byte
     int depthSurfaceType;               // ...
 };
 struct FxCurve // sizeof=0xC
 {
     int dimensionCount;
     int keyCount;
     float keys[1];
 };
 struct FxCurveIterator // sizeof=0x8
 {                                       // ...
     const FxCurve *master;
     int currentKeyIndex;
 };
 struct FxCamera // sizeof=0xB0
 {                                       // ...
     float origin[3];
     volatile int isValid;
     float frustum[6][4];
     float axis[3][3];
     unsigned int frustumPlaneCount;
     float viewOffset[3];
     unsigned int pad[3];
 };
 struct r_double_index_t // sizeof=0x4
 {                                       // ...
     unsigned __int16 value[2];          // ...
 };
 struct FxSpriteInfo // sizeof=0x10
 {                                       // ...
     r_double_index_t *indices;          // ...
     unsigned int indexCount;
     Material *material;
     const char *name;
 };
 union FxElem::<unnamed_type_u> // sizeof=0x4
 {                                       // ...
     float trailTexCoord;
     unsigned __int16 lightingHandle;
 };
 union $A58BA6DA60295001BBA5E9F807131CF1 // sizeof=0xC
 {                                       // ...
     int physObjId;
     float origin[3];
 };
 struct FxElem // sizeof=0x28
 {                                       // ...
     unsigned __int8 defIndex;
     unsigned __int8 sequence;
     unsigned __int8 atRestFraction;
     unsigned __int8 emitResidual;
     unsigned __int16 nextElemHandleInEffect;
     unsigned __int16 prevElemHandleInEffect;
     int msecBegin;
     float baseVel[3];
     $A58BA6DA60295001BBA5E9F807131CF1 ___u8;
     FxElem::<unnamed_type_u> u;
 };
 union $891369FB2E0A9459D0D5298764E05FEA // sizeof=0x28
 {                                       // ...
     int nextFree;
     FxElem item;
 };
 struct FxPool<FxElem> // sizeof=0x28
 {                                       // ...
     $891369FB2E0A9459D0D5298764E05FEA ___u0;
 };
 struct FxTrail // sizeof=0x8
 {                                       // ...
     unsigned __int16 nextTrailHandle;   // ...
     unsigned __int16 firstElemHandle;   // ...
     unsigned __int16 lastElemHandle;    // ...
     char defIndex;                      // ...
     char sequence;                      // ...
 };
 union $C7DD240BE02F47816CE7ABD1E81DDC04 // sizeof=0x8
 {                                       // ...
     int nextFree;
     FxTrail item;
 };
 struct FxPool<FxTrail> // sizeof=0x8
 {                                       // ...
     $C7DD240BE02F47816CE7ABD1E81DDC04 ___u0;
 };
 struct FxTrailElem // sizeof=0x20
 {                                       // ...
     float origin[3];
     float spawnDist;
     int msecBegin;
     unsigned __int16 nextTrailElemHandle;
     __int16 baseVelZ;
     char basis[2][3];
     unsigned __int8 sequence;
     unsigned __int8 unused;
 };
 union $F0A3FD761507E13275E4B34E97F7E96F // sizeof=0x20
 {                                       // ...
     int nextFree;
     FxTrailElem item;
 };
 struct FxPool<FxTrailElem> // sizeof=0x20
 {                                       // ...
     $F0A3FD761507E13275E4B34E97F7E96F ___u0;
 };
 struct FxVisBlocker // sizeof=0x10
 {                                       // ...
     float origin[3];
     unsigned __int16 radius;
     unsigned __int16 visibility;
 };
 struct FxVisState // sizeof=0x1010
 {                                       // ...
     FxVisBlocker blocker[256];
     volatile int blockerCount;
     unsigned int pad[3];
 };
 struct FxSystem // sizeof=0xA60
 {                                       // ...
     FxCamera camera;
     FxCamera cameraPrev;
     FxSpriteInfo sprite;
     FxEffect *effects;
     FxPool<FxElem> *elems;
     FxPool<FxTrail> *trails;
     FxPool<FxTrailElem> *trailElems;
     unsigned __int16 *deferredElems;
     volatile int firstFreeElem;
     volatile int firstFreeTrailElem;
     volatile int firstFreeTrail;
     volatile int deferredElemCount;
     volatile int activeElemCount;
     volatile int activeTrailElemCount;
     volatile int activeTrailCount;
     volatile int gfxCloudCount;
     FxVisState *visState;
     const FxVisState *visStateBufferRead;
     FxVisState *visStateBufferWrite;
     volatile int firstActiveEffect;
     volatile int firstNewEffect;
     volatile int firstFreeEffect;
     unsigned __int16 allEffectHandles[1024];
     volatile int activeSpotLightEffectCount;
     volatile int activeSpotLightElemCount;
     unsigned __int16 activeSpotLightEffectHandle;
     unsigned __int16 activeSpotLightElemHandle;
     __int16 activeSpotLightBoltDobj;
     // padding byte
     // padding byte
     volatile int iteratorCount;
     int msecNow;
     volatile int msecDraw;
     int frameCount;
     bool isInitialized;
     bool needsGarbageCollection;
     bool isArchiving;
     unsigned __int8 localClientNum;
     unsigned int restartList[32];
 };
 struct FxMarkPoint // sizeof=0x20
 {                                       // ...
     float xyz[3];
     float lmapCoord[2];
     float normal[3];
 };
 struct FxPointGroup // sizeof=0x44
 {                                       // ...
     FxMarkPoint points[2];
     int next;
 };
 union FxPointGroupPool // sizeof=0x44
 {                                       // ...
     FxPointGroupPool *nextFreePointGroup;
     FxPointGroup pointGroup;
 };
 union FxTriGroupPool // sizeof=0x18
 {                                       // ...
     FxTriGroupPool *nextFreeTriGroup;
     FxTriGroup triGroup;
 };
 struct GfxMarkContext // sizeof=0x6
 {                                       // ...
     unsigned __int8 lmapIndex;          // ...
     unsigned __int8 primaryLightIndex;  // ...
     unsigned __int8 reflectionProbeIndex; // ...
     unsigned __int8 modelTypeAndSurf;   // ...
     unsigned __int16 modelIndex;        // ...
 };
 struct FxTriGroup // sizeof=0x18
 {                                       // ...
     unsigned __int16 indices[2][3];
     GfxMarkContext context;
     unsigned __int8 triCount;
     unsigned __int8 unused[1];
     int next;
 };
 struct FxMark // sizeof=0x44
 {                                       // ...
     unsigned __int16 prevMark;
     unsigned __int16 nextMark;
     int frameCountDrawn;
     int frameCountAlloced;
     float origin[3];
     float radius;
     float texCoordAxis[3];
     unsigned __int8 nativeColor[4];
     Material *material;
     GfxMarkContext context;
     unsigned __int8 triCount;
     // padding byte
     unsigned __int16 pointCount;
     // padding byte
     // padding byte
     int tris;
     int points;
 };
 struct FxMarksSystem // sizeof=0x4801C
 {                                       // ...
     int frameCount;
     unsigned __int16 firstFreeMarkHandle;
     unsigned __int16 firstActiveWorldMarkHandle;
     unsigned __int16 entFirstMarkHandles[1024];
     FxTriGroupPool *firstFreeTriGroup;
     FxPointGroupPool *firstFreePointGroup;
     FxMark marks[512];
     FxTriGroupPool triGroups[2048];
     FxPointGroupPool pointGroups[3072]; // ...
     bool noMarks;
     bool hasCarryIndex;
     unsigned __int16 carryIndex;
     unsigned int allocedMarkCount;
     unsigned int freedMarkCount;
 };
 struct FxUpdateElem // sizeof=0x7C
 {                                       // ...
     FxEffect *effect;
     int elemIndex;
     int atRestFraction;                 // ...
     orientation_t orient;
     int randomSeed;
     int sequence;
     float msecLifeSpan;
     int msecElemBegin;
     int msecElemEnd;
     int msecUpdateBegin;
     int msecUpdateEnd;                  // ...
     float msecElapsed;
     float normTimeUpdateEnd;
     float *elemOrigin;
     float *elemBaseVel;                 // ...
     float posWorld[3];
     bool onGround;                      // ...
     // padding byte
     // padding byte
     // padding byte
     int physObjId;                      // ...
 };
 struct FxCmd // sizeof=0xC
 {                                       // ...
     FxSystem *system;
     int localClientNum;
     volatile int *spawnLock;
 };
 struct FxSystemBuffers // sizeof=0x47480
 {                                       // ...
     FxEffect effects[1024];
     FxPool<FxElem> elems[2048];
     FxPool<FxTrail> trails[128];
     FxPool<FxTrailElem> trailElems[2048];
     FxVisState visState[2];
     unsigned __int16 deferredElems[2048];
     unsigned __int8 padBuffer[96];
 };
 struct __cppobj SpuDmaBuffer // sizeof=0x0
 {
 };
 struct FxSprite // sizeof=0x20
 {                                       // ...
     Material *material;
     float pos[3];
     unsigned __int8 rgbaColor[4];
     float radius;
     float minScreenRadius;
     int flags;
 };
 struct GfxSunShadowBoundingPoly // sizeof=0x78
 {                                       // ...
     float snapDelta[2];
     int pointCount;
     float points[9][2];
     int pointIsNear[9];
 };
 struct GfxMatrix // sizeof=0x40
 {                                       // ...
     float m[4][4];                      // ...
 };
 struct GfxViewParms // sizeof=0x140
 {                                       // ...
     GfxMatrix viewMatrix;
     GfxMatrix projectionMatrix;         // ...
     GfxMatrix viewProjectionMatrix;     // ...
     GfxMatrix inverseViewProjectionMatrix; // ...
     float origin[4];                    // ...
     float axis[3][3];                   // ...
     float depthHackNearClip;
     float zNear;
     int pad;
 };
 struct GfxSceneDef // sizeof=0x14
 {                                       // ...
     int time;                           // ...
     float floatTime;                    // ...
     float viewOffset[3];                // ...
 };
 struct GfxDrawSurfListInfo // sizeof=0x28
 {                                       // ...
     const GfxDrawSurf *drawSurfs;
     unsigned int drawSurfCount;
     MaterialTechniqueType baseTechType; // ...
     const GfxViewInfo *viewInfo;
     float viewOrigin[4];
     const GfxLight *light;
     int cameraView;
 };
 struct __declspec(align(16)) ShadowCookie // sizeof=0xC0
 {                                       // ...
     GfxMatrix shadowLookupMatrix;
     float boxMin[3];
     float boxMax[3];
     GfxViewParms *shadowViewParms;
     float fade;
     unsigned int sceneEntIndex;
     GfxDrawSurfListInfo casterInfo;
     GfxDrawSurfListInfo receiverInfo;
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
 };
 struct __declspec(align(16)) ShadowCookieList // sizeof=0x1210
 {                                       // ...
     ShadowCookie cookies[24];
     unsigned int cookieCount;
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
 };
 struct PointLightPartition // sizeof=0x68
 {                                       // ...
     GfxLight light;
     GfxDrawSurfListInfo info;
 };
 struct GfxVertexBufferState // sizeof=0x10
 {                                       // ...
     volatile int used;
     int total;
     IDirect3DVertexBuffer9 *buffer;     // ...
     unsigned __int8 *verts;
 };
 struct GfxMeshData // sizeof=0x20
 {                                       // ...
     unsigned int indexCount;
     unsigned int totalIndexCount;
     unsigned __int16 *indices;
     GfxVertexBufferState vb;
     unsigned int vertSize;
 };
 struct GfxSunShadowProjection // sizeof=0x60
 {                                       // ...
     float viewMatrix[4][4];
     float switchPartition[4];
     float shadowmapScale[4];
 };
 struct __declspec(align(16)) GfxSunShadowPartition // sizeof=0x200
 {                                       // ...
     GfxViewParms shadowViewParms;
     int partitionIndex;
     GfxViewport viewport;
     GfxDrawSurfListInfo info;
     GfxSunShadowBoundingPoly boundingPoly;
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
 };
 struct GfxSunShadow // sizeof=0x4A0
 {                                       // ...
     GfxMatrix lookupMatrix;
     GfxSunShadowProjection sunProj;
     GfxSunShadowPartition partition[2];
 };
 struct __declspec(align(16)) GfxSpotShadow // sizeof=0x1F0
 {                                       // ...
     GfxViewParms shadowViewParms;
     GfxMatrix lookupMatrix;
     unsigned __int8 shadowableLightIndex;
     unsigned __int8 pad[3];
     const GfxLight *light;
     float fade;
     GfxDrawSurfListInfo info;
     GfxViewport viewport;
     GfxImage *image;
     GfxRenderTargetId renderTargetId;
     float pixelAdjust[4];
     int clearScreen;
     GfxMeshData *clearMesh;
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
 };
 struct GfxQuadMeshData // sizeof=0x30
 {                                       // ...
     float x;
     float y;
     float width;
     float height;
     GfxMeshData meshData;               // ...
 };
 struct FxCodeMeshData // sizeof=0x10
 {                                       // ...
     unsigned int triCount;
     unsigned __int16 *indices;
     unsigned __int16 argOffset;
     unsigned __int16 argCount;
     unsigned int pad;
 };
 struct GfxScaledPlacement // sizeof=0x20
 {                                       // ...
     GfxPlacement base;                  // ...
     float scale;                        // ...
 };
 struct GfxParticleCloud // sizeof=0x40
 {                                       // ...
     GfxScaledPlacement placement;
     float endpos[3];
     GfxColor color;
     float radius[2];
     unsigned int pad[2];
 };
 union PackedLightingCoords // sizeof=0x4
 {                                       // ...
     unsigned int packed;
     unsigned __int8 array[4];
 };
 struct GfxSModelCachedVertex // sizeof=0x20
 {                                       // ...
     float xyz[3];
     GfxColor color;
     PackedTexCoords texCoord;
     PackedUnitVec normal;
     PackedUnitVec tangent;
     PackedLightingCoords baseLighting;
 };
 struct GfxModelLightingPatch // sizeof=0x28
 {                                       // ...
     unsigned __int16 modelLightingIndex;
     unsigned __int8 primaryLightWeight;
     unsigned __int8 colorsCount;
     unsigned __int8 groundLighting[4];
     unsigned __int16 colorsWeight[8];
     unsigned __int16 colorsIndex[8];
 };
 struct GfxBackEndPrimitiveData // sizeof=0x4
 {                                       // ...
     int hasSunDirChanged;
 };
 struct GfxEntity // sizeof=0x8
 {                                       // ...
     unsigned int renderFxFlags;
     float materialTime;
 };
 struct FxMarkMeshData // sizeof=0x10
 {                                       // ...
     unsigned int triCount;
     unsigned __int16 *indices;
     unsigned __int16 modelIndex;
     unsigned __int8 modelTypeAndSurf;
     unsigned __int8 pad0;
     unsigned int pad1;
 };
 struct GfxFog // sizeof=0x14
 {                                       // ...
     int startTime;                      // ...
     int finishTime;                     // ...
     GfxColor color;                     // ...
     float fogStart;                     // ...
     float density;                      // ...
 };
 struct GfxCmdHeader // sizeof=0x4
 {                                       // ...
     unsigned __int16 id;
     unsigned __int16 byteCount;
 };
 struct GfxCmdArray // sizeof=0x10
 {                                       // ...
     unsigned __int8 *cmds;              // ...
     int usedTotal;
     int usedCritical;
     GfxCmdHeader *lastCmd;
 };
 const struct GfxViewInfo // sizeof=0x67B0
 {                                       // ...
     GfxViewParms viewParms;
     GfxSceneDef sceneDef;
     GfxViewport sceneViewport;
     GfxViewport displayViewport;
     GfxViewport scissorViewport;
     ShadowType dynamicShadowType;
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     ShadowCookieList shadowCookieList;
     int localClientNum;
     int isRenderingFullScreen;
     bool needsFloatZ;
     // padding byte
     // padding byte
     // padding byte
     GfxLight shadowableLights[255];
     unsigned int shadowableLightCount;
     PointLightPartition pointLightPartitions[4];
     GfxMeshData pointLightMeshData[4];
     int pointLightCount;
     unsigned int emissiveSpotLightIndex;
     GfxLight emissiveSpotLight;
     int emissiveSpotDrawSurfCount;
     GfxDrawSurf *emissiveSpotDrawSurfs;
     unsigned int emissiveSpotLightCount;
     float blurRadius;
     float frustumPlanes[4][4];
     GfxDepthOfField dof;
     GfxFilm film;
     GfxGlow glow;
     const void *cmds;
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     GfxSunShadow sunShadow;
     unsigned int spotShadowCount;
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     GfxSpotShadow spotShadows[4];
     GfxQuadMeshData *fullSceneViewMesh;
     GfxDrawSurfListInfo litInfo;
     GfxDrawSurfListInfo decalInfo;
     GfxDrawSurfListInfo emissiveInfo;
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     GfxCmdBufInput input;
 };
 struct GfxDebugPoly // sizeof=0x18
 {
     float color[4];
     int firstVert;
     int vertCount;
 };
 struct GfxDebugPlume // sizeof=0x28
 {
     float origin[3];
     float color[4];
     int score;
     int startTime;
     int duration;
 };
 struct DebugGlobals // sizeof=0x54
 {                                       // ...
     float (*verts)[3];
     int vertCount;
     int vertLimit;
     GfxDebugPoly *polys;
     int polyCount;
     int polyLimit;
     trDebugString_t *strings;
     int stringCount;
     int stringLimit;
     trDebugString_t *externStrings;
     int externStringCount;
     int externMaxStringCount;
     trDebugLine_t *lines;
     int lineCount;
     int lineLimit;
     trDebugLine_t *externLines;
     int externLineCount;
     int externMaxLineCount;
     GfxDebugPlume *plumes;              // ...
     int plumeCount;                     // ...
     int plumeLimit;                     // ...
 };
 const struct __declspec(align(16)) GfxBackEndData // sizeof=0x11E780
 {                                       // ...
     unsigned __int8 surfsBuffer[131072];
     FxCodeMeshData codeMeshes[2048];
     unsigned int primDrawSurfsBuf[65536]; // ...
     GfxViewParms viewParms[28];
     unsigned __int8 primaryLightTechType[13][256];
     float codeMeshArgs[256][4];
     GfxParticleCloud clouds[256];
     GfxDrawSurf drawSurfs[32768];
     GfxMeshData codeMesh;
     GfxSModelCachedVertex smcPatchVerts[8192];
     unsigned __int16 smcPatchList[256];
     unsigned int smcPatchCount;
     unsigned int smcPatchVertsUsed;
     GfxModelLightingPatch modelLightingPatchList[4096];
     volatile int modelLightingPatchCount;
     GfxBackEndPrimitiveData prim;
     unsigned int shadowableLightHasShadowMap[8];
     unsigned int frameCount;
     int drawSurfCount;
     volatile int surfPos;
     volatile int gfxEntCount;
     GfxEntity gfxEnts[128];
     volatile int cloudCount;
     volatile int codeMeshCount;
     volatile int codeMeshArgsCount;
     volatile int markMeshCount;
     FxMarkMeshData markMeshes[1536];
     GfxMeshData markMesh;
     GfxVertexBufferState *skinnedCacheVb;
     IDirect3DQuery9 *endFence;
     unsigned __int8 *tempSkinBuf;
     volatile int tempSkinPos;
     IDirect3DIndexBuffer9 *preTessIb;
     int viewParmCount;
     GfxFog fogSettings;
     GfxCmdArray *commands;              // ...
     unsigned int viewInfoIndex;
     unsigned int viewInfoCount;
     GfxViewInfo *viewInfo;
     const void *cmds;
     GfxLight sunLight;
     int hasApproxSunDirChanged;
     volatile int primDrawSurfPos;
     unsigned int *staticModelLit;
     DebugGlobals debugGlobals;
     unsigned int drawType;
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
 };
 struct __declspec(align(8)) GfxCmdBufInput // sizeof=0x430
 {                                       // ...
     float consts[58][4];
     const GfxImage *codeImages[27];     // ...
     unsigned __int8 codeImageSamplerStates[27]; // ...
     // padding byte
     const GfxBackEndData *data;         // ...
     // padding byte
     // padding byte
     // padding byte
     // padding byte
 };
 struct GfxMetrics // sizeof=0x28
 {                                       // ...
     unsigned __int16 cubemapShotRes;    // ...
     unsigned __int16 cubemapShotPixelBorder; // ...
     unsigned __int16 feedbackWidth;
     unsigned __int16 feedbackHeight;
     bool hasAnisotropicMinFilter;       // ...
     bool hasAnisotropicMagFilter;       // ...
     // padding byte
     // padding byte
     int maxAnisotropy;                  // ...
     int maxClipPlanes;                  // ...
     bool hasHardwareShadowmap;          // ...
     // padding byte
     // padding byte
     // padding byte
     _D3DFORMAT shadowmapFormatPrimary;  // ...
     _D3DFORMAT shadowmapFormatSecondary; // ...
     MaterialTechniqueType shadowmapBuildTechType; // ...
     unsigned __int8 shadowmapSamplerState; // ...
     bool slopeScaleDepthBias;           // ...
     bool canMipCubemaps;                // ...
     bool hasTransparencyMsaa;           // ...
 };
 struct GfxCodeMatrices // sizeof=0x800
 {                                       // ...
     GfxMatrix matrix[32];
 };
 struct __declspec(align(16)) GfxCmdBufSourceState // sizeof=0xF00
 {                                       // ...
     GfxCodeMatrices matrices;
     GfxCmdBufInput input;               // ...
     GfxViewParms viewParms;             // ...
     GfxMatrix shadowLookupMatrix;
     unsigned __int16 constVersions[90];
     unsigned __int16 matrixVersions[8];
     float eyeOffset[4];                 // ...
     unsigned int shadowableLightForShadowLookupMatrix;
     const GfxScaledPlacement *objectPlacement;
     const GfxViewParms *viewParms3D;    // ...
     unsigned int depthHackFlags;
     GfxScaledPlacement skinnedPlacement;
     int cameraView;
     GfxViewMode viewMode;               // ...
     GfxSceneDef sceneDef;               // ...
     GfxViewport sceneViewport;          // ...
     float materialTime;
     GfxViewportBehavior viewportBehavior; // ...
     int renderTargetWidth;              // ...
     int renderTargetHeight;             // ...
     bool viewportIsDirty;               // ...
     // padding byte
     // padding byte
     // padding byte
     unsigned int shadowableLightIndex;
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
 };
 struct GfxCmdBufPrimState::<unnamed_type_streams> // sizeof=0xC
 {                                       // ...
     unsigned int stride;                // ...
     IDirect3DVertexBuffer9 *vb;         // ...
     unsigned int offset;                // ...
 };
 struct GfxCmdBufPrimState // sizeof=0x28
 {                                       // ...
     IDirect3DDevice9 *device;           // ...
     IDirect3DIndexBuffer9 *indexBuffer; // ...
     MaterialVertexDeclType vertDeclType; // ...
     GfxCmdBufPrimState::<unnamed_type_streams> streams[2]; // ...
     IDirect3DVertexDeclaration9 *vertexDecl; // ...
 };
 struct GfxCmdBufState // sizeof=0xA10
 {                                       // ...
     unsigned __int8 refSamplerState[16];
     unsigned int samplerState[16];
     const GfxTexture *samplerTexture[16];
     GfxCmdBufPrimState prim;            // ...
     const Material *material;           // ...
     MaterialTechniqueType techType;     // ...
     const MaterialTechnique *technique; // ...
     const MaterialPass *pass;
     unsigned int passIndex;
     GfxDepthRangeType depthRangeType;
     float depthRangeNear;
     float depthRangeFar;
     unsigned __int64 vertexShaderConstState[32]; // ...
     unsigned __int64 pixelShaderConstState[256]; // ...
     unsigned __int8 alphaRef;           // ...
     // padding byte
     // padding byte
     // padding byte
     unsigned int refStateBits[2];
     unsigned int activeStateBits[2];    // ...
     const MaterialPixelShader *pixelShader; // ...
     const MaterialVertexShader *vertexShader; // ...
     GfxViewport viewport;
     GfxRenderTargetId renderTargetId;   // ...
     const Material *origMaterial;       // ...
     MaterialTechniqueType origTechType; // ...
 };
 struct GfxCmdBufContext // sizeof=0x8
 {                                       // ...
     GfxCmdBufSourceState *source;       // ...
     GfxCmdBufState *state;              // ...
 };
 struct GfxWindowTarget // sizeof=0x10
 {                                       // ...
     HWND__ *hwnd;                       // ...
     IDirect3DSwapChain9 *swapChain;     // ...
     int width;                          // ...
     int height;                         // ...
 };
 struct mnode_t // sizeof=0x4
 {
     unsigned __int16 cellIndex;
     unsigned __int16 rightChildOffset;
 };
 struct __declspec(align(8)) DxGlobals // sizeof=0x2CE0
 {                                       // ...
     HINSTANCE__ *hinst;
     IDirect3D9 *d3d9;                   // ...
     IDirect3DDevice9 *device;           // ...
     unsigned int adapterIndex;          // ...
     bool adapterNativeIsValid;          // ...
     // padding byte
     // padding byte
     // padding byte
     int adapterNativeWidth;             // ...
     int adapterNativeHeight;            // ...
     int adapterFullscreenWidth;         // ...
     int adapterFullscreenHeight;        // ...
     _D3DFORMAT depthStencilFormat;      // ...
     unsigned int displayModeCount;      // ...
     _D3DDISPLAYMODE displayModes[256];  // ...
     const char *resolutionNameTable[257]; // ...
     const char *refreshRateNameTable[257]; // ...
     char modeText[5120];                // ...
     IDirect3DQuery9 *fencePool[8];      // ...
     unsigned int nextFence;             // ...
     int gpuSync;                        // ...
     _D3DMULTISAMPLE_TYPE multiSampleType; // ...
     unsigned int multiSampleQuality;    // ...
     int sunSpriteSamples;               // ...
     IDirect3DSurface9 *singleSampleDepthStencilSurface; // ...
     bool deviceLost;                    // ...
     bool inScene;                       // ...
     // padding byte
     // padding byte
     int targetWindowIndex;              // ...
     int windowCount;                    // ...
     GfxWindowTarget windows[1];         // ...
     int flushGpuQueryCount;             // ...
     IDirect3DQuery9 *flushGpuQuery;     // ...
     unsigned __int64 gpuSyncDelay;      // ...
     unsigned __int64 gpuSyncStart;      // ...
     unsigned __int64 gpuSyncEnd;        // ...
     bool flushGpuQueryIssued;           // ...
     // padding byte
     // padding byte
     // padding byte
     _D3DTEXTUREFILTERTYPE linearNonMippedMinFilter;
     _D3DTEXTUREFILTERTYPE linearNonMippedMagFilter;
     _D3DTEXTUREFILTERTYPE linearMippedMinFilter;
     _D3DTEXTUREFILTERTYPE linearMippedMagFilter;
     _D3DTEXTUREFILTERTYPE anisotropicMinFilter;
     _D3DTEXTUREFILTERTYPE anisotropicMagFilter;
     int linearMippedAnisotropy;
     int anisotropyFor2x;
     int anisotropyFor4x;
     int mipFilterMode;
     unsigned int mipBias;               // ...
     IDirect3DQuery9 *swapFence;         // ...
     // padding byte
     // padding byte
     // padding byte
     // padding byte
 };
 struct FxBeam // sizeof=0x34
 {                                       // ...
     float begin[3];                     // ...
     float end[3];                       // ...
     GfxColor beginColor;                // ...
     GfxColor endColor;                  // ...
     float beginRadius;                  // ...
     float endRadius;                    // ...
     Material *material;                 // ...
     int segmentCount;                   // ...
     float wiggleDist;                   // ...
 };
 struct FxBeamInfo // sizeof=0x1384
 {                                       // ...
     FxBeam beams[96];
     int beamCount;                      // ...
 };
 struct FxPostLight // sizeof=0x24
 {                                       // ...
     float begin[3];                     // ...
     float end[3];                       // ...
     float radius;                       // ...
     GfxColor color;                     // ...
     Material *material;                 // ...
 };
 struct FxPostLightInfo // sizeof=0xD84
 {                                       // ...
     FxPostLight postLights[96];
     int postLightCount;                 // ...
 };
 struct FxGenerateVertsCmd // sizeof=0x44
 {                                       // ...
     FxSystem *system;
     FxBeamInfo *beamInfo;
     FxPostLightInfo *postLightInfo;
     FxSpriteInfo *spriteInfo;
     int localClientNum;
     float vieworg[3];
     float viewaxis[3][3];
 };
 struct __declspec(align(4)) FxInsertSortElem // sizeof=0x14
 {                                       // ...
     int defSortOrder;                   // ...
     float distToCamSq;
     int msecBegin;
     int defIndex;
     unsigned __int8 elemType;
     // padding byte
     // padding byte
     // padding byte
 };
 struct FxProfileEntry // sizeof=0x1C
 {                                       // ...
     const FxEffectDef *effectDef;
     int effectCount;
     int activeElemCount;
     int pendingElemCount;
     int trailCount;
     int activeTrailElemCount;
     int pendingTrailElemCount;
 };
 struct FxMarkTri // sizeof=0xC
 {                                       // ...
     unsigned __int16 indices[3];        // ...
     GfxMarkContext context;             // ...
 };
 struct __cppobj std::pair<FxMarkTri *,FxMarkTri *> // sizeof=0x8
 {                                       // ...
     FxMarkTri *first;                   // ...
     FxMarkTri *second;                  // ...
 };
 struct __declspec(align(4)) MarkInfoCollidedBModel // sizeof=0xC
 {                                       // ...
     GfxBrushModel *brushModel;
     cpose_t *pose;
     unsigned __int16 entnum;
     // padding byte
     // padding byte
 };
 struct __declspec(align(4)) MarkInfoCollidedDObj // sizeof=0xC
 {                                       // ...
     DObj_s *dObj;
     cpose_t *pose;
     unsigned __int16 entnum;
     // padding byte
     // padding byte
 };
 struct MarkGenContext // sizeof=0x10
 {
     int localClientNum;
     Material *material;
     float radius;
     const unsigned __int8 *nativeColor;
 };
 struct MarkInfo // sizeof=0x448
 {                                       // ...
     float origin[3];
     float localOrigin[3];
     float localTexCoordAxis[3];
     float axis[3][3];
     float radius;
     Material *material;
     int maxTris;
     FxMarkTri *tris;
     int maxPoints;
     FxMarkPoint *points;
     float mins[3];
     float maxs[3];
     float planes[6][4];
     float viewOffset[3];
     bool markHasLightmap;
     bool markHasReflection;
     // padding byte
     // padding byte
     MarkFragmentsAgainstEnum markAgainst;
     unsigned __int16 smodelsCollided[32];
     int smodelCollidedCount;
     MarkInfoCollidedDObj sceneDObjsCollided[32];
     int sceneDObjCollidedCount;
     MarkInfoCollidedBModel sceneBModelsCollided[32];
     int sceneBModelCollidedCount;
     int usedTriCount;
     int usedPointCount;
     void (__cdecl *callback)(void *, int, FxMarkTri *, int, FxMarkPoint *, const float *, const float *);
     void *callbackContext;
 };
 struct FxElemPreVisualState // sizeof=0x1C
 {                                       // ...
     float sampleLerp;                   // ...
     float sampleLerpInv;                // ...
     const FxElemDef *elemDef;
     const FxEffect *effect;
     const FxElemVisStateSample *refState; // ...
     int randomSeed;
     unsigned int distanceFade;
 };
 struct FxActiveMarkSurf // sizeof=0x14
 {                                       // ...
     Material *material;
     GfxMarkContext context;
     // padding byte
     // padding byte
     int indexCount;
     unsigned __int16 *indices;
 };
 struct FxMarkDObjUpdateContext // sizeof=0x108
 {                                       // ...
     XModel *models[32];
     const char *modelParentBones[32];
     int modelCount;
     bool isBrush;
     // padding byte
     unsigned __int16 brushIndex;
 };
 struct FxEditorElemAtlas // sizeof=0x1C
 {                                       // ...
     int behavior;
     int index;
     int fps;
     int loopCount;
     int colIndexBits;
     int rowIndexBits;
     int entryCount;
 };
 struct FxEditorTrailDef // sizeof=0x608
 {                                       // ...
     FxTrailVertex verts[64];
     int vertCount;
     unsigned __int16 inds[128];
     int indCount;
 };
 union $6DCA2FC3F9FD742A3C1907AE7E70399A // sizeof=0x80
 {                                       // ...
     FxElemVisuals visuals[32];
     FxElemMarkVisuals markVisuals[16];
 };
 struct FxEditorElemDef // sizeof=0x858
 {                                       // ...
     char name[48];
     int editorFlags;
     int flags;
     FxFloatRange spawnRange;
     FxFloatRange fadeInRange;
     FxFloatRange fadeOutRange;
     float spawnFrustumCullRadius;
     FxSpawnDefLooping spawnLooping;
     FxSpawnDefOneShot spawnOneShot;
     FxIntRange spawnDelayMsec;
     FxIntRange lifeSpanMsec;
     FxFloatRange spawnOrigin[3];
     FxFloatRange spawnOffsetRadius;
     FxFloatRange spawnOffsetHeight;
     FxFloatRange spawnAngles[3];
     FxFloatRange angularVelocity[3];
     FxFloatRange initialRotation;
     FxFloatRange gravity;
     FxFloatRange elasticity;
     FxEditorElemAtlas atlas;
     float velScale[2][3];
     const FxCurve *velShape[2][3][2];
     float rotationScale;
     const FxCurve *rotationShape[2];
     float sizeScale[2];
     const FxCurve *sizeShape[2][2];
     float scaleScale;
     const FxCurve *scaleShape[2];
     const FxCurve *color[2];
     const FxCurve *alpha[2];
     float lightingFrac;
     float collOffset[3];
     float collRadius;
     const FxEffectDef *effectOnImpact;
     const FxEffectDef *effectOnDeath;
     int sortOrder;
     const FxEffectDef *emission;
     FxFloatRange emitDist;
     FxFloatRange emitDistVariance;
     unsigned __int8 elemType;
     // padding byte
     // padding byte
     // padding byte
     int visualCount;
     $6DCA2FC3F9FD742A3C1907AE7E70399A ___u41;
     int trailSplitDist;
     int trailRepeatDist;
     float trailScrollTime;
     FxEditorTrailDef trailDef;
 };
 struct FxElemField // sizeof=0x8
 {                                       // ...
     const char *keyName;                // ...
     bool (__cdecl *handler)(const char **, FxEditorElemDef *); // ...
 };
 struct FxFlagDef // sizeof=0x10
 {
     const char *name;
     int flagType;
     int mask;
     int value;
 };
 struct $5E78DEAD8FFD2AA25C77996D083B001E // sizeof=0x808
 {                                       // ...
     int effectDefCount;
     const FxEffectDef *effectDefs[512]; // ...
     const FxEffectDef *defaultEffect;   // ...
 };
 struct FxEditorEffectDef // sizeof=0x10B44
 {                                       // ...
     char name[64];
     int elemCount;
     FxEditorElemDef elems[32];
 };
 struct FxFlagOutputSet // sizeof=0xC
 {                                       // ...
     int *flags[3];                      // ...
 };
 union FxGraph3D::<unnamed_type_u> // sizeof=0xC
 {                                       // ...
     float constantValue[3];
     float (*sampleValue)[3];
 };
 struct FxGraph3D // sizeof=0x10
 {
     int intervalCount;
     FxGraph3D::<unnamed_type_u> u;
 };
 union FxGraph1D::<unnamed_type_u> // sizeof=0x4
 {                                       // ...
     float constantValue;
     float *sampleValue;
 };
 struct FxGraph1D // sizeof=0x8
 {
     int intervalCount;
     FxGraph1D::<unnamed_type_u> u;
 };
 struct FxDrawState // sizeof=0xA8
 {                                       // ...
     const FxSystem *system;             // ...
     const FxEffect *effect;             // ...
     const FxElem *elem;
     const FxElemDef *elemDef;
     orientation_t orient;
     const FxCamera *camera;
     int randomSeed;
     float msecLifeSpan;
     float msecElapsed;
     float normTimeUpdateEnd;
     float posWorld[3];
     float velDirWorld[3];
     FxElemVisualState visState;
     FxElemPreVisualState preVisState;
     float physicsLerpFrac;
     int msecDraw;                       // ...
 };
 struct FxTrailSegmentDrawState // sizeof=0x3C
 {                                       // ...
     FxTrailDef *trailDef;
     float posWorld[3];                  // ...
     float basis[2][3];                  // ...
     float rotation;
     float size[2];
     float uCoord;                       // ...
     unsigned __int8 color[4];           // ...
 };
 struct FxEffectDefTableEntry // sizeof=0x8
 {                                       // ...
     unsigned int key;
     const FxEffectDef *effectDef;
 };
 struct FxEffectDefTable // sizeof=0x2004
 {                                       // ...
     int count;
     FxEffectDefTableEntry entries[1024];
 };
 struct __declspec(align(2)) BreakablePiece // sizeof=0xC
 {                                       // ...
     const XModel *model;                // ...
     int physObjId;                      // ...
     unsigned __int16 lightingHandle;    // ...
     bool active;                        // ...
     // padding byte
 };
 struct DynEntityProps // sizeof=0x8
 {                                       // ...
     const char *name;                   // ...
     bool clientOnly;                    // ...
     bool clipMove;
     bool usePhysics;
     bool destroyable;
 };
 struct DynEntityCreateParams // sizeof=0x1C0
 {                                       // ...
     char typeName[64];
     char modelName[64];                 // ...
     char physModelName[64];             // ...
     char destroyFxFile[64];             // ...
     char destroyPiecesFile[64];         // ...
     char physPresetFile[64];            // ...
     float origin[3];                    // ...
     float angles[3];                    // ...
     int health;                         // ...
     float centerOfMass[3];              // ...
     float momentsOfInertia[3];          // ...
     float productsOfInertia[3];         // ...
 };
 union DynEntityCollTree::<unnamed_type_u> // sizeof=0x2
 {                                       // ...
     unsigned __int16 parent;
     unsigned __int16 nextFree;
 };
 struct DynEntityCollTree // sizeof=0xC
 {                                       // ...
     float dist;
     unsigned __int16 axis;
     DynEntityCollTree::<unnamed_type_u> u;
     unsigned __int16 child[2];
 };
 struct __declspec(align(4)) DynEntityCollSector // sizeof=0x14
 {                                       // ...
     DynEntityCollTree tree;
     int contents;
     unsigned __int16 entListHead;
     // padding byte
     // padding byte
 };
 struct DynEntityCollWorld // sizeof=0x501C
 {                                       // ...
     float mins[3];
     float maxs[3];
     unsigned __int16 freeHead;
     // padding byte
     // padding byte
     DynEntityCollSector sectors[1024];
 };
 struct __declspec(align(4)) DynEntSortStruct // sizeof=0x8
 {
     float distSq;
     unsigned __int16 id;
     // padding byte
     // padding byte
 };
 struct __cppobj std::pair<DynEntSortStruct *,DynEntSortStruct *> // sizeof=0x8
 {
     DynEntSortStruct *first;
     DynEntSortStruct *second;
 };
 struct DynEntityAreaParms // sizeof=0x14
 {                                       // ...
     const float *mins;                  // ...
     const float *maxs;                  // ...
     int contentMask;                    // ...
     unsigned __int16 *list;             // ...
     unsigned __int16 maxCount;          // ...
     unsigned __int16 count;             // ...
 };
 struct DevGuiInput // sizeof=0x70
 {                                       // ...
     float mousePos[2];                  // ...
     bool buttonDown[11];                // ...
     bool prevButtonDown[11];            // ...
     // padding byte
     // padding byte
     float scrollScale;                  // ...
     DevGuiInputState digitalStates[2];  // ...
     float digitalAxis[2];               // ...
     float digitalTimes[2];              // ...
     DevGuiInputState analogStates[2];   // ...
     float analogAxis[2];                // ...
     float analogTimes[2];
     __int16 menuScroll[2];              // ...
     float menuScrollTime[2];            // ...
     float digitalSliderTime;            // ...
     float analogSliderTime;             // ...
     float sliderScrollTime;             // ...
     float sliderScrollMaxTimeStep;      // ...
 };
 union DevMenuChild // sizeof=0x4
 {                                       // ...
     const char *command;
     const dvar_s *dvar;
     DevGraph *graph;
     unsigned __int16 menu;
 };
 struct DevMenuItem // sizeof=0x28
 {                                       // ...
     char label[26];                     // ...
     unsigned __int8 childType;          // ...
     unsigned __int8 childMenuMemory;    // ...
     __int16 sortKey;
     unsigned __int16 nextSibling;       // ...
     unsigned __int16 prevSibling;       // ...
     unsigned __int16 parent;            // ...
     DevMenuChild child;                 // ...
 };
 struct devguiGlob_t // sizeof=0x5E10
 {                                       // ...
     DevMenuItem menus[600];             // ...
     DevMenuItem *nextFreeMenu;          // ...
     DevMenuItem topmostMenu;            // ...
     bool bindNextKey;                   // ...
     bool isActive;                      // ...
     bool editingMenuItem;               // ...
     // padding byte
     unsigned __int16 selectedMenu;      // ...
     // padding byte
     // padding byte
     int selRow;                         // ...
     bool editingKnot;                   // ...
     // padding byte
     // padding byte
     // padding byte
     int top;                            // ...
     int bottom;                         // ...
     int left;                           // ...
     int right;                          // ...
     int sliderWidth;                    // ...
 };
 struct ScriptStringList // sizeof=0x8
 {                                       // ...
     int count;
     const char **strings;
 };
 struct XAsset // sizeof=0x8
 {                                       // ...
     XAssetType type;                    // ...
     XAssetHeader header;                // ...
 };
 struct XAssetList // sizeof=0x10
 {                                       // ...
     ScriptStringList stringList;
     int assetCount;
     XAsset *assets;
 };
 struct StreamDelayInfo // sizeof=0x8
 {
     const void *ptr;
     int size;
 };
 struct XBlock // sizeof=0x8
 {                                       // ...
     unsigned __int8 *data;
     unsigned int size;
 };
 struct XZoneMemory // sizeof=0x58
 {                                       // ...
     XBlock blocks[9];
     unsigned __int8 *lockedVertexData;
     unsigned __int8 *lockedIndexData;
     void *vertexBuffer;
     void *indexBuffer;
 };
 struct StreamPosInfo // sizeof=0x8
 {                                       // ...
     unsigned __int8 *pos;               // ...
     unsigned int index;                 // ...
 };
 union XAssetPoolEntry<RawFile> // sizeof=0xC
 {                                       // ...
     RawFile entry;
     XAssetPoolEntry<RawFile> *next;
 };
 struct XAssetPool<RawFile,1024> // sizeof=0x3004
 {                                       // ...
     XAssetPoolEntry<RawFile> *freeHead;
     XAssetPoolEntry<RawFile> entries[1024];
 };
 union XAssetPoolEntry<StringTable> // sizeof=0x10
 {                                       // ...
     StringTable entry;
     XAssetPoolEntry<StringTable> *next;
 };
 struct XAssetPool<StringTable,50> // sizeof=0x324
 {                                       // ...
     XAssetPoolEntry<StringTable> *freeHead;
     XAssetPoolEntry<StringTable> entries[50];
 };
 struct XAssetEntry // sizeof=0x10
 {                                       // ...
     XAsset asset;                       // ...
     unsigned __int8 zoneIndex;
     bool inuse;
     unsigned __int16 nextHash;
     unsigned __int16 nextOverride;
     unsigned __int16 usageFrame;
 };
 union XAssetEntryPoolEntry // sizeof=0x10
 {                                       // ...
     XAssetEntry entry;
     XAssetEntryPoolEntry *next;
 };
 struct __declspec(align(4)) XZone // sizeof=0xA8
 {                                       // ...
     char name[64];                      // ...
     int flags;                          // ...
     int allocType;
     XZoneMemory mem;                    // ...
     int fileSize;                       // ...
     bool modZone;                       // ...
     // padding byte
     // padding byte
     // padding byte
 };
 struct XZoneInfoInternal // sizeof=0x44
 {                                       // ...
     char name[64];
     int flags;                          // ...
 };
 union XAssetPoolEntry<XModelPieces> // sizeof=0xC
 {                                       // ...
     XModelPieces entry;
     XAssetPoolEntry<XModelPieces> *next;
 };
 struct XAssetPool<XModelPieces,64> // sizeof=0x304
 {                                       // ...
     XAssetPoolEntry<XModelPieces> *freeHead;
     XAssetPoolEntry<XModelPieces> entries[64];
 };
 union XAssetPoolEntry<PhysPreset> // sizeof=0x2C
 {                                       // ...
     PhysPreset entry;
     XAssetPoolEntry<PhysPreset> *next;
 };
 struct XAssetPool<PhysPreset,64> // sizeof=0xB04
 {                                       // ...
     XAssetPoolEntry<PhysPreset> *freeHead;
     XAssetPoolEntry<PhysPreset> entries[64];
 };
 union XAssetPoolEntry<XAnimParts> // sizeof=0x58
 {                                       // ...
     XAnimParts entry;
     XAssetPoolEntry<XAnimParts> *next;
 };
 struct XAssetPool<XAnimParts,4096> // sizeof=0x58004
 {                                       // ...
     XAssetPoolEntry<XAnimParts> *freeHead;
     XAssetPoolEntry<XAnimParts> entries[4096]; // ...
 };
 union XAssetPoolEntry<XModel> // sizeof=0xDC
 {                                       // ...
     XModel entry;
     XAssetPoolEntry<XModel> *next;
 };
 struct XAssetPool<XModel,1000> // sizeof=0x35B64
 {                                       // ...
     XAssetPoolEntry<XModel> *freeHead;
     XAssetPoolEntry<XModel> entries[1000];
 };
 union XAssetPoolEntry<Material> // sizeof=0x50
 {                                       // ...
     Material entry;
     XAssetPoolEntry<Material> *next;
 };
 struct XAssetPool<Material,2048> // sizeof=0x28008
 {                                       // ...
     XAssetPoolEntry<Material> *freeHead;
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     XAssetPoolEntry<Material> entries[2048];
 };
 union XAssetPoolEntry<MaterialTechniqueSet> // sizeof=0x94
 {                                       // ...
     MaterialTechniqueSet entry;
     XAssetPoolEntry<MaterialTechniqueSet> *next;
 };
 struct XAssetPool<MaterialTechniqueSet,1024> // sizeof=0x25004
 {                                       // ...
     XAssetPoolEntry<MaterialTechniqueSet> *freeHead;
     XAssetPoolEntry<MaterialTechniqueSet> entries[1024];
 };
 union XAssetPoolEntry<GfxImage> // sizeof=0x24
 {                                       // ...
     GfxImage entry;
     XAssetPoolEntry<GfxImage> *next;
 };
 struct XAssetPool<GfxImage,2400> // sizeof=0x15184
 {                                       // ...
     XAssetPoolEntry<GfxImage> *freeHead;
     XAssetPoolEntry<GfxImage> entries[2400];
 };
 union XAssetPoolEntry<snd_alias_list_t> // sizeof=0xC
 {                                       // ...
     snd_alias_list_t entry;
     XAssetPoolEntry<snd_alias_list_t> *next;
 };
 struct XAssetPool<snd_alias_list_t,16000> // sizeof=0x2EE04
 {                                       // ...
     XAssetPoolEntry<snd_alias_list_t> *freeHead;
     XAssetPoolEntry<snd_alias_list_t> entries[16000];
 };
 union XAssetPoolEntry<SndCurve> // sizeof=0x48
 {                                       // ...
     SndCurve entry;
     XAssetPoolEntry<SndCurve> *next;
 };
 struct XAssetPool<SndCurve,64> // sizeof=0x1204
 {                                       // ...
     XAssetPoolEntry<SndCurve> *freeHead;
     XAssetPoolEntry<SndCurve> entries[64];
 };
 union XAssetPoolEntry<LoadedSound> // sizeof=0x2C
 {                                       // ...
     LoadedSound entry;
     XAssetPoolEntry<LoadedSound> *next;
 };
 struct XAssetPool<LoadedSound,1200> // sizeof=0xCE44
 {                                       // ...
     XAssetPoolEntry<LoadedSound> *freeHead;
     XAssetPoolEntry<LoadedSound> entries[1200];
 };
 union XAssetPoolEntry<MapEnts> // sizeof=0xC
 {                                       // ...
     MapEnts entry;
     XAssetPoolEntry<MapEnts> *next;
 };
 struct XAssetPool<MapEnts,2> // sizeof=0x1C
 {                                       // ...
     XAssetPoolEntry<MapEnts> *freeHead;
     XAssetPoolEntry<MapEnts> entries[2];
 };
 union XAssetPoolEntry<GfxLightDef> // sizeof=0x10
 {                                       // ...
     GfxLightDef entry;
     XAssetPoolEntry<GfxLightDef> *next;
 };
 struct XAssetPool<GfxLightDef,32> // sizeof=0x204
 {                                       // ...
     XAssetPoolEntry<GfxLightDef> *freeHead;
     XAssetPoolEntry<GfxLightDef> entries[32];
 };
 union XAssetPoolEntry<Font_s> // sizeof=0x18
 {                                       // ...
     Font_s entry;
     XAssetPoolEntry<Font_s> *next;
 };
 struct XAssetPool<Font_s,16> // sizeof=0x184
 {                                       // ...
     XAssetPoolEntry<Font_s> *freeHead;
     XAssetPoolEntry<Font_s> entries[16];
 };
 struct DBReorderAssetEntry // sizeof=0x10
 {                                       // ...
     unsigned int sequence;
     int type;
     const char *typeString;
     const char *assetName;
 };
 struct $CDDDFFEA12416D380697EB22F7449911 // sizeof=0x8011C
 {                                       // ...
     FastCriticalSection critSect;
     char zoneName[256];                 // ...
     bool alreadyFinished;               // ...
     bool loadedSound;                   // ...
     bool loadedLocalization;            // ...
     // padding byte
     DBReorderAssetEntry *lastEntry;     // ...
     unsigned int sequence;              // ...
     unsigned int sequenceForIncludes;   // ...
     unsigned int entryCount;            // ...
     DBReorderAssetEntry entries[32768]; // ...
 };
 union XAssetPoolEntry<MenuList> // sizeof=0xC
 {                                       // ...
     MenuList entry;
     XAssetPoolEntry<MenuList> *next;
 };
 struct XAssetPool<MenuList,128> // sizeof=0x604
 {                                       // ...
     XAssetPoolEntry<MenuList> *freeHead;
     XAssetPoolEntry<MenuList> entries[128];
 };
 union XAssetPoolEntry<menuDef_t> // sizeof=0x11C
 {                                       // ...
     menuDef_t entry;
     XAssetPoolEntry<menuDef_t> *next;
 };
 struct XAssetPool<menuDef_t,640> // sizeof=0x2C604
 {                                       // ...
     XAssetPoolEntry<menuDef_t> *freeHead;
     XAssetPoolEntry<menuDef_t> entries[640];
 };
 union XAssetPoolEntry<LocalizeEntry> // sizeof=0x8
 {                                       // ...
     LocalizeEntry entry;
     XAssetPoolEntry<LocalizeEntry> *next;
 };
 struct XAssetPool<LocalizeEntry,6144> // sizeof=0xC004
 {                                       // ...
     XAssetPoolEntry<LocalizeEntry> *freeHead;
     XAssetPoolEntry<LocalizeEntry> entries[6144];
 };
 union XAssetPoolEntry<WeaponDef> // sizeof=0x878
 {                                       // ...
     WeaponDef entry;
     XAssetPoolEntry<WeaponDef> *next;
 };
 struct XAssetPool<WeaponDef,128> // sizeof=0x43C04
 {                                       // ...
     XAssetPoolEntry<WeaponDef> *freeHead;
     XAssetPoolEntry<WeaponDef> entries[128];
 };
 union XAssetPoolEntry<FxEffectDef> // sizeof=0x20
 {                                       // ...
     FxEffectDef entry;
     XAssetPoolEntry<FxEffectDef> *next;
 };
 struct XAssetPool<FxEffectDef,400> // sizeof=0x3204
 {                                       // ...
     XAssetPoolEntry<FxEffectDef> *freeHead;
     XAssetPoolEntry<FxEffectDef> entries[400];
 };
 union XAssetPoolEntry<FxImpactTable> // sizeof=0x8
 {                                       // ...
     FxImpactTable entry;
     XAssetPoolEntry<FxImpactTable> *next;
 };
 struct XAssetPool<FxImpactTable,4> // sizeof=0x24
 {                                       // ...
     XAssetPoolEntry<FxImpactTable> *freeHead;
     XAssetPoolEntry<FxImpactTable> entries[4];
 };
 struct XAssetPool<menuDef_t,1> // sizeof=0x120
 {
     XAssetPoolEntry<menuDef_t> *freeHead;
     XAssetPoolEntry<menuDef_t> entries[1];
 };
 struct XAssetPool<FxEffectDef,1> // sizeof=0x24
 {
     XAssetPoolEntry<FxEffectDef> *freeHead;
     XAssetPoolEntry<FxEffectDef> entries[1];
 };
 union XAssetSize // sizeof=0x878
 {                                       // ...
     XAnimParts parts;
     XModel model;
     Material material;
     MaterialPixelShader pixelShader;
     MaterialVertexShader vertexShader;
     MaterialTechniqueSet techniqueSet;
     GfxImage image;
     snd_alias_list_t sound;
     SndCurve sndCurve;
     clipMap_t clipMap;
     ComWorld comWorld;
     MapEnts mapEnts;
     GfxWorld gfxWorld;
     GfxLightDef lightDef;
     Font_s font;
     MenuList menuList;
     menuDef_t menu;
     LocalizeEntry localize;
     WeaponDef weapon;
     SndDriverGlobals sndDriverGlobals;
     const FxEffectDef *fx;
     FxImpactTable impactFx;
     RawFile rawfile;
     StringTable stringTable;
 };
 struct __cppobj std::pair<DBReorderAssetEntry *,DBReorderAssetEntry *> // sizeof=0x8
 {
     DBReorderAssetEntry *first;
     DBReorderAssetEntry *second;
 };
 struct XAssetPool<FxImpactTable,1> // sizeof=0xC
 {
     XAssetPoolEntry<FxImpactTable> *freeHead;
     XAssetPoolEntry<FxImpactTable> entries[1];
 };
 struct XAssetPool<XModel,1> // sizeof=0xE0
 {
     XAssetPoolEntry<XModel> *freeHead;
     XAssetPoolEntry<XModel> entries[1];
 };
 struct XAssetPool<SndCurve,1> // sizeof=0x4C
 {
     XAssetPoolEntry<SndCurve> *freeHead;
     XAssetPoolEntry<SndCurve> entries[1];
 };
 struct XAssetPool<MenuList,1> // sizeof=0x10
 {
     XAssetPoolEntry<MenuList> *freeHead;
     XAssetPoolEntry<MenuList> entries[1];
 };
 struct XAssetPool<StringTable,1> // sizeof=0x14
 {
     XAssetPoolEntry<StringTable> *freeHead;
     XAssetPoolEntry<StringTable> entries[1];
 };
 struct XAssetPool<Font_s,1> // sizeof=0x1C
 {
     XAssetPoolEntry<Font_s> *freeHead;
     XAssetPoolEntry<Font_s> entries[1];
 };
 struct XAssetPool<LocalizeEntry,1> // sizeof=0xC
 {
     XAssetPoolEntry<LocalizeEntry> *freeHead;
     XAssetPoolEntry<LocalizeEntry> entries[1];
 };
 struct XAssetPool<WeaponDef,1> // sizeof=0x87C
 {
     XAssetPoolEntry<WeaponDef> *freeHead;
     XAssetPoolEntry<WeaponDef> entries[1];
 };
 struct XAssetPool<MaterialTechniqueSet,1> // sizeof=0x98
 {
     XAssetPoolEntry<MaterialTechniqueSet> *freeHead;
     XAssetPoolEntry<MaterialTechniqueSet> entries[1];
 };
 struct XAssetPool<RawFile,1> // sizeof=0x10
 {
     XAssetPoolEntry<RawFile> *freeHead;
     XAssetPoolEntry<RawFile> entries[1];
 };
 struct XAssetPool<GfxLightDef,1> // sizeof=0x14
 {
     XAssetPoolEntry<GfxLightDef> *freeHead;
     XAssetPoolEntry<GfxLightDef> entries[1];
 };
 struct XAssetPool<snd_alias_list_t,1> // sizeof=0x10
 {
     XAssetPoolEntry<snd_alias_list_t> *freeHead;
     XAssetPoolEntry<snd_alias_list_t> entries[1];
 };
 struct XAssetPool<MapEnts,1> // sizeof=0x10
 {
     XAssetPoolEntry<MapEnts> *freeHead;
     XAssetPoolEntry<MapEnts> entries[1];
 };
 struct XAssetPool<Material,1> // sizeof=0x58
 {
     XAssetPoolEntry<Material> *freeHead;
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     XAssetPoolEntry<Material> entries[1];
 };
 struct XAssetPool<XModelPieces,1> // sizeof=0x10
 {
     XAssetPoolEntry<XModelPieces> *freeHead;
     XAssetPoolEntry<XModelPieces> entries[1];
 };
 struct XAssetPool<PhysPreset,1> // sizeof=0x30
 {
     XAssetPoolEntry<PhysPreset> *freeHead;
     XAssetPoolEntry<PhysPreset> entries[1];
 };
 struct XAssetPool<XAnimParts,1> // sizeof=0x5C
 {
     XAssetPoolEntry<XAnimParts> *freeHead;
     XAssetPoolEntry<XAnimParts> entries[1];
 };
 struct XAssetPool<LoadedSound,1> // sizeof=0x30
 {
     XAssetPoolEntry<LoadedSound> *freeHead;
     XAssetPoolEntry<LoadedSound> entries[1];
 };
 struct XAssetPool<GfxImage,1> // sizeof=0x28
 {
     XAssetPoolEntry<GfxImage> *freeHead;
     XAssetPoolEntry<GfxImage> entries[1];
 };
 struct GfxVertex // sizeof=0x20
 {                                       // ...
     float xyzw[4];
     GfxColor color;                     // ...
     float texCoord[2];                  // ...
     PackedUnitVec normal;               // ...
 };
 struct GfxPosTexVertex // sizeof=0x14
 {                                       // ...
     float xyz[3];
     float texCoord[2];
 };
 struct GfxStreamingAabbTree // sizeof=0x20
 {
     unsigned __int16 firstItem;
     unsigned __int16 itemCount;
     unsigned __int16 firstChild;
     unsigned __int16 childCount;
     float mins[3];
     float maxs[3];
 };
 struct DynEntityServer // sizeof=0x24
 {
     GfxPlacement pose;
     unsigned __int16 flags;
     // padding byte
     // padding byte
     int health;
 };
 struct XModelHighMipBounds // sizeof=0x18
 {
     float mins[3];
     float maxs[3];
 };
 struct DB_LoadData // sizeof=0x68
 {                                       // ...
     void *f;                            // ...
     const char *filename;               // ...
     XZoneMemory *zoneMem;               // ...
     int outstandingReads;               // ...
     _OVERLAPPED overlapped;             // ...
     z_stream_s stream;                  // ...
     unsigned __int8 *compressBufferStart; // ...
     unsigned __int8 *compressBufferEnd; // ...
     void (__cdecl *interrupt)();        // ...
     int allocType;                      // ...
 };
 struct XFile // sizeof=0x2C
 {                                       // ...
     unsigned int size;
     unsigned int externalSize;          // ...
     unsigned int blockSize[9];          // ...
 };
 struct PrintChannel // sizeof=0x21
 {                                       // ...
     char name[32];                      // ...
     bool allowScript;                   // ...
 };
 struct PrintChannelGlob // sizeof=0x21E0
 {                                       // ...
     PrintChannel openChannels[256];     // ...
     unsigned int filters[7][8];         // ...
 };
 struct ping_t // sizeof=0x41C
 {                                       // ...
     netadr_t adr;                       // ...
     int start;                          // ...
     int time;                           // ...
     char info[1024];                    // ...
 };
 struct $03EB187DDD3425F4F7BCEA9E0EB47FBF // sizeof=0x2C
 {                                       // ...
     char password[24];                  // ...
     netadr_t host;                      // ...
 };
 struct serverAddress_t // sizeof=0x6
 {                                       // ...
     unsigned __int8 ip[4];              // ...
     unsigned __int16 port;              // ...
 };
 struct GfxConfiguration // sizeof=0x30
 {                                       // ...
     unsigned int maxClientViews;        // ...
     unsigned int entCount;              // ...
     unsigned int entnumNone;            // ...
     unsigned int entnumOrdinaryEnd;     // ...
     int threadContextCount;             // ...
     int critSectCount;
     const char *codeFastFileName;       // ...
     const char *uiFastFileName;         // ...
     const char *commonFastFileName;     // ...
     const char *localizedCodeFastFileName; // ...
     const char *localizedCommonFastFileName; // ...
     const char *modFastFileName;        // ...
 };
 struct KeyState // sizeof=0xC
 {                                       // ...
     int down;                           // ...
     int repeats;
     const char *binding;                // ...
 };
 struct PlayerKeyState // sizeof=0xD28
 {                                       // ...
     field_t chatField;
     int chat_team;                      // ...
     int overstrikeMode;                 // ...
     int anyKeyDown;                     // ...
     KeyState keys[256];                 // ...
     LocSelInputState locSelInputState;  // ...
 };
 struct keyname_t // sizeof=0x8
 {
     const char *name;
     int keynum;
 };
 struct __declspec(align(4)) kbutton_t // sizeof=0x14
 {                                       // ...
     int down[2];                        // ...
     unsigned int downtime;
     unsigned int msec;
     bool active;                        // ...
     bool wasPressed;
     // padding byte
     // padding byte
 };
 struct AimInput // sizeof=0x30
 {                                       // ...
     float deltaTime;                    // ...
     float pitch;                        // ...
     float pitchAxis;                    // ...
     float pitchMax;                     // ...
     float yaw;                          // ...
     float yawAxis;                      // ...
     float yawMax;                       // ...
     float forwardAxis;                  // ...
     float rightAxis;                    // ...
     int buttons;                        // ...
     int localClientNum;                 // ...
     const playerState_s *ps;            // ...
 };
 struct __declspec(align(4)) AimOutput // sizeof=0x10
 {                                       // ...
     float pitch;                        // ...
     float yaw;                          // ...
     float meleeChargeYaw;               // ...
     unsigned __int8 meleeChargeDist;    // ...
     // padding byte
     // padding byte
     // padding byte
 };
 struct $1629A71A7F425F55F16AD3AC356BC9AE // sizeof=0x248
 {                                       // ...
     bool inited;                        // ...
     // padding byte
     // padding byte
     // padding byte
     int mapDirCount;                    // ...
     char mapDirs[8][64];                // ...
     const char **mapNames[8];           // ...
     const dvar_s *mapEnumDvar[8];       // ...
 };
 struct ConDrawInputGlob // sizeof=0x64
 {                                       // ...
     char autoCompleteChoice[64];        // ...
     int matchIndex;                     // ...
     int matchCount;                     // ...
     const char *inputText;              // ...
     int inputTextLen;                   // ...
     bool hasExactMatch;                 // ...
     bool mayAutoComplete;               // ...
     // padding byte
     // padding byte
     float x;                            // ...
     float y;                            // ...
     float leftX;                        // ...
     float fontHeight;                   // ...
 };
 struct MessageLine // sizeof=0x18
 {                                       // ...
     int messageIndex;
     int textBufPos;
     int textBufSize;
     int typingStartTime;
     int lastTypingSoundTime;
     int flags;
 };
 struct Message // sizeof=0x8
 {                                       // ...
     int startTime;
     int endTime;
 };
 struct MessageWindow // sizeof=0x34
 {                                       // ...
     MessageLine *lines;                 // ...
     Message *messages;
     char *circularTextBuffer;           // ...
     int textBufSize;                    // ...
     int lineCount;                      // ...
     int padding;
     int scrollTime;
     int fadeIn;
     int fadeOut;
     int textBufPos;                     // ...
     int firstLineIndex;                 // ...
     int activeLineCount;                // ...
     int messageIndex;
 };
 struct MessageBuffer // sizeof=0x4858
 {                                       // ...
     char gamemsgText[4][2048];
     MessageWindow gamemsgWindows[4];    // ...
     MessageLine gamemsgLines[4][12];
     Message gamemsgMessages[4][12];
     char miniconText[4096];
     MessageWindow miniconWindow;        // ...
     MessageLine miniconLines[100];
     Message miniconMessages[100];
     char errorText[1024];
     MessageWindow errorWindow;          // ...
     MessageLine errorLines[5];
     Message errorMessages[5];
 };
 struct Console // sizeof=0x14ACC
 {                                       // ...
     int initialized;                    // ...
     MessageWindow consoleWindow;        // ...
     MessageLine consoleLines[1024];     // ...
     Message consoleMessages[1024];      // ...
     char consoleText[32768];            // ...
     char textTempLine[512];             // ...
     unsigned int lineOffset;            // ...
     int displayLineOffset;              // ...
     int prevChannel;                    // ...
     bool outputVisible;                 // ...
     // padding byte
     // padding byte
     // padding byte
     int fontHeight;                     // ...
     int visibleLineCount;               // ...
     int visiblePixelWidth;              // ...
     float screenMin[2];                 // ...
     float screenMax[2];                 // ...
     MessageBuffer messageBuffer[1];     // ...
     float color[4];                     // ...
 };
 struct CgEntCollNode // sizeof=0x14
 {                                       // ...
     unsigned __int16 sector;
     unsigned __int16 nextEntInSector;
     float linkMins[2];
     float linkMaxs[2];
 };
 union CgEntCollTree::<unnamed_type_u> // sizeof=0x2
 {                                       // ...
     unsigned __int16 parent;
     unsigned __int16 nextFree;
 };
 struct CgEntCollTree // sizeof=0xC
 {                                       // ...
     float dist;
     unsigned __int16 axis;
     CgEntCollTree::<unnamed_type_u> u;
     unsigned __int16 child[2];
 };
 struct __declspec(align(4)) CgEntCollSector // sizeof=0x10
 {                                       // ...
     CgEntCollTree tree;
     unsigned __int16 entListHead;
     // padding byte
     // padding byte
 };
 struct localEntity_s // sizeof=0x50
 {                                       // ...
     localEntity_s *prev;
     localEntity_s *next;                // ...
     leType_t leType;
     int endTime;
     trajectory_t pos;
     float color[4];
     float tracerClipDist;
     GfxEntity refEntity;
 };
 struct visField_t // sizeof=0xC
 {                                       // ...
     const char *name;                   // ...
     int offset;
     int fieldType;
 };
 struct TestEffect // sizeof=0x54
 {                                       // ...
     char name[64];
     float pos[3];
     int time;
     int respawnTime;
 };
 struct ClientViewParams // sizeof=0x10
 {                                       // ...
     float x;
     float y;
     float width;
     float height;
 };
 struct __declspec(align(4)) vehicleEffects // sizeof=0x28
 {
     bool active;
     // padding byte
     // padding byte
     // padding byte
     int lastAccessed;
     int entityNum;
     int nextDustFx;
     int nextSmokeFx;
     bool soundPlaying;
     // padding byte
     // padding byte
     // padding byte
     float barrelVelocity;
     float barrelPos;
     int lastBarrelUpdateTime;
     unsigned __int8 tag_engine_left;
     unsigned __int8 tag_engine_right;
     // padding byte
     // padding byte
 };
 struct vehfx_t // sizeof=0x48
 {                                       // ...
     bool tireActive[4];
     float tireGroundPoint[4][3];
     unsigned __int8 tireGroundSurfType[4];
     bool soundEnabled;
     // padding byte
     // padding byte
     // padding byte
     float soundEngineOrigin[3];
 };
 struct transPlayerState_t // sizeof=0x18
 {                                       // ...
     int damageEvent;
     int eventSequence;
     int events[4];
 };
 struct __declspec(align(4)) $59835072FC2CD3936CE4A4C9F556010B // sizeof=0x48
 {                                       // ...
     char name[64];                      // ...
     int index;                          // ...
     bool useMouse;                      // ...
     // padding byte
     // padding byte
     // padding byte
 };
 struct listColumnInfo_t // sizeof=0x10
 {                                       // ...
     listColumnTypes_t type;
     float fWidth;
     const char *pszName;
     int iAlignment;
 };
 struct Image_MemUsage // sizeof=0xC
 {                                       // ...
     int total;                          // ...
     int lightmap;
     int minspec;                        // ...
 };
 struct trStatistics_t // sizeof=0x28
 {                                       // ...
     int c_indexes;                      // ...
     int c_fxIndexes;                    // ...
     int c_viewIndexes;                  // ...
     int c_shadowIndexes;                // ...
     int c_vertexes;
     int c_batches;                      // ...
     float dc;
     Image_MemUsage c_imageUsage;        // ...
 };
 struct cg_hudelem_t // sizeof=0x238
 {                                       // ...
     float x;                            // ...
     float y;
     float width;
     float height;
     char hudElemLabel[256];             // ...
     float labelWidth;                   // ...
     char hudElemText[256];              // ...
     float textWidth;
     Font_s *font;
     float fontScale;
     float fontHeight;
     float color[4];                     // ...
     int timeNow;                        // ...
 };
 struct GfxSkinnedXModelSurfs // sizeof=0x4
 {                                       // ...
     void *firstSurf;
 };
 struct GfxSceneEntityCull // sizeof=0x40
 {                                       // ...
     volatile unsigned int state;
     float mins[3];
     float maxs[3];
     char lods[32];
     GfxSkinnedXModelSurfs skinnedSurfs;
 };
 union GfxSceneEntityInfo // sizeof=0x4
 {                                       // ...
     const cpose_t *pose;
     unsigned __int16 *cachedLightingHandle;
 };
 struct __declspec(align(4)) GfxSceneEntity // sizeof=0x7C
 {                                       // ...
     float lightingOrigin[3];
     GfxScaledPlacement placement;
     GfxSceneEntityCull cull;
     unsigned __int16 gfxEntIndex;
     unsigned __int16 entnum;
     const DObj_s *obj;
     GfxSceneEntityInfo info;
     unsigned __int8 reflectionProbeIndex;
     // padding byte
     // padding byte
     // padding byte
 };
 struct EffectFile // sizeof=0x630
 {                                       // ...
     const char *nonflesh[12][29];       // ...
     const char *flesh[12][4];           // ...
 };
 struct lagometer_t // sizeof=0x608
 {                                       // ...
     int frameSamples[128];              // ...
     int frameCount;                     // ...
     int snapshotFlags[128];             // ...
     int snapshotSamples[128];           // ...
     int snapshotCount;                  // ...
 };
 struct CenterPrint // sizeof=0x408
 {                                       // ...
     int time;                           // ...
     char text[1024];
     int priority;
 };
 struct __declspec(align(4)) OverheadFade // sizeof=0xC
 {                                       // ...
     int lastTime;                       // ...
     int startTime;                      // ...
     bool visible;                       // ...
     // padding byte
     // padding byte
     // padding byte
 };
 struct HudGrenade // sizeof=0x10
 {                                       // ...
     float origin[3];
     Material *material;                 // ...
 };
 struct $B7DFF260598B1DA7F1C881B5EA7A892D // sizeof=0x8
 {
     const char *name;
     int budgetKB;
 };
 const struct $26A77A1ABB1A9087FD9203E2FD79C24D // sizeof=0x8
 {                                       // ...
     const char *name;                   // ...
     int budgetKB;                       // ...
 };
 struct CompassActor // sizeof=0x30
 {                                       // ...
     int lastUpdate;
     float lastPos[2];
     float lastEnemyPos[2];
     float lastYaw;
     int pingTime;
     int beginFadeTime;
     int beginRadarFadeTime;
     int beginVoiceFadeTime;
     bool enemy;
     // padding byte
     // padding byte
     // padding byte
     int perks;
 };
 struct CompassVehicle // sizeof=0x1C
 {                                       // ...
     int entityNum;                      // ...
     int lastUpdate;                     // ...
     float lastPos[2];
     float lastYaw;
     team_t team;
     int ownerIndex;
 };
 struct CgEntCollWorld // sizeof=0x401C
 {                                       // ...
     float mins[3];
     float maxs[3];
     unsigned __int16 freeHead;
     // padding byte
     // padding byte
     CgEntCollSector sectors[1024];
 };
 struct EffectDefMap // sizeof=0x80
 {                                       // ...
     char name[64];
     char filename[64];                  // ...
 };
 struct ClientEntSound // sizeof=0x10
 {                                       // ...
     float origin[3];
     snd_alias_list_t *aliasList;        // ...
 };
 struct CameraShake // sizeof=0x24
 {                                       // ...
     int time;                           // ...
     float scale;                        // ...
     float length;                       // ...
     float radius;                       // ...
     float src[3];                       // ...
     float size;                         // ...
     float rumbleScale;                  // ...
 };
 struct CameraShakeSet // sizeof=0x94
 {                                       // ...
     CameraShake shakes[4];
     float phase;
 };
 struct punctuation_s // sizeof=0xC
 {
     char *p;
     int n;
     punctuation_s *next;
 };
 struct __declspec(align(8)) token_s // sizeof=0x430
 {                                       // ...
     char string[1024];                  // ...
     int type;                           // ...
     int subtype;                        // ...
     unsigned int intvalue;              // ...
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     long double floatvalue;             // ...
     char *whitespace_p;                 // ...
     char *endwhitespace_p;              // ...
     int line;                           // ...
     int linescrossed;                   // ...
     token_s *next;
     // padding byte
     // padding byte
     // padding byte
     // padding byte
 };
 struct __declspec(align(8)) script_s // sizeof=0x4B0
 {
     char filename[64];
     char *buffer;
     char *script_p;
     char *end_p;
     char *lastscript_p;
     char *whitespace_p;
     char *endwhitespace_p;
     int length;
     int line;
     int lastline;
     int tokenavailable;
     int flags;
     punctuation_s *punctuations;
     punctuation_s **punctuationtable;
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     token_s token;
     script_s *next;
     // padding byte
     // padding byte
     // padding byte
     // padding byte
 };
 struct define_s // sizeof=0x20
 {
     char *name;
     int flags;
     int builtin;
     int numparms;
     token_s *parms;
     token_s *tokens;
     define_s *next;
     define_s *hashnext;
 };
 struct indent_s // sizeof=0x10
 {
     int type;
     parseSkip_t skip;
     script_s *script;
     indent_s *next;
 };
 struct source_s // sizeof=0x4D0
 {                                       // ...
     char filename[64];
     char includepath[64];
     punctuation_s *punctuations;
     script_s *scriptstack;              // ...
     token_s *tokens;                    // ...
     define_s *defines;                  // ...
     define_s **definehash;              // ...
     indent_s *indentstack;
     int skip;
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     token_s token;
 };
 struct directive_s // sizeof=0x8
 {                                       // ...
     char *name;                         // ...
     int (__cdecl *func)(source_s *);    // ...
 };
 struct __declspec(align(8)) value_s // sizeof=0x20
 {                                       // ...
     int intvalue;
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     long double floatvalue;
     int parentheses;
     value_s *prev;
     value_s *next;
     // padding byte
     // padding byte
     // padding byte
     // padding byte
 };
 struct operator_s // sizeof=0x14
 {                                       // ...
     int op;
     int priority;
     int parentheses;
     operator_s *prev;
     operator_s *next;
 };
 struct SurfaceTypeSoundList // sizeof=0x8
 {
     char *surfaceSoundBase;
     snd_alias_list_t **soundAliasList;
 };
 struct pml_t // sizeof=0x80
 {                                       // ...
     float forward[3];
     float right[3];                     // ...
     float up[3];                        // ...
     float frametime;                    // ...
     int msec;                           // ...
     int walking;                        // ...
     int groundPlane;                    // ...
     int almostGroundPlane;              // ...
     trace_t groundTrace;
     float impactSpeed;
     float previous_origin[3];           // ...
     float previous_velocity[3];         // ...
 };
 struct viewLerpWaypoint_s // sizeof=0xC
 {                                       // ...
     int iFrac;
     float fViewHeight;
     int iOffset;
 };
 struct pmoveHandler_t // sizeof=0x8
 {
     void (__cdecl *trace)(trace_t *, const float *, const float *, const float *, const float *, int, int);
     void (__cdecl *playerEvent)(int, int);
 };
 struct MantleAnimTransition // sizeof=0xC
 {                                       // ...
     int upAnimIndex;                    // ...
     int overAnimIndex;                  // ...
     float height;                       // ...
 };
 struct MantleResults // sizeof=0x38
 {                                       // ...
     float dir[3];                       // ...
     float startPos[3];                  // ...
     float ledgePos[3];
     float endPos[3];
     int flags;                          // ...
     int duration;
 };
 struct animStringItem_t // sizeof=0x8
 {                                       // ...
     const char *string;                 // ...
     int hash;                           // ...
 };
 struct loadAnim_t // sizeof=0x48
 {
     scr_anim_s anim;
     int iNameHash;
     char szAnimName[64];
 };
 struct animConditionTable_t // sizeof=0x8
 {                                       // ...
     animScriptConditionTypes_t type;    // ...
     animStringItem_t *values;           // ...
 };
 struct controller_info_t // sizeof=0x60
 {                                       // ...
     float angles[6][3];
     float tag_origin_angles[3];         // ...
     float tag_origin_offset[3];         // ...
 };
 struct AimTarget // sizeof=0x2C
 {                                       // ...
     int entIndex;
     float worldDistSqr;
     float mins[3];
     float maxs[3];
     float velocity[3];
 };
 struct AimTargetGlob // sizeof=0x1608
 {                                       // ...
     AimTarget targets[64];
     int targetCount;
     AimTarget clientTargets[64];
     int clientTargetCount;
 };
 struct AimTweakables // sizeof=0x20
 {                                       // ...
     float slowdownRegionWidth;
     float slowdownRegionHeight;
     float autoAimRegionWidth;
     float autoAimRegionHeight;
     float autoMeleeRegionWidth;
     float autoMeleeRegionHeight;
     float lockOnRegionWidth;
     float lockOnRegionHeight;
 };
 struct AimScreenTarget // sizeof=0x34
 {                                       // ...
     int entIndex;                       // ...
     float clipMins[2];                  // ...
     float clipMaxs[2];                  // ...
     float aimPos[3];                    // ...
     float velocity[3];                  // ...
     float distSqr;                      // ...
     float crosshairDistSqr;             // ...
 };
 struct AimAssistGlobals // sizeof=0xE34
 {                                       // ...
     bool initialized;
     // padding byte
     // padding byte
     // padding byte
     AimTweakables tweakables;
     float viewOrigin[3];
     float viewAngles[3];
     float viewAxis[3][3];
     float fovTurnRateScale;
     float fovScaleInv;
     float adsLerp;
     float pitchDelta;
     float yawDelta;
     float screenWidth;
     float screenHeight;
     float screenMtx[4][4];
     float invScreenMtx[4][4];
     AimScreenTarget screenTargets[64];
     int screenTargetCount;
     int autoAimTargetEnt;
     bool autoAimPressed;
     bool autoAimActive;
     // padding byte
     // padding byte
     float autoAimPitch;
     float autoAimPitchTarget;
     float autoAimYaw;
     float autoAimYawTarget;
     int autoMeleeTargetEnt;
     bool autoMeleeActive;
     bool autoMeleePressed;
     // padding byte
     // padding byte
     float autoMeleePitch;
     float autoMeleePitchTarget;
     float autoMeleeYaw;
     float autoMeleeYawTarget;
     int lockOnTargetEnt;
 };
 struct GfxVisibleLight // sizeof=0x2008
 {                                       // ...
     int drawSurfCount;                  // ...
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     GfxDrawSurf drawSurfs[1024];        // ...
 };
 struct GfxShadowCookie // sizeof=0x868
 {                                       // ...
     DpvsPlane planes[5];                // ...
     volatile int drawSurfCount;         // ...
     GfxDrawSurf drawSurfs[256];         // ...
 };
 struct __declspec(align(4)) GfxSceneModel // sizeof=0x48
 {                                       // ...
     XModelDrawInfo info;
     const XModel *model;
     const DObj_s *obj;
     GfxScaledPlacement placement;
     unsigned __int16 gfxEntIndex;
     unsigned __int16 entnum;
     float radius;
     unsigned __int16 *cachedLightingHandle;
     float lightingOrigin[3];
     unsigned __int8 reflectionProbeIndex;
     // padding byte
     // padding byte
     // padding byte
 };
 struct __declspec(align(4)) GfxSceneBrush // sizeof=0x28
 {                                       // ...
     BModelDrawInfo info;
     unsigned __int16 entnum;
     const GfxBrushModel *bmodel;
     GfxPlacement placement;
     unsigned __int8 reflectionProbeIndex;
     // padding byte
     // padding byte
     // padding byte
 };
 union GfxEntCellRefInfo // sizeof=0x4
 {                                       // ...
     float radius;
     GfxBrushModel *bmodel;
 };
 struct GfxSceneDpvs // sizeof=0x38
 {                                       // ...
     unsigned int localClientNum;        // ...
     unsigned __int8 *entVisData[7];     // ...
     unsigned __int16 *sceneXModelIndex; // ...
     unsigned __int16 *sceneDObjIndex;   // ...
     GfxEntCellRefInfo *entInfo[4];      // ...
 };
 struct __declspec(align(64)) GfxScene // sizeof=0x154D00
 {                                       // ...
     GfxDrawSurf bspDrawSurfs[8192];
     GfxDrawSurf smodelDrawSurfsLight[8192]; // ...
     GfxDrawSurf entDrawSurfsLight[8192]; // ...
     GfxDrawSurf bspDrawSurfsDecal[512]; // ...
     GfxDrawSurf smodelDrawSurfsDecal[512]; // ...
     GfxDrawSurf entDrawSurfsDecal[512]; // ...
     GfxDrawSurf bspDrawSurfsEmissive[8192]; // ...
     GfxDrawSurf smodelDrawSurfsEmissive[8192]; // ...
     GfxDrawSurf entDrawSurfsEmissive[8192]; // ...
     GfxDrawSurf fxDrawSurfsEmissive[8192]; // ...
     GfxDrawSurf fxDrawSurfsEmissiveAuto[8192]; // ...
     GfxDrawSurf fxDrawSurfsEmissiveDecal[8192]; // ...
     GfxDrawSurf bspSunShadowDrawSurfs0[4096]; // ...
     GfxDrawSurf smodelSunShadowDrawSurfs0[4096]; // ...
     GfxDrawSurf entSunShadowDrawSurfs0[4096]; // ...
     GfxDrawSurf bspSunShadowDrawSurfs1[8192]; // ...
     GfxDrawSurf smodelSunShadowDrawSurfs1[8192]; // ...
     GfxDrawSurf entSunShadowDrawSurfs1[8192]; // ...
     GfxDrawSurf bspSpotShadowDrawSurfs0[256]; // ...
     GfxDrawSurf smodelSpotShadowDrawSurfs0[256]; // ...
     GfxDrawSurf entSpotShadowDrawSurfs0[512]; // ...
     GfxDrawSurf bspSpotShadowDrawSurfs1[256]; // ...
     GfxDrawSurf smodelSpotShadowDrawSurfs1[256]; // ...
     GfxDrawSurf entSpotShadowDrawSurfs1[512]; // ...
     GfxDrawSurf bspSpotShadowDrawSurfs2[256]; // ...
     GfxDrawSurf smodelSpotShadowDrawSurfs2[256]; // ...
     GfxDrawSurf entSpotShadowDrawSurfs2[512]; // ...
     GfxDrawSurf bspSpotShadowDrawSurfs3[256]; // ...
     GfxDrawSurf smodelSpotShadowDrawSurfs3[256]; // ...
     GfxDrawSurf entSpotShadowDrawSurfs3[512]; // ...
     GfxDrawSurf shadowDrawSurfs[512];   // ...
     unsigned int shadowableLightIsUsed[32]; // ...
     int maxDrawSurfCount[34];           // ...
     volatile int drawSurfCount[34];     // ...
     GfxDrawSurf *drawSurfs[34];         // ...
     GfxDrawSurf fxDrawSurfsLight[8192]; // ...
     GfxDrawSurf fxDrawSurfsLightAuto[8192]; // ...
     GfxDrawSurf fxDrawSurfsLightDecal[8192]; // ...
     GfxSceneDef def;                    // ...
     int addedLightCount;                // ...
     GfxLight addedLight[32];            // ...
     bool isAddedLightCulled[32];        // ...
     float dynamicSpotLightNearPlaneOffset; // ...
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     GfxVisibleLight visLight[4];        // ...
     GfxVisibleLight visLightShadow[1];  // ...
     GfxShadowCookie cookie[24];         // ...
     unsigned int *entOverflowedDrawBuf; // ...
     volatile int sceneDObjCount;        // ...
     GfxSceneEntity sceneDObj[512];      // ...
     unsigned __int8 sceneDObjVisData[7][512]; // ...
     volatile int sceneModelCount;       // ...
     GfxSceneModel sceneModel[1024];     // ...
     unsigned __int8 sceneModelVisData[7][1024]; // ...
     volatile int sceneBrushCount;       // ...
     GfxSceneBrush sceneBrush[512];      // ...
     unsigned __int8 sceneBrushVisData[3][512]; // ...
     unsigned int sceneDynModelCount;    // ...
     unsigned int sceneDynBrushCount;    // ...
     DpvsPlane shadowFarPlane[2];        // ...
     DpvsPlane shadowNearPlane[2];       // ...
     GfxSceneDpvs dpvs;                  // ...
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
 };
 struct GfxDynamicIndices // sizeof=0xC
 {                                       // ...
     volatile int used;
     int total;
     unsigned __int16 *indices;          // ...
 };
 struct GfxIndexBufferState // sizeof=0x10
 {                                       // ...
     volatile int used;
     int total;
     IDirect3DIndexBuffer9 *buffer;      // ...
     unsigned __int16 *indices;
 };
 struct GfxPackedVertexNormal // sizeof=0x8
 {                                       // ...
     PackedUnitVec normal;
     PackedUnitVec tangent;
 };
 struct __declspec(align(4)) GfxBuffers // sizeof=0x2400A0
 {                                       // ...
     GfxDynamicIndices smodelCache;      // ...
     IDirect3DVertexBuffer9 *smodelCacheVb; // ...
     GfxIndexBufferState preTessIndexBufferPool[2]; // ...
     GfxIndexBufferState *preTessIndexBuffer; // ...
     int preTessBufferFrame;             // ...
     GfxIndexBufferState dynamicIndexBufferPool[1]; // ...
     GfxIndexBufferState *dynamicIndexBuffer; // ...
     GfxVertexBufferState skinnedCacheVbPool[2]; // ...
     unsigned __int8 *skinnedCacheLockAddr; // ...
     GfxVertexBufferState dynamicVertexBufferPool[1]; // ...
     GfxVertexBufferState *dynamicVertexBuffer; // ...
     IDirect3DVertexBuffer9 *particleCloudVertexBuffer; // ...
     IDirect3DIndexBuffer9 *particleCloudIndexBuffer; // ...
     int dynamicBufferFrame;             // ...
     GfxPackedVertexNormal skinnedCacheNormals[2][147456]; // ...
     GfxPackedVertexNormal *skinnedCacheNormalsAddr; // ...
     GfxPackedVertexNormal *oldSkinnedCacheNormalsAddr; // ...
     unsigned int skinnedCacheNormalsFrameCount; // ...
     bool fastSkin;                      // ...
     bool skinCache;                     // ...
     // padding byte
     // padding byte
 };
 struct __declspec(align(128)) r_global_permanent_t // sizeof=0x2180
 {                                       // ...
     Material *sortedMaterials[2048];    // ...
     int needSortMaterials;              // ...
     int materialCount;                  // ...
     GfxImage *whiteImage;               // ...
     GfxImage *blackImage;               // ...
     GfxImage *blackImage3D;             // ...
     GfxImage *blackImageCube;           // ...
     GfxImage *grayImage;                // ...
     GfxImage *identityNormalMapImage;   // ...
     GfxImage *specularityImage;
     GfxImage *outdoorImage;
     GfxImage *pixelCostColorCodeImage;  // ...
     GfxLightDef *dlightDef;             // ...
     Material *defaultMaterial;          // ...
     Material *whiteMaterial;            // ...
     Material *additiveMaterial;         // ...
     Material *pointMaterial;            // ...
     Material *lineMaterial;             // ...
     Material *lineMaterialNoDepth;      // ...
     Material *clearAlphaStencilMaterial; // ...
     Material *shadowClearMaterial;      // ...
     Material *shadowCookieOverlayMaterial; // ...
     Material *shadowCookieBlurMaterial; // ...
     Material *shadowCasterMaterial;     // ...
     Material *shadowOverlayMaterial;    // ...
     Material *depthPrepassMaterial;     // ...
     Material *glareBlindMaterial;       // ...
     Material *pixelCostAddDepthAlwaysMaterial; // ...
     Material *pixelCostAddDepthDisableMaterial; // ...
     Material *pixelCostAddDepthEqualMaterial; // ...
     Material *pixelCostAddDepthLessMaterial; // ...
     Material *pixelCostAddDepthWriteMaterial; // ...
     Material *pixelCostAddNoDepthWriteMaterial; // ...
     Material *pixelCostColorCodeMaterial; // ...
     Material *stencilShadowMaterial;    // ...
     Material *stencilDisplayMaterial;   // ...
     Material *floatZDisplayMaterial;    // ...
     Material *colorChannelMixerMaterial; // ...
     Material *frameColorDebugMaterial;  // ...
     Material *frameAlphaDebugMaterial;  // ...
     GfxImage *rawImage;                 // ...
     GfxWorld *world;                    // ...
     Material *feedbackReplaceMaterial;  // ...
     Material *feedbackBlendMaterial;    // ...
     Material *feedbackFilmBlendMaterial; // ...
     Material *cinematicMaterial;        // ...
     Material *dofDownsampleMaterial;    // ...
     Material *dofNearCocMaterial;       // ...
     Material *smallBlurMaterial;        // ...
     Material *postFxDofMaterial;        // ...
     Material *postFxDofColorMaterial;   // ...
     Material *postFxColorMaterial;      // ...
     Material *postFxMaterial;           // ...
     Material *symmetricFilterMaterial[8]; // ...
     Material *shellShockBlurredMaterial; // ...
     Material *shellShockFlashedMaterial; // ...
     Material *glowConsistentSetupMaterial; // ...
     Material *glowApplyBloomMaterial;   // ...
     int savedScreenTimes[4];            // ...
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
 };
 struct GfxDrawSurfList // sizeof=0x8
 {                                       // ...
     GfxDrawSurf *current;               // ...
     GfxDrawSurf *end;                   // ...
 };
 struct GfxBspPreTessDrawSurf // sizeof=0x4
 {                                       // ...
     unsigned __int16 baseSurfIndex;     // ...
     unsigned __int16 totalTriCount;     // ...
 };
 struct GfxDelayedCmdBuf // sizeof=0x10
 {                                       // ...
     int primDrawSurfPos;
     unsigned int primDrawSurfSize;
     GfxDrawSurf drawSurfKey;
 };
 struct GfxBspDrawSurfData // sizeof=0x18
 {                                       // ...
     GfxDelayedCmdBuf delayedCmdBuf;
     GfxDrawSurfList drawSurfList;       // ...
 };
 struct __declspec(align(2)) GfxDrawMethod // sizeof=0x68
 {                                       // ...
     GfxDrawSceneMethod drawScene;       // ...
     MaterialTechniqueType baseTechType; // ...
     MaterialTechniqueType emissiveTechType; // ...
     unsigned __int8 litTechType[13][7]; // ...
     // padding byte
 };
 struct VertUsage // sizeof=0x8
 {
     int index;
     VertUsage *next;
 };
 struct MaterialUsage // sizeof=0xC
 {                                       // ...
     int memory;
     VertUsage *verts;                   // ...
     Material *material;
 };
 struct GfxLodRamp // sizeof=0x8
 {                                       // ...
     float scale;                        // ...
     float bias;                         // ...
 };
 struct __declspec(align(4)) GfxLodParms // sizeof=0x20
 {                                       // ...
     float origin[3];                    // ...
     GfxLodRamp ramp[2];                 // ...
     bool valid;                         // ...
     // padding byte
     // padding byte
     // padding byte
 };
 struct __declspec(align(8)) r_globals_t // sizeof=0x8310
 {                                       // ...
     GfxViewParms identityViewParms;     // ...
     bool inFrame;                       // ...
     bool registered;                    // ...
     bool forbidDelayLoadImages;
     bool ignorePrecacheErrors;
     float viewOrg[3];                   // ...
     float viewDir[3];                   // ...
     unsigned int frontEndFrameCount;    // ...
     int totalImageMemory;
     Material *materialHashTable[2048];  // ...
     MaterialUsage materialUsage[2048];  // ...
     GfxFog fogSettings[5];              // ...
     int fogIndex;                       // ...
     GfxColor color_axis;                // ...
     GfxColor color_allies;              // ...
     int team;                           // ...
     trStatistics_t *stats;              // ...
     GfxLodParms lodParms;               // ...
     GfxLodParms correctedLodParms;      // ...
     bool hasAnyImageOverrides;          // ...
     bool useSunLightOverride;           // ...
     bool useSunDirOverride;             // ...
     bool useSunDirLerp;                 // ...
     float sunLightOverride[3];          // ...
     float sunDirOverride[3];            // ...
     float sunDirOverrideTarget[3];      // ...
     int sunDirLerpBeginTime;            // ...
     int sunDirLerpEndTime;              // ...
     GfxScaledPlacement identityPlacement; // ...
     const GfxViewParms *debugViewParms; // ...
     int endTime;                        // ...
     bool distortion;                    // ...
     bool drawWorld;                     // ...
     bool drawSModels;                   // ...
     bool drawXModels;                   // ...
     bool drawBModels;                   // ...
     // padding byte
     // padding byte
     // padding byte
     const char *codeImageNames[27];     // ...
     unsigned int viewInfoCount;         // ...
     int sunShadowFull;                  // ...
     float sunShadowmapScale;            // ...
     float sunShadowmapScaleNum;         // ...
     unsigned int sunShadowSize;         // ...
     float sunShadowPartitionRatio;      // ...
     int drawSunShadow;                  // ...
     int skinnedCacheReachedThreshold;   // ...
     float waterFloatTime;               // ...
     // padding byte
     // padding byte
     // padding byte
     // padding byte
 };
 struct GfxCachedSModelSurf // sizeof=0x8
 {                                       // ...
     unsigned int baseVertIndex;
     unsigned __int16 lodIndex;
     unsigned __int16 smodelIndex;
 };
 struct GfxSModelDrawSurfData // sizeof=0x18
 {                                       // ...
     GfxDelayedCmdBuf delayedCmdBuf;
     GfxDrawSurfList drawSurfList;       // ...
 };
 struct GfxStaticModelPreTessSurf::<unnamed_type_fields> // sizeof=0x4
 {                                       // ...
     unsigned __int8 surfIndex;
     unsigned __int8 lod;
     unsigned __int16 cachedIndex;
 };
 union GfxStaticModelPreTessSurf // sizeof=0x4
 {                                       // ...
     GfxStaticModelPreTessSurf::<unnamed_type_fields> fields;
     unsigned int packed;
 };
 struct GfxSModelDrawSurfLightingData // sizeof=0x28
 {                                       // ...
     GfxDelayedCmdBuf delayedCmdBuf;
     GfxDrawSurfList drawSurf[3];        // ...
 };
 struct GfxStaticModelId // sizeof=0x4
 {                                       // ...
     unsigned __int16 surfType;          // ...
     unsigned __int16 objectId;          // ...
 };
 struct mnode_load_t // sizeof=0x10
 {
     int cellIndex;
     int planeIndex;
     unsigned int children[2];
 };
 struct r_lightmapMerge_t // sizeof=0x14
 {                                       // ...
     unsigned __int8 index;
     // padding byte
     // padding byte
     // padding byte
     float shift[2];
     float scale[2];
 };
 struct GfxBspLoad // sizeof=0x2A8
 {                                       // ...
     unsigned int bspVersion;            // ...
     TrisType trisType;                  // ...
     const dmaterial_t *diskMaterials;   // ...
     unsigned int materialCount;
     float outdoorMins[3];               // ...
     float outdoorMaxs[3];               // ...
     r_lightmapMerge_t lmapMergeInfo[32];
 };
 struct r_globals_load_t // sizeof=0x2C8
 {                                       // ...
     int *cullGroupIndices;              // ...
     float (*portalVerts)[3];            // ...
     GfxAabbTree *aabbTrees;             // ...
     int aabbTreeCount;                  // ...
     int nodeCount;                      // ...
     mnode_load_t *nodes;                // ...
     int reflectionProbesLoaded;         // ...
     int staticModelReflectionProbesLoaded; // ...
     GfxBspLoad load;                    // ...
 };
 struct LightDefCopyConfig // sizeof=0x8
 {                                       // ...
     unsigned __int8 *dest;              // ...
     unsigned int zoom;                  // ...
 };
 struct DiskGfxReflectionProbe11 // sizeof=0x20004
 {
     float origin[3];
     unsigned __int8 pixels[131064];
 };
 struct __cppobj std::pair<GfxSurface *,GfxSurface *> // sizeof=0x8
 {                                       // ...
     GfxSurface *first;                  // ...
     GfxSurface *second;                 // ...
 };
 struct GfxStaticModelCombinedInst // sizeof=0x68
 {                                       // ...
     GfxStaticModelDrawInst smodelDrawInst;
     GfxStaticModelInst smodelInst;
 };
 struct __cppobj std::pair<GfxStaticModelCombinedInst *,GfxStaticModelCombinedInst *> // sizeof=0x8
 {                                       // ...
     GfxStaticModelCombinedInst *first;  // ...
     GfxStaticModelCombinedInst *second; // ...
 };
 struct AnnotatedLightGridPoint // sizeof=0xA
 {                                       // ...
     unsigned __int16 pos[3];            // ...
     GfxLightGridEntry entry;            // ...
 };
 struct __cppobj std::pair<AnnotatedLightGridPoint *,AnnotatedLightGridPoint *> // sizeof=0x8
 {                                       // ...
     AnnotatedLightGridPoint *first;     // ...
     AnnotatedLightGridPoint *second;    // ...
 };
 struct DiskGfxCell_Version21 // sizeof=0x2C
 {
     float mins[3];
     float maxs[3];
     unsigned __int16 aabbTreeIndex[2];
     int firstPortal;
     int portalCount;
     int firstCullGroup;
     int cullGroupCount;
 };
 struct DiskGfxAabbTree // sizeof=0xC
 {
     unsigned int firstSurface;
     unsigned int surfaceCount;
     unsigned int childCount;
 };
 struct GfxLightGridEntry_Version15 // sizeof=0x8
 {
     unsigned int xyzHighBits;
     unsigned __int8 xyzLowBitsAndPrimaryVis;
     unsigned __int8 needsTrace;
     unsigned __int16 colorsIndex;
 };
 struct DiskGfxCell_Version14 // sizeof=0x34
 {
     float mins[3];
     float maxs[3];
     int aabbTreeIndex;
     int firstPortal;
     int portalCount;
     int firstCullGroup;
     int cullGroupCount;
     int unused0;
     int unused1;
 };
 struct DiskTriangleSoup_Version8 // sizeof=0x10
 {
     unsigned __int16 materialIndex;
     unsigned __int8 lightmapIndex;
     unsigned __int8 reflectionProbeIndex;
     int firstVertex;
     unsigned __int16 vertexCount;
     unsigned __int16 indexCount;
     int firstIndex;
 };
 struct DiskGfxReflectionProbe // sizeof=0x20044
 {                                       // ...
     float origin[3];                    // ...
     char colorCorrectionFilename[64];   // ...
     unsigned __int8 pixels[131064];     // ...
 };
 struct DiskLightRegionHull // sizeof=0x4C
 {
     float kdopMidPoint[9];
     float kdopHalfSize[9];
     unsigned int axisCount;
 };
 struct DiskTriangleSoup // sizeof=0x18
 {
     unsigned __int16 materialIndex;
     unsigned __int8 lightmapIndex;
     unsigned __int8 reflectionProbeIndex;
     unsigned __int8 primaryLightIndex;
     bool castsSunShadow;
     unsigned __int8 unused[2];
     int vertexLayerData;
     unsigned int firstVertex;
     unsigned __int16 vertexCount;
     unsigned __int16 indexCount;
     int firstIndex;
 };
 struct r_lightmapGroup_t // sizeof=0x8
 {                                       // ...
     int wideCount;                      // ...
     int highCount;                      // ...
 };
 struct GfxLightGridHeader // sizeof=0x4014
 {
     unsigned __int16 mins[3];
     unsigned __int16 maxs[3];
     unsigned int rowAxis;
     unsigned int colAxis;
     unsigned __int16 rowDataStart[8192];
 };
 struct DiskGfxPortal // sizeof=0x10
 {
     int planeIndex;
     int cellIndex;
     int firstPortalVertex;
     int portalVertexCount;
 };
 struct DiskGfxVertex // sizeof=0x44
 {
     float xyz[3];
     float normal[3];
     unsigned __int8 color[4];
     float texCoord[2];
     float lmapCoord[2];
     float tangent[3];
     float binormal[3];
 };
 struct DiskLightRegion // sizeof=0x1
 {
     unsigned __int8 hullCount;
 };
 struct DiskLightRegionAxis // sizeof=0x14
 {
     float dir[3];
     float midPoint;
     float halfSize;
 };
 struct DiskTriangleSoup_Version12 // sizeof=0x14
 {
     unsigned __int16 materialIndex;
     unsigned __int8 lightmapIndex;
     unsigned __int8 reflectionProbeIndex;
     int vertexLayerData;
     int firstVertex;
     unsigned __int16 vertexCount;
     unsigned __int16 indexCount;
     int firstIndex;
 };
 struct DiskGfxCullGroup // sizeof=0x20
 {
     float mins[3];
     float maxs[3];
     unsigned int firstSurface;
     unsigned int surfaceCount;
 };
 struct GfxLightGridRow // sizeof=0xC
 {                                       // ...
     unsigned __int16 colStart;          // ...
     unsigned __int16 colCount;          // ...
     unsigned __int16 zStart;            // ...
     unsigned __int16 zCount;            // ...
     unsigned int firstEntry;            // ...
 };
 struct __declspec(align(4)) DiskGfxCell // sizeof=0x70
 {
     float mins[3];
     float maxs[3];
     unsigned __int16 aabbTreeIndex[2];
     int firstPortal;
     int portalCount;
     int firstCullGroup;
     int cullGroupCount;
     unsigned __int8 reflectionProbeCount;
     unsigned __int8 reflectionProbes[64];
     // padding byte
     // padding byte
     // padding byte
 };
 struct DxCapsCheckBits // sizeof=0x14
 {                                       // ...
     int offset;                         // ...
     unsigned int setBits;               // ...
     unsigned int clearBits;             // ...
     DxCapsResponse response;            // ...
     const char *msg;                    // ...
 };
 struct DxCapsCheckInteger // sizeof=0x14
 {                                       // ...
     int offset;                         // ...
     unsigned int min;                   // ...
     unsigned int max;                   // ...
     DxCapsResponse response;            // ...
     const char *msg;                    // ...
 };
 struct CinematicHunk // sizeof=0x10
 {                                       // ...
     void *base;
     void *atFront;
     void *atBack;
     void *end;
 };
 struct CinematicTextureSet // sizeof=0x1B0
 {                                       // ...
     GfxImage imageY[2];
     GfxImage imageCr[2];
     GfxImage imageCb[2];
     GfxImage imageA[2];
     GfxImage drawImageY;
     GfxImage drawImageCr;
     GfxImage drawImageCb;
     GfxImage drawImageA;
 };
 struct __declspec(align(4)) CinematicGlob // sizeof=0x7AC
 {                                       // ...
     char currentCinematicName[256];     // ...
     char targetCinematicName[256];      // ...
     char nextCinematicName[256];        // ...
     unsigned int nextCinematicPlaybackFlags; // ...
     unsigned int playbackFlags;         // ...
     bool targetCinematicChanged;        // ...
     bool cinematicFinished;             // ...
     // padding byte
     // padding byte
     unsigned int timeInMsec;            // ...
     unsigned int binkIOSize;            // ...
     volatile bool fullSyncNextUpdate;   // ...
     bool playbackStarted;
     bool hasFileIO;                     // ...
     bool usingAlpha;
     bool atHighPriority;                // ...
     // padding byte
     // padding byte
     // padding byte
     BINK *bink;                         // ...
     BINKTEXTURESET binkTextureSet;      // ...
     CinematicHunk masterHunk;           // ...
     CinematicHunk binkHunk;             // ...
     CinematicHunk residentHunk;         // ...
     int activeImageFrame;               // ...
     int framesStopped;                  // ...
     CinematicEnum currentPaused;        // ...
     CinematicEnum targetPaused;         // ...
     CinematicTextureSet textureSets[2]; // ...
     int activeTextureSet;               // ...
     int activeImageFrameTextureSet;     // ...
     void *memPool;                      // ...
     float playbackVolume;               // ...
     bool underrun;                      // ...
     // padding byte
     // padding byte
     // padding byte
 };
 struct __declspec(align(8)) materialCommands_t // sizeof=0x22A960
 {                                       // ...
     GfxVertex verts[5450];              // ...
     unsigned __int16 indices[1048576];  // ...
     MaterialVertexDeclType vertDeclType;
     unsigned int vertexSize;
     int indexCount;                     // ...
     int vertexCount;                    // ...
     int firstVertex;                    // ...
     int lastVertex;                     // ...
     bool finishedFilling;               // ...
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
 };
 struct BINKREALTIME // sizeof=0x38
 {                                       // ...
     unsigned int FrameNum;
     unsigned int FrameRate;
     unsigned int FrameRateDiv;
     unsigned int Frames;
     unsigned int FramesTime;
     unsigned int FramesVideoDecompTime;
     unsigned int FramesAudioDecompTime;
     unsigned int FramesReadTime;
     unsigned int FramesIdleReadTime;
     unsigned int FramesThreadReadTime;
     unsigned int FramesBlitTime;
     unsigned int ReadBufferSize;        // ...
     unsigned int ReadBufferUsed;        // ...
     unsigned int FramesDataRate;
 };
 struct GfxCmdBuf // sizeof=0x4
 {                                       // ...
     IDirect3DDevice9 *device;
 };
 struct __declspec(align(4)) $8245A080F03119DF8EECD02BF0FDD113 // sizeof=0x48004
 {                                       // ...
     float cubeDirs[6][64][64][3];
     bool cubeDirsInited;                // ...
     // padding byte
     // padding byte
     // padding byte
 };
 struct __declspec(align(4)) SkinXModelCmd // sizeof=0x1C
 {                                       // ...
     void *modelSurfs;
     const DObjAnimMat *mat;
     int surfacePartBits[4];
     unsigned __int16 surfCount;
     // padding byte
     // padding byte
 };
 struct __declspec(align(4)) GfxModelSurfaceInfo // sizeof=0xC
 {                                       // ...
     const DObjAnimMat *baseMat;
     unsigned __int8 boneIndex;
     unsigned __int8 boneCount;
     unsigned __int16 gfxEntIndex;
     unsigned __int16 lightingHandle;
     // padding byte
     // padding byte
 };
 union $B667868682928995E3CB40CE466D3989 // sizeof=0x4
 {                                       // ...
     GfxPackedVertex *skinnedVert;
     int oldSkinnedCachedOffset;
 };
 struct GfxModelSkinnedSurface // sizeof=0x18
 {                                       // ...
     int skinnedCachedOffset;
     XSurface *xsurf;
     GfxModelSurfaceInfo info;
     $B667868682928995E3CB40CE466D3989 ___u3;
 };
 struct GfxModelRigidSurface // sizeof=0x38
 {
     GfxModelSkinnedSurface surf;
     GfxScaledPlacement placement;
 };
 struct PortalHeapNode // sizeof=0x8
 {                                       // ...
     GfxPortal *portal;
     float dist;
 };
 union GfxHullPointsPool // sizeof=0x200
 {
     GfxHullPointsPool *nextFree;
     float points[64][2];
 };
 struct DpvsView // sizeof=0x120
 {                                       // ...
     unsigned int renderFxFlagsCull;
     DpvsPlane frustumPlanes[14];        // ...
     int frustumPlaneCount;              // ...
 };
 struct $82336E7963B4A1461311A3AC381E208B // sizeof=0xAE78
 {                                       // ...
     DpvsPlane viewPlane;                // ...
     DpvsPlane fogPlane;                 // ...
     DpvsPlane *nearPlane;               // ...
     DpvsPlane *farPlane;                // ...
     const GfxMatrix *viewProjMtx;       // ...
     const GfxMatrix *invViewProjMtx;    // ...
     float viewOrg[4];                   // ...
     int viewOrgIsDir;                   // ...
     int queuedCount;                    // ...
     PortalHeapNode *portalQueue;        // ...
     GfxHullPointsPool *nextFreeHullPoints; // ...
     float cullDist;                     // ...
     DpvsPlane childPlanes[2048];        // ...
     DpvsView views[4][3];               // ...
     unsigned int cameraCellIndex;       // ...
     DpvsPlane *sideFrustumPlanes;       // ...
     unsigned int *entVisBits[4];        // ...
     unsigned int *cellBits;             // ...
     unsigned int cellVisibleBits[32];   // ...
 };
 struct DpvsDynamicCellCmd // sizeof=0xC
 {                                       // ...
     const DpvsPlane *planes;            // ...
     unsigned int cellIndex;             // ...
     unsigned __int8 planeCount;         // ...
     unsigned __int8 frustumPlaneCount;  // ...
     unsigned __int16 viewIndex;         // ...
 };
 struct BModelSurface // sizeof=0x8
 {
     const GfxScaledPlacement *placement;
     const GfxSurface *surf;
 };
 struct FilterEntInfo // sizeof=0x10
 {                                       // ...
     unsigned int localClientNum;        // ...
     unsigned int entnum;                // ...
     GfxEntCellRefInfo info;             // ...
     unsigned int cellOffset;            // ...
 };
 struct DpvsStaticCellCmd // sizeof=0xC
 {                                       // ...
     const DpvsPlane *planes;            // ...
     const GfxCell *cell;                // ...
     unsigned __int8 planeCount;         // ...
     unsigned __int8 frustumPlaneCount;  // ...
     unsigned __int16 viewIndex;         // ...
 };
 struct GfxLightingInfo // sizeof=0x2
 {                                       // ...
     unsigned __int8 primaryLightIndex;  // ...
     unsigned __int8 reflectionProbeIndex; // ...
 };
 struct DpvsEntityCmd // sizeof=0x10
 {                                       // ...
     GfxSceneEntity *sceneEnt;
     const DpvsPlane *planes;
     unsigned __int16 planeCount;
     unsigned __int16 cellIndex;
     unsigned __int8 *entVisData;
 };
 struct DpvsPlanes // sizeof=0x8
 {                                       // ...
     const DpvsPlane *planes;            // ...
     int count;                          // ...
 };
 struct DpvsClipPlaneSet // sizeof=0x44
 {                                       // ...
     const DpvsPlane *planes[16];        // ...
     unsigned int count;                 // ...
 };
 struct GfxPrimStats // sizeof=0x18
 {                                       // ...
     int primCount;                      // ...
     int triCount;                       // ...
     int staticIndexCount;               // ...
     int staticVertexCount;              // ...
     int dynamicIndexCount;              // ...
     int dynamicVertexCount;             // ...
 };
 struct GfxViewStats // sizeof=0x134
 {                                       // ...
     GfxPrimStats primStats[10];         // ...
     int drawSurfCount;
     int drawPrimHistogram[16];          // ...
 };
 struct GfxFrameStats // sizeof=0x274
 {                                       // ...
     GfxViewStats viewStats[2];          // ...
     int gfxEntCount;
     int geoIndexCount;                  // ...
     int fxIndexCount;                   // ...
 };
 struct GfxDrawPrimArgs // sizeof=0xC
 {                                       // ...
     int vertexCount;                    // ...
     int triCount;                       // ...
     int baseIndex;                      // ...
 };
 struct GfxTrianglesDrawStream // sizeof=0x30
 {                                       // ...
     unsigned int reflectionProbeCount;  // ...
     unsigned int lightmapCount;         // ...
     GfxTexture *reflectionProbeTextures; // ...
     GfxTexture *lightmapPrimaryTextures; // ...
     GfxTexture *lightmapSecondaryTextures; // ...
     GfxTexture *whiteTexture;           // ...
     const unsigned int *primDrawSurfPos; // ...
     const GfxTexture *reflectionProbeTexture; // ...
     const GfxTexture *lightmapPrimaryTexture; // ...
     const GfxTexture *lightmapSecondaryTexture; // ...
     unsigned int customSamplerFlags;    // ...
     int hasSunDirChanged;               // ...
 };
 struct GfxReadCmdBuf // sizeof=0x4
 {                                       // ...
     const unsigned int *primDrawSurfPos; // ...
 };
 struct GfxStaticModelDrawStream // sizeof=0x1C
 {                                       // ...
     const unsigned int *primDrawSurfPos; // ...
     const GfxTexture *reflectionProbeTexture; // ...
     unsigned int customSamplerFlags;    // ...
     XSurface *localSurf;
     unsigned int smodelCount;
     const unsigned __int16 *smodelList;
     unsigned int reflectionProbeIndex;
 };
 struct __cppobj GfxSortDrawSurfsInterface // sizeof=0x0
 {
 };
 struct __cppobj GfxReverseSortDrawSurfsInterface // sizeof=0x0
 {
 };
 struct $C12090365A206BC63E0695BF82A7DA9E // sizeof=0x2014
 {                                       // ...
     GfxImage *imageHashTable[2048];     // ...
     int picmip;                         // ...
     int picmipBump;                     // ...
     int picmipSpec;                     // ...
     CardMemory totalMemory;             // ...
 };
 struct __cppobj std::pair<GfxImage * *,GfxImage * *> // sizeof=0x8
 {                                       // ...
     GfxImage **first;                   // ...
     GfxImage **second;                  // ...
 };
 struct ImageList // sizeof=0x2004
 {                                       // ...
     unsigned int count;                 // ...
     GfxImage *image[2048];              // ...
 };
 struct BuiltinImageConstructorTable // sizeof=0x8
 {                                       // ...
     const char *name;                   // ...
     void (__cdecl *LoadCallback)(GfxImage *); // ...
 };
 struct GfxImageFileHeader // sizeof=0x1C
 {                                       // ...
     char tag[3];
     unsigned __int8 version;
     unsigned __int8 format;
     unsigned __int8 flags;              // ...
     __int16 dimensions[3];              // ...
     int fileSizeForPicmip[4];           // ...
 };
 struct __declspec(align(4)) WaveletDecode // sizeof=0x20
 {                                       // ...
     unsigned __int16 value;             // ...
     unsigned __int16 bit;               // ...
     char *data;                         // ...
     int width;                          // ...
     int height;                         // ...
     int channels;                       // ...
     int bpp;                            // ...
     int mipLevel;                       // ...
     bool dataInitialized;               // ...
     // padding byte
     // padding byte
     // padding byte
 };
 struct WaveletHuffmanDecode // sizeof=0x4
 {                                       // ...
     __int16 value;
     __int16 bits;
 };
 struct ddscolor_t::<unnamed_type_c> // sizeof=0x2
 {                                       // ...
.0   unsigned __int16 b : 5;
.5   unsigned __int16 g : 6;
.11  unsigned __int16 r : 5;
 };
 union ddscolor_t // sizeof=0x2
 {                                       // ...
     ddscolor_t::<unnamed_type_c> c;
     unsigned __int16 rgb;
 };
 struct DdsBlock_Dxt1_t // sizeof=0x8
 {                                       // ...
     ddscolor_t color0;
     ddscolor_t color1;
     unsigned __int8 bits[4];
 };
 struct DdsBlock_Dxt3_t // sizeof=0x10
 {
     unsigned __int8 alpha[8];
     DdsBlock_Dxt1_t color;
 };
 struct GfxRawPixel // sizeof=0x4
 {                                       // ...
     unsigned __int8 r;                  // ...
     unsigned __int8 g;                  // ...
     unsigned __int8 b;                  // ...
     unsigned __int8 a;                  // ...
 };
 struct GfxRawImage // sizeof=0x54
 {                                       // ...
     char name[64];
     GfxRefBlendMode blendMode;
     bool hasAlpha;
     // padding byte
     // padding byte
     // padding byte
     int width;                          // ...
     int height;
     GfxRawPixel *pixels;                // ...
 };
 struct DdsBlock_Dxt5_t // sizeof=0x10
 {
     unsigned __int8 alpha0;
     unsigned __int8 alpha1;
     unsigned __int8 alpha[6];
     DdsBlock_Dxt1_t color;
 };
 struct GfxAssets // sizeof=0x4
 {                                       // ...
     IDirect3DQuery9 *pixelCountQuery;   // ...
 };
 struct GfxGlobals // sizeof=0x10
 {                                       // ...
     bool haveThreadOwnership;           // ...
     bool startedRenderThread;           // ...
     bool isRenderingRemoteUpdate;       // ...
     // padding byte
     volatile int screenUpdateNotify;    // ...
     volatile int remoteScreenUpdateNesting; // ...
     int backEndFrameCount;              // ...
 };
 struct GfxWindowParms // sizeof=0x28
 {                                       // ...
     HWND__ *hwnd;                       // ...
     int hz;                             // ...
     bool fullscreen;                    // ...
     // padding byte
     // padding byte
     // padding byte
     int x;                              // ...
     int y;                              // ...
     int sceneWidth;                     // ...
     int sceneHeight;                    // ...
     int displayWidth;                   // ...
     int displayHeight;                  // ...
     int aaSamples;                      // ...
 };
 struct GfxGammaRamp // sizeof=0x200
 {                                       // ...
     unsigned __int16 entries[256];      // ...
 };
 struct GfxEnumMonitors // sizeof=0x8
 {                                       // ...
     int monitorIndex;                   // ...
     HMONITOR__ *foundMonitor;           // ...
 };
 struct jpeg_error_mgr // sizeof=0x8C
 {                                       // ...
     void (__cdecl *error_exit)(jpeg_common_struct *);
     void (__cdecl *emit_message)(jpeg_common_struct *, int);
     void (__cdecl *output_message)(jpeg_common_struct *);
     void (__cdecl *format_message)(jpeg_common_struct *, char *);
     void (__cdecl *reset_error_mgr)(jpeg_common_struct *);
     int msg_code;
     $985051285AB838B711572F193DE40719 msg_parm;
     int trace_level;
     int num_warnings;
     const char *const *jpeg_message_table;
     int last_jpeg_message;
     const char *const *addon_message_table;
     int first_addon_message;
     int last_addon_message;
     void (*exit)(...);
     void (__cdecl *printf)(char *);
 };
 struct jpeg_common_struct // sizeof=0x20
 {
     jpeg_error_mgr *err;
     jpeg_memory_mgr *mem;
     jpeg_progress_mgr *progress;
     void *client_data;
     unsigned __int8 is_decompressor;
     // padding byte
     // padding byte
     // padding byte
     int global_state;
     jpeg_alloc alloc;
 };
 struct jvirt_sarray_control // sizeof=0x78
 {
     unsigned __int8 **mem_buffer;
     unsigned int rows_in_array;
     unsigned int samplesperrow;
     unsigned int maxaccess;
     unsigned int rows_in_mem;
     unsigned int rowsperchunk;
     unsigned int cur_start_row;
     unsigned int first_undef_row;
     unsigned __int8 pre_zero;
     unsigned __int8 dirty;
     unsigned __int8 b_s_open;
     // padding byte
     jvirt_sarray_control *next;
     backing_store_struct b_s_info;
 };
 struct backing_store_struct // sizeof=0x50
 {                                       // ...
     void (__cdecl *read_backing_store)(jpeg_common_struct *, backing_store_struct *, void *, int, int);
     void (__cdecl *write_backing_store)(jpeg_common_struct *, backing_store_struct *, void *, int, int);
     void (__cdecl *close_backing_store)(jpeg_common_struct *, backing_store_struct *);
     _iobuf *temp_file;
     char temp_name[64];
 };
 struct jvirt_barray_control // sizeof=0x78
 {
     __int16 (**mem_buffer)[64];
     unsigned int rows_in_array;
     unsigned int blocksperrow;
     unsigned int maxaccess;
     unsigned int rows_in_mem;
     unsigned int rowsperchunk;
     unsigned int cur_start_row;
     unsigned int first_undef_row;
     unsigned __int8 pre_zero;
     unsigned __int8 dirty;
     unsigned __int8 b_s_open;
     // padding byte
     jvirt_barray_control *next;
     backing_store_struct b_s_info;
 };
 struct jpeg_memory_mgr // sizeof=0x34
 {                                       // ...
     void *(__cdecl *alloc_small)(jpeg_common_struct *, int, unsigned int);
     void *(__cdecl *alloc_large)(jpeg_common_struct *, int, unsigned int);
     unsigned __int8 **(__cdecl *alloc_sarray)(jpeg_common_struct *, int, unsigned int, unsigned int);
     __int16 (**(__cdecl *alloc_barray)(jpeg_common_struct *, int, unsigned int, unsigned int))[64];
     jvirt_sarray_control *(__cdecl *request_virt_sarray)(jpeg_common_struct *, int, unsigned __int8, unsigned int, unsigned int, unsigned int);
     jvirt_barray_control *(__cdecl *request_virt_barray)(jpeg_common_struct *, int, unsigned __int8, unsigned int, unsigned int, unsigned int);
     void (__cdecl *realize_virt_arrays)(jpeg_common_struct *);
     unsigned __int8 **(__cdecl *access_virt_sarray)(jpeg_common_struct *, jvirt_sarray_control *, unsigned int, unsigned int, unsigned __int8);
     __int16 (**(__cdecl *access_virt_barray)(jpeg_common_struct *, jvirt_barray_control *, unsigned int, unsigned int, unsigned __int8))[64];
     void (__cdecl *free_pool)(jpeg_common_struct *, int);
     void (__cdecl *self_destruct)(jpeg_common_struct *);
     int max_memory_to_use;
     int max_alloc_chunk;
 };
 struct jpeg_progress_mgr // sizeof=0x14
 {
     void (__cdecl *progress_monitor)(jpeg_common_struct *);
     int pass_counter;
     int pass_limit;
     int completed_passes;
     int total_passes;
 };
 struct jpeg_alloc // sizeof=0x8
 {                                       // ...
     void *(__cdecl *malloc)(unsigned int); // ...
     void (__cdecl *free)(void *, unsigned int); // ...
 };
 union $985051285AB838B711572F193DE40719 // sizeof=0x50
 {                                       // ...
     int i[8];
     char s[80];
 };
 struct __declspec(align(8)) jpeg_decompress_struct // sizeof=0x1B8
 {
     jpeg_error_mgr *err;
     jpeg_memory_mgr *mem;
     jpeg_progress_mgr *progress;
     void *client_data;
     unsigned __int8 is_decompressor;
     // padding byte
     // padding byte
     // padding byte
     int global_state;
     jpeg_alloc alloc;
     jpeg_source_mgr *src;
     unsigned int image_width;
     unsigned int image_height;
     int num_components;
     J_COLOR_SPACE jpeg_color_space;
     J_COLOR_SPACE out_color_space;
     unsigned int scale_num;
     unsigned int scale_denom;
     long double output_gamma;
     unsigned __int8 buffered_image;
     unsigned __int8 raw_data_out;
     // padding byte
     // padding byte
     J_DCT_METHOD dct_method;
     unsigned __int8 do_fancy_upsampling;
     unsigned __int8 do_block_smoothing;
     unsigned __int8 quantize_colors;
     // padding byte
     J_DITHER_MODE dither_mode;
     unsigned __int8 two_pass_quantize;
     // padding byte
     // padding byte
     // padding byte
     int desired_number_of_colors;
     unsigned __int8 enable_1pass_quant;
     unsigned __int8 enable_external_quant;
     unsigned __int8 enable_2pass_quant;
     // padding byte
     unsigned int output_width;
     unsigned int output_height;
     int out_color_components;
     int output_components;
     int rec_outbuf_height;
     int actual_number_of_colors;
     unsigned __int8 **colormap;
     unsigned int output_scanline;
     int input_scan_number;
     unsigned int input_iMCU_row;
     int output_scan_number;
     unsigned int output_iMCU_row;
     int (*coef_bits)[64];
     JQUANT_TBL *quant_tbl_ptrs[4];
     JHUFF_TBL *dc_huff_tbl_ptrs[4];
     JHUFF_TBL *ac_huff_tbl_ptrs[4];
     int data_precision;
     jpeg_component_info *comp_info;
     unsigned __int8 progressive_mode;
     unsigned __int8 arith_code;
     unsigned __int8 arith_dc_L[16];
     unsigned __int8 arith_dc_U[16];
     unsigned __int8 arith_ac_K[16];
     // padding byte
     // padding byte
     unsigned int restart_interval;
     unsigned __int8 saw_JFIF_marker;
     unsigned __int8 JFIF_major_version;
     unsigned __int8 JFIF_minor_version;
     unsigned __int8 density_unit;
     unsigned __int16 X_density;
     unsigned __int16 Y_density;
     unsigned __int8 saw_Adobe_marker;
     unsigned __int8 Adobe_transform;
     unsigned __int8 CCIR601_sampling;
     // padding byte
     jpeg_marker_struct *marker_list;
     int max_h_samp_factor;
     int max_v_samp_factor;
     int min_DCT_scaled_size;
     unsigned int total_iMCU_rows;
     unsigned __int8 *sample_range_limit;
     int comps_in_scan;
     jpeg_component_info *cur_comp_info[4];
     unsigned int MCUs_per_row;
     unsigned int MCU_rows_in_scan;
     int blocks_in_MCU;
     int MCU_membership[10];
     int Ss;
     int Se;
     int Ah;
     int Al;
     int unread_marker;
     jpeg_decomp_master *master;
     jpeg_d_main_controller *main;
     jpeg_d_coef_controller *coef;
     jpeg_d_post_controller *post;
     jpeg_input_controller *inputctl;
     jpeg_marker_reader *marker;
     jpeg_entropy_decoder *entropy;
     jpeg_inverse_dct *idct;
     jpeg_upsampler *upsample;
     jpeg_color_deconverter *cconvert;
     jpeg_color_quantizer *cquantize;
     // padding byte
     // padding byte
     // padding byte
     // padding byte
 };
 struct jpeg_source_mgr // sizeof=0x1C
 {                                       // ...
     const unsigned __int8 *next_input_byte;
     unsigned int bytes_in_buffer;
     void (__cdecl *init_source)(jpeg_decompress_struct *);
     unsigned __int8 (__cdecl *fill_input_buffer)(jpeg_decompress_struct *);
     void (__cdecl *skip_input_data)(jpeg_decompress_struct *, int);
     unsigned __int8 (__cdecl *resync_to_restart)(jpeg_decompress_struct *, int);
     void (__cdecl *term_source)(jpeg_decompress_struct *);
 };
 struct __declspec(align(2)) JQUANT_TBL // sizeof=0x82
 {
     unsigned __int16 quantval[64];
     unsigned __int8 sent_table;
     // padding byte
 };
 struct JHUFF_TBL // sizeof=0x112
 {
     unsigned __int8 bits[17];
     unsigned __int8 huffval[256];
     unsigned __int8 sent_table;
 };
 struct jpeg_component_info // sizeof=0x54
 {
     int component_id;
     int component_index;
     int h_samp_factor;
     int v_samp_factor;
     int quant_tbl_no;
     int dc_tbl_no;
     int ac_tbl_no;
     unsigned int width_in_blocks;
     unsigned int height_in_blocks;
     int DCT_scaled_size;
     unsigned int downsampled_width;
     unsigned int downsampled_height;
     unsigned __int8 component_needed;
     // padding byte
     // padding byte
     // padding byte
     int MCU_width;
     int MCU_height;
     int MCU_blocks;
     int MCU_sample_width;
     int last_col_width;
     int last_row_height;
     JQUANT_TBL *quant_table;
     void *dct_table;
 };
 struct jpeg_marker_struct // sizeof=0x14
 {
     jpeg_marker_struct *next;
     unsigned __int8 marker;
     // padding byte
     // padding byte
     // padding byte
     unsigned int original_length;
     unsigned int data_length;
     unsigned __int8 *data;
 };
 struct __declspec(align(4)) jpeg_decomp_master // sizeof=0xC
 {                                       // ...
     void (__cdecl *prepare_for_output_pass)(jpeg_decompress_struct *);
     void (__cdecl *finish_output_pass)(jpeg_decompress_struct *);
     unsigned __int8 is_dummy_pass;
     // padding byte
     // padding byte
     // padding byte
 };
 struct jpeg_d_main_controller // sizeof=0x8
 {
     void (__cdecl *start_pass)(jpeg_decompress_struct *, J_BUF_MODE);
     void (__cdecl *process_data)(jpeg_decompress_struct *, unsigned __int8 **, unsigned int *, unsigned int);
 };
 struct jpeg_d_coef_controller // sizeof=0x14
 {
     void (__cdecl *start_input_pass)(jpeg_decompress_struct *);
     int (__cdecl *consume_data)(jpeg_decompress_struct *);
     void (__cdecl *start_output_pass)(jpeg_decompress_struct *);
     int (__cdecl *decompress_data)(jpeg_decompress_struct *, unsigned __int8 ***);
     jvirt_barray_control **coef_arrays;
 };
 struct jpeg_d_post_controller // sizeof=0x8
 {                                       // ...
     void (__cdecl *start_pass)(jpeg_decompress_struct *, J_BUF_MODE);
     void (__cdecl *post_process_data)(jpeg_decompress_struct *, unsigned __int8 ***, unsigned int *, unsigned int, unsigned __int8 **, unsigned int *, unsigned int);
 };
 struct __declspec(align(4)) jpeg_input_controller // sizeof=0x14
 {                                       // ...
     int (__cdecl *consume_input)(jpeg_decompress_struct *);
     void (__cdecl *reset_input_controller)(jpeg_decompress_struct *);
     void (__cdecl *start_input_pass)(jpeg_decompress_struct *);
     void (__cdecl *finish_input_pass)(jpeg_decompress_struct *);
     unsigned __int8 has_multiple_scans;
     unsigned __int8 eoi_reached;
     // padding byte
     // padding byte
 };
 struct jpeg_marker_reader // sizeof=0x18
 {                                       // ...
     void (__cdecl *reset_marker_reader)(jpeg_decompress_struct *);
     int (__cdecl *read_markers)(jpeg_decompress_struct *);
     unsigned __int8 (__cdecl *read_restart_marker)(jpeg_decompress_struct *);
     unsigned __int8 saw_SOI;
     unsigned __int8 saw_SOF;
     // padding byte
     // padding byte
     int next_restart_num;
     unsigned int discarded_bytes;
 };
 struct __declspec(align(4)) jpeg_entropy_decoder // sizeof=0xC
 {                                       // ...
     void (__cdecl *start_pass)(jpeg_decompress_struct *);
     unsigned __int8 (__cdecl *decode_mcu)(jpeg_decompress_struct *, __int16 (**)[64]);
     unsigned __int8 insufficient_data;
     // padding byte
     // padding byte
     // padding byte
 };
 struct jpeg_inverse_dct // sizeof=0x2C
 {                                       // ...
     void (__cdecl *start_pass)(jpeg_decompress_struct *);
     void (__cdecl *inverse_DCT[10])(jpeg_decompress_struct *, jpeg_component_info *, __int16 *, unsigned __int8 **, unsigned int);
 };
 struct __declspec(align(4)) jpeg_upsampler // sizeof=0xC
 {                                       // ...
     void (__cdecl *start_pass)(jpeg_decompress_struct *);
     void (__cdecl *upsample)(jpeg_decompress_struct *, unsigned __int8 ***, unsigned int *, unsigned int, unsigned __int8 **, unsigned int *, unsigned int);
     unsigned __int8 need_context_rows;
     // padding byte
     // padding byte
     // padding byte
 };
 struct jpeg_color_deconverter // sizeof=0x8
 {                                       // ...
     void (__cdecl *start_pass)(jpeg_decompress_struct *);
     void (__cdecl *color_convert)(jpeg_decompress_struct *, unsigned __int8 ***, unsigned int, unsigned __int8 **, int);
 };
 struct jpeg_color_quantizer // sizeof=0x10
 {                                       // ...
     void (__cdecl *start_pass)(jpeg_decompress_struct *, unsigned __int8);
     void (__cdecl *color_quantize)(jpeg_decompress_struct *, unsigned __int8 **, unsigned __int8 **, int);
     void (__cdecl *finish_pass)(jpeg_decompress_struct *);
     void (__cdecl *new_color_map)(jpeg_decompress_struct *);
 };
 struct jpeg_compress_struct // sizeof=0x170
 {                                       // ...
     jpeg_error_mgr *err;                // ...
     jpeg_memory_mgr *mem;
     jpeg_progress_mgr *progress;
     void *client_data;
     unsigned __int8 is_decompressor;
     // padding byte
     // padding byte
     // padding byte
     int global_state;
     jpeg_alloc alloc;                   // ...
     jpeg_destination_mgr *dest;
     unsigned int image_width;           // ...
     unsigned int image_height;          // ...
     int input_components;               // ...
     J_COLOR_SPACE in_color_space;       // ...
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     long double input_gamma;
     int data_precision;
     int num_components;
     J_COLOR_SPACE jpeg_color_space;
     jpeg_component_info *comp_info;
     JQUANT_TBL *quant_tbl_ptrs[4];
     JHUFF_TBL *dc_huff_tbl_ptrs[4];
     JHUFF_TBL *ac_huff_tbl_ptrs[4];
     unsigned __int8 arith_dc_L[16];
     unsigned __int8 arith_dc_U[16];
     unsigned __int8 arith_ac_K[16];
     int num_scans;
     const jpeg_scan_info *scan_info;
     unsigned __int8 raw_data_in;
     unsigned __int8 arith_code;
     unsigned __int8 optimize_coding;
     unsigned __int8 CCIR601_sampling;
     int smoothing_factor;
     J_DCT_METHOD dct_method;
     unsigned int restart_interval;
     int restart_in_rows;
     unsigned __int8 write_JFIF_header;
     unsigned __int8 JFIF_major_version;
     unsigned __int8 JFIF_minor_version;
     unsigned __int8 density_unit;
     unsigned __int16 X_density;
     unsigned __int16 Y_density;
     unsigned __int8 write_Adobe_marker;
     // padding byte
     // padding byte
     // padding byte
     unsigned int next_scanline;         // ...
     unsigned __int8 progressive_mode;
     // padding byte
     // padding byte
     // padding byte
     int max_h_samp_factor;
     int max_v_samp_factor;
     unsigned int total_iMCU_rows;
     int comps_in_scan;
     jpeg_component_info *cur_comp_info[4];
     unsigned int MCUs_per_row;
     unsigned int MCU_rows_in_scan;
     int blocks_in_MCU;
     int MCU_membership[10];
     int Ss;
     int Se;
     int Ah;
     int Al;
     jpeg_comp_master *master;
     jpeg_c_main_controller *main;
     jpeg_c_prep_controller *prep;
     jpeg_c_coef_controller *coef;
     jpeg_marker_writer *marker;
     jpeg_color_converter *cconvert;
     jpeg_downsampler *downsample;
     jpeg_forward_dct *fdct;
     jpeg_entropy_encoder *entropy;
     jpeg_scan_info *script_space;
     int script_space_size;
 };
 struct jpeg_destination_mgr // sizeof=0x14
 {                                       // ...
     unsigned __int8 *next_output_byte;
     unsigned int free_in_buffer;
     void (__cdecl *init_destination)(jpeg_compress_struct *);
     unsigned __int8 (__cdecl *empty_output_buffer)(jpeg_compress_struct *);
     void (__cdecl *term_destination)(jpeg_compress_struct *);
 };
 const struct jpeg_scan_info // sizeof=0x24
 {
     int comps_in_scan;
     int component_index[4];
     int Ss;
     int Se;
     int Ah;
     int Al;
 };
 struct __declspec(align(4)) jpeg_comp_master // sizeof=0x10
 {                                       // ...
     void (__cdecl *prepare_for_pass)(jpeg_compress_struct *);
     void (__cdecl *pass_startup)(jpeg_compress_struct *);
     void (__cdecl *finish_pass)(jpeg_compress_struct *);
     unsigned __int8 call_pass_startup;
     unsigned __int8 is_last_pass;
     // padding byte
     // padding byte
 };
 struct jpeg_c_main_controller // sizeof=0x8
 {                                       // ...
     void (__cdecl *start_pass)(jpeg_compress_struct *, J_BUF_MODE);
     void (__cdecl *process_data)(jpeg_compress_struct *, unsigned __int8 **, unsigned int *, unsigned int);
 };
 struct jpeg_c_prep_controller // sizeof=0x8
 {                                       // ...
     void (__cdecl *start_pass)(jpeg_compress_struct *, J_BUF_MODE);
     void (__cdecl *pre_process_data)(jpeg_compress_struct *, unsigned __int8 **, unsigned int *, unsigned int, unsigned __int8 ***, unsigned int *, unsigned int);
 };
 struct jpeg_c_coef_controller // sizeof=0x8
 {                                       // ...
     void (__cdecl *start_pass)(jpeg_compress_struct *, J_BUF_MODE);
     unsigned __int8 (__cdecl *compress_data)(jpeg_compress_struct *, unsigned __int8 ***);
 };
 struct jpeg_marker_writer // sizeof=0x1C
 {                                       // ...
     void (__cdecl *write_file_header)(jpeg_compress_struct *);
     void (__cdecl *write_frame_header)(jpeg_compress_struct *);
     void (__cdecl *write_scan_header)(jpeg_compress_struct *);
     void (__cdecl *write_file_trailer)(jpeg_compress_struct *);
     void (__cdecl *write_tables_only)(jpeg_compress_struct *);
     void (__cdecl *write_marker_header)(jpeg_compress_struct *, int, unsigned int);
     void (__cdecl *write_marker_byte)(jpeg_compress_struct *, int);
 };
 struct jpeg_color_converter // sizeof=0x8
 {                                       // ...
     void (__cdecl *start_pass)(jpeg_compress_struct *);
     void (__cdecl *color_convert)(jpeg_compress_struct *, unsigned __int8 **, unsigned __int8 ***, unsigned int, int);
 };
 struct __declspec(align(4)) jpeg_downsampler // sizeof=0xC
 {                                       // ...
     void (__cdecl *start_pass)(jpeg_compress_struct *);
     void (__cdecl *downsample)(jpeg_compress_struct *, unsigned __int8 ***, unsigned int, unsigned __int8 ***, unsigned int);
     unsigned __int8 need_context_rows;
     // padding byte
     // padding byte
     // padding byte
 };
 struct jpeg_forward_dct // sizeof=0x8
 {                                       // ...
     void (__cdecl *start_pass)(jpeg_compress_struct *);
     void (__cdecl *forward_DCT)(jpeg_compress_struct *, jpeg_component_info *, unsigned __int8 **, __int16 (*)[64], unsigned int, unsigned int, unsigned int);
 };
 struct jpeg_entropy_encoder // sizeof=0xC
 {                                       // ...
     void (__cdecl *start_pass)(jpeg_compress_struct *, unsigned __int8);
     unsigned __int8 (__cdecl *encode_mcu)(jpeg_compress_struct *, __int16 (**)[64]);
     void (__cdecl *finish_pass)(jpeg_compress_struct *);
 };
 union jpeg_error_mgr::<unnamed_type_msg_parm> // sizeof=0x50
 {
     int i[8];
     char s[80];
 };
 struct my_destination_mgr // sizeof=0x1C
 {
     jpeg_destination_mgr pub;
     unsigned __int8 *outfile;
     int size;
 };
 struct StaticModelLightCallback // sizeof=0x74
 {                                       // ...
     unsigned __int8 *smodelVisData;     // ...
     float position[3];                  // ...
     float radiusSq;                     // ...
     float planes[6][4];                 // ...
 };
 struct LightGlobals // sizeof=0x104
 {                                       // ...
     int defCount;                       // ...
     GfxLightDef *defs[64];              // ...
 };
 struct __cppobj std::pair<GfxSurface * *,GfxSurface * *> // sizeof=0x8
 {
     GfxSurface **first;
     GfxSurface **second;
 };
 struct BspOmniLightCallback // sizeof=0x14
 {                                       // ...
     const unsigned __int8 *surfaceVisData; // ...
     float position[3];                  // ...
     float radiusSq;                     // ...
 };
 struct BspSpotLightCallback // sizeof=0x64
 {                                       // ...
     const unsigned __int8 *surfaceVisData; // ...
     float planes[6][4];                 // ...
 };
 struct FxWorldMarkPoint // sizeof=0x18
 {                                       // ...
     float xyz[3];
     float vertWeights[3];
 };
 struct MarkModelCoreContext // sizeof=0x1C
 {                                       // ...
     MarkInfo *markInfo;                 // ...
     GfxMarkContext *markContext;        // ...
     const float *markOrigin;            // ...
     const float *markDir;               // ...
     const float (*clipPlanes)[4];       // ...
     const float (*transformMatrix)[3];  // ...
     const float (*transformNormalMatrix)[3]; // ...
 };
 struct FxModelMarkPoint // sizeof=0x18
 {                                       // ...
     float xyz[3];                       // ...
     float vertWeights[3];               // ...
 };
 struct BuiltInMaterialTable // sizeof=0x8
 {                                       // ...
     const char *name;
     Material **material;
 };
 struct $1885470E9E0F585A5936AD9F9DCB543E // sizeof=0x1004
 {                                       // ...
     int techniqueSetCount;
     MaterialTechniqueSet *techniqueSetHashTable[1024]; // ...
 };
 struct stream_source_info_t // sizeof=0x3
 {                                       // ...
     unsigned __int8 Stream;
     unsigned __int8 Offset;
     unsigned __int8 Type;
 };
 struct stream_dest_info_t // sizeof=0x2
 {                                       // ...
     unsigned __int8 Usage;
     unsigned __int8 UsageIndex;
 };
 struct __cppobj std::pair<MaterialMemory *,MaterialMemory *> // sizeof=0x8
 {
     MaterialMemory *first;
     MaterialMemory *second;
 };
 struct MaterialList // sizeof=0x4004
 {
     unsigned int count;
     MaterialMemory sorted[2048];
 };
 struct MaterialTechniqueSetList // sizeof=0x1004
 {
     MaterialTechniqueSet *entry[1024];
     int count;
 };
 struct GfxShaderConstantBlock // sizeof=0x64
 {                                       // ...
     unsigned int count;                 // ...
     unsigned __int16 dest[16];          // ...
     const float *value[16];             // ...
 };
 struct LayeredTechniqueSetName // sizeof=0x10
 {                                       // ...
     const char *inputName;              // ...
     const char *namePrefixRegister;
     const char *namePrefixGenerate;
     const char *nameChunk;
 };
 struct MaterialTypeInfo // sizeof=0xC
 {                                       // ...
     const char *prefix;                 // ...
     const char *techniqueSetPrefix;     // ...
     unsigned int prefixLen;             // ...
 };
 struct GfxCachedShaderText // sizeof=0xC
 {                                       // ...
     const char *name;                   // ...
     const char *text;                   // ...
     int textSize;                       // ...
 };
 struct MaterialString // sizeof=0x8
 {                                       // ...
     const char *string;                 // ...
     unsigned int hash;                  // ...
 };
 struct MaterialStateMapRule // sizeof=0x20
 {                                       // ...
     unsigned int stateBitsMask[2];
     unsigned int stateBitsValue[2];
     unsigned int stateBitsSet[2];
     unsigned int stateBitsClear[2];
 };
 struct MaterialStateMapRuleSet // sizeof=0x24
 {
     int ruleCount;
     MaterialStateMapRule rules[1];
 };
 struct MaterialStateMap // sizeof=0x2C
 {
     const char *name;
     MaterialStateMapRuleSet *ruleSet[10];
 };
 struct $8E67C8D28114E56A26FBAF05ACADB66A // sizeof=0x11028
 {                                       // ...
     unsigned int cachedShaderCount;     // ...
     GfxCachedShaderText *cachedShaderText; // ...
     unsigned int vertexDeclCount;       // ...
     MaterialVertexDeclaration vertexDeclHashTable[32]; // ...
     unsigned int literalCount;          // ...
     float literalTable[16][4];          // ...
     unsigned int stringCount;           // ...
     MaterialString stringHashTable[64]; // ...
     unsigned int vertexShaderCount;     // ...
     MaterialVertexShader *vertexShaderHashTable[2][2048]; // ...
     unsigned int pixelShaderCount;      // ...
     MaterialPixelShader *pixelShaderHashTable[2][2048]; // ...
     unsigned int stateMapCount;         // ...
     MaterialStateMap *stateMapHashTable[32]; // ...
     unsigned int techniqueCount;        // ...
     MaterialTechnique *techniqueHashTable[2][4096]; // ...
     const MaterialRaw *sortMtlRaw;      // ...
 };
 struct CodeSamplerSource // sizeof=0x14
 {                                       // ...
     const char *name;
     MaterialTextureSource source;
     const CodeSamplerSource *subtable;
     int arrayCount;
     int arrayStride;
 };
 struct CodeConstantSource // sizeof=0x14
 {                                       // ...
     const char *name;
     unsigned __int8 source;
     // padding byte
     // padding byte
     // padding byte
     const CodeConstantSource *subtable;
     int arrayCount;
     int arrayStride;
 };
 struct MtlStateMapBitName // sizeof=0x8
 {                                       // ...
     const char *name;
     int bits;
 };
 struct MtlStateMapBitGroup // sizeof=0x10
 {                                       // ...
     const char *name;                   // ...
     const MtlStateMapBitName *bitNames; // ...
     int stateBitsMask[2];               // ...
 };
 struct _D3DXSHADER_TYPEINFO // sizeof=0x10
 {
     unsigned __int16 Class;
     unsigned __int16 Type;
     unsigned __int16 Rows;
     unsigned __int16 Columns;
     unsigned __int16 Elements;
     unsigned __int16 StructMembers;
     unsigned int StructMemberInfo;
 };
 struct GfxAssembledShaderTextFile // sizeof=0x108
 {                                       // ...
     unsigned int srcLine;
     unsigned int destLine;
     char fileName[256];
 };
 struct GfxAssembledShaderText // sizeof=0x8418
 {                                       // ...
     char *string;
     unsigned int used;
     unsigned int total;
     unsigned int currentDestLine;
     bool overflowed;
     // padding byte
     // padding byte
     // padding byte
     unsigned int fileCount;
     GfxAssembledShaderTextFile files[128];
 };
 struct __cppobj std::pair<GfxCachedShaderText *,GfxCachedShaderText *> // sizeof=0x8
 {                                       // ...
     GfxCachedShaderText *first;         // ...
     GfxCachedShaderText *second;        // ...
 };
 struct __cppobj std::pair<Material * *,Material * *> // sizeof=0x8
 {
     Material **first;
     Material **second;
 };
 struct __declspec(align(4)) ShaderUniformDef // sizeof=0x10
 {                                       // ...
     ShaderParamType type;
     const char *name;
     unsigned __int16 index;
     unsigned __int16 resourceDest;
     bool isTransposed;
     bool isAssigned;
     // padding byte
     // padding byte
 };
 struct _SYSTEMTIME // sizeof=0x10
 {                                       // ...
     unsigned __int16 wYear;             // ...
     unsigned __int16 wMonth;            // ...
     unsigned __int16 wDayOfWeek;        // ...
     unsigned __int16 wDay;              // ...
     unsigned __int16 wHour;             // ...
     unsigned __int16 wMinute;           // ...
     unsigned __int16 wSecond;           // ...
     unsigned __int16 wMilliseconds;     // ...
 };
 struct MaterialWaterDef // sizeof=0x20
 {
     int textureWidth;
     float horizontalWorldLength;
     float verticalWorldLength;
     float amplitude;
     float windSpeed;
     float windDirection[2];
     water_t *map;
 };
 struct __declspec(align(4)) ShaderIndexRange // sizeof=0xC
 {                                       // ...
     unsigned int first;                 // ...
     unsigned int count;                 // ...
     bool isImplicit;                    // ...
     // padding byte
     // padding byte
     // padding byte
 };
 struct ShaderArgumentDest // sizeof=0x10
 {                                       // ...
     ShaderIndexRange indexRange;        // ...
     const char *paramName;              // ...
 };
 struct _D3DXSHADER_CONSTANTINFO // sizeof=0x14
 {                                       // ...
     unsigned int Name;                  // ...
     unsigned __int16 RegisterSet;       // ...
     unsigned __int16 RegisterIndex;     // ...
     unsigned __int16 RegisterCount;     // ...
     unsigned __int16 Reserved;
     unsigned int TypeInfo;              // ...
     unsigned int DefaultValue;          // ...
 };
 struct _D3DXSHADER_CONSTANTTABLE // sizeof=0x1C
 {
     unsigned int Size;
     unsigned int Creator;
     unsigned int Version;
     unsigned int Constants;
     unsigned int ConstantInfo;
     unsigned int Flags;
     unsigned int Target;
 };
 struct __declspec(align(2)) ShaderVaryingDef // sizeof=0x8
 {                                       // ...
     const char *name;
     unsigned __int8 streamDest;
     unsigned __int8 resourceDest;
     bool isAssigned;
     // padding byte
 };
 struct _D3DXSEMANTIC // sizeof=0x8
 {                                       // ...
     unsigned int Usage;                 // ...
     unsigned int UsageIndex;
 };
 struct ShaderParameterSet // sizeof=0x38C
 {                                       // ...
     ShaderUniformDef uniformInputs[32];
     ShaderVaryingDef varyingInputs[32]; // ...
     ShaderVaryingDef outputs[16];       // ...
     unsigned int uniformInputCount;
     unsigned int varyingInputCount;     // ...
     unsigned int outputCount;           // ...
 };
 union ShaderArgumentSource::<unnamed_type_u> // sizeof=0x4
 {                                       // ...
     const float *literalConst;
     unsigned __int16 codeIndex;
     const char *name;
 };
 struct ShaderArgumentSource // sizeof=0x14
 {                                       // ...
     ShaderIndexRange indexRange;
     unsigned __int16 type;              // ...
     // padding byte
     // padding byte
     ShaderArgumentSource::<unnamed_type_u> u; // ...
 };
 struct $4ABF24606230B73E4E420CE33A1F14B1 // sizeof=0xC
 {                                       // ...
     bool isRegisteringOverrides;        // ...
     bool isDirty;                       // ...
     // padding byte
     // padding byte
     unsigned int remapMask;             // ...
     unsigned int remapValue;            // ...
 };
 struct __declspec(align(4)) GfxMtlFeatureMap // sizeof=0x10
 {                                       // ...
     const char *name;
     unsigned int mask;
     unsigned int value;
     bool valueRequired;
     // padding byte
     // padding byte
     // padding byte
 };
 struct GfxMeshGlobals // sizeof=0x180
 {                                       // ...
     GfxQuadMeshData fullSceneViewMesh[4]; // ...
     GfxMeshData spotShadowClearMeshData[4]; // ...
     GfxMeshData sunShadowClearMeshData[2]; // ...
 };
 struct __cppobj std::pair<XModel * *,XModel * *> // sizeof=0x8
 {                                       // ...
     XModel **first;                     // ...
     XModel **second;                    // ...
 };
 struct ModelList // sizeof=0x2004
 {
     int count;
     XModel *sorted[2048];
 };
 struct GfxSmodelLightGlob::<unnamed_type_local> // sizeof=0x6080
 {                                       // ...
     unsigned __int16 smodelIndex[4096]; // ...
     unsigned int usedFrameCount[4096];  // ...
     unsigned int entryLimit;            // ...
     unsigned int assignedCount;         // ...
     unsigned int freeableCount;         // ...
     unsigned int frameCount;            // ...
     int anyNewLighting;                 // ...
     unsigned int pad[27];
 };
 struct GfxSmodelLightGlob // sizeof=0xA080
 {                                       // ...
     unsigned __int16 freeableHandles[4096]; // ...
     unsigned int lightingBits[2048];    // ...
     GfxSmodelLightGlob::<unnamed_type_local> local; // ...
 };
 struct $D83B18AC5ED51685DB5F92059A920C50 // sizeof=0x4
 {                                       // ...
     unsigned int baseIndex;             // ...
 };
 struct $616C0C4E0125F5DAA7F70C1AB2F0F42D // sizeof=0x6C
 {                                       // ...
     float invImageHeight;               // ...
     $D83B18AC5ED51685DB5F92059A920C50 xmodel; // ...
     unsigned int totalEntryLimit;       // ...
     unsigned int entryBitsY;            // ...
     unsigned int imageHeight;           // ...
     const GfxEntity *entities;
     unsigned int modFrameCount;         // ...
     GfxImage *lightImages[2];           // ...
     GfxImage *image;                    // ...
     unsigned int xmodelEntryLimit;      // ...
     GfxLightingInfo *lightingInfo;      // ...
     float (*lightingOrigins)[3];        // ...
     int allocModelFail;                 // ...
     unsigned int *pixelFreeBits[4];     // ...
     unsigned int *prevPrevPixelFreeBits; // ...
     unsigned int *prevPixelFreeBits;    // ...
     unsigned int *currPixelFreeBits;    // ...
     unsigned int pixelFreeBitsSize;     // ...
     unsigned int pixelFreeBitsWordCount; // ...
     unsigned int pixelFreeRover;        // ...
     _D3DLOCKED_BOX lockedBox;           // ...
 };
 struct GfxFindLightForSphere // sizeof=0x14
 {                                       // ...
     const GfxViewInfo *viewInfo;        // ...
     float origin[3];                    // ...
     float radius;                       // ...
 };
 struct GfxFindLightForBox // sizeof=0x1C
 {                                       // ...
     const GfxViewInfo *viewInfo;        // ...
     float midPoint[3];                  // ...
     float halfSize[3];                  // ...
 };
 union __m128 // sizeof=0x10
 {                                       // ...
     float m128_f32[4];
     unsigned __int64 m128_u64[2];
     char m128_i8[16];
     __int16 m128_i16[8];
     int m128_i32[4];
     __int64 m128_i64[2];
     unsigned __int8 m128_u8[16];
     unsigned __int16 m128_u16[8];
     unsigned int m128_u32[4];
 };
 union __m64 // sizeof=0x8
 {                                       // ...
     unsigned __int64 m64_u64;
     float m64_f32[2];
     char m64_i8[8];
     __int16 m64_i16[4];
     int m64_i32[2];
     __int64 m64_i64;
     unsigned __int8 m64_u8[8];
     unsigned __int16 m64_u16[4];
     unsigned int m64_u32[2];
 };
 union SavedNormalTangent // sizeof=0x10
 {                                       // ...
     float floatArray[4];
     __m64 mmxReg;
 };
 struct __cppobj Sse_SkinVertexSimple_0 // sizeof=0x0
 {
 };
 struct __cppobj Sse_SkinVertexSimple_3 // sizeof=0x0
 {
 };
 struct __cppobj Sse_SkinVertex_0 // sizeof=0x0
 {
 };
 struct __cppobj Sse_SkinVertexSimple_1 // sizeof=0x0
 {
 };
 struct SseMatrix // sizeof=0x40
 {                                       // ...
     __m128 col0;
     __m128 col1;
     __m128 col2;
     __m128 col3;
 };
 struct __cppobj Sse_SkinVertex_1 // sizeof=0x0
 {
 };
 struct __cppobj Sse_SkinVertex_2 // sizeof=0x0
 {
 };
 struct __cppobj Sse_SkinVertexSimple_2 // sizeof=0x0
 {
 };
 struct __cppobj Sse_SkinVertex_3 // sizeof=0x0
 {
 };
 struct OutdoorGlob // sizeof=0x40
 {                                       // ...
     float bbox[2][3];                   // ...
     float scale[3];                     // ...
     float invScale[3];                  // ...
     float add[3];                       // ...
     unsigned __int8 *pic;               // ...
 };
 struct GfxPixelCostColorCode // sizeof=0x8
 {                                       // ...
     unsigned __int8 count;              // ...
     unsigned __int8 r;                  // ...
     unsigned __int8 g;                  // ...
     unsigned __int8 b;                  // ...
     const char *colorName;              // ...
 };
 struct GfxShadowedLightEntry // sizeof=0x8
 {                                       // ...
     unsigned __int8 shadowableLightIndex;
     bool isFadingOut;
     // padding byte
     // padding byte
     float fade;
 };
 struct GfxShadowedLightHistory // sizeof=0x48
 {                                       // ...
     unsigned int shadowableLightWasUsed[8];
     GfxShadowedLightEntry entries[4];
     unsigned int entryCount;
     unsigned int lastUpdateTime;
 };
 struct GfxCandidateShadowedLight // sizeof=0x8
 {                                       // ...
     unsigned int shadowableLightIndex;  // ...
     float score;
 };
 struct ColorCorrectionData // sizeof=0x54
 {                                       // ...
     char name[64];
     float black_level;
     float white_level;
     float gamma;
     float saturation;
     float range;
 };
 struct GfxDebugFrameGlob // sizeof=0x11E880
 {                                       // ...
     GfxCmdArray *restoreCmdList;        // ...
     GfxBackEndData *restoreFrontEndDataOut; // ...
     bool restoreSkinnedCache;           // ...
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     GfxBackEndData frontEndDataOut;     // ...
     bool inFrame;                       // ...
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
 };
 struct GfxCmdSaveScreen // sizeof=0x8
 {
     GfxCmdHeader header;
     int screenTimerId;
 };
 struct GfxCmdStretchPicRotateXY // sizeof=0x30
 {
     GfxCmdHeader header;
     const Material *material;
     float x;
     float y;
     float w;
     float h;
     float s0;
     float t0;
     float s1;
     float t1;
     GfxColor color;
     float rotation;
 };
 struct GfxCmdSaveScreenSection // sizeof=0x18
 {
     GfxCmdHeader header;
     float s0;
     float t0;
     float ds;
     float dt;
     int screenTimerId;
 };
 struct GfxCmdSetViewport // sizeof=0x14
 {
     GfxCmdHeader header;
     GfxViewport viewport;
 };
 struct GfxCmdDrawText3D // sizeof=0x34
 {
     GfxCmdHeader header;
     float org[3];
     Font_s *font;
     float xPixelStep[3];
     float yPixelStep[3];
     GfxColor color;
     char text[4];
 };
 struct GfxCmdStretchRaw // sizeof=0x28
 {
     GfxCmdHeader header;
     int x;
     int y;
     int w;
     int h;
     int cols;
     int rows;
     const unsigned __int8 *data;
     int client;
     int dirty;
 };
 struct __declspec(align(2)) GfxCmdDrawText2D // sizeof=0x54
 {
     GfxCmdHeader header;
     float x;
     float y;
     float rotation;
     Font_s *font;
     float xScale;
     float yScale;
     GfxColor color;
     int maxChars;
     int renderFlags;
     int cursorPos;
     char cursorLetter;
     // padding byte
     // padding byte
     // padding byte
     GfxColor glowForceColor;
     int fxBirthTime;
     int fxLetterTime;
     int fxDecayStartTime;
     int fxDecayDuration;
     const Material *fxMaterial;
     const Material *fxMaterialGlow;
     float padding;
     char text[3];
     // padding byte
 };
 struct GfxCmdDrawQuadPic // sizeof=0x2C
 {
     GfxCmdHeader header;
     const Material *material;
     float verts[4][2];
     GfxColor color;
 };
 struct GfxCmdDrawProfile // sizeof=0x4
 {
     GfxCmdHeader header;
 };
 struct GfxCmdClearScreen // sizeof=0x1C
 {
     GfxCmdHeader header;
     unsigned __int8 whichToClear;
     unsigned __int8 stencil;
     // padding byte
     // padding byte
     float depth;
     float color[4];
 };
 struct GfxPointVertex // sizeof=0x10
 {                                       // ...
     float xyz[3];
     unsigned __int8 color[4];           // ...
 };
 struct GfxCmdDrawPoints // sizeof=0x18
 {
     GfxCmdHeader header;
     __int16 pointCount;
     unsigned __int8 size;
     unsigned __int8 dimensions;
     GfxPointVertex verts[1];
 };
 struct GfxCmdSetMaterialColor // sizeof=0x14
 {
     GfxCmdHeader header;
     float color[4];
 };
 struct GfxCmdDrawTriangles // sizeof=0x10
 {
     GfxCmdHeader header;
     const Material *material;
     MaterialTechniqueType techType;
     __int16 indexCount;
     __int16 vertexCount;
 };
 struct GfxCmdDrawLines // sizeof=0x28
 {
     GfxCmdHeader header;
     __int16 lineCount;
     unsigned __int8 width;
     unsigned __int8 dimensions;
     GfxPointVertex verts[2];
 };
 struct GfxCmdStretchPic // sizeof=0x2C
 {
     GfxCmdHeader header;
     const Material *material;
     float x;
     float y;
     float w;
     float h;
     float s0;
     float t0;
     float s1;
     float t1;
     GfxColor color;
 };
 struct GfxCmdStretchPicRotateST // sizeof=0x34
 {
     GfxCmdHeader header;
     const Material *material;
     float x;
     float y;
     float w;
     float h;
     float centerS;
     float centerT;
     float radiusST;
     float scaleFinalS;
     float scaleFinalT;
     GfxColor color;
     float rotation;
 };
 struct GfxCmdBlendSavedScreenFlashed // sizeof=0x1C
 {
     GfxCmdHeader header;
     float intensityWhiteout;
     float intensityScreengrab;
     float s0;
     float t0;
     float ds;
     float dt;
 };
 struct GfxCmdBlendSavedScreenBlurred // sizeof=0x1C
 {
     GfxCmdHeader header;
     int fadeMsec;
     float s0;
     float t0;
     float ds;
     float dt;
     int screenTimerId;
 };
 struct GfxCmdProjectionSet // sizeof=0x8
 {
     GfxCmdHeader header;
     GfxProjectionTypes projection;
 };
 struct GfxCmdDrawFullScreenColoredQuad // sizeof=0x1C
 {
     GfxCmdHeader header;
     const Material *material;
     float s0;
     float t0;
     float s1;
     float t1;
     GfxColor color;
 };
 struct SceneEntCmd // sizeof=0x4
 {                                       // ...
     const GfxViewInfo *viewInfo;        // ...
 };
 struct GfxSceneParms // sizeof=0xA0
 {                                       // ...
     int localClientNum;
     float blurRadius;
     GfxDepthOfField dof;
     GfxFilm film;
     GfxGlow glow;
     bool isRenderingFullScreen;
     // padding byte
     // padding byte
     // padding byte
     GfxViewport sceneViewport;
     GfxViewport displayViewport;
     GfxViewport scissorViewport;
     const GfxLight *primaryLights;
 };
 struct ShadowCookieCmd // sizeof=0x10
 {                                       // ...
     const GfxViewParms *viewParmsDpvs;
     const GfxViewParms *viewParmsDraw;
     ShadowCookieList *shadowCookieList;
     int localClientNum;
 };
 struct $EF604BEDDA69129AF7FD28DC5064E1AD // sizeof=0x18
 {                                       // ...
     unsigned __int8 *pixels[6];         // ...
 };
 struct GfxShaderConstantState::<unnamed_type_fields> // sizeof=0x8
 {                                       // ...
     MaterialArgumentCodeConst codeConst;
     unsigned int version;
 };
 union GfxShaderConstantState // sizeof=0x8
 {                                       // ...
     GfxShaderConstantState::<unnamed_type_fields> fields;
     unsigned __int64 packed;
 };
 struct ShadowCookieGlob // sizeof=0x8
 {                                       // ...
     float weightCap;                    // ...
     int lastTime;                       // ...
 };
 struct ShadowCandidate // sizeof=0x8
 {                                       // ...
     int sceneEntIndex;                  // ...
     float weight;                       // ...
 };
 struct __cppobj std::pair<ShadowCandidate *,ShadowCandidate *> // sizeof=0x8
 {                                       // ...
     ShadowCandidate *first;             // ...
     ShadowCandidate *second;            // ...
 };
 struct ShadowReceiverCallback // sizeof=0x4
 {                                       // ...
     unsigned __int8 *surfaceVisData;    // ...
 };
 struct SunFlareDynamic // sizeof=0x28
 {                                       // ...
     float flareIntensity;
     float currentBlind;
     float currentGlare;
     int lastTime;
     float lastVisibility;
     float lastDot;
     bool error;
     bool sunQueryIssued[2];             // ...
     // padding byte
     IDirect3DQuery9 *sunQuery[2];       // ...
     int hitNum;
 };
 struct GfxSpotShadowEntCmd // sizeof=0x8
 {                                       // ...
     GfxSceneEntity *sceneEnt;           // ...
     const GfxLight *light;              // ...
 };
 struct static_model_tree_list_t // sizeof=0x8
 {                                       // ...
     static_model_tree_list_t *prev;     // ...
     static_model_tree_list_t *next;     // ...
 };
 struct static_model_node_t // sizeof=0x4
 {                                       // ...
     __int16 usedVerts;
     bool inuse;
     unsigned __int8 reserved;
 };
 struct static_model_tree_t // sizeof=0x108
 {                                       // ...
     static_model_tree_list_t usedlist;
     unsigned int frameCount;
     static_model_node_t nodes[63];
 };
 struct static_model_node_list_t // sizeof=0x8
 {                                       // ...
     static_model_node_list_t *prev;     // ...
     static_model_node_list_t *next;     // ...
 };
 union static_model_leaf_t // sizeof=0x8
 {                                       // ...
     GfxCachedSModelSurf cachedSurf;
     static_model_node_list_t freenode;
 };
 struct static_model_cache_t // sizeof=0x410E0
 {                                       // ...
     static_model_tree_t trees[512];
     static_model_leaf_t leafs[512][32]; // ...
     static_model_node_list_t freelist[4][6]; // ...
     static_model_tree_list_t usedlist[4]; // ...
 };
 struct SkinCachedStaticModelCmd // sizeof=0x4
 {                                       // ...
     unsigned __int16 cacheIndex;        // ...
     unsigned __int16 firstPatchVert;    // ...
 };
 struct GfxSModelSurfStats // sizeof=0x10
 {                                       // ...
     XModel *model;                      // ...
     unsigned int lod;                   // ...
     unsigned int smcAllocBits;          // ...
     unsigned int useCount;              // ...
 };
 struct __cppobj std::pair<GfxSModelSurfStats *,GfxSModelSurfStats *> // sizeof=0x8
 {                                       // ...
     GfxSModelSurfStats *first;          // ...
     GfxSModelSurfStats *second;         // ...
 };
 struct __cppobj std::pair<GfxStaticModelDrawInst const * *,GfxStaticModelDrawInst const * *> // sizeof=0x8
 {                                       // ...
     const GfxStaticModelDrawInst **first; // ...
     const GfxStaticModelDrawInst **second; // ...
 };
 struct ShadowGlobals // sizeof=0x4
 {                                       // ...
     const MaterialTechnique *defaultShadowCasterTechnique; // ...
 };
 struct _DDSCAPS // sizeof=0x4
 {                                       // ...
     unsigned int dwCaps;
 };
 union $83FB4F737B5EDC31066F75BACF4F71E0 // sizeof=0x4
 {                                       // ...
     unsigned int dwCaps4;
     unsigned int dwVolumeDepth;
 };
 struct _DDSCAPS2 // sizeof=0x10
 {                                       // ...
     unsigned int dwCaps;                // ...
     unsigned int dwCaps2;               // ...
     unsigned int dwCaps3;               // ...
     $83FB4F737B5EDC31066F75BACF4F71E0 ___u3; // ...
 };
 struct _DDCAPS_DX7 // sizeof=0x17C
 {
     unsigned int dwSize;
     unsigned int dwCaps;
     unsigned int dwCaps2;
     unsigned int dwCKeyCaps;
     unsigned int dwFXCaps;
     unsigned int dwFXAlphaCaps;
     unsigned int dwPalCaps;
     unsigned int dwSVCaps;
     unsigned int dwAlphaBltConstBitDepths;
     unsigned int dwAlphaBltPixelBitDepths;
     unsigned int dwAlphaBltSurfaceBitDepths;
     unsigned int dwAlphaOverlayConstBitDepths;
     unsigned int dwAlphaOverlayPixelBitDepths;
     unsigned int dwAlphaOverlaySurfaceBitDepths;
     unsigned int dwZBufferBitDepths;
     unsigned int dwVidMemTotal;
     unsigned int dwVidMemFree;
     unsigned int dwMaxVisibleOverlays;
     unsigned int dwCurrVisibleOverlays;
     unsigned int dwNumFourCCCodes;
     unsigned int dwAlignBoundarySrc;
     unsigned int dwAlignSizeSrc;
     unsigned int dwAlignBoundaryDest;
     unsigned int dwAlignSizeDest;
     unsigned int dwAlignStrideAlign;
     unsigned int dwRops[8];
     _DDSCAPS ddsOldCaps;
     unsigned int dwMinOverlayStretch;
     unsigned int dwMaxOverlayStretch;
     unsigned int dwMinLiveVideoStretch;
     unsigned int dwMaxLiveVideoStretch;
     unsigned int dwMinHwCodecStretch;
     unsigned int dwMaxHwCodecStretch;
     unsigned int dwReserved1;
     unsigned int dwReserved2;
     unsigned int dwReserved3;
     unsigned int dwSVBCaps;
     unsigned int dwSVBCKeyCaps;
     unsigned int dwSVBFXCaps;
     unsigned int dwSVBRops[8];
     unsigned int dwVSBCaps;
     unsigned int dwVSBCKeyCaps;
     unsigned int dwVSBFXCaps;
     unsigned int dwVSBRops[8];
     unsigned int dwSSBCaps;
     unsigned int dwSSBCKeyCaps;
     unsigned int dwSSBFXCaps;
     unsigned int dwSSBRops[8];
     unsigned int dwMaxVideoPorts;
     unsigned int dwCurrVideoPorts;
     unsigned int dwSVBCaps2;
     unsigned int dwNLVBCaps;
     unsigned int dwNLVBCaps2;
     unsigned int dwNLVBCKeyCaps;
     unsigned int dwNLVBFXCaps;
     unsigned int dwNLVBRops[8];
     _DDSCAPS2 ddsCaps;
 };
 struct __declspec(align(8)) tagDDDEVICEIDENTIFIER2 // sizeof=0x430
 {
     char szDriver[512];
     char szDescription[512];
     _LARGE_INTEGER liDriverVersion;
     unsigned int dwVendorId;
     unsigned int dwDeviceId;
     unsigned int dwSubSysId;
     unsigned int dwRevision;
     _GUID guidDeviceIdentifier;
     unsigned int dwWHQLLevel;
     // padding byte
     // padding byte
     // padding byte
     // padding byte
 };
 struct __cppobj IDirectDrawSurface : IUnknown // sizeof=0x4
 {
 };
 struct _DDCOLORKEY // sizeof=0x8
 {                                       // ...
     unsigned int dwColorSpaceLowValue;
     unsigned int dwColorSpaceHighValue;
 };
 union $339278B73E4A7A194B9F7B0332EBEC74 // sizeof=0x4
 {                                       // ...
     unsigned int dwZDestConst;
     IDirectDrawSurface *lpDDSZBufferDest;
 };
 union $FA0A8E8D82C7769CAFBAED8B8B480A4A // sizeof=0x4
 {                                       // ...
     unsigned int dwZSrcConst;
     IDirectDrawSurface *lpDDSZBufferSrc;
 };
 union $E5FFC0B1FDD5CFADE1F6A95AB6C32550 // sizeof=0x4
 {                                       // ...
     unsigned int dwAlphaDestConst;
     IDirectDrawSurface *lpDDSAlphaDest;
 };
 union $27B11532D29A29915E69E9165412D512 // sizeof=0x4
 {                                       // ...
     unsigned int dwAlphaSrcConst;
     IDirectDrawSurface *lpDDSAlphaSrc;
 };
 union $0B06679ACDDEB6D8607FFAA745260FC9 // sizeof=0x4
 {                                       // ...
     unsigned int dwFillColor;
     unsigned int dwFillDepth;
     unsigned int dwFillPixel;
     IDirectDrawSurface *lpDDSPattern;
 };
 struct _DDBLTFX // sizeof=0x64
 {
     unsigned int dwSize;
     unsigned int dwDDFX;
     unsigned int dwROP;
     unsigned int dwDDROP;
     unsigned int dwRotationAngle;
     unsigned int dwZBufferOpCode;
     unsigned int dwZBufferLow;
     unsigned int dwZBufferHigh;
     unsigned int dwZBufferBaseDest;
     unsigned int dwZDestConstBitDepth;
     $339278B73E4A7A194B9F7B0332EBEC74 ___u10;
     unsigned int dwZSrcConstBitDepth;
     $FA0A8E8D82C7769CAFBAED8B8B480A4A ___u12;
     unsigned int dwAlphaEdgeBlendBitDepth;
     unsigned int dwAlphaEdgeBlend;
     unsigned int dwReserved;
     unsigned int dwAlphaDestConstBitDepth;
     $E5FFC0B1FDD5CFADE1F6A95AB6C32550 ___u17;
     unsigned int dwAlphaSrcConstBitDepth;
     $27B11532D29A29915E69E9165412D512 ___u19;
     $0B06679ACDDEB6D8607FFAA745260FC9 ___u20;
     _DDCOLORKEY ddckDestColorkey;
     _DDCOLORKEY ddckSrcColorkey;
 };
 struct _DDBLTBATCH // sizeof=0x14
 {
     tagRECT *lprDest;
     IDirectDrawSurface *lpDDSSrc;
     tagRECT *lprSrc;
     unsigned int dwFlags;
     _DDBLTFX *lpDDBltFx;
 };
 struct _DDPIXELFORMAT::<unnamed_tag>::<unnamed_type_MultiSampleCaps> // sizeof=0x4
 {                                       // ...
     unsigned __int16 wFlipMSTypes;
     unsigned __int16 wBltMSTypes;
 };
 union $DAED55BFC94E6097478CA68F0B175AFE // sizeof=0x4
 {                                       // ...
     unsigned int dwRGBBitCount;
     unsigned int dwYUVBitCount;
     unsigned int dwZBufferBitDepth;
     unsigned int dwAlphaBitDepth;
     unsigned int dwLuminanceBitCount;
     unsigned int dwBumpBitCount;
     unsigned int dwPrivateFormatBitCount;
 };
 union $CF4E6002FA4B19EC2239361E8AC5A039 // sizeof=0x4
 {                                       // ...
     unsigned int dwRBitMask;
     unsigned int dwYBitMask;
     unsigned int dwStencilBitDepth;
     unsigned int dwLuminanceBitMask;
     unsigned int dwBumpDuBitMask;
     unsigned int dwOperations;
 };
 union $A96A98FE9DEB1A452D38D8E3273ABF43 // sizeof=0x4
 {                                       // ...
     unsigned int dwGBitMask;
     unsigned int dwUBitMask;
     unsigned int dwZBitMask;
     unsigned int dwBumpDvBitMask;
     _DDPIXELFORMAT::<unnamed_tag>::<unnamed_type_MultiSampleCaps> MultiSampleCaps;
 };
 union $01AE0C4CAA17A9DEB3CF9215716A3B58 // sizeof=0x4
 {                                       // ...
     unsigned int dwBBitMask;
     unsigned int dwVBitMask;
     unsigned int dwStencilBitMask;
     unsigned int dwBumpLuminanceBitMask;
 };
 union $F006553FDB25FB59A59693178CCFF094 // sizeof=0x4
 {                                       // ...
     unsigned int dwRGBAlphaBitMask;
     unsigned int dwYUVAlphaBitMask;
     unsigned int dwLuminanceAlphaBitMask;
     unsigned int dwRGBZBitMask;
     unsigned int dwYUVZBitMask;
 };
 struct _DDPIXELFORMAT // sizeof=0x20
 {                                       // ...
     unsigned int dwSize;
     unsigned int dwFlags;
     unsigned int dwFourCC;
     $DAED55BFC94E6097478CA68F0B175AFE ___u3;
     $CF4E6002FA4B19EC2239361E8AC5A039 ___u4;
     $A96A98FE9DEB1A452D38D8E3273ABF43 ___u5;
     $01AE0C4CAA17A9DEB3CF9215716A3B58 ___u6;
     $F006553FDB25FB59A59693178CCFF094 ___u7;
 };
 union $00F4D6FA838FAD5B65924731E0E9CCBC // sizeof=0x4
 {                                       // ...
     int lPitch;
     unsigned int dwLinearSize;
 };
 union $EF599A003DBF63C31A82D22AC5A5ECD5 // sizeof=0x4
 {                                       // ...
     unsigned int dwMipMapCount;
     unsigned int dwZBufferBitDepth;
     unsigned int dwRefreshRate;
 };
 struct _DDSURFACEDESC // sizeof=0x6C
 {
     unsigned int dwSize;
     unsigned int dwFlags;
     unsigned int dwHeight;
     unsigned int dwWidth;
     $00F4D6FA838FAD5B65924731E0E9CCBC ___u4;
     unsigned int dwBackBufferCount;
     $EF599A003DBF63C31A82D22AC5A5ECD5 ___u6;
     unsigned int dwAlphaBitDepth;
     unsigned int dwReserved;
     void *lpSurface;
     _DDCOLORKEY ddckCKDestOverlay;
     _DDCOLORKEY ddckCKDestBlt;
     _DDCOLORKEY ddckCKSrcOverlay;
     _DDCOLORKEY ddckCKSrcBlt;
     _DDPIXELFORMAT ddpfPixelFormat;
     _DDSCAPS ddsCaps;
 };
 struct __cppobj IDirectDrawClipper : IUnknown // sizeof=0x4
 {
 };
 struct __cppobj IDirectDraw : IUnknown // sizeof=0x4
 {
 };
 struct __cppobj IDirectDrawPalette : IUnknown // sizeof=0x4
 {
 };
 struct /*VFT*/ IDirectDrawPalette_vtbl // sizeof=0x1C
 {
     HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
     unsigned int (__stdcall *AddRef)(IUnknown *this);
     unsigned int (__stdcall *Release)(IUnknown *this);
     HRESULT (__stdcall *GetCaps)(IDirectDrawPalette *this, unsigned int *);
     HRESULT (__stdcall *GetEntries)(IDirectDrawPalette *this, unsigned int, unsigned int, unsigned int, tagPALETTEENTRY *);
     HRESULT (__stdcall *Initialize)(IDirectDrawPalette *this, IDirectDraw *, unsigned int, tagPALETTEENTRY *);
     HRESULT (__stdcall *SetEntries)(IDirectDrawPalette *this, unsigned int, unsigned int, unsigned int, tagPALETTEENTRY *);
 };
 struct /*VFT*/ IDirectDraw_vtbl // sizeof=0x5C
 {
     HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
     unsigned int (__stdcall *AddRef)(IUnknown *this);
     unsigned int (__stdcall *Release)(IUnknown *this);
     HRESULT (__stdcall *Compact)(IDirectDraw *this);
     HRESULT (__stdcall *CreateClipper)(IDirectDraw *this, unsigned int, IDirectDrawClipper **, IUnknown *);
     HRESULT (__stdcall *CreatePalette)(IDirectDraw *this, unsigned int, tagPALETTEENTRY *, IDirectDrawPalette **, IUnknown *);
     HRESULT (__stdcall *CreateSurface)(IDirectDraw *this, _DDSURFACEDESC *, IDirectDrawSurface **, IUnknown *);
     HRESULT (__stdcall *DuplicateSurface)(IDirectDraw *this, IDirectDrawSurface *, IDirectDrawSurface **);
     HRESULT (__stdcall *EnumDisplayModes)(IDirectDraw *this, unsigned int, _DDSURFACEDESC *, void *, HRESULT (__stdcall *)(_DDSURFACEDESC *, void *));
     HRESULT (__stdcall *EnumSurfaces)(IDirectDraw *this, unsigned int, _DDSURFACEDESC *, void *, HRESULT (__stdcall *)(IDirectDrawSurface *, _DDSURFACEDESC *, void *));
     HRESULT (__stdcall *FlipToGDISurface)(IDirectDraw *this);
     HRESULT (__stdcall *GetCaps)(IDirectDraw *this, _DDCAPS_DX7 *, _DDCAPS_DX7 *);
     HRESULT (__stdcall *GetDisplayMode)(IDirectDraw *this, _DDSURFACEDESC *);
     HRESULT (__stdcall *GetFourCCCodes)(IDirectDraw *this, unsigned int *, unsigned int *);
     HRESULT (__stdcall *GetGDISurface)(IDirectDraw *this, IDirectDrawSurface **);
     HRESULT (__stdcall *GetMonitorFrequency)(IDirectDraw *this, unsigned int *);
     HRESULT (__stdcall *GetScanLine)(IDirectDraw *this, unsigned int *);
     HRESULT (__stdcall *GetVerticalBlankStatus)(IDirectDraw *this, int *);
     HRESULT (__stdcall *Initialize)(IDirectDraw *this, _GUID *);
     HRESULT (__stdcall *RestoreDisplayMode)(IDirectDraw *this);
     HRESULT (__stdcall *SetCooperativeLevel)(IDirectDraw *this, HWND__ *, unsigned int);
     HRESULT (__stdcall *SetDisplayMode)(IDirectDraw *this, unsigned int, unsigned int, unsigned int);
     HRESULT (__stdcall *WaitForVerticalBlank)(IDirectDraw *this, unsigned int, void *);
 };
 struct /*VFT*/ IDirectDrawClipper_vtbl // sizeof=0x24
 {
     HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
     unsigned int (__stdcall *AddRef)(IUnknown *this);
     unsigned int (__stdcall *Release)(IUnknown *this);
     HRESULT (__stdcall *GetClipList)(IDirectDrawClipper *this, tagRECT *, _RGNDATA *, unsigned int *);
     HRESULT (__stdcall *GetHWnd)(IDirectDrawClipper *this, HWND__ **);
     HRESULT (__stdcall *Initialize)(IDirectDrawClipper *this, IDirectDraw *, unsigned int);
     HRESULT (__stdcall *IsClipListChanged)(IDirectDrawClipper *this, int *);
     HRESULT (__stdcall *SetClipList)(IDirectDrawClipper *this, _RGNDATA *, unsigned int);
     HRESULT (__stdcall *SetHWnd)(IDirectDrawClipper *this, unsigned int, HWND__ *);
 };
 struct _DDOVERLAYFX // sizeof=0x38
 {
     unsigned int dwSize;
     unsigned int dwAlphaEdgeBlendBitDepth;
     unsigned int dwAlphaEdgeBlend;
     unsigned int dwReserved;
     unsigned int dwAlphaDestConstBitDepth;
     $E5FFC0B1FDD5CFADE1F6A95AB6C32550 ___u5;
     unsigned int dwAlphaSrcConstBitDepth;
     $27B11532D29A29915E69E9165412D512 ___u7;
     _DDCOLORKEY dckDestColorkey;
     _DDCOLORKEY dckSrcColorkey;
     unsigned int dwDDFX;
     unsigned int dwFlags;
 };
 struct /*VFT*/ IDirectDrawSurface_vtbl // sizeof=0x90
 {
     HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
     unsigned int (__stdcall *AddRef)(IUnknown *this);
     unsigned int (__stdcall *Release)(IUnknown *this);
     HRESULT (__stdcall *AddAttachedSurface)(IDirectDrawSurface *this, IDirectDrawSurface *);
     HRESULT (__stdcall *AddOverlayDirtyRect)(IDirectDrawSurface *this, tagRECT *);
     HRESULT (__stdcall *Blt)(IDirectDrawSurface *this, tagRECT *, IDirectDrawSurface *, tagRECT *, unsigned int, _DDBLTFX *);
     HRESULT (__stdcall *BltBatch)(IDirectDrawSurface *this, _DDBLTBATCH *, unsigned int, unsigned int);
     HRESULT (__stdcall *BltFast)(IDirectDrawSurface *this, unsigned int, unsigned int, IDirectDrawSurface *, tagRECT *, unsigned int);
     HRESULT (__stdcall *DeleteAttachedSurface)(IDirectDrawSurface *this, unsigned int, IDirectDrawSurface *);
     HRESULT (__stdcall *EnumAttachedSurfaces)(IDirectDrawSurface *this, void *, HRESULT (__stdcall *)(IDirectDrawSurface *, _DDSURFACEDESC *, void *));
     HRESULT (__stdcall *EnumOverlayZOrders)(IDirectDrawSurface *this, unsigned int, void *, HRESULT (__stdcall *)(IDirectDrawSurface *, _DDSURFACEDESC *, void *));
     HRESULT (__stdcall *Flip)(IDirectDrawSurface *this, IDirectDrawSurface *, unsigned int);
     HRESULT (__stdcall *GetAttachedSurface)(IDirectDrawSurface *this, _DDSCAPS *, IDirectDrawSurface **);
     HRESULT (__stdcall *GetBltStatus)(IDirectDrawSurface *this, unsigned int);
     HRESULT (__stdcall *GetCaps)(IDirectDrawSurface *this, _DDSCAPS *);
     HRESULT (__stdcall *GetClipper)(IDirectDrawSurface *this, IDirectDrawClipper **);
     HRESULT (__stdcall *GetColorKey)(IDirectDrawSurface *this, unsigned int, _DDCOLORKEY *);
     HRESULT (__stdcall *GetDC)(IDirectDrawSurface *this, HDC__ **);
     HRESULT (__stdcall *GetFlipStatus)(IDirectDrawSurface *this, unsigned int);
     HRESULT (__stdcall *GetOverlayPosition)(IDirectDrawSurface *this, int *, int *);
     HRESULT (__stdcall *GetPalette)(IDirectDrawSurface *this, IDirectDrawPalette **);
     HRESULT (__stdcall *GetPixelFormat)(IDirectDrawSurface *this, _DDPIXELFORMAT *);
     HRESULT (__stdcall *GetSurfaceDesc)(IDirectDrawSurface *this, _DDSURFACEDESC *);
     HRESULT (__stdcall *Initialize)(IDirectDrawSurface *this, IDirectDraw *, _DDSURFACEDESC *);
     HRESULT (__stdcall *IsLost)(IDirectDrawSurface *this);
     HRESULT (__stdcall *Lock)(IDirectDrawSurface *this, tagRECT *, _DDSURFACEDESC *, unsigned int, void *);
     HRESULT (__stdcall *ReleaseDC)(IDirectDrawSurface *this, HDC__ *);
     HRESULT (__stdcall *Restore)(IDirectDrawSurface *this);
     HRESULT (__stdcall *SetClipper)(IDirectDrawSurface *this, IDirectDrawClipper *);
     HRESULT (__stdcall *SetColorKey)(IDirectDrawSurface *this, unsigned int, _DDCOLORKEY *);
     HRESULT (__stdcall *SetOverlayPosition)(IDirectDrawSurface *this, int, int);
     HRESULT (__stdcall *SetPalette)(IDirectDrawSurface *this, IDirectDrawPalette *);
     HRESULT (__stdcall *Unlock)(IDirectDrawSurface *this, void *);
     HRESULT (__stdcall *UpdateOverlay)(IDirectDrawSurface *this, tagRECT *, IDirectDrawSurface *, tagRECT *, unsigned int, _DDOVERLAYFX *);
     HRESULT (__stdcall *UpdateOverlayDisplay)(IDirectDrawSurface *this, unsigned int);
     HRESULT (__stdcall *UpdateOverlayZOrder)(IDirectDrawSurface *this, unsigned int, IDirectDrawSurface *);
 };
 union $DE343801BC75A137C516A9D9B3162490 // sizeof=0x4
 {                                       // ...
     unsigned int dwBackBufferCount;
     unsigned int dwDepth;
 };
 union $FA885138A45ED3CE38760E5920CA9439 // sizeof=0x4
 {                                       // ...
     unsigned int dwMipMapCount;
     unsigned int dwRefreshRate;
     unsigned int dwSrcVBHandle;
 };
 union $279926632441139FFA12B734E2C1A44F // sizeof=0x8
 {                                       // ...
     _DDCOLORKEY ddckCKDestOverlay;
     unsigned int dwEmptyFaceColor;
 };
 union $2FB363AA5B1C35D05ED50FF663C8BFD5 // sizeof=0x20
 {                                       // ...
     _DDPIXELFORMAT ddpfPixelFormat;
     unsigned int dwFVF;
 };
 struct _DDSURFACEDESC2 // sizeof=0x7C
 {
     unsigned int dwSize;
     unsigned int dwFlags;
     unsigned int dwHeight;
     unsigned int dwWidth;
     $00F4D6FA838FAD5B65924731E0E9CCBC ___u4;
     $DE343801BC75A137C516A9D9B3162490 ___u5;
     $FA885138A45ED3CE38760E5920CA9439 ___u6;
     unsigned int dwAlphaBitDepth;
     unsigned int dwReserved;
     void *lpSurface;
     $279926632441139FFA12B734E2C1A44F ___u10;
     _DDCOLORKEY ddckCKDestBlt;
     _DDCOLORKEY ddckCKSrcOverlay;
     _DDCOLORKEY ddckCKSrcBlt;
     $2FB363AA5B1C35D05ED50FF663C8BFD5 ___u14;
     _DDSCAPS2 ddsCaps;
     unsigned int dwTextureStage;
 };
 struct __cppobj IDirectDrawSurface7 : IUnknown // sizeof=0x4
 {
 };
 struct /*VFT*/ IDirectDrawSurface7_vtbl // sizeof=0xC4
 {
     HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
     unsigned int (__stdcall *AddRef)(IUnknown *this);
     unsigned int (__stdcall *Release)(IUnknown *this);
     HRESULT (__stdcall *AddAttachedSurface)(IDirectDrawSurface7 *this, IDirectDrawSurface7 *);
     HRESULT (__stdcall *AddOverlayDirtyRect)(IDirectDrawSurface7 *this, tagRECT *);
     HRESULT (__stdcall *Blt)(IDirectDrawSurface7 *this, tagRECT *, IDirectDrawSurface7 *, tagRECT *, unsigned int, _DDBLTFX *);
     HRESULT (__stdcall *BltBatch)(IDirectDrawSurface7 *this, _DDBLTBATCH *, unsigned int, unsigned int);
     HRESULT (__stdcall *BltFast)(IDirectDrawSurface7 *this, unsigned int, unsigned int, IDirectDrawSurface7 *, tagRECT *, unsigned int);
     HRESULT (__stdcall *DeleteAttachedSurface)(IDirectDrawSurface7 *this, unsigned int, IDirectDrawSurface7 *);
     HRESULT (__stdcall *EnumAttachedSurfaces)(IDirectDrawSurface7 *this, void *, HRESULT (__stdcall *)(IDirectDrawSurface7 *, _DDSURFACEDESC2 *, void *));
     HRESULT (__stdcall *EnumOverlayZOrders)(IDirectDrawSurface7 *this, unsigned int, void *, HRESULT (__stdcall *)(IDirectDrawSurface7 *, _DDSURFACEDESC2 *, void *));
     HRESULT (__stdcall *Flip)(IDirectDrawSurface7 *this, IDirectDrawSurface7 *, unsigned int);
     HRESULT (__stdcall *GetAttachedSurface)(IDirectDrawSurface7 *this, _DDSCAPS2 *, IDirectDrawSurface7 **);
     HRESULT (__stdcall *GetBltStatus)(IDirectDrawSurface7 *this, unsigned int);
     HRESULT (__stdcall *GetCaps)(IDirectDrawSurface7 *this, _DDSCAPS2 *);
     HRESULT (__stdcall *GetClipper)(IDirectDrawSurface7 *this, IDirectDrawClipper **);
     HRESULT (__stdcall *GetColorKey)(IDirectDrawSurface7 *this, unsigned int, _DDCOLORKEY *);
     HRESULT (__stdcall *GetDC)(IDirectDrawSurface7 *this, HDC__ **);
     HRESULT (__stdcall *GetFlipStatus)(IDirectDrawSurface7 *this, unsigned int);
     HRESULT (__stdcall *GetOverlayPosition)(IDirectDrawSurface7 *this, int *, int *);
     HRESULT (__stdcall *GetPalette)(IDirectDrawSurface7 *this, IDirectDrawPalette **);
     HRESULT (__stdcall *GetPixelFormat)(IDirectDrawSurface7 *this, _DDPIXELFORMAT *);
     HRESULT (__stdcall *GetSurfaceDesc)(IDirectDrawSurface7 *this, _DDSURFACEDESC2 *);
     HRESULT (__stdcall *Initialize)(IDirectDrawSurface7 *this, IDirectDraw *, _DDSURFACEDESC2 *);
     HRESULT (__stdcall *IsLost)(IDirectDrawSurface7 *this);
     HRESULT (__stdcall *Lock)(IDirectDrawSurface7 *this, tagRECT *, _DDSURFACEDESC2 *, unsigned int, void *);
     HRESULT (__stdcall *ReleaseDC)(IDirectDrawSurface7 *this, HDC__ *);
     HRESULT (__stdcall *Restore)(IDirectDrawSurface7 *this);
     HRESULT (__stdcall *SetClipper)(IDirectDrawSurface7 *this, IDirectDrawClipper *);
     HRESULT (__stdcall *SetColorKey)(IDirectDrawSurface7 *this, unsigned int, _DDCOLORKEY *);
     HRESULT (__stdcall *SetOverlayPosition)(IDirectDrawSurface7 *this, int, int);
     HRESULT (__stdcall *SetPalette)(IDirectDrawSurface7 *this, IDirectDrawPalette *);
     HRESULT (__stdcall *Unlock)(IDirectDrawSurface7 *this, tagRECT *);
     HRESULT (__stdcall *UpdateOverlay)(IDirectDrawSurface7 *this, tagRECT *, IDirectDrawSurface7 *, tagRECT *, unsigned int, _DDOVERLAYFX *);
     HRESULT (__stdcall *UpdateOverlayDisplay)(IDirectDrawSurface7 *this, unsigned int);
     HRESULT (__stdcall *UpdateOverlayZOrder)(IDirectDrawSurface7 *this, unsigned int, IDirectDrawSurface7 *);
     HRESULT (__stdcall *GetDDInterface)(IDirectDrawSurface7 *this, void **);
     HRESULT (__stdcall *PageLock)(IDirectDrawSurface7 *this, unsigned int);
     HRESULT (__stdcall *PageUnlock)(IDirectDrawSurface7 *this, unsigned int);
     HRESULT (__stdcall *SetSurfaceDesc)(IDirectDrawSurface7 *this, _DDSURFACEDESC2 *, unsigned int);
     HRESULT (__stdcall *SetPrivateData)(IDirectDrawSurface7 *this, const _GUID *, void *, unsigned int, unsigned int);
     HRESULT (__stdcall *GetPrivateData)(IDirectDrawSurface7 *this, const _GUID *, void *, unsigned int *);
     HRESULT (__stdcall *FreePrivateData)(IDirectDrawSurface7 *this, const _GUID *);
     HRESULT (__stdcall *GetUniquenessValue)(IDirectDrawSurface7 *this, unsigned int *);
     HRESULT (__stdcall *ChangeUniquenessValue)(IDirectDrawSurface7 *this);
     HRESULT (__stdcall *SetPriority)(IDirectDrawSurface7 *this, unsigned int);
     HRESULT (__stdcall *GetPriority)(IDirectDrawSurface7 *this, unsigned int *);
     HRESULT (__stdcall *SetLOD)(IDirectDrawSurface7 *this, unsigned int);
     HRESULT (__stdcall *GetLOD)(IDirectDrawSurface7 *this, unsigned int *);
 };
 struct __cppobj IDirectDraw7 : IUnknown // sizeof=0x4
 {
 };
 struct /*VFT*/ IDirectDraw7_vtbl // sizeof=0x78
 {
     HRESULT (__stdcall *QueryInterface)(IUnknown *this, const _GUID *, void **);
     unsigned int (__stdcall *AddRef)(IUnknown *this);
     unsigned int (__stdcall *Release)(IUnknown *this);
     HRESULT (__stdcall *Compact)(IDirectDraw7 *this);
     HRESULT (__stdcall *CreateClipper)(IDirectDraw7 *this, unsigned int, IDirectDrawClipper **, IUnknown *);
     HRESULT (__stdcall *CreatePalette)(IDirectDraw7 *this, unsigned int, tagPALETTEENTRY *, IDirectDrawPalette **, IUnknown *);
     HRESULT (__stdcall *CreateSurface)(IDirectDraw7 *this, _DDSURFACEDESC2 *, IDirectDrawSurface7 **, IUnknown *);
     HRESULT (__stdcall *DuplicateSurface)(IDirectDraw7 *this, IDirectDrawSurface7 *, IDirectDrawSurface7 **);
     HRESULT (__stdcall *EnumDisplayModes)(IDirectDraw7 *this, unsigned int, _DDSURFACEDESC2 *, void *, HRESULT (__stdcall *)(_DDSURFACEDESC2 *, void *));
     HRESULT (__stdcall *EnumSurfaces)(IDirectDraw7 *this, unsigned int, _DDSURFACEDESC2 *, void *, HRESULT (__stdcall *)(IDirectDrawSurface7 *, _DDSURFACEDESC2 *, void *));
     HRESULT (__stdcall *FlipToGDISurface)(IDirectDraw7 *this);
     HRESULT (__stdcall *GetCaps)(IDirectDraw7 *this, _DDCAPS_DX7 *, _DDCAPS_DX7 *);
     HRESULT (__stdcall *GetDisplayMode)(IDirectDraw7 *this, _DDSURFACEDESC2 *);
     HRESULT (__stdcall *GetFourCCCodes)(IDirectDraw7 *this, unsigned int *, unsigned int *);
     HRESULT (__stdcall *GetGDISurface)(IDirectDraw7 *this, IDirectDrawSurface7 **);
     HRESULT (__stdcall *GetMonitorFrequency)(IDirectDraw7 *this, unsigned int *);
     HRESULT (__stdcall *GetScanLine)(IDirectDraw7 *this, unsigned int *);
     HRESULT (__stdcall *GetVerticalBlankStatus)(IDirectDraw7 *this, int *);
     HRESULT (__stdcall *Initialize)(IDirectDraw7 *this, _GUID *);
     HRESULT (__stdcall *RestoreDisplayMode)(IDirectDraw7 *this);
     HRESULT (__stdcall *SetCooperativeLevel)(IDirectDraw7 *this, HWND__ *, unsigned int);
     HRESULT (__stdcall *SetDisplayMode)(IDirectDraw7 *this, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int);
     HRESULT (__stdcall *WaitForVerticalBlank)(IDirectDraw7 *this, unsigned int, void *);
     HRESULT (__stdcall *GetAvailableVidMem)(IDirectDraw7 *this, _DDSCAPS2 *, unsigned int *, unsigned int *);
     HRESULT (__stdcall *GetSurfaceFromDC)(IDirectDraw7 *this, HDC__ *, IDirectDrawSurface7 **);
     HRESULT (__stdcall *RestoreAllSurfaces)(IDirectDraw7 *this);
     HRESULT (__stdcall *TestCooperativeLevel)(IDirectDraw7 *this);
     HRESULT (__stdcall *GetDeviceIdentifier)(IDirectDraw7 *this, tagDDDEVICEIDENTIFIER2 *, unsigned int);
     HRESULT (__stdcall *StartModeTest)(IDirectDraw7 *this, tagSIZE *, unsigned int, unsigned int);
     HRESULT (__stdcall *EvaluateMode)(IDirectDraw7 *this, unsigned int, unsigned int *);
 };
 struct WaterGlob // sizeof=0x9000
 {                                       // ...
     complex_s H[4096];
     unsigned __int8 pixels[4096];       // ...
 };
 struct WaterGlobStatic // sizeof=0x1C00
 {                                       // ...
     float sinTable[1024];               // ...
     complex_s fftTrigTable[256];        // ...
     int fftBitswap[256];                // ...
 };
 struct WorkerCmds // sizeof=0x80
 {                                       // ...
     volatile int startPos;
     volatile int endPos;
     volatile int syncedEndPos;
     volatile int inSize;                // ...
     volatile int outSize;               // ...
     unsigned int dataSize;              // ...
     unsigned __int8 *buf;               // ...
     int bufSize;                        // ...
     int bufCount;
     unsigned int pad[23];
 };
 struct XVertexInfo_s // sizeof=0x40
 {                                       // ...
     float normal[3];
     unsigned __int8 color[4];
     float binormal[3];
     float texCoordX;
     float tangent[3];
     float texCoordY;
     float offset[3];
     unsigned __int8 numWeights;
     unsigned __int8 pad;
     __int16 boneOffset;
 };
 struct XBlendLoadInfo // sizeof=0x4
 {                                       // ...
     unsigned __int16 boneOffset;
     unsigned __int16 boneWeight;
 };
 struct XVertexBuffer // sizeof=0x44
 {
     XVertexInfo_s v;
     XBlendLoadInfo w[1];
 };
 struct XVertexInfo0 // sizeof=0x2
 {                                       // ...
     unsigned __int16 boneOffset;
 };
 struct XVertexInfo3 // sizeof=0xE
 {
     XVertexInfo0 vert0;
     XBlendLoadInfo blend[3];
 };
 struct XVertexInfo2 // sizeof=0xA
 {
     XVertexInfo0 vert0;
     XBlendLoadInfo blend[2];
 };
 struct XVertexInfo1 // sizeof=0x6
 {
     XVertexInfo0 vert0;
     XBlendLoadInfo blend[1];
 };
 union XModelReadSurface::__l2::<unnamed_type_$S1> // sizeof=0x4
 {
     XVertexInfo_s *verts;
     XBlendLoadInfo *blends;
 };
 struct GfxDrawSurfListArgs // sizeof=0x10
 {                                       // ...
     GfxCmdBufContext context;           // ...
     unsigned int firstDrawSurfIndex;    // ...
     const GfxDrawSurfListInfo *info;    // ...
 };
 struct r_backEndGlobals_t // sizeof=0x280
 {                                       // ...
     int glowCount;                      // ...
     GfxImage *glowImage;                // ...
     Font_s *debugFont;                  // ...
     GfxFrameStats frameStatsMax;        // ...
 };
 struct GfxRenderCommandExecState // sizeof=0x4
 {                                       // ...
     const void *cmd;                    // ...
 };
 struct GfxPointLitSurfsInfo // sizeof=0x1C
 {                                       // ...
     const GfxViewInfo *viewInfo;        // ...
     GfxMeshData *clearQuadMesh;         // ...
     const GfxDrawSurfListInfo *drawSurfInfo; // ...
     unsigned int x;                     // ...
     unsigned int y;                     // ...
     unsigned int w;                     // ...
     unsigned int h;                     // ...
 };
 struct ProfileProbe // sizeof=0x5A8
 {                                       // ...
     int parity;                         // ...
     int historyCount;                   // ...
     ProfileReadable history[120];       // ...
 };
 struct __declspec(align(8)) ProfileReadableGlobal // sizeof=0x38
 {                                       // ...
     int sequence;                       // ...
     unsigned int hits;
     long double totalClks;
     long double selfClks;
     ProfileAtom maxSelf;                // ...
     unsigned int maxHits;
     ProfileAtom min;
     ProfileAtom max;                    // ...
     ProfileReadable read;               // ...
     // padding byte
     // padding byte
     // padding byte
     // padding byte
 };
 struct __declspec(align(8)) DrawProfileGlobals // sizeof=0x81A8
 {                                       // ...
     Font_s *font;                       // ...
     float fontWidth;                    // ...
     float fontHeight;                   // ...
     GfxColor textColor;                 // ...
     GfxColor labelColor;                // ...
     ProfileProbe log[5];                // ...
     int sortedProbeIndices[432];        // ...
     int lastSortTime;                   // ...
     ProfileReadableGlobal global[432];  // ...
     int devguiSelection;
     // padding byte
     // padding byte
     // padding byte
     // padding byte
 };
 struct GfxImageFilterPass // sizeof=0x98
 {                                       // ...
     const Material *material;           // ...
     float srcWidth;                     // ...
     float srcHeight;                    // ...
     int dstWidth;                       // ...
     int dstHeight;                      // ...
     int tapHalfCount;                   // ...
     float tapOffsetsAndWeights[8][4];
 };
 struct GfxImageFilter // sizeof=0x130C
 {                                       // ...
     int passCount;                      // ...
     GfxImageFilterPass passes[32];      // ...
     GfxImage *sourceImage;              // ...
     GfxRenderTargetId finalTarget;      // ...
 };
 struct $58A084419402DA38B3552A7141CB9B53 // sizeof=0x8
 {                                       // ...
     unsigned __int16 (*history)[3];     // ...
     int count;                          // ...
 };
 struct $7272244CE635036285CD968BA6FC5DEE // sizeof=0x4
 {                                       // ...
     _iobuf *fp;                         // ...
 };
 struct StencilLogBits // sizeof=0x18
 {                                       // ...
     const char *description;            // ...
     int enableMask;                     // ...
     int passShift;                      // ...
     int failShift;                      // ...
     int zfailShift;                     // ...
     int funcShift;                      // ...
 };
 struct StateBitsTable // sizeof=0x8
 {                                       // ...
     int stateBits;                      // ...
     const char *name;                   // ...
 };
 struct GfxPixelCostKey::<unnamed_type_mtl> // sizeof=0x8
 {                                       // ...
     const Material *material;
     MaterialTechniqueType techType;
 };
 union GfxPixelCostKey // sizeof=0x8
 {                                       // ...
     GfxPixelCostKey::<unnamed_type_mtl> mtl;
     unsigned __int64 packed;
 };
 struct GfxPixelCostRecord // sizeof=0x20
 {                                       // ...
     unsigned __int16 costHistory[12];   // ...
     GfxPixelCostKey key;                // ...
 };
 struct $F77C05005AAF2867FE3D26D91A48F99E // sizeof=0x10030
 {                                       // ...
     GfxPixelCostMode savedMode;
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     long double msecOverhead;           // ...
     unsigned __int64 timeBegin;         // ...
     long double msecElapsed;            // ...
     int frameIndex;                     // ...
     int expectedCount;                  // ...
     int recordCount;                    // ...
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     GfxPixelCostRecord records[2048];   // ...
 };
 struct GfxPixelCostShaderTime // sizeof=0xC
 {
     const MaterialPixelShader *shader;
     float msec;
     unsigned int primCount;
 };
 struct $C28D828B354D71D7584331F40DBDE744 // sizeof=0x100C
 {                                       // ...
     MaterialTechniqueSet *techSet[1024]; // ...
     unsigned int techTypeIter;          // ...
     volatile unsigned int get;          // ...
     volatile unsigned int put;          // ...
 };
 union __declspec(align(8)) RB_UploadMaterialPass::__l2::<unnamed_type_vertMem> // sizeof=0x30
 {                                       // ...
     GfxVertex generic;
     GfxPackedVertex packed;
     GfxWorldVertex world;
     GfxPosTexVertex posTex;
     GfxSModelCachedVertex smodelCache;
 };
 struct my_coef_controller // sizeof=0x68
 {
     jpeg_c_coef_controller pub;
     unsigned int iMCU_row_num;
     unsigned int mcu_ctr;
     int MCU_vert_offset;
     int MCU_rows_per_iMCU_row;
     __int16 (*MCU_buffer[10])[64];
     jvirt_barray_control *whole_image[10];
 };
 struct my_color_converter // sizeof=0xC
 {
     jpeg_color_converter pub;
     int *rgb_ycc_tab;
 };
 struct my_fdct_controller // sizeof=0x30
 {
     jpeg_forward_dct pub;
     void (__cdecl *do_dct)(int *);
     int *divisors[4];
     void (__cdecl *do_float_dct)(float *);
     float *float_divisors[4];
 };
 struct savable_state // sizeof=0x14
 {                                       // ...
     unsigned int EOBRUN;                // ...
     int last_dc_val[4];                 // ...
 };
 struct working_state // sizeof=0x24
 {                                       // ...
     unsigned __int8 *next_output_byte;  // ...
     unsigned int free_in_buffer;        // ...
     savable_state cur;                  // ...
     _BYTE gap1C[4];                     // ...
     jpeg_compress_struct *cinfo;        // ...
 };
 struct c_derived_tbl // sizeof=0x500
 {
     unsigned int ehufco[256];
     char ehufsi[256];
 };
 struct huff_entropy_encoder // sizeof=0x6C
 {
     jpeg_entropy_encoder pub;
     savable_state saved;
     _BYTE gap20[4];
     unsigned int restarts_to_go;
     int next_restart_num;
     c_derived_tbl *dc_derived_tbls[4];
     c_derived_tbl *ac_derived_tbls[4];
     int *dc_count_ptrs[4];
     int *ac_count_ptrs[4];
 };
 struct my_main_controller // sizeof=0x40
 {
     jpeg_c_main_controller pub;
     unsigned int cur_iMCU_row;
     unsigned int rowgroup_ctr;
     unsigned __int8 suspended;
     // padding byte
     // padding byte
     // padding byte
     J_BUF_MODE pass_mode;
     unsigned __int8 **buffer[10];
 };
 struct my_marker_writer // sizeof=0x20
 {
     jpeg_marker_writer pub;
     unsigned int last_restart_interval;
 };
 struct my_comp_master // sizeof=0x20
 {
     jpeg_comp_master pub;
     c_pass_type pass_type;
     int pass_number;
     int total_passes;
     int scan_number;
 };
 struct phuff_entropy_encoder // sizeof=0x6C
 {
     jpeg_entropy_encoder pub;
     unsigned __int8 gather_statistics;
     // padding byte
     // padding byte
     // padding byte
     unsigned __int8 *next_output_byte;
     unsigned int free_in_buffer;
     int put_buffer;
     int put_bits;
     jpeg_compress_struct *cinfo;
     int last_dc_val[4];
     int ac_tbl_no;
     unsigned int EOBRUN;
     unsigned int BE;
     char *bit_buffer;
     unsigned int restarts_to_go;
     int next_restart_num;
     c_derived_tbl *derived_tbls[4];
     int *count_ptrs[4];
 };
 struct my_prep_controller // sizeof=0x40
 {
     jpeg_c_prep_controller pub;
     unsigned __int8 **color_buf[10];
     unsigned int rows_to_go;
     int next_buf_row;
     int this_row_group;
     int next_buf_stop;
 };
 struct my_downsampler // sizeof=0x34
 {
     jpeg_downsampler pub;
     void (__cdecl *methods[10])(jpeg_compress_struct *, jpeg_component_info *, unsigned __int8 **, unsigned __int8 **);
 };
 struct __declspec(align(4)) my_source_mgr // sizeof=0x20
 {
     jpeg_source_mgr pub;
     unsigned __int8 start_of_file;
     // padding byte
     // padding byte
     // padding byte
 };
 struct my_color_deconverter // sizeof=0x18
 {
     jpeg_color_deconverter pub;
     int *Cr_r_tab;
     int *Cb_b_tab;
     int *Cr_g_tab;
     int *Cb_g_tab;
 };
 struct my_idct_controller // sizeof=0x54
 {
     jpeg_inverse_dct pub;
     int cur_method[10];
 };
 struct bitread_perm_state // sizeof=0x8
 {                                       // ...
     int get_buffer;
     int bits_left;
 };
 struct d_derived_tbl // sizeof=0x590
 {
     int maxcode[18];
     int valoffset[17];
     JHUFF_TBL *pub;
     int look_nbits[256];
     unsigned __int8 look_sym[256];
 };
 struct $16488923742FD3ABC134D2BECC0315DC // sizeof=0x14
 {                                       // ...
     _BYTE gap0[16];
     unsigned int restarts_to_go;
 };
 union $ED4F3E02486B5C0AEE989C32D5D66DBE // sizeof=0x14
 {                                       // ...
     savable_state saved;
     $16488923742FD3ABC134D2BECC0315DC __s1;
 };
 struct huff_entropy_decoder // sizeof=0xAC
 {
     jpeg_entropy_decoder pub;
     bitread_perm_state bitstate;
     $ED4F3E02486B5C0AEE989C32D5D66DBE ___u2;
     d_derived_tbl *dc_derived_tbls[4];
     d_derived_tbl *ac_derived_tbls[4];
     d_derived_tbl *dc_cur_tbls[10];
     d_derived_tbl *ac_cur_tbls[10];
     unsigned __int8 dc_needed[10];
     unsigned __int8 ac_needed[10];
 };
 struct bitread_working_state // sizeof=0x14
 {
     const unsigned __int8 *next_input_byte;
     unsigned int bytes_in_buffer;
     int get_buffer;
     int bits_left;
     jpeg_decompress_struct *cinfo;
 };
 struct __declspec(align(4)) my_input_controller // sizeof=0x18
 {
     jpeg_input_controller pub;
     unsigned __int8 inheaders;
     // padding byte
     // padding byte
     // padding byte
 };
 struct my_marker_reader // sizeof=0xA8
 {
     jpeg_marker_reader pub;
     unsigned __int8 (__cdecl *process_COM)(jpeg_decompress_struct *);
     unsigned __int8 (__cdecl *process_APPn[16])(jpeg_decompress_struct *);
     unsigned int length_limit_COM;
     unsigned int length_limit_APPn[16];
     jpeg_marker_struct *cur_marker;
     unsigned int bytes_read;
 };
 struct my_decomp_master // sizeof=0x1C
 {
     jpeg_decomp_master pub;
     int pass_number;
     unsigned __int8 using_merged_upsample;
     // padding byte
     // padding byte
     // padding byte
     jpeg_color_quantizer *quantizer_1pass;
     jpeg_color_quantizer *quantizer_2pass;
 };
 struct my_upsampler // sizeof=0x30
 {
     jpeg_upsampler pub;
     void (__cdecl *upmethod)(jpeg_decompress_struct *, unsigned __int8 ***, unsigned int, unsigned __int8 **);
     int *Cr_r_tab;
     int *Cb_b_tab;
     int *Cr_g_tab;
     int *Cb_g_tab;
     unsigned __int8 *spare_row;
     unsigned __int8 spare_full;
     // padding byte
     // padding byte
     // padding byte
     unsigned int out_row_width;
     unsigned int rows_to_go;
 };
 struct phuff_entropy_decoder // sizeof=0x40
 {
     jpeg_entropy_decoder pub;
     bitread_perm_state bitstate;
     savable_state saved;
     unsigned int restarts_to_go;
     d_derived_tbl *derived_tbls[4];
     d_derived_tbl *ac_derived_tbl;
 };
 struct my_post_controller // sizeof=0x1C
 {
     jpeg_d_post_controller pub;
     jvirt_sarray_control *whole_image;
     unsigned __int8 **buffer;
     unsigned int strip_height;
     unsigned int starting_row;
     unsigned int next_row;
 };
 union __declspec(align(8)) small_pool_struct // sizeof=0x10
 {
     $C7B32B0F4FD6744054748CF5D371EF76 hdr;
     long double dummy;
 };
 struct $C7B32B0F4FD6744054748CF5D371EF76 // sizeof=0xC
 {
     small_pool_struct *next;
     unsigned int bytes_used;
     unsigned int bytes_left;
 };
 union __declspec(align(8)) large_pool_struct // sizeof=0x10
 {
     $D8828688DFE8036028234B8E36B62B24 hdr;
     long double dummy;
 };
 struct $D8828688DFE8036028234B8E36B62B24 // sizeof=0xC
 {
     large_pool_struct *next;
     unsigned int bytes_used;
     unsigned int bytes_left;
 };
 struct my_memory_mgr // sizeof=0x54
 {
     jpeg_memory_mgr pub;
     small_pool_struct *small_list[2];
     large_pool_struct *large_list[2];
     jvirt_sarray_control *virt_sarray_list;
     jvirt_barray_control *virt_barray_list;
     int total_space_allocated;
     unsigned int last_rowsperchunk;
 };
 struct __declspec(align(4)) my_cquantizer // sizeof=0x58
 {
     jpeg_color_quantizer pub;
     unsigned __int8 **sv_colormap;
     int sv_actual;
     unsigned __int8 **colorindex;
     unsigned __int8 is_padded;
     // padding byte
     // padding byte
     // padding byte
     int Ncolors[4];
     int row_index;
     int (*odither[4])[16];
     __int16 *fserrors[4];
     unsigned __int8 on_odd_row;
     // padding byte
     // padding byte
     // padding byte
 };
 struct box // sizeof=0x20
 {
     int c0min;
     int c0max;
     int c1min;
     int c1max;
     int c2min;
     int c2max;
     int volume;
     int colorcount;
 };
 struct _EXCEPTION_RECORD // sizeof=0x50
 {                                       // ...
     unsigned int ExceptionCode;         // ...
     unsigned int ExceptionFlags;        // ...
     _EXCEPTION_RECORD *ExceptionRecord; // ...
     void *ExceptionAddress;             // ...
     unsigned int NumberParameters;      // ...
     unsigned int ExceptionInformation[15];
 };
 struct _TEB_ACTIVE_FRAME_CONTEXT // sizeof=0x8
 {
     unsigned int Flags;
     const char *FrameName;
 };
 struct _PEB_FREE_BLOCK // sizeof=0x8
 {
     _PEB_FREE_BLOCK *Next;
     unsigned int Size;
 };
 struct __declspec(align(4)) _Wx86ThreadState // sizeof=0xC
 {                                       // ...
     unsigned int *CallBx86Eip;
     void *DeallocationCpu;
     unsigned __int8 UseKnownWx86Dll;
     char OleStubInvoked;
     // padding byte
     // padding byte
 };
 struct _EXCEPTION_REGISTRATION_RECORD // sizeof=0x8
 {                                       // ...
     _EXCEPTION_REGISTRATION_RECORD *Next;
     _EXCEPTION_DISPOSITION (__cdecl *Handler)(_EXCEPTION_RECORD *, void *, _CONTEXT *, void *);
 };
 struct _FLOATING_SAVE_AREA // sizeof=0x70
 {                                       // ...
     unsigned int ControlWord;
     unsigned int StatusWord;
     unsigned int TagWord;
     unsigned int ErrorOffset;
     unsigned int ErrorSelector;
     unsigned int DataOffset;
     unsigned int DataSelector;
     unsigned __int8 RegisterArea[80];
     unsigned int Cr0NpxState;
 };
 struct _CONTEXT // sizeof=0x2CC
 {                                       // ...
     unsigned int ContextFlags;          // ...
     unsigned int Dr0;
     unsigned int Dr1;
     unsigned int Dr2;
     unsigned int Dr3;
     unsigned int Dr6;
     unsigned int Dr7;
     _FLOATING_SAVE_AREA FloatSave;
     unsigned int SegGs;                 // ...
     unsigned int SegFs;                 // ...
     unsigned int SegEs;                 // ...
     unsigned int SegDs;                 // ...
     unsigned int Edi;                   // ...
     unsigned int Esi;                   // ...
     unsigned int Ebx;                   // ...
     unsigned int Edx;                   // ...
     unsigned int Ecx;                   // ...
     unsigned int Eax;                   // ...
     unsigned int Ebp;                   // ...
     unsigned int Eip;                   // ...
     unsigned int SegCs;                 // ...
     unsigned int EFlags;                // ...
     unsigned int Esp;                   // ...
     unsigned int SegSs;                 // ...
     unsigned __int8 ExtendedRegisters[512];
 };
 struct _NT_TIB // sizeof=0x1C
 {                                       // ...
     _EXCEPTION_REGISTRATION_RECORD *ExceptionList;
     void *StackBase;
     void *StackLimit;
     void *SubSystemTib;
     $7A727655067EA29DD1B3C3F7D79CBFD1 ___u4;
     void *ArbitraryUserPointer;
     _NT_TIB *Self;
 };
 union $7A727655067EA29DD1B3C3F7D79CBFD1 // sizeof=0x4
 {
     void *FiberData;
     unsigned int Version;
 };
 struct _TEB_ACTIVE_FRAME // sizeof=0xC
 {
     unsigned int Flags;
     _TEB_ACTIVE_FRAME *Previous;
     const _TEB_ACTIVE_FRAME_CONTEXT *Context;
 };
 struct _UNICODE_STRING // sizeof=0x8
 {                                       // ...
     unsigned __int16 Length;
     unsigned __int16 MaximumLength;
     unsigned __int16 *Buffer;
 };
 union $230F007F57291FA6539DD91FCBF00ADE // sizeof=0x4
 {
     void (__cdecl *HandlerAddress)();
     void (__fastcall *FinallyFunc)();
 };
 struct _EH4_SCOPETABLE_RECORD // sizeof=0xC
 {                                       // ...
     int EnclosingLevel;
     void *FilterFunc;
     void *HandlerFunc;
 };
 struct _ACTIVATION_CONTEXT_STACK // sizeof=0x14
 {                                       // ...
     unsigned int Flags;
     unsigned int NextCookieSequenceNumber;
     _RTL_ACTIVATION_CONTEXT_STACK_FRAME *ActiveFrame;
     _LIST_ENTRY FrameListCache;
 };
 struct LIST_ENTRY32 // sizeof=0x8
 {
     unsigned int Flink;
     unsigned int Blink;
 };
 struct _PEB_LDR_DATA // sizeof=0x28
 {
     unsigned int Length;
     unsigned __int8 Initialized;
     // padding byte
     // padding byte
     // padding byte
     void *SsHandle;
     _LIST_ENTRY InLoadOrderModuleList;
     _LIST_ENTRY InMemoryOrderModuleList;
     _LIST_ENTRY InInitializationOrderModuleList;
     void *EntryInProgress;
 };
 struct _CLIENT_ID // sizeof=0x8
 {                                       // ...
     void *UniqueProcess;
     void *UniqueThread;
 };
 struct _EXCEPTION_POINTERS // sizeof=0x8
 {                                       // ...
     _EXCEPTION_RECORD *ExceptionRecord; // ...
     _CONTEXT *ContextRecord;            // ...
 };
 struct _EH4_EXCEPTION_REGISTRATION_RECORD // sizeof=0x18
 {
     void *SavedESP;
     _EXCEPTION_POINTERS *ExceptionPointers;
     _EXCEPTION_REGISTRATION_RECORD SubRecord;
     unsigned int EncodedScopeTable;
     unsigned int TryLevel;
 };
 struct _KSYSTEM_TIME // sizeof=0xC
 {                                       // ...
     unsigned int LowPart;
     int High1Time;
     int High2Time;
 };
 struct _GDI_TEB_BATCH // sizeof=0x4E0
 {                                       // ...
     unsigned int Offset;
     unsigned int HDC;
     unsigned int Buffer[310];
 };
 union __unaligned __declspec(align(4)) $DB812E0404DF6730EA95CD272BB47104 // sizeof=0xC
 {                                       // ...
     volatile _KSYSTEM_TIME TickCount;
     volatile unsigned __int64 TickCountQuad;
 };
 struct __declspec(align(8)) _KUSER_SHARED_DATA // sizeof=0x330
 {
     unsigned int TickCountLowDeprecated;
     unsigned int TickCountMultiplier;
     volatile _KSYSTEM_TIME InterruptTime;
     volatile _KSYSTEM_TIME SystemTime;
     volatile _KSYSTEM_TIME TimeZoneBias;
     unsigned __int16 ImageNumberLow;
     unsigned __int16 ImageNumberHigh;
     wchar_t NtSystemRoot[260];
     unsigned int MaxStackTraceDepth;
     unsigned int CryptoExponent;
     unsigned int TimeZoneId;
     unsigned int LargePageMinimum;
     unsigned int Reserved2[7];
     _NT_PRODUCT_TYPE NtProductType;
     unsigned __int8 ProductTypeIsValid;
     // padding byte
     // padding byte
     // padding byte
     unsigned int NtMajorVersion;
     unsigned int NtMinorVersion;
     unsigned __int8 ProcessorFeatures[64];
     unsigned int Reserved1;
     unsigned int Reserved3;
     volatile unsigned int TimeSlip;
     _ALTERNATIVE_ARCHITECTURE_TYPE AlternativeArchitecture;
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     _LARGE_INTEGER SystemExpirationDate;
     unsigned int SuiteMask;
     unsigned __int8 KdDebuggerEnabled;
     // padding byte
     // padding byte
     // padding byte
     volatile unsigned int ActiveConsoleId;
     volatile unsigned int DismountCount;
     unsigned int ComPlusPackage;
     unsigned int LastSystemRITEventTickCount;
     unsigned int NumberOfPhysicalPages;
     unsigned __int8 SafeBootMode;
     // padding byte
     // padding byte
     // padding byte
     unsigned int TraceLogging;
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     unsigned __int64 Fill0;
     unsigned __int64 SystemCall[4];
     $DB812E0404DF6730EA95CD272BB47104 ___u34;
     // padding byte
     // padding byte
     // padding byte
     // padding byte
 };
 struct _EH4_SCOPETABLE // sizeof=0x10;variable_size
 {                                       // ...
     DWORD GSCookieOffset;
     DWORD GSCookieXOROffset;
     DWORD EHCookieOffset;
     DWORD EHCookieXOROffset;
     struct _EH4_SCOPETABLE_RECORD ScopeRecord[];
 };
 struct _PEB // sizeof=0x230
 {
     unsigned __int8 InheritedAddressSpace;
     unsigned __int8 ReadImageFileExecOptions;
     unsigned __int8 BeingDebugged;
     unsigned __int8 SpareBool;
     void *Mutant;
     void *ImageBaseAddress;
     _PEB_LDR_DATA *Ldr;
     _RTL_USER_PROCESS_PARAMETERS *ProcessParameters;
     void *SubSystemData;
     void *ProcessHeap;
     _RTL_CRITICAL_SECTION *FastPebLock;
     void *SparePtr1;
     void *SparePtr2;
     unsigned int EnvironmentUpdateCount;
     void *KernelCallbackTable;
     unsigned int SystemReserved[1];
.0   unsigned __int32 ExecuteOptions : 2;
.2   unsigned __int32 SpareBits : 30;
     _PEB_FREE_BLOCK *FreeList;
     unsigned int TlsExpansionCounter;
     void *TlsBitmap;
     unsigned int TlsBitmapBits[2];
     void *ReadOnlySharedMemoryBase;
     void *ReadOnlySharedMemoryHeap;
     void **ReadOnlyStaticServerData;
     void *AnsiCodePageData;
     void *OemCodePageData;
     void *UnicodeCaseTableData;
     unsigned int NumberOfProcessors;
     unsigned int NtGlobalFlag;
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     _LARGE_INTEGER CriticalSectionTimeout;
     unsigned int HeapSegmentReserve;
     unsigned int HeapSegmentCommit;
     unsigned int HeapDeCommitTotalFreeThreshold;
     unsigned int HeapDeCommitFreeBlockThreshold;
     unsigned int NumberOfHeaps;
     unsigned int MaximumNumberOfHeaps;
     void **ProcessHeaps;
     void *GdiSharedHandleTable;
     void *ProcessStarterHelper;
     unsigned int GdiDCAttributeList;
     _RTL_CRITICAL_SECTION *LoaderLock;
     unsigned int OSMajorVersion;
     unsigned int OSMinorVersion;
     unsigned __int16 OSBuildNumber;
     unsigned __int16 OSCSDVersion;
     unsigned int OSPlatformId;
     unsigned int ImageSubsystem;
     unsigned int ImageSubsystemMajorVersion;
     unsigned int ImageSubsystemMinorVersion;
     unsigned int ImageProcessAffinityMask;
     unsigned int GdiHandleBuffer[34];
     void (__cdecl *PostProcessInitRoutine)();
     void *TlsExpansionBitmap;
     unsigned int TlsExpansionBitmapBits[32];
     unsigned int SessionId;
     _ULARGE_INTEGER AppCompatFlags;
     _ULARGE_INTEGER AppCompatFlagsUser;
     void *pShimData;
     void *AppCompatInfo;
     _UNICODE_STRING CSDVersion;
     const _ACTIVATION_CONTEXT_DATA *ActivationContextData;
     _ASSEMBLY_STORAGE_MAP *ProcessAssemblyStorageMap;
     const _ACTIVATION_CONTEXT_DATA *SystemDefaultActivationContextData;
     _ASSEMBLY_STORAGE_MAP *SystemAssemblyStorageMap;
     unsigned int MinimumStackCommit;
     void **FlsCallback;
     _LIST_ENTRY FlsListHead;
     void *FlsBitmap;
     unsigned int FlsBitmapBits[4];
     unsigned int FlsHighIndex;
 };
 struct LIST_ENTRY64 // sizeof=0x10
 {
     unsigned __int64 Flink;
     unsigned __int64 Blink;
 };
 struct _TEB // sizeof=0xFB8
 {
     _NT_TIB NtTib;
     void *EnvironmentPointer;
     _CLIENT_ID ClientId;
     void *ActiveRpcHandle;
     void *ThreadLocalStoragePointer;
     _PEB *ProcessEnvironmentBlock;
     unsigned int LastErrorValue;
     unsigned int CountOfOwnedCriticalSections;
     void *CsrClientThread;
     void *Win32ThreadInfo;
     unsigned int User32Reserved[26];
     unsigned int UserReserved[5];
     void *WOW32Reserved;
     unsigned int CurrentLocale;
     unsigned int FpSoftwareStatusRegister;
     void *SystemReserved1[54];
     int ExceptionCode;
     _ACTIVATION_CONTEXT_STACK ActivationContextStack;
     unsigned __int8 SpareBytes1[24];
     _GDI_TEB_BATCH GdiTebBatch;
     _CLIENT_ID RealClientId;
     void *GdiCachedProcessHandle;
     unsigned int GdiClientPID;
     unsigned int GdiClientTID;
     void *GdiThreadLocalInfo;
     unsigned int Win32ClientInfo[62];
     void *glDispatchTable[233];
     unsigned int glReserved1[29];
     void *glReserved2;
     void *glSectionInfo;
     void *glSection;
     void *glTable;
     void *glCurrentRC;
     void *glContext;
     unsigned int LastStatusValue;
     _UNICODE_STRING StaticUnicodeString;
     wchar_t StaticUnicodeBuffer[261];
     // padding byte
     // padding byte
     void *DeallocationStack;
     void *TlsSlots[64];
     _LIST_ENTRY TlsLinks;
     void *Vdm;
     void *ReservedForNtRpc;
     void *DbgSsReserved[2];
     unsigned int HardErrorMode;
     void *Instrumentation[16];
     void *WinSockData;
     unsigned int GdiBatchCount;
     unsigned __int8 InDbgPrint;
     unsigned __int8 FreeStackOnTermination;
     unsigned __int8 HasFiberData;
     unsigned __int8 IdealProcessor;
     unsigned int Spare3;
     void *ReservedForPerf;
     void *ReservedForOle;
     unsigned int WaitingOnLoaderLock;
     _Wx86ThreadState Wx86Thread;
     void **TlsExpansionSlots;
     unsigned int ImpersonationLocale;
     unsigned int IsImpersonating;
     void *NlsCache;
     void *pShimData;
     unsigned int HeapVirtualAffinity;
     void *CurrentTransactionHandle;
     _TEB_ACTIVE_FRAME *ActiveFrame;
     void *FlsData;
 };
 struct __declspec(align(32)) _JMP_BUF // sizeof=0x40
 {
     unsigned int saved_ebp;
     unsigned int saved_ebx;
     unsigned int saved_edi;
     unsigned int saved_esi;
     unsigned int saved_esp;
     unsigned int saved_return;
     unsigned int saved_xregistration;
     unsigned int saved_trylevel;
     unsigned int version_cookie;
     unsigned int unwind_func;
     unsigned int unwind_data;
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
 };
 struct _NLG_INFO // sizeof=0x10
 {                                       // ...
     unsigned int dwSig;
     unsigned int uoffDestination;
     unsigned int dwCode;
     unsigned int uoffFramePointer;
 };
 struct __declspec(align(16)) _EXCEPTION_RECORD_CRT // sizeof=0x50
 {
     unsigned int exception_number;
     unsigned int exception_flags;
     unsigned int exception_record;
     unsigned int exception_address;
     unsigned int number_parameters;
     unsigned int exception_information;
     _BYTE gap18[56];
 };
 struct _EXCEPTION_REGISTRATION_COMMON // sizeof=0x10
 {
     _BYTE gap0[8];
     unsigned int scopetable;
     unsigned int trylevel;
 };
 struct _SCOPETABLE_ENTRY // sizeof=0xC
 {
     unsigned int enclosing_level;
     unsigned int filter;
     unsigned int specific_handler;
 };
 struct _EXCEPTION_REGISTRATION // sizeof=0x8
 {
     unsigned int prev;
     unsigned int handler;
 };
 struct __declspec(align(16)) ExceptionRecordStruct // sizeof=0x50
 {
     unsigned int ExceptionCode;
     unsigned int ExceptionFlags;
     unsigned int ExceptionRecord_;
     unsigned int ExceptionAddress;
     unsigned int NumberParameters;
     unsigned int ExceptionInfo;
     _BYTE gap18[56];
 };
 struct RegistrationNode // sizeof=0x10
 {
     unsigned int Next;
     unsigned int Handler;
     unsigned int EH4ScopeTable;
     unsigned int TryLevel;
 };
 union $0E3F8CB7D65B38BD22FD7A6AB8ED9E74 // sizeof=0x4
 {                                       // ...
     unsigned int HandlerAddress;
     unsigned int FinallyFunc;
 };
 struct ScopeTableRecord // sizeof=0xC
 {
     unsigned int EnclosingLevel;
     unsigned int FilterFunc;
     $0E3F8CB7D65B38BD22FD7A6AB8ED9E74 ___u2;
 };
 struct UnwindGuardNode // sizeof=0x1C
 {
     unsigned int Next;
     unsigned int Handler;
     unsigned int SecurityCookie;
     unsigned int OrigTargetLevel;
     unsigned int OrigEstablisher;
     unsigned int OrigCookiePointer;
     unsigned int FramePointer;
 };
 struct ScopeTable // sizeof=0x14
 {
     unsigned int GSCookieOffset;
     unsigned int GSCookieXOROffset;
     unsigned int EHCookieOffset;
     unsigned int EHCookieXOROffset;
     unsigned int ScopeRecord;
 };
 struct $AC279CAA9C5581B899E4397C90E7ADDB // sizeof=0x4
 {                                       // ...
.0   unsigned __int32 LongFunction : 1;
.1   unsigned __int32 Private : 31;
 };
 union $BE09F76B48165BAD37165854A96FCEBF // sizeof=0x4
 {
     unsigned int Flags;
     $AC279CAA9C5581B899E4397C90E7ADDB s;
 };
 struct _strflt // sizeof=0x10
 {                                       // ...
     int sign;                           // ...
     int decpt;                          // ...
     int flag;
     char *mantissa;
 };
 struct _finddata32_t // sizeof=0x118
 {
     unsigned int attrib;
     int time_create;
     int time_access;
     int time_write;
     unsigned int size;
     char name[260];
 };
 struct errentry // sizeof=0x8
 {                                       // ...
     unsigned int oscode;                // ...
     int errnocode;                      // ...
 };
 struct _is_ctype_compatible // sizeof=0x8
 {                                       // ...
     unsigned int id;                    // ...
     int is_clike;                       // ...
 };
 struct setloc_struct // sizeof=0x15C
 {                                       // ...
     char *pchLanguage;
     char *pchCountry;
     int iLcidState;
     int iPrimaryLen;
     int bAbbrevLanguage;
     int bAbbrevCountry;
     unsigned int lcidLanguage;
     unsigned int lcidCountry;
     tagLC_ID _cacheid;
     // padding byte
     // padding byte
     unsigned int _cachecp;
     char _cachein[131];
     char _cacheout[131];
     // padding byte
     // padding byte
     _is_ctype_compatible _Lcid_c[5];
 };
 struct _tiddata // sizeof=0x214
 {
     unsigned int _tid;
     unsigned int _thandle;
     int _terrno;
     unsigned int _tdoserrno;
     unsigned int _fpds;
     unsigned int _holdrand;
     char *_token;
     wchar_t *_wtoken;
     unsigned __int8 *_mtoken;
     char *_errmsg;
     wchar_t *_werrmsg;
     char *_namebuf0;
     wchar_t *_wnamebuf0;
     char *_namebuf1;
     wchar_t *_wnamebuf1;
     char *_asctimebuf;
     wchar_t *_wasctimebuf;
     void *_gmtimebuf;
     char *_cvtbuf;
     unsigned __int8 _con_ch_buf[5];
     // padding byte
     unsigned __int16 _ch_buf_used;
     void *_initaddr;
     void *_initarg;
     void *_pxcptacttab;
     void *_tpxcptinfoptrs;
     int _tfpecode;
     threadmbcinfostruct *ptmbcinfo;
     threadlocaleinfostruct *ptlocinfo;
     int _ownlocale;
     unsigned int _NLG_dwCode;
     void *_terminate;
     void *_unexpected;
     void *_translator;
     void *_purecall;
     void *_curexception;
     void *_curcontext;
     int _ProcessingThrow;
     void *_curexcspec;
     void *_pFrameInfoChain;
     setloc_struct _setloc_data;
     void *_encode_ptr;
     void *_decode_ptr;
     void *_reserved1;
     void *_reserved2;
     void *_reserved3;
     int _cxxReThrow;
     unsigned int __initDomain;
 };
 struct _stat32 // sizeof=0x24
 {
     unsigned int st_dev;
     unsigned __int16 st_ino;
     unsigned __int16 st_mode;
     __int16 st_nlink;
     __int16 st_uid;
     __int16 st_gid;
     // padding byte
     // padding byte
     unsigned int st_rdev;
     int st_size;
     int st_atime;
     int st_mtime;
     int st_ctime;
 };
 struct tagEntry // sizeof=0xC
 {
     int sizeFront;
     tagEntry *pEntryNext;
     tagEntry *pEntryPrev;
 };
 struct tagListHead // sizeof=0x8
 {                                       // ...
     tagEntry *pEntryNext;
     tagEntry *pEntryPrev;
 };
 struct tagGroup // sizeof=0x204
 {                                       // ...
     int cntEntries;
     tagListHead listHead[64];
 };
 struct tagRegion // sizeof=0x41C4
 {
     int indGroupUse;
     char cntRegionSize[64];
     unsigned int bitvGroupHi[32];
     unsigned int bitvGroupLo[32];
     tagGroup grpHeadList[32];
 };
 struct tagHeader // sizeof=0x14
 {
     unsigned int bitvEntryHi;
     unsigned int bitvEntryLo;
     unsigned int bitvCommit;
     void *pHeapData;
     tagRegion *pRegion;
 };
 struct tagEntryEnd // sizeof=0x4
 {
     int sizeBack;
 };
 struct __declspec(align(8)) ioinfo // sizeof=0x40
 {                                       // ...
     int osfhnd;
     char osfile;
     char pipech;
     // padding byte
     // padding byte
     int lockinitflag;
     _RTL_CRITICAL_SECTION lock;
.0   __int8 textmode : 7;
.7   __int8 unicode : 1;
     char pipech2[2];
     // padding byte
     __int64 startpos;
     int utf8translations;
     char dbcsBuffer;
     // padding byte
     // padding byte
     // padding byte
     int dbcsBufferUsed;
     // padding byte
     // padding byte
     // padding byte
     // padding byte
 };
 struct _BY_HANDLE_FILE_INFORMATION // sizeof=0x34
 {                                       // ...
     unsigned int dwFileAttributes;      // ...
     _FILETIME ftCreationTime;           // ...
     _FILETIME ftLastAccessTime;         // ...
     _FILETIME ftLastWriteTime;          // ...
     unsigned int dwVolumeSerialNumber;
     unsigned int nFileSizeHigh;
     unsigned int nFileSizeLow;          // ...
     unsigned int nNumberOfLinks;
     unsigned int nFileIndexHigh;
     unsigned int nFileIndexLow;
 };
 struct $9EDDA679613D7E4E5E37CB563F432A3F // sizeof=0x8
 {                                       // ...
     unsigned int lowerhalf;
     int upperhalf;
 };
 union doubleint // sizeof=0x8
 {                                       // ...
     __int64 bigint;
     $9EDDA679613D7E4E5E37CB563F432A3F twoints;
 };
 struct IMAGE_LOAD_CONFIG_DIRECTORY32_2 // sizeof=0x48
 {                                       // ...
     unsigned int Size;
     unsigned int TimeDateStamp;
     unsigned __int16 MajorVersion;
     unsigned __int16 MinorVersion;
     unsigned int GlobalFlagsClear;
     unsigned int GlobalFlagsSet;
     unsigned int CriticalSectionDefaultTimeout;
     unsigned int DeCommitFreeBlockThreshold;
     unsigned int DeCommitTotalFreeThreshold;
     unsigned int LockPrefixTable;
     unsigned int MaximumAllocationSize;
     unsigned int VirtualMemoryThreshold;
     unsigned int ProcessHeapFlags;
     unsigned int ProcessAffinityMask;
     unsigned __int16 CSDVersion;
     unsigned __int16 Reserved1;
     unsigned int EditList;
     unsigned int *SecurityCookie;
     void **SEHandlerTable;
     unsigned int SEHandlerCount;
 };
 struct tagUSEROBJECTFLAGS // sizeof=0xC
 {                                       // ...
     int fInherit;
     int fReserved;
     unsigned int dwFlags;               // ...
 };
 struct HWINSTA__ // sizeof=0x4
 {
     int unused;
 };
 struct tagLC_STRINGS // sizeof=0x90
 {                                       // ...
     char szLanguage[64];
     char szCountry[64];
     char szCodePage[16];
 };
 struct tagLOCALETAB // sizeof=0x8
 {
     char *szName;
     char chAbbrev[4];
 };
 union FT // sizeof=0x8
 {                                       // ...
     unsigned __int64 ft_scalar;
     _FILETIME ft_struct;
 };
 struct __declspec(align(4)) _cpinfo // sizeof=0x14
 {                                       // ...
     unsigned int MaxCharSize;           // ...
     unsigned __int8 DefaultChar[2];
     unsigned __int8 LeadByte[12];       // ...
     // padding byte
     // padding byte
 };
 struct _IMAGE_DOS_HEADER // sizeof=0x40
 {
     unsigned __int16 e_magic;
     unsigned __int16 e_cblp;
     unsigned __int16 e_cp;
     unsigned __int16 e_crlc;
     unsigned __int16 e_cparhdr;
     unsigned __int16 e_minalloc;
     unsigned __int16 e_maxalloc;
     unsigned __int16 e_ss;
     unsigned __int16 e_sp;
     unsigned __int16 e_csum;
     unsigned __int16 e_ip;
     unsigned __int16 e_cs;
     unsigned __int16 e_lfarlc;
     unsigned __int16 e_ovno;
     unsigned __int16 e_res[4];
     unsigned __int16 e_oemid;
     unsigned __int16 e_oeminfo;
     unsigned __int16 e_res2[10];
     int e_lfanew;
 };
 struct _IMAGE_FILE_HEADER // sizeof=0x14
 {                                       // ...
     unsigned __int16 Machine;
     unsigned __int16 NumberOfSections;
     unsigned int TimeDateStamp;
     unsigned int PointerToSymbolTable;
     unsigned int NumberOfSymbols;
     unsigned __int16 SizeOfOptionalHeader;
     unsigned __int16 Characteristics;
 };
 struct _IMAGE_DATA_DIRECTORY // sizeof=0x8
 {                                       // ...
     unsigned int VirtualAddress;
     unsigned int Size;
 };
 struct _IMAGE_OPTIONAL_HEADER // sizeof=0xE0
 {                                       // ...
     unsigned __int16 Magic;
     unsigned __int8 MajorLinkerVersion;
     unsigned __int8 MinorLinkerVersion;
     unsigned int SizeOfCode;
     unsigned int SizeOfInitializedData;
     unsigned int SizeOfUninitializedData;
     unsigned int AddressOfEntryPoint;
     unsigned int BaseOfCode;
     unsigned int BaseOfData;
     unsigned int ImageBase;
     unsigned int SectionAlignment;
     unsigned int FileAlignment;
     unsigned __int16 MajorOperatingSystemVersion;
     unsigned __int16 MinorOperatingSystemVersion;
     unsigned __int16 MajorImageVersion;
     unsigned __int16 MinorImageVersion;
     unsigned __int16 MajorSubsystemVersion;
     unsigned __int16 MinorSubsystemVersion;
     unsigned int Win32VersionValue;
     unsigned int SizeOfImage;
     unsigned int SizeOfHeaders;
     unsigned int CheckSum;
     unsigned __int16 Subsystem;
     unsigned __int16 DllCharacteristics;
     unsigned int SizeOfStackReserve;
     unsigned int SizeOfStackCommit;
     unsigned int SizeOfHeapReserve;
     unsigned int SizeOfHeapCommit;
     unsigned int LoaderFlags;
     unsigned int NumberOfRvaAndSizes;
     _IMAGE_DATA_DIRECTORY DataDirectory[16];
 };
 struct _IMAGE_NT_HEADERS // sizeof=0xF8
 {
     unsigned int Signature;
     _IMAGE_FILE_HEADER FileHeader;
     _IMAGE_OPTIONAL_HEADER OptionalHeader;
 };
 union $22971E98F1DCAE471B592EC18ECB1551 // sizeof=0x4
 {                                       // ...
     unsigned int PhysicalAddress;
     unsigned int VirtualSize;
 };
 struct _IMAGE_SECTION_HEADER // sizeof=0x28
 {
     unsigned __int8 Name[8];
     $22971E98F1DCAE471B592EC18ECB1551 Misc;
     unsigned int VirtualAddress;
     unsigned int SizeOfRawData;
     unsigned int PointerToRawData;
     unsigned int PointerToRelocations;
     unsigned int PointerToLinenumbers;
     unsigned __int16 NumberOfRelocations;
     unsigned __int16 NumberOfLinenumbers;
     unsigned int Characteristics;
 };
 struct $4D8BBCAE9A17DBEBDD062B9AEBFC2048 // sizeof=0xC
 {
     const char *catname;
     char *locale;
     int (__cdecl *init)(threadlocaleinfostruct *);
 };
 const struct $AF5DBF3EAC972D05C1202F2C57C58638 // sizeof=0xC
 {                                       // ...
     const char *catname;                // ...
     char *locale;
     int (__cdecl *init)(threadlocaleinfostruct *); // ...
 };
 struct _XCPT_ACTION // sizeof=0xC
 {                                       // ...
     unsigned int XcptNum;
     int SigNum;
     void (__cdecl *XcptAction)(int);
 };
 struct _FILEX // sizeof=0x38
 {
     _iobuf f;
     _RTL_CRITICAL_SECTION lock;
 };
 struct _TIME_ZONE_INFORMATION // sizeof=0xAC
 {                                       // ...
     int Bias;                           // ...
     wchar_t StandardName[32];           // ...
     _SYSTEMTIME StandardDate;           // ...
     int StandardBias;                   // ...
     wchar_t DaylightName[32];           // ...
     _SYSTEMTIME DaylightDate;           // ...
     int DaylightBias;                   // ...
 };
 struct transitiondate // sizeof=0xC
 {                                       // ...
     int yr;                             // ...
     int yd;                             // ...
     int ms;                             // ...
 };
 struct __cppobj <CrtImplementationDetails>::NativeDll // sizeof=0x0
 {
 };
 struct __cppobj __declspec(align(4)) _LocaleUpdate // sizeof=0x10
 {                                       // ...
     localeinfo_struct localeinfo;       // ...
     _tiddata *ptd;                      // ...
     bool updated;                       // ...
     // padding byte
     // padding byte
     // padding byte
 };
 struct _CRT_FLOAT // sizeof=0x4
 {                                       // ...
     float f;                            // ...
 };
 struct _LDOUBLE // sizeof=0xA
 {                                       // ...
     unsigned __int8 ld[10];
 };
 struct _CRT_DOUBLE // sizeof=0x8
 {                                       // ...
     long double x;                      // ...
 };
 struct _LDBL12 // sizeof=0xC
 {                                       // ...
     unsigned __int8 ld12[12];           // ...
 };
 struct _flt // sizeof=0x18
 {                                       // ...
     int flags;
     int nbytes;
     int lval;
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     long double dval;
 };
 struct code_page_info // sizeof=0x30
 {                                       // ...
     int code_page;                      // ...
     unsigned __int16 mbulinfo[6];       // ...
     unsigned __int8 rgrange[4][8];      // ...
 };
 union _output_l::__l2::<unnamed_type_buffer> // sizeof=0x200
 {                                       // ...
     char sz[512];
 };
 union _output_l::__l2::<unnamed_type_text> // sizeof=0x4
 {                                       // ...
     char *sz;
     wchar_t *wz;
 };
 struct _output_l::__l77::_count_string // sizeof=0x8
 {
     __int16 Length;
     __int16 MaximumLength;
     char *Buffer;
 };
 struct positional_param // sizeof=0x10
 {
     ARG_TYPE arg_type;
     char *arg_ptr;
     char type;
     // padding byte
     // padding byte
     // padding byte
     int flags;
 };
 struct _IMAGE_TLS_DIRECTORY32 // sizeof=0x18
 {                                       // ...
     unsigned int StartAddressOfRawData;
     unsigned int EndAddressOfRawData;
     unsigned int AddressOfIndex;
     unsigned int AddressOfCallBacks;
     unsigned int SizeOfZeroFill;
     unsigned int Characteristics;
 };
 struct $2A5FD0954BB1106BB544844F2F5AB861 // sizeof=0x8
 {                                       // ...
     _RTL_CRITICAL_SECTION *lock;        // ...
     $D283E5A92EBEB600100C8EBC9C67A011 kind; // ...
 };
 struct rterrmsgs // sizeof=0x8
 {                                       // ...
     int rterrno;                        // ...
     char *rterrtxt;                     // ...
 };
 struct _FloatOutStruct // sizeof=0x1A
 {                                       // ...
     __int16 exp;                        // ...
     char sign;                          // ...
     char ManLen;
     char man[22];                       // ...
 };
 struct FpFormatDescriptor // sizeof=0x18
 {                                       // ...
     int max_exp;                        // ...
     int min_exp;                        // ...
     int precision;                      // ...
     int exp_width;                      // ...
     int format_width;                   // ...
     int bias;                           // ...
 };
 struct $81FF3B5A01E2ACE59F672A6F9CB6F2F8 // sizeof=0x8
 {                                       // ...
.0   unsigned __int64 mantissa : 52;
.52  unsigned __int64 exponent : 11;
.63  unsigned __int64 sign : 1;
 };
 union _CRT_DOUBLE_COMPONENTS // sizeof=0x8
 {
     long double d;
     $81FF3B5A01E2ACE59F672A6F9CB6F2F8 __s1;
 };
 struct __unaligned __declspec(align(2)) DispLocals // sizeof=0xA6
 {
     unsigned __int16 wUser1;
     unsigned __int16 wUser2;
     unsigned __int16 savCntrl;
     unsigned __int16 setCntrl;
     unsigned __int16 StatusWord;
     _TBYTE Fac;
     unsigned int Function;
     unsigned __int8 ErrorType;
     unsigned __int8 __cpower;
     unsigned int typ;
     unsigned int nam;
     unsigned __int64 arg1;
     unsigned __int64 arg2;
     unsigned __int64 retval;
     unsigned __int8 savebuf;
     _BYTE gap3B[107];
 };
 struct __declspec(align(2)) funtab // sizeof=0x10
 {
     unsigned __int8 fnamlen;
     unsigned __int8 fnam;
     _BYTE gap2[5];
     unsigned __int8 fuseval;
     _BYTE gap8[5];
     unsigned __int8 fnumarg;
     unsigned __int8 fnumber;
     // padding byte
 };
 struct _exception // sizeof=0x20
 {                                       // ...
     unsigned int typ;                   // ...
     unsigned int nam;                   // ...
     unsigned __int64 arg1;              // ...
     unsigned __int64 arg2;              // ...
     unsigned __int64 retval;            // ...
 };
 struct FPU_STATE // sizeof=0x1C
 {
     unsigned __int16 CONTROL_WORD;
     unsigned __int16 reserved_1;
     unsigned int STATUS_WORD;
     unsigned __int16 TAG_WORD;
     unsigned __int16 reserved_3;
     unsigned int IP_OFFSET;
     unsigned __int16 CS_SLCT;
     unsigned __int16 OPCODE;
     unsigned int DATA_OFFSET;
     unsigned __int16 OPERAND_SLCT;
     unsigned __int16 reserved_4;
 };
 struct __unaligned __declspec(align(1)) MTStackFrame // sizeof=0x9
 {
     unsigned __int64 MTS_LocalFac;
     unsigned __int8 MTS_cdispflags;
 };
 struct _U32ARRAY // sizeof=0x10
 {                                       // ...
     unsigned int W[4];
 };
 struct _U64 // sizeof=0x8
 {                                       // ...
     unsigned int W[2];
 };
 struct _FP128 // sizeof=0x10
 {                                       // ...
     unsigned int W[4];
 };
 struct _FPIEEE_EXCEPTION_FLAGS // sizeof=0x4
 {                                       // ...
.0   unsigned __int32 Inexact : 1;
.1   unsigned __int32 Underflow : 1;
.2   unsigned __int32 Overflow : 1;
.3   unsigned __int32 ZeroDivide : 1;
.4   unsigned __int32 InvalidOperation : 1;
.5   // padding bit
.6   // padding bit
.7   // padding bit
.8   // padding bit
.9   // padding bit
.10  // padding bit
.11  // padding bit
.12  // padding bit
.13  // padding bit
.14  // padding bit
.15  // padding bit
.16  // padding bit
.17  // padding bit
.18  // padding bit
.19  // padding bit
.20  // padding bit
.21  // padding bit
.22  // padding bit
.23  // padding bit
.24  // padding bit
.25  // padding bit
.26  // padding bit
.27  // padding bit
.28  // padding bit
.29  // padding bit
.30  // padding bit
.31  // padding bit
 };
 struct _FP80 // sizeof=0xA
 {                                       // ...
     unsigned __int16 W[5];
 };
 struct _I64 // sizeof=0x8
 {                                       // ...
     unsigned int W[2];
 };
 struct _BCD80 // sizeof=0xA
 {                                       // ...
     unsigned __int16 W[5];
 };
 struct _FPQ64 // sizeof=0x10
 {                                       // ...
     __int64 W[2];
 };
 union $4391BFBD4E677F062FBD827381FFC753 // sizeof=0x10
 {                                       // ...
     float Fp32Value;
     long double Fp64Value;
     _FP80 Fp80Value;
     _FP128 Fp128Value;
     __int16 I16Value;
     int I32Value;
     _I64 I64Value;
     unsigned __int16 U16Value;
     unsigned int U32Value;
     _U64 U64Value;
     _BCD80 Bcd80Value;
     char *StringValue;
     int CompareValue;
     _U32ARRAY U32ArrayValue;
     __int64 Q64Value;
     _FPQ64 Fpq64Value;
 };
 struct __declspec(align(16)) _FPIEEE_VALUE // sizeof=0x20
 {                                       // ...
     $4391BFBD4E677F062FBD827381FFC753 Value;
.0   unsigned __int32 OperandValid : 1;
.1   unsigned __int32 Format : 4;
.5   // padding bit
.6   // padding bit
.7   // padding bit
.8   // padding bit
.9   // padding bit
.10  // padding bit
.11  // padding bit
.12  // padding bit
.13  // padding bit
.14  // padding bit
.15  // padding bit
.16  // padding bit
.17  // padding bit
.18  // padding bit
.19  // padding bit
.20  // padding bit
.21  // padding bit
.22  // padding bit
.23  // padding bit
.24  // padding bit
.25  // padding bit
.26  // padding bit
.27  // padding bit
.28  // padding bit
.29  // padding bit
.30  // padding bit
.31  // padding bit
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
     // padding byte
 };
 struct _FPIEEE_RECORD // sizeof=0x70
 {                                       // ...
.0   unsigned __int32 RoundingMode : 2;
.2   unsigned __int32 Precision : 3;
.5   unsigned __int32 Operation : 12;
.17  // padding bit
.18  // padding bit
.19  // padding bit
.20  // padding bit
.21  // padding bit
.22  // padding bit
.23  // padding bit
.24  // padding bit
.25  // padding bit
.26  // padding bit
.27  // padding bit
.28  // padding bit
.29  // padding bit
.30  // padding bit
.31  // padding bit
     _FPIEEE_EXCEPTION_FLAGS Cause;
     _FPIEEE_EXCEPTION_FLAGS Enable;
     _FPIEEE_EXCEPTION_FLAGS Status;
     _FPIEEE_VALUE Operand1;
     _FPIEEE_VALUE Operand2;
     _FPIEEE_VALUE Result;
 };
 union _dbl // sizeof=0x8
 {                                       // ...
     int lng[2];
     long double dbl;
 };
 struct $992A88C5856F6BE6869BBDDAC7BE31AD // sizeof=0xC
 {                                       // ...
     int dw0;                            // ...
     int dw1;                            // ...
     int dw2;                            // ...
 };
 struct TypeDescriptor // sizeof=0x8;variable_size
 {
     unsigned int hash;
     void *spare;
     char name[];
 };
 struct PMD // sizeof=0xC
 {                                       // ...
     int mdisp;
     int pdisp;
     int vdisp;
 };
 struct _s_CatchableType // sizeof=0x1C
 {
     unsigned int properties;
     TypeDescriptor *pType;
     PMD thisDisplacement;
     int sizeOrOffset;
     void (__cdecl *copyFunction)();
 };
 struct _s_CatchableTypeArray // sizeof=0x4;variable_size
 {
     int nCatchableTypes;
     const _s_CatchableType *arrayOfCatchableTypes[];
 };
 struct _s_HandlerType // sizeof=0x10
 {
     unsigned int adjectives;
     TypeDescriptor *pType;
     int dispCatchObj;
     void *addressOfHandler;
 };
 struct _s_ESTypeList // sizeof=0x8
 {
     int nCount;
     const _s_HandlerType *pTypeArray;
 };
 struct _s_ThrowInfo // sizeof=0x10
 {
     unsigned int attributes;
     void (__cdecl *pmfnUnwind)();
     int (*pForwardCompat)(...);
     const _s_CatchableTypeArray *pCatchableTypeArray;
 };
 struct _s_UnwindMapEntry // sizeof=0x8
 {
     int toState;
     void (__cdecl *action)();
 };
 struct _s_TryBlockMapEntry // sizeof=0x14
 {
     int tryLow;
     int tryHigh;
     int catchHigh;
     int nCatches;
     const _s_HandlerType *pHandlerArray;
 };
 struct _s_FuncInfo // sizeof=0x24
 {
.0   unsigned __int32 magicNumber : 29;
.29  unsigned __int32 bbtFlags : 3;
     int maxState;
     const _s_UnwindMapEntry *pUnwindMap;
     unsigned int nTryBlocks;
     const _s_TryBlockMapEntry *pTryBlockMap;
     unsigned int nIPMapEntries;
     void *pIPtoStateMap;
     const _s_ESTypeList *pESTypeList;
     int EHFlags;
 };
 struct EHExceptionRecord::EHParameters // sizeof=0xC
 {                                       // ...
     unsigned int magicNumber;           // ...
     void *pExceptionObject;             // ...
     const _s_ThrowInfo *pThrowInfo;     // ...
 };
 struct EHExceptionRecord // sizeof=0x20
 {                                       // ...
     unsigned int ExceptionCode;         // ...
     unsigned int ExceptionFlags;        // ...
     _EXCEPTION_RECORD *ExceptionRecord;
     void *ExceptionAddress;
     unsigned int NumberParameters;      // ...
     EHExceptionRecord::EHParameters params; // ...
 };
 struct EHRegistrationNode // sizeof=0xC
 {
     EHRegistrationNode *pNext;
     void *frameHandler;
     int state;
 };
 struct CatchGuardRN // sizeof=0x18
 {                                       // ...
     EHRegistrationNode *pNext;          // ...
     void *pFrameHandler;                // ...
     unsigned int RandomCookie;          // ...
     const _s_FuncInfo *pFuncInfo;       // ...
     EHRegistrationNode *pRN;            // ...
     int CatchDepth;                     // ...
 };
 struct TranslatorGuardRN // sizeof=0x28
 {                                       // ...
     EHRegistrationNode *pNext;          // ...
     void *pFrameHandler;                // ...
     unsigned int RandomCookie;          // ...
     const _s_FuncInfo *pFuncInfo;       // ...
     EHRegistrationNode *pRN;            // ...
     int CatchDepth;                     // ...
     EHRegistrationNode *pMarkerRN;      // ...
     void *ESP;                          // ...
     void *EBP;                          // ...
     int DidUnwind;                      // ...
 };
 struct __JUMP_BUFFER // sizeof=0x40
 {
     unsigned int Ebp;
     unsigned int Ebx;
     unsigned int Edi;
     unsigned int Esi;
     unsigned int Esp;
     unsigned int Eip;
     unsigned int Registration;
     unsigned int TryLevel;
     unsigned int Cookie;
     unsigned int UnwindFunc;
     unsigned int UnwindData[6];
 };
 struct __cppobj HeapManager::Block // sizeof=0x1004
 {
     HeapManager::Block *next;
     char memBlock[4096];
 };
 struct HeapManager // sizeof=0x14
 {                                       // ...
     void *(__cdecl *pOpNew)(unsigned int);
     void (__cdecl *pOpDelete)(void *);
     HeapManager::Block *head;
     HeapManager::Block *tail;
     unsigned int blockLeft;
 };
 struct __cppobj DNameNode // sizeof=0x4
 {                                       // ...
     DNameNode_vtbl *__vftable;
 };
 struct /*VFT*/ DNameNode_vtbl // sizeof=0xC
 {
     int (__thiscall *length)(DNameNode *this);
     char (__thiscall *getLastChar)(DNameNode *this);
     char *(__thiscall *getString)(DNameNode *this, char *, char *);
 };
 struct __cppobj DName // sizeof=0x8
 {
     DNameNode *node;
.0   __int32 stat : 8;
.8   unsigned __int32 isIndir : 1;
.9   unsigned __int32 isAUDC : 1;
.10  unsigned __int32 isAUDTThunk : 1;
.11  unsigned __int32 isArrayType : 1;
.12  unsigned __int32 NoTE : 1;
.13  unsigned __int32 pinPtr : 1;
.14  unsigned __int32 comArray : 1;
.15  unsigned __int32 vcallThunk : 1;
.16  // padding bit
.17  // padding bit
.18  // padding bit
.19  // padding bit
.20  // padding bit
.21  // padding bit
.22  // padding bit
.23  // padding bit
.24  // padding bit
.25  // padding bit
.26  // padding bit
.27  // padding bit
.28  // padding bit
.29  // padding bit
.30  // padding bit
.31  // padding bit
 };
 struct __cppobj Replicator // sizeof=0x2C
 {                                       // ...
     int index;
     DName *dNameBuffer[10];
 };
 struct /*VFT*/ charNode_vtbl // sizeof=0xC
 {
     int (__thiscall *length)(DNameNode *this);
     char (__thiscall *getLastChar)(DNameNode *this);
     char *(__thiscall *getString)(DNameNode *this, char *, char *);
 };
 struct __cppobj __declspec(align(4)) charNode : DNameNode // sizeof=0x8
 {
     char me;
     // padding byte
     // padding byte
     // padding byte
 };
 struct /*VFT*/ pcharNode_vtbl // sizeof=0xC
 {
     int (__thiscall *length)(DNameNode *this);
     char (__thiscall *getLastChar)(DNameNode *this);
     char *(__thiscall *getString)(DNameNode *this, char *, char *);
 };
 struct __cppobj pcharNode : DNameNode // sizeof=0xC
 {
     char *me;
     int myLen;
 };
 struct __cppobj UnDecorator // sizeof=0x58
 {
     Replicator ArgList;
     Replicator ZNameList;
 };
 struct /*VFT*/ pDNameNode_vtbl // sizeof=0xC
 {
     int (__thiscall *length)(DNameNode *this);
     char (__thiscall *getLastChar)(DNameNode *this);
     char *(__thiscall *getString)(DNameNode *this, char *, char *);
 };
 struct __cppobj pDNameNode : DNameNode // sizeof=0x8
 {
     DName *me;
 };
 struct /*VFT*/ pairNode_vtbl // sizeof=0xC
 {
     int (__thiscall *length)(DNameNode *this);
     char (__thiscall *getLastChar)(DNameNode *this);
     char *(__thiscall *getString)(DNameNode *this, char *, char *);
 };
 struct __cppobj pairNode : DNameNode // sizeof=0x10
 {
     DNameNode *left;
     DNameNode *right;
     int myLen;
 };
 struct /*VFT*/ DNameStatusNode_vtbl // sizeof=0xC
 {
     int (__thiscall *length)(DNameNode *this);
     char (__thiscall *getLastChar)(DNameNode *this);
     char *(__thiscall *getString)(DNameNode *this, char *, char *);
 };
 struct __cppobj DNameStatusNode : DNameNode // sizeof=0xC
 {
     DNameStatus me;
     int myLen;
 };
 struct $_TypeDescriptor$_extraBytes_28 // sizeof=0x24
 {
     const void *pVFTable;
     void *spare;
     char name[28];
 };
 struct __cppobj std::bad_typeid : std::exception // sizeof=0xC
 {                                       // ...
 };
 struct /*VFT*/ std::bad_typeid_vtbl // sizeof=0x8
 {
     void (__thiscall *~exception)(std::exception *this);
     const char *(__thiscall *what)(std::exception *this);
 };
 struct __cppobj std::__non_rtti_object : std::bad_typeid // sizeof=0xC
 {
 };
 struct /*VFT*/ std::__non_rtti_object_vtbl // sizeof=0x8
 {
     void (__thiscall *~exception)(std::exception *this);
     const char *(__thiscall *what)(std::exception *this);
 };
 struct __cppobj std::basic_streambuf<unsigned short> // sizeof=0x3C
 {
     std::basic_streambuf<unsigned short>_vtbl *__vftable;
     std::_Mutex _Mylock;
     unsigned __int16 *_Gfirst;
     unsigned __int16 *_Pfirst;
     unsigned __int16 **_IGfirst;
     unsigned __int16 **_IPfirst;
     unsigned __int16 *_Gnext;
     unsigned __int16 *_Pnext;
     unsigned __int16 **_IGnext;
     unsigned __int16 **_IPnext;
     int _Gcount;
     int _Pcount;
     int *_IGcount;
     int *_IPcount;
     std::locale *_Plocale;
 };
 struct /*VFT*/ std::basic_streambuf<unsigned short>_vtbl // sizeof=0x38
 {
     void (__thiscall *~basic_streambuf<unsigned short,std::char_traits<unsigned short> >)(std::basic_streambuf<unsigned short> *this);
     unsigned __int16 (__thiscall *overflow)(std::basic_streambuf<unsigned short> *this, unsigned __int16);
     unsigned __int16 (__thiscall *pbackfail)(std::basic_streambuf<unsigned short> *this, unsigned __int16);
     int (__thiscall *showmanyc)(std::basic_streambuf<unsigned short> *this);
     unsigned __int16 (__thiscall *underflow)(std::basic_streambuf<unsigned short> *this);
     unsigned __int16 (__thiscall *uflow)(std::basic_streambuf<unsigned short> *this);
     int (__thiscall *xsgetn)(std::basic_streambuf<unsigned short> *this, unsigned __int16 *, int);
     int (__thiscall *_Xsgetn_s)(std::basic_streambuf<unsigned short> *this, unsigned __int16 *, unsigned int, int);
     int (__thiscall *xsputn)(std::basic_streambuf<unsigned short> *this, const unsigned __int16 *, int);
     std::fpos<int> *(__thiscall *seekoff)(std::basic_streambuf<unsigned short> *this, std::fpos<int> *result, int, int, int);
     std::fpos<int> *(__thiscall *seekpos)(std::basic_streambuf<unsigned short> *this, std::fpos<int> *result, std::fpos<int>, int);
     std::basic_streambuf<unsigned short> *(__thiscall *setbuf)(std::basic_streambuf<unsigned short> *this, unsigned __int16 *, int);
     int (__thiscall *sync)(std::basic_streambuf<unsigned short> *this);
     void (__thiscall *imbue)(std::basic_streambuf<unsigned short> *this, const std::locale *);
 };
 struct __cppobj std::basic_ostream<unsigned short> // sizeof=0x38
 {
     _BYTE gap0[56];
 };
 struct /*VFT*/ std::basic_ostream<unsigned short>_vtbl // sizeof=0x4
 {
     void *(__thiscall *__vecDelDtor)(std::basic_ostream<unsigned short> *this, unsigned int);
 };
 struct __cppobj __declspec(align(4)) std::basic_ios<unsigned short> : std::ios_base // sizeof=0x34
 {
     std::basic_streambuf<unsigned short> *_Mystrbuf;
     std::basic_ostream<unsigned short> *_Tiestr;
     unsigned __int16 _Fillch;
     // padding byte
     // padding byte
 };
 struct /*VFT*/ std::basic_ios<unsigned short>_vtbl // sizeof=0x4
 {
     void (__thiscall *~ios_base)(std::ios_base *this);
 };
 struct __cppobj __declspec(align(4)) std::basic_istream<unsigned short> // sizeof=0x3C
 {
     _BYTE gap0[4];
     int _Chcount;
     _BYTE gap8[52];
 };
 struct /*VFT*/ std::basic_istream<unsigned short>_vtbl // sizeof=0x4
 {
     void *(__thiscall *__vecDelDtor)(std::basic_istream<unsigned short> *this, unsigned int);
 };
 struct __cppobj std::basic_istream<unsigned short>::_Sentry_base // sizeof=0x4
 {                                       // ...
     std::basic_istream<unsigned short> *_Myistr;
 };
 struct __cppobj __declspec(align(4)) std::basic_istream<unsigned short>::sentry : std::basic_istream<unsigned short>::_Sentry_base // sizeof=0x8
 {
     bool _Ok;
     // padding byte
     // padding byte
     // padding byte
 };
 struct __cppobj std::char_traits<unsigned short> : std::_Char_traits_base // sizeof=0x0
 {
 };
 struct __cppobj std::basic_ostream<unsigned short>::_Sentry_base // sizeof=0x4
 {                                       // ...
     std::basic_ostream<unsigned short> *_Myostr;
 };
 struct __cppobj __declspec(align(4)) std::basic_ostream<unsigned short>::sentry : std::basic_ostream<unsigned short>::_Sentry_base // sizeof=0x8
 {
     bool _Ok;
     // padding byte
     // padding byte
     // padding byte
 };
 struct __unaligned __declspec(align(2)) $_TypeDescriptor$_extraBytes_46 // sizeof=0x36
 {
     const void *pVFTable;
     void *spare;
     char name[46];
 };
 typedef HDC__ *HDC;                     // ...
 typedef char *(__cdecl *tdPbGameCommand)(char *, char *);
 typedef unsigned __int8 visdata_t;
 typedef unsigned __int16 wchar_t;       // ...
 typedef unsigned __int8 *LPBYTE;
 typedef IUnknown *LPUNKNOWN;            // ...
 typedef char *pchar_t;
 typedef HKEY__ **PHKEY;
 typedef unsigned __int16 PROPVAR_PAD2;
 typedef bool (__cdecl *FxElemFieldHandler)(const char **, FxEditorElemDef *);
 typedef my_main_controller *my_main_ptr;
 typedef void (__stdcall *PIMAGE_TLS_CALLBACK)(void *, unsigned int, void *);
 typedef HWINSTA__ *HWINSTA;
 typedef tagMIXERLINEA *LPMIXERLINEA;
 typedef int (__stdcall *FARPROC)();
 typedef _PEB_LDR_DATA *PPEB_LDR_DATA;
 typedef unsigned __int8 raw_byte16;
 typedef unsigned __int8 *voidpf;
 typedef my_destination_mgr *my_dest_ptr;
 typedef int HASISTREAM;
 typedef _STARTUPINFOA *LPSTARTUPINFOA;
 typedef void (__stdcall *BINKMEMFREE)(void *);
 typedef int __cdecl dColliderFn(dxGeom *, dxGeom *, int, dContactGeom *, int);
 typedef int (__cdecl *encoder_ctl_func)(void *, int, void *);
 typedef int (__cdecl *decode_func)(void *, SpeexBits *, void *);
 typedef GfxLightDef *GfxLightDefPtr;
 typedef void (__cdecl *fn_touch)(gentity_s *, gentity_s *, int);
 typedef _DDCAPS_DX7 *LPDDCAPS;
 typedef unsigned int uIntf;
 typedef unsigned __int8 byte128;
 typedef void *__cdecl dAllocFunction(unsigned int);
 typedef char *(__cdecl *tdPbSendToAddrPort)(char *, unsigned __int16, int, char *);
 typedef unsigned __int16 DevMenuHandle;
 typedef __int16 (**JBLOCKARRAY)[64];
 typedef tagHeader *PHEADER;
 typedef HICON__ *HCURSOR;
 typedef void (__cdecl *fn_die)(gentity_s *, gentity_s *, gentity_s *, int, int, const int, const float *, const hitLocation_t, int);
 typedef float FLOAT;
 typedef bool _Bool;
 typedef tagVARIANT *LPVARIANT;
 typedef unsigned __int8 UINT8;
 typedef volatile int volatile_int32;
 typedef int (__stdcall *FLT_SHUTDOWN)();
 typedef unsigned int UINT4;
 typedef unsigned int uint4[4];
 typedef unsigned int uint;
 typedef unsigned int UINT;              // ...
 typedef unsigned int uInt;
 typedef unsigned int *PULONG;
 typedef tagLC_STRINGS *LPLC_STRINGS;
 typedef unsigned int EXECUTION_STATE;
 typedef unsigned __int8 max_msg_buf[131072];
 typedef float dQuaternion[4];
 typedef HMONITOR__ *HMONITOR;
 typedef HBRUSH__ *HBRUSH;
 typedef _TEB_ACTIVE_FRAME *PTEB_ACTIVE_FRAME;
 typedef void (__cdecl *DevGraphEventCallback)(const DevGraph *, DevEventType, int);
 typedef int (__stdcall *VDRV_DRIVER_PROPERTY)(int, unsigned int, void *, const void *, void *);
 typedef unsigned int _U32;
 typedef unsigned __int16 PROPVAR_PAD3;
 typedef _RGNDATA *LPRGNDATA;
 typedef int (__stdcall *SS_STREAM_CB)(_SAMPLE *, __int16 *, int);
 typedef backing_store_struct *backing_store_ptr;
 typedef unsigned int COLORREF;
 typedef clipMap_t *clipMap_ptr;
 typedef IDirect3DDevice9 *LPDIRECT3DDEVICE9;
 typedef _DIG_DRIVER *HDIGDRIVER;
 typedef void (__cdecl *_invalid_parameter_handler)(const wchar_t *, const wchar_t *, const wchar_t *, unsigned int, unsigned int);
 typedef void __cdecl DB_Interrupt();
 typedef int XPartBits[4];
 typedef tagSAFEARRAY *LPSAFEARRAY;
 typedef BINK *HBINK;
 typedef void __cdecl GfxDrawCallback(const void *, GfxCmdBufContext, GfxCmdBufContext);
 typedef void (__cdecl *FX_DrawElemHandler)(FxDrawState *);
 typedef int IFAST_MULT_TYPE;
 typedef __int16 INT16;
 typedef HMIXEROBJ__ *HMIXEROBJ;
 typedef const char *XString;
 typedef void (__cdecl *ScriptCallbackEnt)(gentity_s *, int);
 typedef int _off_t;
 typedef void *(__cdecl *Alloc_t)(int);
 typedef int HDRIVERSTATE;
 typedef void (__cdecl *_inconsistency_function)();
 typedef _EXCEPTION_REGISTRATION_RECORD *PEXCEPTION_REGISTRATION_RECORD;
 typedef unsigned __int16 raw_ushort;
 typedef void (__cdecl *fn_use)(gentity_s *, gentity_s *, gentity_s *);
 typedef int LRESULT;
 typedef int (__cdecl *R_TimeoutFunction)();
 typedef bool (__cdecl *TestBoxInSolidFunc_t)(const float *, const float *, void *);
 typedef int HRESULT;                    // ...
 typedef float shared_vec3_t[3];
 typedef _DIOBJECTDATAFORMAT *LPDIOBJECTDATAFORMAT;
 typedef IDirect3DVertexBuffer9 *GfxVertexBufferHandle;
 typedef LIST_ENTRY32 *PLIST_ENTRY32;
 typedef unsigned int LCTYPE;
 typedef int qhandle_t;
 typedef IDirectDraw7 *LPDIRECTDRAW7;
 typedef dxWorld *dWorldID;
 typedef unsigned int uintptr_t;         // ...
 typedef void (__stdcall *PTP_CLEANUP_GROUP_CANCEL_CALLBACK)(void *, void *);
 typedef __int64 LONG64;
 typedef void (__cdecl *R_ExecFailed)();
 typedef _tagADDRESS *LPADDRESS;
 typedef IDirectDraw *LPDIRECTDRAW;
 typedef _DDSCAPS2 *LPDDSCAPS2;
 typedef int expressionEntryType;
 typedef unsigned __int16 DynEntityId;
 typedef IDirectDrawClipper *LPDIRECTDRAWCLIPPER;
 typedef char *va_list;
 typedef _EXCEPTION_POINTERS *LPEXCEPTION_POINTERS;
 typedef void (__cdecl *PFV)();
 typedef int (__stdcall *VFLT_ASSIGN_SAMPLE_VOICE)(int, _SAMPLE *);
 typedef unsigned __int8 **JSAMPARRAY;
 typedef WeaponDef *WeaponDefPtr;
 typedef tagSIZE *LPSIZE;
 typedef int (__stdcall *LPDIENUMDEVICEOBJECTSCALLBACKA)(const DIDEVICEOBJECTINSTANCEA *, void *);
 typedef char _TCHAR;
 typedef tagMIXERCONTROLA *LPMIXERCONTROL;
 typedef unsigned __int8 (__cdecl *jpeg_marker_parser_method)(jpeg_decompress_struct *);
 typedef void (__stdcall *MIXER_COPY)(const void *, int, void *, unsigned int, unsigned int);
 typedef int (__stdcall *VDRV_FORCE_UPDATE)(int);
 typedef unsigned __int16 FxEffectHandle;
 typedef box *boxptr;
 typedef int (__stdcall *FLT_CLOSE_DRIVER)(int);
 typedef ID3DXInclude *LPD3DXINCLUDE;
 typedef const DIDEVICEINSTANCEA *LPCDIDEVICEINSTANCEA;
 typedef int (__stdcall *BINKIOBGCONTROL)(BINKIO *, unsigned int);
 typedef void (__cdecl *pmove_trace)(trace_t *, const float *, const float *, const float *, const float *, int, int);
 typedef my_fdct_controller *my_fdct_ptr;
 typedef const _GUID *LPCGUID;           // ...
 typedef tagMIXERCONTROLA *LPMIXERCONTROLA;
 typedef unsigned __int8 msg_buf_t[131072];
 typedef bool __cdecl TriangleVisitorFunc(void *, const GfxPackedVertex **, const GfxPackedVertex **);
 typedef unsigned __int8 byte4;
 typedef small_pool_struct *small_pool_ptr;
 typedef RedBlackTreeNode *(__cdecl *RedBlackTreeAllocCallback)();
 typedef void *DBFile;
 typedef void DispatcherContext;
 typedef unsigned __int8 byte;
 typedef unsigned __int8 BYTE;           // ...
 typedef unsigned __int8 Byte;
 typedef LoadedSound *LoadedSoundPtr;
 typedef void *(__stdcall *PFLS_GETVALUE_FUNCTION)(unsigned int);
 typedef void (__cdecl *encoder_destroy_func)(void *);
 typedef _RTL_CRITICAL_SECTION *PRTL_CRITICAL_SECTION;
 typedef editFieldDef_s *editFieldDef_ptr;
 typedef void *SndLengthNotifyData;
 typedef __int16 FSERROR;
 typedef HMIXER__ **LPHMIXER;
 typedef int (__cdecl *QsortCallBack)(const void *, const void *);
 typedef XAnimParts *XAnimPartsPtr;
 typedef void (__stdcall *MIXER_ADPCM_DECODE)(void *, const void *, int, int, int, _ADPCMDATATAG *);
 typedef void (__cdecl *ScriptCallbackHudElem)(game_hudelem_s *, int);
 typedef void *PVOID;                    // ...
 typedef unsigned int Filter[8];
 typedef int (__cdecl *mode_query_func)(const void *, int, void *);
 typedef unsigned __int8 Bytef;
 typedef IDirect3DTexture9 *LPDIRECT3DTEXTURE9;
 typedef unsigned int BITVEC;
 typedef unsigned int GfxPackedColor;
 typedef void (__stdcall *AIL_file_close_callback)(unsigned int);
 typedef void (__cdecl *upsample1_ptr)(jpeg_decompress_struct *, jpeg_component_info *, unsigned __int8 **, unsigned __int8 ***);
 typedef my_prep_controller *my_prep_ptr;
 typedef dxBody *dBodyID;
 typedef unsigned __int16 GfxModelLightingHandle;
 typedef int (__cdecl *INPUTFN)(_iobuf *, const unsigned __int8 *, localeinfo_struct *, char *);
 typedef unsigned __int8 JOCTET;
 typedef unsigned __int16 PROPVAR_PAD1;
 typedef int (__stdcall *BINKSNDPAUSE)(BINKSND *, int);
 typedef tagEntryEnd *PENTRYEND;
 typedef void (__cdecl *DevGraphTextCallback)(const DevGraph *, const float, const float, char *, const int);
 typedef my_coef_controller *my_coef_ptr;
 typedef int DISPID;
 typedef int (__stdcall *FLTSMP_CLOSE_SAMPLE)(int);
 typedef IDirect3DVertexDeclaration9 *LPDIRECT3DVERTEXDECLARATION9;
 typedef int (__cdecl *__cdecl dGetColliderFnFn(int))(dxGeom *, dxGeom *, int, dContactGeom *, int);
 typedef _SECURITY_ATTRIBUTES *LPSECURITY_ATTRIBUTES;
 typedef unsigned __int64 DWORDLONG;
 typedef int (__stdcall *BINKSNDOPEN)(BINKSND *, unsigned int, int, int, unsigned int, BINK *);
 typedef int (__stdcall *LOCALE_ENUMPROCA)(char *);
 typedef int __cdecl HTNetAfter(_HTRequest *, struct _HTResponse *, void *, int);
 typedef char pb_msg_to_screen_buf[65536];
 typedef _IMAGE_DOS_HEADER *PIMAGE_DOS_HEADER;
 typedef int LPARAM;                     // ...
 typedef itemDef_s *itemDef_ptr;
 typedef unsigned __int8 FxElemType;
 typedef char *(__cdecl *tdPbSendToClient)(int, char *, int);
 typedef const void *LPCVOID;
 typedef _SYSTEMTIME *LPSYSTEMTIME;
 typedef _DDPIXELFORMAT *LPDDPIXELFORMAT;
 typedef __int16 *JCOEFPTR;
 typedef unsigned int WPARAM;            // ...
 typedef __int64 _Q64;
 typedef _OSVERSIONINFOA *LPOSVERSIONINFOA;
 typedef int INT32;
 typedef _KDHELP *PKDHELP;
 typedef huff_entropy_encoder *huff_entropy_ptr;
 typedef void __cdecl XAssetEnum(XAssetHeader, void *);
 typedef bool (__cdecl *StateTransitionFunc)(RagdollBody *, BodyState, BodyState);
 typedef void (__cdecl *StateUpdateFunc)(RagdollBody *);
 typedef tagMIXERLINECONTROLSA *LPMIXERLINECONTROLSA;
 typedef phuff_entropy_encoder *phuff_entropy_ptr;
 typedef unsigned int MMVERSION;
 typedef void (__cdecl *ExecHandlerCallback)(int, int, const char *);
 typedef int NTSTATUS;
 typedef IDirect3DPixelShader9 *GfxPixelShader;
 typedef int qboolean;
 typedef unsigned __int8 DevMenuChildType;
 typedef _DDSCAPS *LPDDSCAPS;
 typedef unsigned __int16 histcell;
 typedef __int64 LONGLONG;
 typedef int yy_state_type;
 typedef unsigned __int8 showCollisionWindingPool_t[12292];
 typedef float dMatrix3[12];
 typedef int (__stdcall *WNDENUMPROC)(HWND__ *, int);
 typedef int (__stdcall *PGENRANDOM)(void *, unsigned int);
 typedef IDirectDrawSurface7 *LPDIRECTDRAWSURFACE7;
 typedef dxSpace *dSpaceID;
 typedef unsigned int raw_uint;
 typedef void (__stdcall *BINKCBSUSPEND)(BINKIO *);
 typedef _WIN32_FIND_DATAA *LPWIN32_FIND_DATAA;
 typedef unsigned __int64 ULONGLONG;
 typedef tWAVEFORMATEX *LPWAVEFORMATEX;
 typedef void (__cdecl *_purecall_handler)();
 typedef float raw_float;
 typedef my_post_controller *my_post_ptr;
 typedef int streamsize;
 typedef float (__stdcall *AILFALLOFFCB)(_SAMPLE *, float, float, float, float);
 typedef char *LPCH;
 typedef int (__cdecl *_LIBM_HANDLE_MATHERR_D)(_exception *);
 typedef void *HGLOBAL;
 typedef void **LPHANDLE;
 typedef unsigned __int8 byte16;
 typedef void *(__stdcall *BINKMEMALLOC)(unsigned int);
 typedef unsigned __int16 wint_t;
 typedef void (__stdcall *BINKSNDVOLUME)(BINKSND *, int);
 typedef __int16 Short3[3];
 typedef unsigned int HashIndex;
 typedef void (__cdecl *fn_controller)(const gentity_s *, int *);
 typedef int __cdecl HTTraceCallback(const char *, char *);
 typedef LIST_ENTRY64 *PLIST_ENTRY64;
 typedef const FxEffectDef *FxEffectDefHandle;
 typedef jpeg_decompress_struct *j_decompress_ptr;
 typedef my_marker_writer *my_marker_ptr;
 typedef jvirt_barray_control *jvirt_barray_ptr;
 typedef unsigned __int16 LeafBrush;
 typedef unsigned __int16 ATOM;
 typedef unsigned __int8 YY_CHAR;
 typedef _DSBCAPS *LPDSBCAPS;
 typedef _DSCCAPS *LPDSCCAPS;
 typedef threadmbcinfostruct *pthreadmbcinfo;
 typedef z_stream_s *z_streamp;
 typedef int PhysJointId;
 typedef DIPROPHEADER *LPDIPROPHEADER;
 typedef tagPALETTEENTRY *LPPALETTEENTRY;
 typedef setloc_struct *_psetloc_struct;
 typedef __int16 *FSERRPTR;
 typedef unsigned __int16 FxElemHandle;
 typedef loadAnim_t playerAnims_t[512];
 typedef unsigned __int16 WORD;          // ...
 typedef unsigned __int16 ushort;
 typedef unsigned __int16 USHORT;
 typedef int (*ODITHER_MATRIX_PTR)[16];
 typedef unsigned __int16 _U16;
 typedef my_downsampler *my_downsample_ptr;
 typedef _RTL_CRITICAL_SECTION_DEBUG *PRTL_CRITICAL_SECTION_DEBUG;
 typedef int FLTRESULT;
 typedef void **PPVOID;
 typedef unsigned __int8 TextureSemantic;
 typedef tagEntry *PENTRY;
 typedef int MEMBERID;
 typedef GfxWorld *GfxWorldPtr;
 typedef void *LPVOID;                   // ...
 typedef unsigned int HPROVIDER;
 typedef WSAData *LPWSADATA;             // ...
 typedef _cpinfo *LPCPINFO;
 typedef unsigned __int16 *LPWORD;
 typedef void (__stdcall *BINKCBIDLE)(BINKIO *);
 typedef GameWorldMp *GameWorldMpPtr;
 typedef HFONT__ *HFONT;
 typedef int (__stdcall *PFN_INIT_CRITSEC_AND_SPIN_COUNT)(_RTL_CRITICAL_SECTION *, unsigned int);
 typedef int LONG;                       // ...
 typedef int *LPLONG;
 typedef _EXCEPTION_RECORD *PEXCEPTION_RECORD; // ...
 typedef void (__cdecl *PhysCollisionCallback)();
 typedef int (__cdecl *R_BoxSurfacesCallback)(int, void *);
 typedef int (__cdecl *_PNH)(unsigned int);
 typedef unsigned int (__stdcall *BINKIOGETBUFFERSIZE)(BINKIO *, unsigned int);
 typedef int FxElemDefFlags;
 typedef void *AILLPDIRECTSOUND;
 typedef __int64 time_t;
 typedef threadlocaleinfostruct *pthreadlocinfo;
 typedef unsigned int THREAD_ID;
 typedef _FILETIME *LPFILETIME;
 typedef tagGroup *PGROUP;
 typedef char CHAR;
 typedef float vec_t;
 typedef HRESULT (__stdcall *LPDDENUMSURFACESCALLBACK7)(IDirectDrawSurface7 *, _DDSURFACEDESC2 *, void *);
 typedef int PhysObjId;
 typedef unsigned int (__cdecl *check_func)(unsigned int, const unsigned __int8 *, unsigned int);
 typedef _RTL_CRITICAL_SECTION *PCRITICAL_SECTION;
 typedef HRESULT (__stdcall *LPDDENUMSURFACESCALLBACK)(IDirectDrawSurface *, _DDSURFACEDESC *, void *);
 typedef unsigned int raw_uint128;
 typedef void (__cdecl *_se_translator_function)(unsigned int, _EXCEPTION_POINTERS *);
 typedef my_comp_master *my_master_ptr;
 typedef IDirectSoundCapture *LPDIRECTSOUNDCAPTURE;
 typedef MapEnts *MapEntsPtr;
 typedef char *(__cdecl *GetParameter_t)(int);
 typedef DIDEVICEINSTANCEA *LPDIDEVICEINSTANCEA;
 typedef int FxTriGroupHandle;
 typedef int (__cdecl *R_BoxStaticModelsCallback)(int);
 typedef int (__stdcall *BINKSNDLOCK)(BINKSND *, unsigned __int8 **, unsigned int *);
 typedef dxJointGroup *dJointGroupID;
 typedef unsigned int (__stdcall *AIL_file_open_callback)(const char *, unsigned int *);
 typedef ID3DXBuffer *LPD3DXBUFFER;
 typedef char charf;
 typedef int __cdecl HTPostCallback(_HTRequest *, struct _HTStream *);
 typedef int HTIMER;
 typedef unsigned __int8 *voidp;
 typedef tMIXERCONTROLDETAILS_BOOLEAN *LPMIXERCONTROLDETAILS_BOOLEAN;
 typedef unsigned __int8 raw_byte;
 typedef int (__stdcall *ASI_STREAM_OPEN)(unsigned int, int (__stdcall *)(unsigned int, void *, int, int), unsigned int);
 typedef int __cdecl dAABBTestFn(dxGeom *, dxGeom *, float *);
 typedef __int16 AxialMaterialNum[3];
 typedef int (__stdcall *FLTSMP_SAMPLE_PROPERTY)(int, unsigned int, void *, const void *, void *);
 typedef int intf;
 typedef float *dRealMutablePtr;
 typedef int (__stdcall *LPTOP_LEVEL_EXCEPTION_FILTER)(_EXCEPTION_POINTERS *);
 typedef int (__stdcall *PFLS_SETVALUE_FUNCTION)(unsigned int, void *);
 typedef my_color_converter *my_cconvert_ptr;
 typedef int (__stdcall *FLT_STARTUP)();
 typedef char *(__cdecl *tdPbGameMsg)(char *, int);
 typedef int FxPointGroupHandle;
 typedef GfxHullPointsPool GfxHullPointsPoolArray[256];
 typedef MaterialPixelShader *MaterialPixelShaderPtr;
 typedef XModel *XModelPtr;
 typedef tagRegion *PREGION;
 typedef _PROCESS_INFORMATION *LPPROCESS_INFORMATION;
 typedef unsigned __int16 UINT16;
 typedef void (__cdecl *fn_reached)(gentity_s *);
 typedef unsigned int TP_VERSION;
 typedef unsigned __int8 ***JSAMPIMAGE;
 typedef unsigned __int16 FxTrailHandle;
 typedef const _DSCBUFFERDESC *LPCDSCBUFFERDESC;
 typedef long double DOUBLE;
 typedef _HTAtom *HTFormat;
 typedef unsigned __int16 XBlendInfo;
 typedef jvirt_sarray_control *jvirt_sarray_ptr;
 typedef _DDSURFACEDESC2 *LPDDSURFACEDESC2;
 typedef void (__stdcall *BINKSNDPAN)(BINKSND *, int);
 typedef unsigned int JDIMENSION;
 typedef unsigned __int8 uch;
 typedef unsigned __int16 ush;
 typedef IDirectSound *LPDIRECTSOUND;
 typedef unsigned int size_t;            // ...
 typedef unsigned int SIZE_T;            // ...
 typedef unsigned __int8 cbrushedge_t;
 typedef unsigned int clipHandle_t;
 typedef char *list_t[8192];
 typedef int (__stdcall *BINKCBTRYSUSPEND)(BINKIO *);
 typedef const float *dRealPtr;
 typedef __int16 VARIANT_BOOL;
 typedef void (__cdecl *unexpected_function)();
 typedef char *(__cdecl *tdPbPassConnectString)(void *, char *, char *);
 typedef XModelPieces *XModelPiecesPtr;
 typedef char *(__cdecl *tdPbProcessPbEvents)(void *, int);
 typedef unsigned int checksum_t;
 typedef void __cdecl MarkFragmentCallback(void *, int, FxMarkTri *, int, FxMarkPoint *, const float *, const float *);
 typedef int (__cdecl *compare_t)(const void *, const void *);
 typedef int _TINT;
 typedef unsigned __int16 hist1d[32];
 typedef unsigned __int16 Posf;
 typedef unsigned __int16 (*hist2d)[32];
 typedef unsigned __int16 (**hist3d)[32];
 typedef unsigned int *PUINT_PTR;
 typedef unsigned __int16 *histptr;
 typedef DIDEVICEOBJECTINSTANCEA *LPDIDEVICEOBJECTINSTANCEA;
 typedef unsigned __int8 ByteVec[3];
 typedef tagLC_ID *LPLC_ID;
 typedef int (__stdcall *BINKSNDONOFF)(BINKSND *, int);
 typedef _DSCAPS *LPDSCAPS;
 typedef void (__stdcall *BINKIOCLOSE)(BINKIO *);
 typedef __int16 SHORT;
 typedef _DSCBCAPS *LPDSCBCAPS;
 typedef wavehdr_tag *LPWAVEHDR;
 typedef void (__stdcall *MIXER_MERGE)(const void **, unsigned int *, const void *, int **, void *, int *, int *, int, int, int, unsigned int, unsigned int);
 typedef unsigned __int8 byte4096;
 typedef int (__stdcall *PHANDLER_ROUTINE)(unsigned int);
 typedef int (__cdecl *tdPbTrapPreExecCmd)(void *, char *);
 typedef int fileHandle_t;
 typedef bool (__cdecl *DvarCustomLimit)(dvar_s *, DvarValue);
 typedef _tagADDRESS64 *LPADDRESS64;
 typedef my_input_controller *my_inputctl_ptr;
 typedef void (__cdecl *SpawnFuncCallback)(gentity_s *);
 typedef dxJoint *dJointID;
 typedef _BY_HANDLE_FILE_INFORMATION *LPBY_HANDLE_FILE_INFORMATION;
 typedef PhysPreset *PhysPresetPtr;
 typedef large_pool_struct *large_pool_ptr;
 typedef char MSS_FILE;
 typedef void *(__cdecl *decoder_init_func)(const SpeexMode *);
 typedef _strflt *STRFLT;
 typedef int (__stdcall *AILASIFETCHCB)(unsigned int, void *, int, int);
 typedef _flt *FLT;
 typedef unsigned int ulg;
 typedef unsigned __int8 uchf;
 typedef unsigned __int16 ushf;
 typedef unsigned int yy_size_t;
 typedef unsigned __int8 MaterialStreamDest;
 typedef _devicemodeA *LPDEVMODEA;
 typedef int (__stdcall *MONITORENUMPROC)(HMONITOR__ *, HDC__ *, tagRECT *, int);
 typedef const wchar_t *LPCOLESTR;
 typedef _DDBLTFX *LPDDBLTFX;
 typedef _DDOVERLAYFX *LPDDOVERLAYFX;
 typedef tagDDDEVICEIDENTIFIER2 *LPDDDEVICEIDENTIFIER2;
 typedef unsigned int UINT_PTR;          // ...
 typedef unsigned int *PDWORD_PTR;
 typedef IDirectDrawPalette *LPDIRECTDRAWPALETTE;
 typedef SndCurve *SndCurvePtr;
 typedef unsigned __int16 UnsignedShort;
 typedef void *__cdecl dReallocFunction(void *, unsigned int, unsigned int);
 typedef void (__cdecl *terminate_function)();
 typedef unsigned __int16 ModelLightingDest;
 typedef char _TSCHAR;
 typedef _DDBLTBATCH *LPDDBLTBATCH;
 typedef void (__cdecl *_PVFI)(int);
 typedef IDirect3DQuery9 *GfxOcclusionQuery;
 typedef int (__stdcall *ASI_STREAM_PROPERTY)(int, unsigned int, void *, const void *, void *);
 typedef FxImpactTable *FxImpactTablePtr;
 typedef void (__cdecl *_PVFV)();
 typedef unsigned int (__stdcall *BINKIOIDLE)(BINKIO *);
 typedef tagMONITORINFO *LPMONITORINFO;
 typedef unsigned int DWORD;             // ...
 typedef _IMAGE_NT_HEADERS *PIMAGE_NT_HEADERS;
 typedef float FLOAT_MULT_TYPE;
 typedef unsigned __int16 StaticModelIndex;
 typedef unsigned __int8 _TUCHAR;
 typedef const char *TempString;
 typedef void (__stdcall *PFN_EXIT_PROCESS)(unsigned int);
 typedef int (__stdcall *AIL_file_seek_callback)(unsigned int, int, unsigned int);
 typedef unsigned int GfxRawStateBits[2];
 typedef float dVector4[4];
 typedef void (__stdcall *FLT_PREMIX_PROCESS)(int);
 typedef void (__cdecl *fn_pain)(gentity_s *, gentity_s *, int, const float *, const int, const float *, const hitLocation_t, const int);
 typedef GfxImage *GfxImagePtr;
 typedef HINSTANCE__ *HMODULE;
 typedef localeinfo_struct *_locale_t;
 typedef my_cquantizer *my_cquantize_ptr;
 typedef int (__stdcall *PROVIDER_PROPERTY)(unsigned int, void *, const void *, void *);
 typedef char *(__cdecl *tdPbAddSvEvent)(void *, int, int, int, char *, int);
 typedef unsigned int (__stdcall *LPTHREAD_START_ROUTINE)(void *);
 typedef int jmp_buf[16];
 typedef char *(__cdecl *tdPbAddClEvent)(void *, int, int, char *, int);
 typedef StringTable *StringTablePtr;
 typedef void (__stdcall *BINKIOSETINFO)(BINKIO *, void *, unsigned int, unsigned int, unsigned int);
 typedef char snapshot_key_t[8192];
 typedef char *(__cdecl *tdPbGlQuery)(int);
 typedef float vec4_t[4];
 typedef unsigned int *PULONG_PTR;
 typedef const char *PCSTR;
 typedef unsigned __int8 *POINTER;
 typedef int (__stdcall *VFLT_START_SAMPLE_VOICE)(int, _SAMPLE *);
 typedef unsigned int (__stdcall *BINKIOREADHEADER)(BINKIO *, int, void *, unsigned int);
 typedef volatile int FxVolatileInt;
 typedef unsigned __int8 u_char;
 typedef IDirect3DVertexBuffer9 *GfxVertexBuffer;
 typedef DIDEVCAPS *LPDIDEVCAPS;
 typedef void (__cdecl *free_func)(unsigned __int8 *, unsigned __int8 *);
 typedef int (__cdecl *OUTPUTFN)(_iobuf *, const char *, localeinfo_struct *, char *);
 typedef int (__stdcall *VSMP_SAMPLE_PROPERTY)(_SAMPLE *, unsigned int, void *, const void *, void *);
 typedef unsigned __int16 edgeCount_t[3];
 typedef __int16 _I16;
 typedef unsigned __int8 *PBYTE;
 typedef unsigned __int8 GfxSamplerState;
 typedef int (__stdcall *FLT_OPEN_DRIVER)(_DIG_DRIVER *);
 typedef unsigned __int16 uint16_t;      // ...
 typedef _EH4_EXCEPTION_REGISTRATION_RECORD *PEH4_EXCEPTION_REGISTRATION_RECORD;
 typedef jpeg_compress_struct *j_compress_ptr;
 typedef unsigned int *LPDWORD;
 typedef int SndPlaybackId;
 typedef int LSTATUS;
 typedef const DIPROPHEADER *LPCDIPROPHEADER;
 typedef void (__cdecl *decoder_destroy_func)(void *);
 typedef unsigned __int64 ULONG64;
 typedef unsigned int DWORD_PTR;         // ...
 typedef unsigned int *intrnman;
 typedef unsigned int uLongf;
 typedef _EXCEPTION_POINTERS *PEXCEPTION_POINTERS;
 typedef int ASIRESULT;
 typedef void (__cdecl *PPS_POST_PROCESS_INIT_ROUTINE)();
 typedef int ISLOW_MULT_TYPE;
 typedef __int64 int64_t;
 typedef int scr_func_t;
 typedef int __time32_t;
 typedef _IMAGE_SECTION_HEADER *PIMAGE_SECTION_HEADER;
 typedef unsigned __int16 ScriptString;
 typedef int (__stdcall *FLT_POSTMIX_PROCESS)(int, void *);
 typedef int INT;
 typedef wchar_t **SNB;
 typedef unsigned __int8 min_msg_buf[2048];
 typedef void (__stdcall *BINKSNDCLOSE)(BINKSND *);
 typedef unsigned int LCID;
 typedef HICON__ *HICON;
 typedef unsigned __int8 primaryLightTechType_t[256];
 typedef char *LPSTR;                    // ...
 typedef unsigned int HPROPERTY;
 typedef char *(__cdecl *tdPbGameQuery)(int, char *);
 typedef yy_buffer_state *YY_BUFFER_STATE;
 typedef _RTL_CRITICAL_SECTION *LPCRITICAL_SECTION;
 typedef int LOCFSERROR;
 typedef HMIXER__ *HMIXER;
 typedef wchar_t *LPOLESTR;
 typedef my_upsampler *my_upsample_ptr;
 typedef int (__stdcall *LPDIENUMDEVICESCALLBACKA)(const DIDEVICEINSTANCEA *, void *);
 typedef const char ConstChar;
 typedef void (__cdecl *FxProfileDrawFunc)(const char *, float *);
 typedef const char *pcchar_t;
 typedef long double DATE;
 typedef int (__stdcall *ASI_STREAM_SEEK)(int, int);
 typedef char *(__stdcall *FLT_ERROR)();
 typedef unsigned int (__stdcall *PTHREAD_START_ROUTINE)(void *);
 typedef _IMAGE_OPTIONAL_HEADER *PIMAGE_OPTIONAL_HEADER;
 typedef unsigned __int16 UShortVec[3];
 typedef void (__stdcall *PFLS_CALLBACK_FUNCTION)(void *);
 typedef void (__cdecl *MtlForEachTechSetCallback)(MaterialTechniqueSet *);
 typedef int (__cdecl *PEXCEPTION_FILTER)();
 typedef void __cdecl dGetAABBFn(dxGeom *, float *);
 typedef void (__cdecl *float_DCT_method_ptr)(float *);
 typedef int SCODE;
 typedef wchar_t *PUWSTR;
 typedef __int64 fpos_t;
 typedef int (__stdcall *PTOP_LEVEL_EXCEPTION_FILTER)(_EXCEPTION_POINTERS *);
 typedef snd_alias_list_t *snd_alias_list_name;
 typedef _DSCEFFECTDESC *LPDSCEFFECTDESC;
 typedef __int16 spx_int16_t;
 typedef int s_long;
 typedef unsigned int u_long;            // ...
 typedef _EH4_SCOPETABLE *PEH4_SCOPETABLE;
 typedef _IMAGE_OPTIONAL_HEADER *PIMAGE_OPTIONAL_HEADER32;
 typedef unsigned int _dev_t;
 typedef _CONTEXT *PCONTEXT;
 typedef int (__stdcall *BINKSNDUNLOCK)(BINKSND *, unsigned int);
 typedef dxTriMeshData *dTriMeshDataID;
 typedef menuDef_t *menuDef_ptr;
 typedef unsigned __int16 Pos;
 typedef int (__cdecl *_onexit_t)();
 typedef int __cdecl HTPrintCallback(const char *, char *);
 typedef float _FP32;
 typedef int HSAMPLESTATE;
 typedef unsigned int rsize_t;
 typedef void (__stdcall *BINKCBRESUME)(BINKIO *);
 typedef LocalizeEntry *LocalizeEntryPtr;
 typedef int __cdecl HTAlertCallback(_HTRequest *, _HTAlertOpcode, int, const char *, void *, _HTAlertPar *);
 typedef void (__cdecl *downsample1_ptr)(jpeg_compress_struct *, jpeg_component_info *, unsigned __int8 **, unsigned __int8 **);
 typedef void *EVENT_HANDLE;
 typedef const char **XStringPtr;
 typedef int (__stdcall *FLTSMP_OPEN_SAMPLE)(int, _SAMPLE *);
 typedef unsigned __int8 *unzFile;
 typedef unsigned __int16 VARTYPE;
 typedef jpeg_marker_struct *jpeg_saved_marker_ptr;
 typedef void (__cdecl *xcommand_t)();
 typedef int (__cdecl *_PIFV)();
 typedef _EH4_SCOPETABLE_RECORD *PEH4_SCOPETABLE_RECORD;
 typedef unsigned int D3DCOLOR;
 typedef ID3DXSprite *LPD3DXSPRITE;
 typedef __int16 s_short;
 typedef unsigned __int16 u_short;       // ...
 typedef int (__cdecl *decoder_ctl_func)(void *, int, void *);
 typedef unsigned __int64 uint64_t;
 typedef int (__cdecl *encode_func)(void *, void *, SpeexBits *);
 typedef unsigned int _fsize_t;
 typedef tagMIXERCONTROLDETAILS_LISTTEXTA *LPMIXERCONTROLDETAILS_LISTTEXT;
 typedef int mbstate_t;
 typedef IDirectDrawSurface *LPDIRECTDRAWSURFACE;
 typedef snd_alias_list_t *snd_alias_list_ptr;
 typedef tMIXERCONTROLDETAILS *LPMIXERCONTROLDETAILS;
 typedef tagVersionedStream *LPVERSIONEDSTREAM;
 typedef _TP_CALLBACK_INSTANCE *PTP_CALLBACK_INSTANCE;
 typedef __int16 JCOEF;
 typedef GameWorldSp *GameWorldSpPtr;
 typedef _DDCOLORKEY *LPDDCOLORKEY;
 typedef void (__cdecl *BuiltinMethod)(scr_entref_t);
 typedef _IMAGE_NT_HEADERS *PIMAGE_NT_HEADERS32;
 typedef __int16 JBLOCK[64];
 typedef tagMIXERCONTROLDETAILS_LISTTEXTA *LPMIXERCONTROLDETAILS_LISTTEXTA;
 typedef void (__cdecl *BG_RegisterWeapon)(unsigned int);
 typedef void (__stdcall *MIXER_FLUSH)(int *, int, unsigned int);
 typedef unsigned __int8 XZoneHandle;
 typedef void (__cdecl *fn_blocked)(gentity_s *, gentity_s *);
 typedef int (__stdcall *BINKSNDREADY)(BINKSND *);
 typedef void (__cdecl *ScriptCallbackClient)(gclient_s *, const client_fields_s *);
 typedef void (__cdecl *threadFunction_t)(unsigned int);
 typedef ID3DXConstantTable *LPD3DXCONSTANTTABLE;
 typedef unsigned __int8 MaterialStreamSource;
 typedef void (__cdecl *tdPbTrapConsole)(void *, char *, int);
 typedef char *(__cdecl *tdPbAuthClient)(void *, char *, int, char *);
 typedef void (__cdecl *_PMFN)();
 typedef void (__stdcall *MIXER_MC_COPY)(_MSS_BB *, int, void *, int, int, int, int);
 typedef char *(__cdecl *tdPbSendToServer)(int, char *);
 typedef block_state (__cdecl *compress_func)(internal_state *, int);
 typedef MaterialVertexShader *MaterialVertexShaderPtr;
 typedef unsigned int SOCKET;            // ...
 typedef int psize_int;
 typedef unsigned int raw_DWORD;
 typedef unsigned __int8 MaterialConstantSource;
 typedef int bit_buf_type;
 typedef int (__cdecl *R_BusyFunction)(void *);
 typedef HINSTANCE__ *HINSTANCE;         // ...
 typedef unsigned int (__stdcall *BINKIOREADFRAME)(BINKIO *, unsigned int, int, void *, unsigned int);
 typedef const char *LPCTSTR;
 typedef unsigned __int16 r_index16_t;
 typedef void (__cdecl *RedBlackCacheFreeNodeCallback)(RedBlackCacheNode *);
 typedef unsigned int u_int;             // ...
 typedef const tWAVEFORMATEX *LPCWAVEFORMATEX;
 typedef void *AILLPDIRECTSOUNDBUFFER;
 typedef MaterialTechnique *MaterialTechniquePtr;
 typedef IDirect3DQuery9 *GfxFence;
 typedef IDirect3DVertexShader9 *GfxVertexShader;
 typedef int _Mbstatet;
 typedef int __ehstate_t;
 typedef HWAVEOUT__ *HWAVEOUT;
 typedef void *THREAD_START_ROUTINE_PARAM;
 typedef void (__cdecl *pmove_PlayerEvent)(int, int);
 typedef const _DIDATAFORMAT *LPCDIDATAFORMAT;
 typedef listBoxDef_s *listBoxDef_ptr;
 typedef void (__stdcall *PTP_SIMPLE_CALLBACK)(_TP_CALLBACK_INSTANCE *, void *);
 typedef char int8_t;
 typedef unsigned int psize_uint;
 typedef void __cdecl operation(Operand *, Operand *, Operand *);
 typedef _TP_CALLBACK_ENVIRON *PTP_CALLBACK_ENVIRON;
 typedef int int32_t;
 typedef IDirectSoundBuffer *LPDIRECTSOUNDBUFFER;
 typedef void *(__cdecl *encoder_init_func)(const SpeexMode *);
 typedef __int16 XQuat2[2];
 typedef void (__stdcall *LPOVERLAPPED_COMPLETION_ROUTINE)(unsigned int, unsigned int, _OVERLAPPED *);
 typedef MSSChannelMap SpeakerMapChannel[2];
 typedef void (__fastcall *PTERMINATION_HANDLER)();
 typedef int _I32;
 typedef unsigned __int16 *PWSTR;
 typedef const char *LPCSTR;             // ...
 typedef _TIME_ZONE_INFORMATION *LPTIME_ZONE_INFORMATION;
 typedef IDirect3DIndexBuffer9 *GfxIndexBuffer;
 typedef int errno_t;
 typedef int LONG_PTR;
 typedef _DDSURFACEDESC *LPDDSURFACEDESC;
 typedef unsigned __int8 SoundAlias;
 typedef my_idct_controller *my_idct_ptr;
 typedef unsigned __int16 r_index_t;
 typedef int intptr_t;
 typedef const tagRECT *LPCRECT;
 typedef unsigned int uint32_t;
 typedef void __cdecl dFreeFunction(void *, unsigned int);
 typedef void *HANDLE;                   // ...
 typedef int (__stdcall *WNDPROC)(HWND__ *, unsigned int, unsigned int, int);
 typedef void *SentientHandle;
 typedef int DCTELEM;
 typedef unsigned __int16 GridSamplePoint[3];
 typedef unsigned int GDI_HANDLE_BUFFER[34];
 typedef tagPARAMDESCEX *LPPARAMDESCEX;
 typedef void (__stdcall *FLTSMP_SAMPLE_PROCESS)(int, void *, void *, int, int, int);
 typedef dxGeom *dGeomID;
 typedef unsigned __int16 *LPWCH;
 typedef IDirectInputA *LPDIRECTINPUT;
 typedef int (__stdcall *ASI_STREAM_PROCESS)(int, void *, int);
 typedef void *(__cdecl *MantleAnimAlloc)(int);
 typedef float raw_vec4_t[4];
 typedef int (__stdcall *PFLS_FREE_FUNCTION)(unsigned int);
 typedef void (__cdecl *inverse_DCT_method_ptr)(jpeg_decompress_struct *, jpeg_component_info *, __int16 *, unsigned __int8 **, unsigned int);
 typedef unsigned int GfxDecodedSamplerState;
 typedef unsigned int (__stdcall *AIL_file_read_callback)(unsigned int, void *, unsigned int);
 typedef _OVERLAPPED *LPOVERLAPPED;
 typedef HRESULT (__stdcall *LPDDENUMMODESCALLBACK)(_DDSURFACEDESC *, void *);
 typedef int streamoff;
 typedef unsigned __int16 scr_string_t;
 typedef void __cdecl dNearCallback(void *, dxGeom *, dxGeom *);
 typedef IDirect3DIndexBuffer9 *GfxIndexBufferHandle;
 typedef IDirectInputDeviceA *LPDIRECTINPUTDEVICEA;
 typedef _TP_CLEANUP_GROUP *PTP_CLEANUP_GROUP;
 typedef jpeg_common_struct *j_common_ptr;
 typedef const char *D3DXHANDLE;
 typedef long double _FP64;
 typedef ComWorld *ComWorldPtr;
 typedef Material *MaterialHandle;
 typedef float vec3_t[3];
 typedef unsigned __int8 JSAMPLE;
 typedef unsigned __int8 GfxImageCategory;
 typedef _SAMPLE *HSAMPLE;
 typedef void (__cdecl *fn_think)(gentity_s *);
 typedef SndDriverGlobals *SndDriverGlobalsPtr;
 typedef DIDEVICEOBJECTDATA *LPDIDEVICEOBJECTDATA;
 typedef void (__stdcall *BINKSNDMIXBINS)(BINKSND *, unsigned int *, unsigned int);
 typedef unsigned __int16 wctype_t;
 typedef void *THREAD_HANDLE;
 typedef __int16 (*JBLOCKROW)[64];
 typedef const DIDEVICEOBJECTINSTANCEA *LPCDIDEVICEOBJECTINSTANCEA;
 typedef void *volatile_ptr;
 typedef const _DSBUFFERDESC *LPCDSBUFFERDESC;
 typedef unsigned __int16 modelNameIndex_t;
 typedef _STREAM *HSTREAM;
 typedef void (__stdcall *BINKSNDMIXBINVOLS)(BINKSND *, unsigned int *, int *, unsigned int);
 typedef multiDef_s *multiDef_ptr;
 typedef unsigned int HREFTYPE;
 typedef const wchar_t *PCUWSTR;
 typedef HKEY__ *HKEY;
 typedef MenuList *MenuListPtr;
 typedef _PEB *PPEB;
 typedef _EXCEPTION_DISPOSITION (__cdecl *PEXCEPTION_ROUTINE)(_EXCEPTION_RECORD *, void *, _CONTEXT *, void *);
 typedef unsigned __int64 DWORD64;
 typedef unsigned int ULONG_PTR;
 typedef char *(__cdecl *tdPbClientConnect)(void *, int, char *, int *);
 typedef unsigned int MMRESULT;
 typedef HWND__ *HWND;                   // ...
 typedef unsigned __int8 *JSAMPROW;
 typedef unsigned __int8 EventParm;
 typedef __int16 int16_t;
 typedef int (__stdcall *(__stdcall *BINKSNDSYSOPEN)(unsigned int))(BINKSND *, unsigned int, int, int, unsigned int, BINK *);
 typedef unsigned int IPos;
 typedef tagMSG *LPMSG;
 typedef int BOOL;
 typedef expressionEntry *expressionEntry_ptr;
 typedef tagMODULEENTRY32 *LPMODULEENTRY32; // ...
 typedef unsigned __int16 scr_thread_t;
 typedef __int16 XQuat[4];
 typedef pathnode_tree_t *pathnode_tree_ptr;
 typedef int *LPBOOL;
 typedef void (__cdecl *_PHNDLR)(int);
 typedef tagPOINT *LPPOINT;
 typedef unsigned __int8 *(__cdecl *alloc_func)(unsigned __int8 *, unsigned int, unsigned int);
 typedef const _TEB_ACTIVE_FRAME_CONTEXT *PCTEB_ACTIVE_FRAME_CONTEXT;
 typedef RawFile *RawFilePtr;
 typedef tagRECT *LPRECT;
 typedef IDirectSound8 *LPDIRECTSOUND8;
 typedef char snapshot_value_t[8192];
 typedef float vec2_t[2];
 typedef unsigned __int16 FxMarkHandle;
 typedef void (__stdcall *AILSTREAMCB)(_STREAM *);
 typedef my_source_mgr *my_src_ptr;
 typedef MaterialTechniqueSet *MaterialTechniqueSetPtr;
 typedef Font_s *FontHandle;
 typedef char *PCHAR;
 typedef __int64 __time64_t;
 typedef char TCHAR;
 typedef unsigned __int8 UCHAR;
 typedef my_memory_mgr *my_mem_ptr;
 typedef const wchar_t *LPCWSTR;
 typedef void __cdecl dMessageFunction(int, const char *, char *);
 typedef void (__cdecl *forward_DCT_method_ptr)(int *);
 typedef _iobuf *assertiveFile_t;
 typedef _MEMORYSTATUSEX *LPMEMORYSTATUSEX;
 typedef unsigned __int16 FxTrailElemHandle;
 typedef unsigned __int16 LANGID;
 typedef unsigned __int16 _ino_t;
 typedef unsigned int (__stdcall *PFLS_ALLOC_FUNCTION)(void (__stdcall *)(void *));
 typedef void (__cdecl *BuiltinFunction)();
 typedef void (__stdcall *AILSAMPLECB)(_SAMPLE *);
 typedef _MEMORYSTATUS *LPMEMORYSTATUS;
 typedef wchar_t *BSTR;
 typedef _KDHELP64 *PKDHELP64;
 typedef unsigned __int8 uint8_t;        // ...
 typedef void (__cdecl *PEXCEPTION_HANDLER)();
 typedef wchar_t *LPWSTR;
 typedef void (__stdcall *VFLT_RELEASE_SAMPLE_VOICE)(int, _SAMPLE *);
 typedef _PEB_FREE_BLOCK *PPEB_FREE_BLOCK;
 typedef IDirectSoundCaptureBuffer *LPDIRECTSOUNDCAPTUREBUFFER;
 typedef int *PLONG;
 typedef unsigned int ULONG;
 typedef unsigned int uLong;
 typedef int __cdecl HTRequestCallback(_HTRequest *, void *);
 typedef char *LPTSTR;
 typedef char min_msg_buf_char[2048];
 typedef void (__cdecl *PMFN)();
 typedef int ptrdiff_t;
 typedef int (__stdcall *LPDDENUMCALLBACKEXA)(_GUID *, char *, char *, void *, HMONITOR__ *); // ...
 typedef HRESULT (__stdcall *LPDDENUMMODESCALLBACK2)(_DDSURFACEDESC2 *, void *);
 typedef int (__stdcall *ASI_STREAM_CLOSE)(int);
 typedef unsigned __int8 boolean;
 typedef unsigned __int8 BOOLEAN;
 typedef float dVector3[4];
 typedef _tiddata *_ptiddata;
 typedef float dReal;
 typedef char objBufEntry[100];
 typedef void (__cdecl *Free_t)(void *, int);
 typedef HMENU__ *HMENU;
 typedef _TP_POOL *PTP_POOL;
 enum __bitmask __TI_flags : __int32
 {
     TI_IsConst     = 0x1,
     TI_IsVolatile  = 0x2,
     TI_IsUnaligned = 0x4,
     TI_IsPure      = 0x8,
     TI_IsWinRT     = 0x10,
 };
 enum __bitmask __CT_flags : __int32
 {
     CT_IsSimpleType    = 0x1,           // ...
     CT_ByReferenceOnly = 0x2,
     CT_HasVirtualBase  = 0x4,
     CT_IsWinRTHandle   = 0x8,
     CT_IsStdBadAlloc   = 0x10,
 };
 typedef _GUID GUID;                     // ...
 typedef struct _SCOPETABLE_ENTRY *PSCOPETABLE_ENTRY;
 struct _EH3_EXCEPTION_REGISTRATION // sizeof=0x10
 {                                       // ...
     struct _EH3_EXCEPTION_REGISTRATION *Next; // ...
     PVOID ExceptionHandler;
     PSCOPETABLE_ENTRY ScopeTable;       // ...
     DWORD TryLevel;                     // ...
 };
 typedef struct _EH3_EXCEPTION_REGISTRATION EH3_EXCEPTION_REGISTRATION;
 typedef struct _EH3_EXCEPTION_REGISTRATION *PEH3_EXCEPTION_REGISTRATION;
 struct CPPEH_RECORD // sizeof=0x18
 {                                       // ...
     DWORD old_esp;                      // ...
     EXCEPTION_POINTERS *exc_ptr;        // ...
     struct _EH3_EXCEPTION_REGISTRATION registration; // ...
 };
 struct FuncInfo // sizeof=0x24
 {                                       // ...
     int magicNumber __hex;
     int maxState __udec;
     _UNKNOWN *pUnwindMap;
     int nTryBlocks __udec;
     _UNKNOWN *pTryBlockMap;
     int nIPMapEntries __udec;
     _UNKNOWN *pIPtoStateMap;
     _UNKNOWN *pESTypeList;
     int EHFlags __hex;
 };
 struct UnwindMapEntry // sizeof=0x8
 {                                       // ...
     int toState __dec __tabform(NODUPS,1);
     _UNKNOWN *action;
 };
 struct TryBlockMapEntry // sizeof=0x14
 {                                       // ...
     int tryLow __dec __tabform(NODUPS,1);
     int tryHigh __dec __tabform(NODUPS,1);
     int catchHigh __dec __tabform(NODUPS,1);
     int nCatches __dec __tabform(NODUPS,1);
     _UNKNOWN *pHandlerArray;
 };
 struct HandlerType // sizeof=0x10
 {                                       // ...
     int adjectives __hex;
     _UNKNOWN *pType;
     int dispCatchObj __dec __tabform(NODUPS,1);
     _UNKNOWN *addressOfHandler;
 };
 typedef tagWNDCLASSA WNDCLASSA;         // ...
 struct _SYSTEM_INFO // sizeof=0x24
 {                                       // ...
     _SYSTEM_INFO::$A707B71C060B6D10F73A71917EA8473F;
     DWORD dwPageSize;                   // ...
     LPVOID lpMinimumApplicationAddress;
     LPVOID lpMaximumApplicationAddress;
     DWORD_PTR dwActiveProcessorMask;
     DWORD dwNumberOfProcessors;
     DWORD dwProcessorType;
     DWORD dwAllocationGranularity;
     WORD wProcessorLevel;
     WORD wProcessorRevision;
 };
 union _SYSTEM_INFO::$A707B71C060B6D10F73A71917EA8473F // sizeof=0x4
 {                                       // ...
     DWORD dwOemId;
     _SYSTEM_INFO::$A707B71C060B6D10F73A71917EA8473F::$AA04DEB0C6383F89F13D312A174572A9;
 };
 struct _SYSTEM_INFO::$A707B71C060B6D10F73A71917EA8473F::$AA04DEB0C6383F89F13D312A174572A9 // sizeof=0x4
 {                                       // ...
     WORD wProcessorArchitecture;
     WORD wReserved;
 };
 struct D3DXShader;
 struct D3DXShader::CPPDefine;
 struct D3DXShader::CPPConditional;
 struct D3DXShader::CPPBlock;
 struct D3DXShader::CPPPragmaDef;
 struct D3DXShader::CPreProcessor;
 struct D3DXShader::CTErrors;
 struct D3DXShader::CTokenize;
 struct D3DXShader::CFragmentRegisterAllocator;
 struct D3DXShader::CAssembler;
 struct D3DXShader::CRegisterEntryNode;
 struct D3DXShader::CFragmentInfo;
 struct D3DXShader::CCompiler;
 struct D3DXShader::CConstant;
 struct D3DXShader::CConstantTable;
 struct D3DXCore::CBuffer;
 struct D3DXCore::CResource;
 struct D3DXCore::CFile;
 struct D3DXCore::CAlloc;
 struct D3DXShader::CNode;
 struct D3DXShader::CNodeList;
 struct D3DXShader::CNodeTree;
 struct D3DXShader::CNodeToken;
 struct D3DXShader::CNodeProgram;
 struct D3DXShader::CNodeScope;
 struct D3DXShader::CNodeDecl;
 struct D3DXShader::CNodeUsage;
 struct D3DXShader::CNodeArray;
 struct D3DXShader::CNodeType;
 struct D3DXShader::CNodeFunction;
 struct D3DXShader::CNodeVariable;
 struct D3DXShader::CNodeStatement;
 struct D3DXShader::CNodeExpression;
 struct D3DXShader::CNodeValue;
 struct D3DXShader::CNodeState;
 struct D3DXShader::CNodeBuffer;
 struct D3DXShader::CNodeRegister;
 struct D3DXShader::CCommentBlock;
 struct D3DXShader::CFragmentConstants;
 struct D3DXShader::CNodeAsmInstruction;
 struct D3DXShader::CNodeAsmRegister;
 struct D3DXShader::CInstruction;
 struct D3DXShader::CArgument;
 struct D3DXShader::CBaseProgram;
 struct D3DXShader::CPool;
 struct D3DXShader::CProgram;
 struct D3DXShader::CTransform;
 struct D3DXShader::CParse;
 struct D3DXShader::C30Program;
 struct D3DXShader::CPSLegacyProgram;
 struct D3DXShader::CPSProgram;
 struct D3DXShader::CVSProgram;
 struct D3DXShader::CFXLProgram;
 struct D3DXShader::CShaderProgram;
 struct D3DXShader::CTReorderInstructions;
 struct D3DXShader::CPPInclude;
 typedef const CHAR *LPCCH;              // ...
 typedef wchar_t WCHAR;                  // ...
 typedef const WCHAR *LPCWCH;            // ...
 enum MACRO_WM // 4 bytes
 {
     WM_NULL                         = 0x0,
     WM_CREATE                       = 0x1,
     WM_DESTROY                      = 0x2,
     WM_MOVE                         = 0x3,
     WM_SIZEWAIT                     = 0x4,
     WM_SIZE                         = 0x5,
     WM_ACTIVATE                     = 0x6,
     WM_SETFOCUS                     = 0x7,
     WM_KILLFOCUS                    = 0x8,
     WM_SETVISIBLE                   = 0x9,
     WM_ENABLE                       = 0xA,
     WM_SETREDRAW                    = 0xB,
     WM_SETTEXT                      = 0xC,
     WM_GETTEXT                      = 0xD,
     WM_GETTEXTLENGTH                = 0xE,
     WM_PAINT                        = 0xF,
     WM_CLOSE                        = 0x10,
     WM_QUERYENDSESSION              = 0x11,
     WM_QUIT                         = 0x12,
     WM_QUERYOPEN                    = 0x13,
     WM_ERASEBKGND                   = 0x14,
     WM_SYSCOLORCHANGE               = 0x15,
     WM_ENDSESSION                   = 0x16,
     WM_SYSTEMERROR                  = 0x17,
     WM_SHOWWINDOW                   = 0x18,
     WM_CTLCOLOR                     = 0x19,
     WM_SETTINGCHANGE                = 0x1A,
     WM_WININICHANGE                 = 0x1A,
     WM_DEVMODECHANGE                = 0x1B,
     WM_ACTIVATEAPP                  = 0x1C,
     WM_FONTCHANGE                   = 0x1D,
     WM_TIMECHANGE                   = 0x1E,
     WM_CANCELMODE                   = 0x1F,
     WM_SETCURSOR                    = 0x20,
     WM_MOUSEACTIVATE                = 0x21,
     WM_CHILDACTIVATE                = 0x22,
     WM_QUEUESYNC                    = 0x23,
     WM_GETMINMAXINFO                = 0x24,
     WM_LOGOFF                       = 0x25,
     WM_PAINTICON                    = 0x26,
     WM_ICONERASEBKGND               = 0x27,
     WM_NEXTDLGCTL                   = 0x28,
     WM_ALTTABACTIVE                 = 0x29,
     WM_SPOOLERSTATUS                = 0x2A,
     WM_DRAWITEM                     = 0x2B,
     WM_MEASUREITEM                  = 0x2C,
     WM_DELETEITEM                   = 0x2D,
     WM_VKEYTOITEM                   = 0x2E,
     WM_CHARTOITEM                   = 0x2F,
     WM_SETFONT                      = 0x30,
     WM_GETFONT                      = 0x31,
     WM_SETHOTKEY                    = 0x32,
     WM_GETHOTKEY                    = 0x33,
     WM_FILESYSCHANGE                = 0x34,
     WM_ISACTIVEICON                 = 0x35,
     WM_QUERYPARKICON                = 0x36,
     WM_QUERYDRAGICON                = 0x37,
     WM_WINHELP                      = 0x38,
     WM_COMPAREITEM                  = 0x39,
     WM_FULLSCREEN                   = 0x3A,
     WM_CLIENTSHUTDOWN               = 0x3B,
     WM_DDEMLEVENT                   = 0x3C,
     WM_GETOBJECT                    = 0x3D,
     MM_CALCSCROLL                   = 0x3F,
     WM_TESTING                      = 0x40,
     WM_COMPACTING                   = 0x41,
     WM_OTHERWINDOWCREATED           = 0x42,
     WM_OTHERWINDOWDESTROYED         = 0x43,
     WM_COMMNOTIFY                   = 0x44,
     WM_MEDIASTATUSCHANGE            = 0x45,
     WM_WINDOWPOSCHANGING            = 0x46,
     WM_WINDOWPOSCHANGED             = 0x47,
     WM_POWER                        = 0x48,
     WM_COPYGLOBALDATA               = 0x49,
     WM_COPYDATA                     = 0x4A,
     WM_CANCELJOURNAL                = 0x4B,
     WM_LOGONNOTIFY                  = 0x4C,
     WM_KEYF1                        = 0x4D,
     WM_NOTIFY                       = 0x4E,
     WM_ACCESS_WINDOW                = 0x4F,
     WM_INPUTLANGCHANGEREQUEST       = 0x50,
     WM_INPUTLANGCHANGE              = 0x51,
     WM_TCARD                        = 0x52,
     WM_HELP                         = 0x53,
     WM_USERCHANGED                  = 0x54,
     WM_NOTIFYFORMAT                 = 0x55,
     WM_QM_ACTIVATE                  = 0x60,
     WM_HOOK_DO_CALLBACK             = 0x61,
     WM_SYSCOPYDATA                  = 0x62,
     WM_FINALDESTROY                 = 0x70,
     WM_MEASUREITEM_CLIENTDATA       = 0x71,
     WM_CONTEXTMENU                  = 0x7B,
     WM_STYLECHANGING                = 0x7C,
     WM_STYLECHANGED                 = 0x7D,
     WM_DISPLAYCHANGE                = 0x7E,
     WM_GETICON                      = 0x7F,
     WM_SETICON                      = 0x80,
     WM_NCCREATE                     = 0x81,
     WM_NCDESTROY                    = 0x82,
     WM_NCCALCSIZE                   = 0x83,
     WM_NCHITTEST                    = 0x84,
     WM_NCPAINT                      = 0x85,
     WM_NCACTIVATE                   = 0x86,
     WM_GETDLGCODE                   = 0x87,
     WM_SYNCPAINT                    = 0x88,
     WM_SYNCTASK                     = 0x89,
     WM_NCMOUSEMOVE                  = 0xA0,
     WM_NCLBUTTONDOWN                = 0xA1,
     WM_NCLBUTTONUP                  = 0xA2,
     WM_NCLBUTTONDBLCLK              = 0xA3,
     WM_NCRBUTTONDOWN                = 0xA4,
     WM_NCRBUTTONUP                  = 0xA5,
     WM_NCRBUTTONDBLCLK              = 0xA6,
     WM_NCMBUTTONDOWN                = 0xA7,
     WM_NCMBUTTONUP                  = 0xA8,
     WM_NCMBUTTONDBLCLK              = 0xA9,
     WM_NCXBUTTONDOWN                = 0xAB,
     WM_NCXBUTTONUP                  = 0xAC,
     WM_NCXBUTTONDBLCLK              = 0xAD,
     EM_GETSEL                       = 0xB0,
     EM_SETSEL                       = 0xB1,
     EM_GETRECT                      = 0xB2,
     EM_SETRECT                      = 0xB3,
     EM_SETRECTNP                    = 0xB4,
     EM_SCROLL                       = 0xB5,
     EM_LINESCROLL                   = 0xB6,
     EM_SCROLLCARET                  = 0xB7,
     EM_GETMODIFY                    = 0xB8,
     EM_SETMODIFY                    = 0xB9,
     EM_GETLINECOUNT                 = 0xBA,
     EM_LINEINDEX                    = 0xBB,
     EM_SETHANDLE                    = 0xBC,
     EM_GETHANDLE                    = 0xBD,
     EM_GETTHUMB                     = 0xBE,
     EM_LINELENGTH                   = 0xC1,
     EM_REPLACESEL                   = 0xC2,
     EM_SETFONT                      = 0xC3,
     EM_GETLINE                      = 0xC4,
     EM_LIMITTEXT                    = 0xC5,
     EM_SETLIMITTEXT                 = 0xC5,
     EM_CANUNDO                      = 0xC6,
     EM_UNDO                         = 0xC7,
     EM_FMTLINES                     = 0xC8,
     EM_LINEFROMCHAR                 = 0xC9,
     EM_SETWORDBREAK                 = 0xCA,
     EM_SETTABSTOPS                  = 0xCB,
     EM_SETPASSWORDCHAR              = 0xCC,
     EM_EMPTYUNDOBUFFER              = 0xCD,
     EM_GETFIRSTVISIBLELINE          = 0xCE,
     EM_SETREADONLY                  = 0xCF,
     EM_SETWORDBREAKPROC             = 0xD0,
     EM_GETWORDBREAKPROC             = 0xD1,
     EM_GETPASSWORDCHAR              = 0xD2,
     EM_SETMARGINS                   = 0xD3,
     EM_GETMARGINS                   = 0xD4,
     EM_GETLIMITTEXT                 = 0xD5,
     EM_POSFROMCHAR                  = 0xD6,
     EM_CHARFROMPOS                  = 0xD7,
     EM_SETIMESTATUS                 = 0xD8,
     EM_GETIMESTATUS                 = 0xD9,
     SBM_SETPOS                      = 0xE0,
     SBM_GETPOS                      = 0xE1,
     SBM_SETRANGE                    = 0xE2,
     SBM_GETRANGE                    = 0xE3,
     SBM_ENABLE_ARROWS               = 0xE4,
     SBM_SETRANGEREDRAW              = 0xE6,
     SBM_SETSCROLLINFO               = 0xE9,
     SBM_GETSCROLLINFO               = 0xEA,
     SBM_GETSCROLLBARINFO            = 0xEB,
     BM_GETCHECK                     = 0xF0,
     BM_SETCHECK                     = 0xF1,
     BM_GETSTATE                     = 0xF2,
     BM_SETSTATE                     = 0xF3,
     BM_SETSTYLE                     = 0xF4,
     BM_CLICK                        = 0xF5,
     BM_GETIMAGE                     = 0xF6,
     BM_SETIMAGE                     = 0xF7,
     BM_SETDONTCLICK                 = 0xF8,
     WM_INPUT                        = 0xFF,
     WM_KEYDOWN                      = 0x100,
     WM_KEYFIRST                     = 0x100,
     WM_KEYUP                        = 0x101,
     WM_CHAR                         = 0x102,
     WM_DEADCHAR                     = 0x103,
     WM_SYSKEYDOWN                   = 0x104,
     WM_SYSKEYUP                     = 0x105,
     WM_SYSCHAR                      = 0x106,
     WM_SYSDEADCHAR                  = 0x107,
     WM_KEYLAST                      = 0x109,
     WM_YOMICHAR                     = 0x108,
     WM_UNICHAR                      = 0x109,
     WM_WNT_CONVERTREQUESTEX         = 0x109,
     WM_CONVERTREQUEST               = 0x10A,
     WM_CONVERTRESULT                = 0x10B,
     WM_INTERIM                      = 0x10C,
     WM_IM_INFO                      = 0x10C,
     WM_IME_STARTCOMPOSITION         = 0x10D,
     WM_IME_ENDCOMPOSITION           = 0x10E,
     WM_IME_COMPOSITION              = 0x10F,
     WM_IME_KEYLAST                  = 0x10F,
     WM_INITDIALOG                   = 0x110,
     WM_COMMAND                      = 0x111,
     WM_SYSCOMMAND                   = 0x112,
     WM_TIMER                        = 0x113,
     WM_HSCROLL                      = 0x114,
     WM_VSCROLL                      = 0x115,
     WM_INITMENU                     = 0x116,
     WM_INITMENUPOPUP                = 0x117,
     WM_SYSTIMER                     = 0x118,
     WM_MENUSELECT                   = 0x11F,
     WM_MENUCHAR                     = 0x120,
     WM_ENTERIDLE                    = 0x121,
     WM_MENURBUTTONUP                = 0x122,
     WM_MENUDRAG                     = 0x123,
     WM_MENUGETOBJECT                = 0x124,
     WM_UNINITMENUPOPUP              = 0x125,
     WM_MENUCOMMAND                  = 0x126,
     WM_CHANGEUISTATE                = 0x127,
     WM_UPDATEUISTATE                = 0x128,
     WM_QUERYUISTATE                 = 0x129,
     WM_LBTRACKPOINT                 = 0x131,
     WM_CTLCOLORMSGBOX               = 0x132,
     WM_CTLCOLOREDIT                 = 0x133,
     WM_CTLCOLORLISTBOX              = 0x134,
     WM_CTLCOLORBTN                  = 0x135,
     WM_CTLCOLORDLG                  = 0x136,
     WM_CTLCOLORSCROLLBAR            = 0x137,
     WM_CTLCOLORSTATIC               = 0x138,
     CB_GETEDITSEL                   = 0x140,
     CB_LIMITTEXT                    = 0x141,
     CB_SETEDITSEL                   = 0x142,
     CB_ADDSTRING                    = 0x143,
     CB_DELETESTRING                 = 0x144,
     CB_DIR                          = 0x145,
     CB_GETCOUNT                     = 0x146,
     CB_GETCURSEL                    = 0x147,
     CB_GETLBTEXT                    = 0x148,
     CB_GETLBTEXTLEN                 = 0x149,
     CB_INSERTSTRING                 = 0x14A,
     CB_RESETCONTENT                 = 0x14B,
     CB_FINDSTRING                   = 0x14C,
     CB_SELECTSTRING                 = 0x14D,
     CB_SETCURSEL                    = 0x14E,
     CB_SHOWDROPDOWN                 = 0x14F,
     CB_GETITEMDATA                  = 0x150,
     CB_SETITEMDATA                  = 0x151,
     CB_GETDROPPEDCONTROLRECT        = 0x152,
     CB_SETITEMHEIGHT                = 0x153,
     CB_GETITEMHEIGHT                = 0x154,
     CB_SETEXTENDEDUI                = 0x155,
     CB_GETEXTENDEDUI                = 0x156,
     CB_GETDROPPEDSTATE              = 0x157,
     CB_FINDSTRINGEXACT              = 0x158,
     CB_SETLOCALE                    = 0x159,
     CB_GETLOCALE                    = 0x15A,
     CB_GETTOPINDEX                  = 0x15B,
     CB_SETTOPINDEX                  = 0x15C,
     CB_GETHORIZONTALEXTENT          = 0x15D,
     CB_SETHORIZONTALEXTENT          = 0x15E,
     CB_GETDROPPEDWIDTH              = 0x15F,
     CB_SETDROPPEDWIDTH              = 0x160,
     CB_INITSTORAGE                  = 0x161,
     CB_MULTIPLEADDSTRING            = 0x163,
     CB_GETCOMBOBOXINFO              = 0x164,
     CB_SETMINVISIBLE                = 0x1701,
     CB_GETMINVISIBLE                = 0x1702,
     CB_SETCUEBANNER                 = 0x1703,
     CB_GETCUEBANNER                 = 0x1704,
     STM_SETICON                     = 0x170,
     STM_GETICON                     = 0x171,
     STM_SETIMAGE                    = 0x172,
     STM_GETIMAGE                    = 0x173,
     LB_ADDSTRING                    = 0x180,
     LB_INSERTSTRING                 = 0x181,
     LB_DELETESTRING                 = 0x182,
     LB_SELITEMRANGEEX               = 0x183,
     LB_RESETCONTENT                 = 0x184,
     LB_SETSEL                       = 0x185,
     LB_SETCURSEL                    = 0x186,
     LB_GETSEL                       = 0x187,
     LB_GETCURSEL                    = 0x188,
     LB_GETTEXT                      = 0x189,
     LB_GETTEXTLEN                   = 0x18A,
     LB_GETCOUNT                     = 0x18B,
     LB_SELECTSTRING                 = 0x18C,
     LB_DIR                          = 0x18D,
     LB_GETTOPINDEX                  = 0x18E,
     LB_FINDSTRING                   = 0x18F,
     LB_GETSELCOUNT                  = 0x190,
     LB_GETSELITEMS                  = 0x191,
     LB_SETTABSTOPS                  = 0x192,
     LB_GETHORIZONTALEXTENT          = 0x193,
     LB_SETHORIZONTALEXTENT          = 0x194,
     LB_SETCOLUMNWIDTH               = 0x195,
     LB_ADDFILE                      = 0x196,
     LB_SETTOPINDEX                  = 0x197,
     LB_GETITEMRECT                  = 0x198,
     LB_GETITEMDATA                  = 0x199,
     LB_SETITEMDATA                  = 0x19A,
     LB_SELITEMRANGE                 = 0x19B,
     LB_SETANCHORINDEX               = 0x19C,
     LB_GETANCHORINDEX               = 0x19D,
     LB_SETCARETINDEX                = 0x19E,
     LB_GETCARETINDEX                = 0x19F,
     LB_SETITEMHEIGHT                = 0x1A0,
     LB_GETITEMHEIGHT                = 0x1A1,
     LB_FINDSTRINGEXACT              = 0x1A2,
     LBCB_CARETON                    = 0x1A3,
     LBCB_CARETOFF                   = 0x1A4,
     LB_SETLOCALE                    = 0x1A5,
     LB_GETLOCALE                    = 0x1A6,
     LB_SETCOUNT                     = 0x1A7,
     LB_INITSTORAGE                  = 0x1A8,
     LB_ITEMFROMPOINT                = 0x1A9,
     LB_INSERTSTRINGUPPER            = 0x1AA,
     LB_INSERTSTRINGLOWER            = 0x1AB,
     LB_ADDSTRINGUPPER               = 0x1AC,
     LB_ADDSTRINGLOWER               = 0x1AD,
     LB_MULTIPLEADDSTRING            = 0x1B1,
     LB_GETLISTBOXINFO               = 0x1B2,
     MN_SETHMENU                     = 0x1E0,
     MN_GETHMENU                     = 0x1E1,
     MN_SIZEWINDOW                   = 0x1E2,
     MN_OPENHIERARCHY                = 0x1E3,
     MN_CLOSEHIERARCHY               = 0x1E4,
     MN_SELECTITEM                   = 0x1E5,
     MN_CANCELMENUS                  = 0x1E6,
     MN_SELECTFIRSTVALIDITEM         = 0x1E7,
     MN_GETPPOPUPMENU                = 0x1EA,
     MN_FINDMENUWINDOWFROMPOINT      = 0x1EB,
     MN_SHOWPOPUPWINDOW              = 0x1EC,
     MN_BUTTONDOWN                   = 0x1ED,
     MN_MOUSEMOVE                    = 0x1EE,
     MN_BUTTONUP                     = 0x1EF,
     MN_SETTIMERTOOPENHIERARCHY      = 0x1F0,
     MN_DBLCLK                       = 0x1F1,
     WM_MOUSEFIRST                   = 0x200,
     WM_MOUSEMOVE                    = 0x200,
     WM_LBUTTONDOWN                  = 0x201,
     WM_LBUTTONUP                    = 0x202,
     WM_LBUTTONDBLCLK                = 0x203,
     WM_RBUTTONDOWN                  = 0x204,
     WM_RBUTTONUP                    = 0x205,
     WM_RBUTTONDBLCLK                = 0x206,
     WM_MBUTTONDOWN                  = 0x207,
     WM_MBUTTONUP                    = 0x208,
     WM_MBUTTONDBLCLK                = 0x209,
     WM_MOUSELAST                    = 0x20E,
     WM_MOUSEWHEEL                   = 0x20A,
     WM_XBUTTONDOWN                  = 0x20B,
     WM_XBUTTONUP                    = 0x20C,
     WM_XBUTTONDBLCLK                = 0x20D,
     WM_PARENTNOTIFY                 = 0x210,
     WM_ENTERMENULOOP                = 0x211,
     WM_EXITMENULOOP                 = 0x212,
     WM_NEXTMENU                     = 0x213,
     WM_SIZING                       = 0x214,
     WM_CAPTURECHANGED               = 0x215,
     WM_MOVING                       = 0x216,
     WM_POWERBROADCAST               = 0x218,
     WM_DEVICECHANGE                 = 0x219,
     WM_MDICREATE                    = 0x220,
     WM_MDIDESTROY                   = 0x221,
     WM_MDIACTIVATE                  = 0x222,
     WM_MDIRESTORE                   = 0x223,
     WM_MDINEXT                      = 0x224,
     WM_MDIMAXIMIZE                  = 0x225,
     WM_MDITILE                      = 0x226,
     WM_MDICASCADE                   = 0x227,
     WM_MDIICONARRANGE               = 0x228,
     WM_MDIGETACTIVE                 = 0x229,
     WM_DROPOBJECT                   = 0x22A,
     WM_QUERYDROPOBJECT              = 0x22B,
     WM_BEGINDRAG                    = 0x22C,
     WM_DRAGLOOP                     = 0x22D,
     WM_DRAGSELECT                   = 0x22E,
     WM_DRAGMOVE                     = 0x22F,
     WM_MDISETMENU                   = 0x230,
     WM_ENTERSIZEMOVE                = 0x231,
     WM_EXITSIZEMOVE                 = 0x232,
     WM_DROPFILES                    = 0x233,
     WM_MDIREFRESHMENU               = 0x234,
     WM_IME_REPORT                   = 0x280,
     WM_HANGEULFIRST                 = 0x280,
     WM_KANJIFIRST                   = 0x280,
     WM_IME_SETCONTEXT               = 0x281,
     WM_IME_NOTIFY                   = 0x282,
     WM_IME_CONTROL                  = 0x283,
     WM_IME_COMPOSITIONFULL          = 0x284,
     WM_IME_SELECT                   = 0x285,
     WM_IME_CHAR                     = 0x286,
     WM_IME_SYSTEM                   = 0x287,
     WM_IME_REQUEST                  = 0x288,
     WM_IMEKEYDOWN                   = 0x290,
     WM_IME_KEYDOWN                  = 0x290,
     WM_IMEKEYUP                     = 0x291,
     WM_IME_KEYUP                    = 0x291,
     WM_HANGEULLAST                  = 0x29F,
     WM_KANJILAST                    = 0x29F,
     WM_NCMOUSEHOVER                 = 0x2A0,
     WM_MOUSEHOVER                   = 0x2A1,
     WM_NCMOUSELEAVE                 = 0x2A2,
     WM_MOUSELEAVE                   = 0x2A3,
     WM_TRACKMOUSEEVENT_LAST         = 0x2AF,
     WM_WTSSESSION_CHANGE            = 0x2B1,
     WM_TABLET_FIRST                 = 0x2C0,
     WM_TABLET_LAST                  = 0x2DF,
     WM_CUT                          = 0x300,
     WM_COPY                         = 0x301,
     WM_PASTE                        = 0x302,
     WM_CLEAR                        = 0x303,
     WM_UNDO                         = 0x304,
     WM_RENDERFORMAT                 = 0x305,
     WM_RENDERALLFORMATS             = 0x306,
     WM_DESTROYCLIPBOARD             = 0x307,
     WM_DRAWCLIPBOARD                = 0x308,
     WM_PAINTCLIPBOARD               = 0x309,
     WM_VSCROLLCLIPBOARD             = 0x30A,
     WM_SIZECLIPBOARD                = 0x30B,
     WM_ASKCBFORMATNAME              = 0x30C,
     WM_CHANGECBCHAIN                = 0x30D,
     WM_HSCROLLCLIPBOARD             = 0x30E,
     WM_QUERYNEWPALETTE              = 0x30F,
     WM_PALETTEISCHANGING            = 0x310,
     WM_PALETTECHANGED               = 0x311,
     WM_HOTKEY                       = 0x312,
     WM_SYSMENU                      = 0x313,
     WM_HOOKMSG                      = 0x314,
     WM_EXITPROCESS                  = 0x315,
     WM_WAKETHREAD                   = 0x316,
     WM_PRINT                        = 0x317,
     WM_PRINTCLIENT                  = 0x318,
     WM_APPCOMMAND                   = 0x319,
     WM_THEMECHANGED                 = 0x31A,
     WM_HANDHELDFIRST                = 0x358,
     WM_HANDHELDLAST                 = 0x35F,
     WM_AFXFIRST                     = 0x360,
     WM_AFXLAST                      = 0x37F,
     WM_PENWINFIRST                  = 0x380,
     WM_RCRESULT                     = 0x381,
     WM_HOOKRCRESULT                 = 0x382,
     WM_GLOBALRCCHANGE               = 0x383,
     WM_PENMISCINFO                  = 0x383,
     WM_SKB                          = 0x384,
     WM_HEDITCTL                     = 0x385,
     WM_PENCTL                       = 0x385,
     WM_PENMISC                      = 0x386,
     WM_CTLINIT                      = 0x387,
     WM_PENEVENT                     = 0x388,
     WM_PENWINLAST                   = 0x38F,
     WM_INTERNAL_COALESCE_FIRST      = 0x390,
     WM_COALESCE_FIRST               = 0x390,
     WM_COALESCE_LAST                = 0x39F,
     WM_MM_RESERVED_FIRST            = 0x3A0,
     WM_INTERNAL_COALESCE_LAST       = 0x3B0,
     WM_MM_RESERVED_LAST             = 0x3DF,
     WM_DDE_INITIATE                 = 0x3E0,
     WM_DDE_TERMINATE                = 0x3E1,
     WM_DDE_ADVISE                   = 0x3E2,
     WM_DDE_UNADVISE                 = 0x3E3,
     WM_DDE_ACK                      = 0x3E4,
     WM_DDE_DATA                     = 0x3E5,
     WM_DDE_REQUEST                  = 0x3E6,
     WM_DDE_POKE                     = 0x3E7,
     WM_DDE_EXECUTE                  = 0x3E8,
     WM_DBNOTIFICATION               = 0x3FD,
     WM_NETCONNECT                   = 0x3FE,
     WM_HIBERNATE                    = 0x3FF,
     WM_USER                         = 0x400,
     DDM_SETFMT                      = 0x400,
     DDM_DRAW                        = 0x401,
     DDM_CLOSE                       = 0x402,
     DDM_BEGIN                       = 0x403,
     DDM_END                         = 0x404,
     DM_GETDEFID                     = 0x400,
     DM_SETDEFID                     = 0x401,
     DM_REPOSITION                   = 0x402,
     NIN_SELECT                      = 0x400,
     NIN_KEYSELECT                   = 0x401,
     NIN_BALLOONSHOW                 = 0x402,
     NIN_BALLOONHIDE                 = 0x403,
     NIN_BALLOONTIMEOUT              = 0x404,
     NIN_BALLOONUSERCLICK            = 0x405,
     NIN_POPUPOPEN                   = 0x406,
     NIN_POPUPCLOSE                  = 0x407,
     TBM_GETPOS                      = 0x400,
     TBM_GETRANGEMIN                 = 0x401,
     TBM_GETRANGEMAX                 = 0x402,
     TBM_GETTIC                      = 0x403,
     TBM_SETTIC                      = 0x404,
     TBM_SETPOS                      = 0x405,
     TBM_SETRANGE                    = 0x406,
     TBM_SETRANGEMIN                 = 0x407,
     TBM_SETRANGEMAX                 = 0x408,
     TBM_CLEARTICS                   = 0x409,
     TBM_SETSEL                      = 0x40A,
     TBM_SETSELSTART                 = 0x40B,
     TBM_SETSELEND                   = 0x40C,
     TBM_GETPTICS                    = 0x40E,
     TBM_GETTICPOS                   = 0x40F,
     TBM_GETNUMTICS                  = 0x410,
     TBM_GETSELSTART                 = 0x411,
     TBM_GETSELEND                   = 0x412,
     TBM_CLEARSEL                    = 0x413,
     TBM_SETTICFREQ                  = 0x414,
     TBM_SETPAGESIZE                 = 0x415,
     TBM_GETPAGESIZE                 = 0x416,
     TBM_SETLINESIZE                 = 0x417,
     TBM_GETLINESIZE                 = 0x418,
     TBM_GETTHUMBRECT                = 0x419,
     TBM_GETCHANNELRECT              = 0x41A,
     TBM_SETTHUMBLENGTH              = 0x41B,
     TBM_GETTHUMBLENGTH              = 0x41C,
     TBM_SETTOOLTIPS                 = 0x41D,
     TBM_GETTOOLTIPS                 = 0x41E,
     TBM_SETTIPSIDE                  = 0x41F,
     TBM_SETBUDDY                    = 0x420,
     TBM_GETBUDDY                    = 0x421,
     TBM_SETPOSNOTIFY                = 0x422,
     WM_PSD_PAGESETUPDLG             = 0x400,
     WM_PSD_FULLPAGERECT             = 0x401,
     WM_PSD_MINMARGINRECT            = 0x402,
     WM_PSD_MARGINRECT               = 0x403,
     WM_PSD_GREEKTEXTRECT            = 0x404,
     WM_PSD_ENVSTAMPRECT             = 0x405,
     WM_PSD_YAFULLPAGERECT           = 0x406,
     WM_CHOOSEFONT_GETLOGFONT        = 0x401,
     WM_CHOOSEFONT_SETLOGFONT        = 0x465,
     WM_CHOOSEFONT_SETFLAGS          = 0x466,
     HKM_SETHOTKEY                   = 0x401,
     HKM_GETHOTKEY                   = 0x402,
     HKM_SETRULES                    = 0x403,
     PBM_SETRANGE                    = 0x401,
     PBM_SETPOS                      = 0x402,
     PBM_DELTAPOS                    = 0x403,
     PBM_SETSTEP                     = 0x404,
     PBM_STEPIT                      = 0x405,
     PBM_SETRANGE32                  = 0x406,
     PBM_GETRANGE                    = 0x407,
     PBM_GETPOS                      = 0x408,
     PBM_SETBARCOLOR                 = 0x409,
     PBM_SETMARQUEE                  = 0x40A,
     PBM_GETSTEP                     = 0x40D,
     PBM_GETBKCOLOR                  = 0x40E,
     PBM_GETBARCOLOR                 = 0x40F,
     PBM_SETSTATE                    = 0x410,
     PBM_GETSTATE                    = 0x411,
     RB_INSERTBANDA                  = 0x401,
     RB_DELETEBAND                   = 0x402,
     RB_GETBARINFO                   = 0x403,
     RB_SETBARINFO                   = 0x404,
     RB_SETBANDINFOA                 = 0x406,
     RB_SETPARENT                    = 0x407,
     RB_HITTEST                      = 0x408,
     RB_GETRECT                      = 0x409,
     RB_INSERTBANDW                  = 0x40A,
     RB_SETBANDINFOW                 = 0x40B,
     RB_GETBANDCOUNT                 = 0x40C,
     RB_GETROWCOUNT                  = 0x40D,
     RB_GETROWHEIGHT                 = 0x40E,
     RB_IDTOINDEX                    = 0x410,
     RB_GETTOOLTIPS                  = 0x411,
     RB_SETTOOLTIPS                  = 0x412,
     RB_SETBKCOLOR                   = 0x413,
     RB_GETBKCOLOR                   = 0x414,
     RB_SETTEXTCOLOR                 = 0x415,
     RB_GETTEXTCOLOR                 = 0x416,
     RB_SIZETORECT                   = 0x417,
     RB_BEGINDRAG                    = 0x418,
     RB_ENDDRAG                      = 0x419,
     RB_DRAGMOVE                     = 0x41A,
     RB_GETBARHEIGHT                 = 0x41B,
     RB_GETBANDINFOW                 = 0x41C,
     RB_GETBANDINFOA                 = 0x41D,
     RB_MINIMIZEBAND                 = 0x41E,
     RB_MAXIMIZEBAND                 = 0x41F,
     RB_GETBANDBORDERS               = 0x422,
     RB_SHOWBAND                     = 0x423,
     RB_SETPALETTE                   = 0x425,
     RB_GETPALETTE                   = 0x426,
     RB_MOVEBAND                     = 0x427,
     RB_PUSHCHEVRON                  = 0x42B,
     RB_GETBANDMARGINS               = 0x428,
     RB_SETEXTENDEDSTYLE             = 0x429,
     RB_GETEXTENDEDSTYLE             = 0x42A,
     RB_SETBANDWIDTH                 = 0x42C,
     RB_SETWINDOWTHEME               = 0x200B,
     CBEM_INSERTITEMA                = 0x401,
     CBEM_SETIMAGELIST               = 0x402,
     CBEM_GETIMAGELIST               = 0x403,
     CBEM_GETITEMA                   = 0x404,
     CBEM_SETITEMA                   = 0x405,
     CBEM_GETCOMBOCONTROL            = 0x406,
     CBEM_GETEDITCONTROL             = 0x407,
     CBEM_SETEXSTYLE                 = 0x408,
     CBEM_GETEXSTYLE                 = 0x409,
     CBEM_GETEXTENDEDSTYLE           = 0x409,
     CBEM_HASEDITCHANGED             = 0x40A,
     CBEM_INSERTITEMW                = 0x40B,
     CBEM_SETITEMW                   = 0x40C,
     CBEM_GETITEMW                   = 0x40D,
     CBEM_SETEXTENDEDSTYLE           = 0x40E,
     SB_SETTEXTA                     = 0x401,
     SB_GETTEXTA                     = 0x402,
     SB_GETTEXTLENGTHA               = 0x403,
     SB_SETPARTS                     = 0x404,
     SB_GETPARTS                     = 0x406,
     SB_GETBORDERS                   = 0x407,
     SB_SETMINHEIGHT                 = 0x408,
     SB_SIMPLE                       = 0x409,
     SB_GETRECT                      = 0x40A,
     SB_SETTEXTW                     = 0x40B,
     SB_GETTEXTLENGTHW               = 0x40C,
     SB_GETTEXTW                     = 0x40D,
     SB_ISSIMPLE                     = 0x40E,
     SB_SETICON                      = 0x40F,
     SB_SETTIPTEXTA                  = 0x410,
     SB_SETTIPTEXTW                  = 0x411,
     SB_GETTIPTEXTA                  = 0x412,
     SB_GETTIPTEXTW                  = 0x413,
     SB_GETICON                      = 0x414,
     TTM_ACTIVATE                    = 0x401,
     TTM_SETDELAYTIME                = 0x403,
     TTM_ADDTOOLA                    = 0x404,
     TTM_DELTOOLA                    = 0x405,
     TTM_NEWTOOLRECTA                = 0x406,
     TTM_RELAYEVENT                  = 0x407,
     TTM_GETTOOLINFOA                = 0x408,
     TTM_SETTOOLINFOA                = 0x409,
     TTM_HITTESTA                    = 0x40A,
     TTM_GETTEXTA                    = 0x40B,
     TTM_UPDATETIPTEXTA              = 0x40C,
     TTM_GETTOOLCOUNT                = 0x40D,
     TTM_ENUMTOOLSA                  = 0x40E,
     TTM_GETCURRENTTOOLA             = 0x40F,
     TTM_WINDOWFROMPOINT             = 0x410,
     TTM_TRACKACTIVATE               = 0x411,
     TTM_TRACKPOSITION               = 0x412,
     TTM_SETTIPBKCOLOR               = 0x413,
     TTM_SETTIPTEXTCOLOR             = 0x414,
     TTM_GETDELAYTIME                = 0x415,
     TTM_GETTIPBKCOLOR               = 0x416,
     TTM_GETTIPTEXTCOLOR             = 0x417,
     TTM_SETMAXTIPWIDTH              = 0x418,
     TTM_GETMAXTIPWIDTH              = 0x419,
     TTM_SETMARGIN                   = 0x41A,
     TTM_GETMARGIN                   = 0x41B,
     TTM_POP                         = 0x41C,
     TTM_UPDATE                      = 0x41D,
     TTM_GETBUBBLESIZE               = 0x41E,
     TTM_ADJUSTRECT                  = 0x41F,
     TTM_SETTITLEA                   = 0x420,
     TTM_SETTITLEW                   = 0x421,
     TTM_ADDTOOLW                    = 0x432,
     TTM_DELTOOLW                    = 0x433,
     TTM_NEWTOOLRECTW                = 0x434,
     TTM_GETTOOLINFOW                = 0x435,
     TTM_SETTOOLINFOW                = 0x436,
     TTM_HITTESTW                    = 0x437,
     TTM_GETTEXTW                    = 0x438,
     TTM_UPDATETIPTEXTW              = 0x439,
     TTM_ENUMTOOLSW                  = 0x43A,
     TTM_GETCURRENTTOOLW             = 0x43B,
     WIZ_QUERYNUMPAGES               = 0x40A,
     WIZ_NEXT                        = 0x40B,
     WIZ_PREV                        = 0x40C,
     MSG_FTS_JUMP_VA                 = 0x421,
     MSG_FTS_JUMP_QWORD              = 0x423,
     MSG_REINDEX_REQUEST             = 0x424,
     MSG_FTS_WHERE_IS_IT             = 0x425,
     MSG_GET_DEFFONT                 = 0x42D,
     TB_ENABLEBUTTON                 = 0x401,
     TB_CHECKBUTTON                  = 0x402,
     TB_PRESSBUTTON                  = 0x403,
     TB_HIDEBUTTON                   = 0x404,
     TB_INDETERMINATE                = 0x405,
     TB_MARKBUTTON                   = 0x406,
     TB_ISBUTTONENABLED              = 0x409,
     TB_ISBUTTONCHECKED              = 0x40A,
     TB_ISBUTTONPRESSED              = 0x40B,
     TB_ISBUTTONHIDDEN               = 0x40C,
     TB_ISBUTTONINDETERMINATE        = 0x40D,
     TB_ISBUTTONHIGHLIGHTED          = 0x40E,
     TB_SETSTATE                     = 0x411,
     TB_GETSTATE                     = 0x412,
     TB_ADDBITMAP                    = 0x413,
     TB_ADDBUTTONSA                  = 0x414,
     TB_INSERTBUTTONA                = 0x415,
     TB_DELETEBUTTON                 = 0x416,
     TB_GETBUTTON                    = 0x417,
     TB_BUTTONCOUNT                  = 0x418,
     TB_COMMANDTOINDEX               = 0x419,
     TB_SAVERESTOREA                 = 0x41A,
     TB_CUSTOMIZE                    = 0x41B,
     TB_ADDSTRINGA                   = 0x41C,
     TB_GETITEMRECT                  = 0x41D,
     TB_BUTTONSTRUCTSIZE             = 0x41E,
     TB_SETBUTTONSIZE                = 0x41F,
     TB_SETBITMAPSIZE                = 0x420,
     TB_AUTOSIZE                     = 0x421,
     TB_GETTOOLTIPS                  = 0x423,
     TB_SETTOOLTIPS                  = 0x424,
     TB_SETPARENT                    = 0x425,
     TB_SETROWS                      = 0x427,
     TB_GETROWS                      = 0x428,
     TB_GETBITMAPFLAGS               = 0x429,
     TB_SETCMDID                     = 0x42A,
     TB_CHANGEBITMAP                 = 0x42B,
     TB_GETBITMAP                    = 0x42C,
     TB_GETBUTTONTEXTA               = 0x42D,
     TB_REPLACEBITMAP                = 0x42E,
     TB_SETINDENT                    = 0x42F,
     TB_SETIMAGELIST                 = 0x430,
     TB_GETIMAGELIST                 = 0x431,
     TB_LOADIMAGES                   = 0x432,
     TB_GETRECT                      = 0x433,
     TB_SETHOTIMAGELIST              = 0x434,
     TB_GETHOTIMAGELIST              = 0x435,
     TB_SETDISABLEDIMAGELIST         = 0x436,
     TB_GETDISABLEDIMAGELIST         = 0x437,
     TB_SETSTYLE                     = 0x438,
     TB_GETSTYLE                     = 0x439,
     TB_GETBUTTONSIZE                = 0x43A,
     TB_SETBUTTONWIDTH               = 0x43B,
     TB_SETMAXTEXTROWS               = 0x43C,
     TB_GETTEXTROWS                  = 0x43D,
     TB_GETOBJECT                    = 0x43E,
     TB_GETBUTTONINFOW               = 0x43F,
     TB_SETBUTTONINFOW               = 0x440,
     TB_GETBUTTONINFOA               = 0x441,
     TB_SETBUTTONINFOA               = 0x442,
     TB_INSERTBUTTONW                = 0x443,
     TB_ADDBUTTONSW                  = 0x444,
     TB_HITTEST                      = 0x445,
     TB_SETDRAWTEXTFLAGS             = 0x446,
     TB_GETHOTITEM                   = 0x447,
     TB_SETHOTITEM                   = 0x448,
     TB_SETANCHORHIGHLIGHT           = 0x449,
     TB_GETANCHORHIGHLIGHT           = 0x44A,
     TB_GETBUTTONTEXTW               = 0x44B,
     TB_SAVERESTOREW                 = 0x44C,
     TB_ADDSTRINGW                   = 0x44D,
     TB_MAPACCELERATORA              = 0x44E,
     TB_GETINSERTMARK                = 0x44F,
     TB_SETINSERTMARK                = 0x450,
     TB_INSERTMARKHITTEST            = 0x451,
     TB_MOVEBUTTON                   = 0x452,
     TB_GETMAXSIZE                   = 0x453,
     TB_SETEXTENDEDSTYLE             = 0x454,
     TB_GETEXTENDEDSTYLE             = 0x455,
     TB_GETPADDING                   = 0x456,
     TB_SETPADDING                   = 0x457,
     TB_SETINSERTMARKCOLOR           = 0x458,
     TB_GETINSERTMARKCOLOR           = 0x459,
     TB_MAPACCELERATORW              = 0x45A,
     TB_GETSTRINGW                   = 0x45B,
     TB_GETSTRINGA                   = 0x45C,
     TB_SETBOUNDINGSIZE              = 0x45D,
     TB_SETHOTITEM2                  = 0x45E,
     TB_HASACCELERATOR               = 0x45F,
     TB_SETLISTGAP                   = 0x460,
     TB_GETIMAGELISTCOUNT            = 0x462,
     TB_GETIDEALSIZE                 = 0x463,
     TB_GETMETRICS                   = 0x465,
     TB_SETMETRICS                   = 0x466,
     TB_GETITEMDROPDOWNRECT          = 0x467,
     TB_SETPRESSEDIMAGELIST          = 0x468,
     TB_GETPRESSEDIMAGELIST          = 0x469,
     TB_SETWINDOWTHEME               = 0x200B,
     EM_CANPASTE                     = 0x432,
     EM_DISPLAYBAND                  = 0x433,
     EM_EXGETSEL                     = 0x434,
     EM_EXLIMITTEXT                  = 0x435,
     EM_EXLINEFROMCHAR               = 0x436,
     EM_EXSETSEL                     = 0x437,
     EM_FINDTEXT                     = 0x438,
     EM_FORMATRANGE                  = 0x439,
     EM_GETCHARFORMAT                = 0x43A,
     EM_GETEVENTMASK                 = 0x43B,
     EM_GETOLEINTERFACE              = 0x43C,
     EM_GETPARAFORMAT                = 0x43D,
     EM_GETSELTEXT                   = 0x43E,
     EM_HIDESELECTION                = 0x43F,
     EM_PASTESPECIAL                 = 0x440,
     EM_REQUESTRESIZE                = 0x441,
     EM_SELECTIONTYPE                = 0x442,
     EM_SETBKGNDCOLOR                = 0x443,
     EM_SETCHARFORMAT                = 0x444,
     EM_SETEVENTMASK                 = 0x445,
     EM_SETOLECALLBACK               = 0x446,
     EM_SETPARAFORMAT                = 0x447,
     EM_SETTARGETDEVICE              = 0x448,
     EM_STREAMIN                     = 0x449,
     EM_STREAMOUT                    = 0x44A,
     EM_GETTEXTRANGE                 = 0x44B,
     EM_FINDWORDBREAK                = 0x44C,
     EM_SETOPTIONS                   = 0x44D,
     EM_GETOPTIONS                   = 0x44E,
     EM_FINDTEXTEX                   = 0x44F,
     EM_GETWORDBREAKPROCEX           = 0x450,
     EM_SETWORDBREAKPROCEX           = 0x451,
     EM_SETUNDOLIMIT                 = 0x452,
     EM_REDO                         = 0x454,
     EM_CANREDO                      = 0x455,
     EM_GETUNDONAME                  = 0x456,
     EM_GETREDONAME                  = 0x457,
     EM_STOPGROUPTYPING              = 0x458,
     EM_SETTEXTMODE                  = 0x459,
     EM_GETTEXTMODE                  = 0x45A,
     EM_AUTOURLDETECT                = 0x45B,
     EM_GETAUTOURLDETECT             = 0x45C,
     EM_SETPALETTE                   = 0x45D,
     EM_GETTEXTEX                    = 0x45E,
     EM_GETTEXTLENGTHEX              = 0x45F,
     EM_SHOWSCROLLBAR                = 0x460,
     EM_SETTEXTEX                    = 0x461,
     EM_SETPUNCTUATION               = 0x464,
     EM_GETPUNCTUATION               = 0x465,
     EM_SETWORDWRAPMODE              = 0x466,
     EM_GETWORDWRAPMODE              = 0x467,
     EM_SETIMECOLOR                  = 0x468,
     EM_GETIMECOLOR                  = 0x469,
     EM_SETIMEOPTIONS                = 0x46A,
     EM_GETIMEOPTIONS                = 0x46B,
     EM_CONVPOSITION                 = 0x46C,
     EM_SETLANGOPTIONS               = 0x478,
     EM_GETLANGOPTIONS               = 0x479,
     EM_GETIMECOMPMODE               = 0x47A,
     EM_FINDTEXTW                    = 0x47B,
     EM_FINDTEXTEXW                  = 0x47C,
     EM_RECONVERSION                 = 0x47D,
     EM_SETIMEMODEBIAS               = 0x47E,
     EM_GETIMEMODEBIAS               = 0x47F,
     EM_SETBIDIOPTIONS               = 0x4C8,
     EM_GETBIDIOPTIONS               = 0x4C9,
     EM_SETTYPOGRAPHYOPTIONS         = 0x4CA,
     EM_GETTYPOGRAPHYOPTIONS         = 0x4CB,
     EM_SETEDITSTYLE                 = 0x4CC,
     EM_GETEDITSTYLE                 = 0x4CD,
     EM_OUTLINE                      = 0x4DC,
     EM_GETSCROLLPOS                 = 0x4DD,
     EM_SETSCROLLPOS                 = 0x4DE,
     EM_SETFONTSIZE                  = 0x4DF,
     EM_GETZOOM                      = 0x4E0,
     EM_SETZOOM                      = 0x4E1,
     EM_GETVIEWKIND                  = 0x4E2,
     EM_SETVIEWKIND                  = 0x4E3,
     EM_GETPAGE                      = 0x4E4,
     EM_SETPAGE                      = 0x4E5,
     EM_GETHYPHENATEINFO             = 0x4E6,
     EM_SETHYPHENATEINFO             = 0x4E7,
     EM_INSERTTABLE                  = 0x4E8,
     EM_GETAUTOCORRECTPROC           = 0x4E9,
     EM_SETAUTOCORRECTPROC           = 0x4EA,
     EM_GETPAGEROTATE                = 0x4EB,
     EM_SETPAGEROTATE                = 0x4EC,
     EM_GETCTFMODEBIAS               = 0x4ED,
     EM_SETCTFMODEBIAS               = 0x4EE,
     EM_GETCTFOPENSTATUS             = 0x4F0,
     EM_SETCTFOPENSTATUS             = 0x4F1,
     EM_GETIMECOMPTEXT               = 0x4F2,
     EM_ISIME                        = 0x4F3,
     EM_GETIMEPROPERTY               = 0x4F4,
     EM_CALLAUTOCORRECTPROC          = 0x4FF,
     EM_GETTABLEPARMS                = 0x509,
     EM_GETQUERYRTFOBJ               = 0x50D,
     EM_SETQUERYRTFOBJ               = 0x50E,
     EM_SETEDITSTYLEEX               = 0x513,
     EM_GETEDITSTYLEEX               = 0x514,
     EM_GETSTORYTYPE                 = 0x522,
     EM_SETSTORYTYPE                 = 0x523,
     EM_GETELLIPSISMODE              = 0x531,
     EM_SETELLIPSISMODE              = 0x532,
     EM_SETTABLEPARMS                = 0x533,
     EM_GETTOUCHOPTIONS              = 0x536,
     EM_SETTOUCHOPTIONS              = 0x537,
     EM_INSERTIMAGE                  = 0x53A,
     EM_SETUIANAME                   = 0x540,
     EM_GETELLIPSISSTATE             = 0x542,
     TAPI_REPLY                      = 0x463,
     IPM_CLEARADDRESS                = 0x464,
     IPM_SETADDRESS                  = 0x465,
     IPM_GETADDRESS                  = 0x466,
     IPM_SETRANGE                    = 0x467,
     IPM_SETFOCUS                    = 0x468,
     IPM_ISBLANK                     = 0x469,
     CDM_FIRST                       = 0x464,
     CDM_GETSPEC                     = 0x464,
     CDM_GETFILEPATH                 = 0x465,
     CDM_GETFOLDERPATH               = 0x466,
     CDM_GETFOLDERIDLIST             = 0x467,
     CDM_SETCONTROLTEXT              = 0x468,
     CDM_HIDECONTROL                 = 0x469,
     CDM_SETDEFEXT                   = 0x46A,
     CDM_LAST                        = 0x4C8,
     BFFM_SETSTATUSTEXTA             = 0x464,
     BFFM_ENABLEOK                   = 0x465,
     BFFM_SETSELECTIONA              = 0x466,
     BFFM_SETSELECTIONW              = 0x467,
     BFFM_SETSTATUSTEXTW             = 0x468,
     BFFM_SETOKTEXT                  = 0x469,
     BFFM_SETEXPANDED                = 0x46A,
     ACM_OPENA                       = 0x464,
     ACM_PLAY                        = 0x465,
     ACM_STOP                        = 0x466,
     ACM_OPENW                       = 0x467,
     ACM_ISPLAYING                   = 0x468,
     WM_CAP_UNICODE_START            = 0x464,
     WM_CAP_SET_CALLBACK_ERRORW      = 0x466,
     WM_CAP_SET_CALLBACK_STATUSW     = 0x467,
     WM_CAP_DRIVER_GET_NAMEW         = 0x470,
     WM_CAP_DRIVER_GET_VERSIONW      = 0x471,
     WM_CAP_FILE_SET_CAPTURE_FILEW   = 0x478,
     WM_CAP_FILE_GET_CAPTURE_FILEW   = 0x479,
     WM_CAP_FILE_SAVEASW             = 0x47B,
     WM_CAP_FILE_SAVEDIBW            = 0x47D,
     WM_CAP_SET_MCI_DEVICEW          = 0x4A6,
     WM_CAP_GET_MCI_DEVICEW          = 0x4A7,
     WM_CAP_PAL_OPENW                = 0x4B4,
     WM_CAP_PAL_SAVEW                = 0x4B5,
     PSM_SETCURSEL                   = 0x465,
     PSM_REMOVEPAGE                  = 0x466,
     PSM_ADDPAGE                     = 0x467,
     PSM_CHANGED                     = 0x468,
     PSM_RESTARTWINDOWS              = 0x469,
     PSM_REBOOTSYSTEM                = 0x46A,
     PSM_CANCELTOCLOSE               = 0x46B,
     PSM_QUERYSIBLINGS               = 0x46C,
     PSM_UNCHANGED                   = 0x46D,
     PSM_APPLY                       = 0x46E,
     PSM_SETTITLEA                   = 0x46F,
     PSM_SETWIZBUTTONS               = 0x470,
     PSM_PRESSBUTTON                 = 0x471,
     PSM_SETCURSELID                 = 0x472,
     PSM_SETFINISHTEXTA              = 0x473,
     PSM_GETTABCONTROL               = 0x474,
     PSM_ISDIALOGMESSAGE             = 0x475,
     PSM_GETCURRENTPAGEHWND          = 0x476,
     PSM_INSERTPAGE                  = 0x477,
     PSM_SETTITLEW                   = 0x478,
     PSM_SETFINISHTEXTW              = 0x479,
     PSM_SETHEADERTITLEA             = 0x47D,
     PSM_SETHEADERTITLEW             = 0x47E,
     PSM_SETHEADERSUBTITLEA          = 0x47F,
     PSM_SETHEADERSUBTITLEW          = 0x480,
     PSM_HWNDTOINDEX                 = 0x481,
     PSM_INDEXTOHWND                 = 0x482,
     PSM_PAGETOINDEX                 = 0x483,
     PSM_INDEXTOPAGE                 = 0x484,
     PSM_IDTOINDEX                   = 0x485,
     PSM_INDEXTOID                   = 0x486,
     PSM_GETRESULT                   = 0x487,
     PSM_RECALCPAGESIZES             = 0x488,
     PSM_SETNEXTTEXTW                = 0x489,
     PSM_SHOWWIZBUTTONS              = 0x48A,
     PSM_ENABLEWIZBUTTONS            = 0x48B,
     PSM_SETBUTTONTEXTW              = 0x48C,
     UDM_SETRANGE                    = 0x465,
     UDM_GETRANGE                    = 0x466,
     UDM_SETPOS                      = 0x467,
     UDM_GETPOS                      = 0x468,
     UDM_SETBUDDY                    = 0x469,
     UDM_GETBUDDY                    = 0x46A,
     UDM_SETACCEL                    = 0x46B,
     UDM_GETACCEL                    = 0x46C,
     UDM_SETBASE                     = 0x46D,
     UDM_GETBASE                     = 0x46E,
     UDM_SETRANGE32                  = 0x46F,
     UDM_GETRANGE32                  = 0x470,
     UDM_SETPOS32                    = 0x471,
     UDM_GETPOS32                    = 0x472,
     MCIWNDM_GETZOOM                 = 0x46D,
     MCIWNDM_REALIZE                 = 0x476,
     MCIWNDM_SETTIMEFORMATA          = 0x477,
     MCIWNDM_GETTIMEFORMATA          = 0x478,
     MCIWNDM_VALIDATEMEDIA           = 0x479,
     MCIWNDM_PLAYTO                  = 0x47B,
     MCIWNDM_GETFILENAMEA            = 0x47C,
     MCIWNDM_GETDEVICEA              = 0x47D,
     MCIWNDM_GETPALETTE              = 0x47E,
     MCIWNDM_SETPALETTE              = 0x47F,
     MCIWNDM_GETERRORA               = 0x480,
     MCIWNDM_SETINACTIVETIMER        = 0x483,
     MCIWNDM_GETINACTIVETIMER        = 0x485,
     MCIWNDM_GET_SOURCE              = 0x48C,
     MCIWNDM_PUT_SOURCE              = 0x48D,
     MCIWNDM_GET_DEST                = 0x48E,
     MCIWNDM_PUT_DEST                = 0x48F,
     MCIWNDM_CAN_PLAY                = 0x490,
     MCIWNDM_CAN_WINDOW              = 0x491,
     MCIWNDM_CAN_RECORD              = 0x492,
     MCIWNDM_CAN_SAVE                = 0x493,
     MCIWNDM_CAN_EJECT               = 0x494,
     MCIWNDM_CAN_CONFIG              = 0x495,
     MCIWNDM_PALETTEKICK             = 0x496,
     MCIWNDM_NOTIFYMODE              = 0x4C8,
     MCIWNDM_NOTIFYMEDIA             = 0x4CB,
     MCIWNDM_NOTIFYERROR             = 0x4CD,
     MCIWNDM_SETTIMEFORMATW          = 0x4DB,
     MCIWNDM_GETTIMEFORMATW          = 0x4DC,
     MCIWNDM_GETFILENAMEW            = 0x4E0,
     MCIWNDM_GETDEVICEW              = 0x4E1,
     MCIWNDM_GETERRORW               = 0x4E4,
     DL_BEGINDRAG                    = 0x485,
     DL_DRAGGING                     = 0x486,
     DL_DROPPED                      = 0x487,
     DL_CANCELDRAG                   = 0x488,
     IE_GETINK                       = 0x496,
     IE_MSGFIRST                     = 0x496,
     IE_SETINK                       = 0x497,
     IE_GETPENTIP                    = 0x498,
     IE_SETPENTIP                    = 0x499,
     IE_GETERASERTIP                 = 0x49A,
     IE_SETERASERTIP                 = 0x49B,
     IE_GETBKGND                     = 0x49C,
     IE_SETBKGND                     = 0x49D,
     IE_GETGRIDORIGIN                = 0x49E,
     IE_SETGRIDORIGIN                = 0x49F,
     IE_GETGRIDPEN                   = 0x4A0,
     IE_SETGRIDPEN                   = 0x4A1,
     IE_GETGRIDSIZE                  = 0x4A2,
     IE_SETGRIDSIZE                  = 0x4A3,
     IE_GETMODE                      = 0x4A4,
     IE_SETMODE                      = 0x4A5,
     IE_GETINKRECT                   = 0x4A6,
     IE_GETAPPDATA                   = 0x4B8,
     IE_SETAPPDATA                   = 0x4B9,
     IE_GETDRAWOPTS                  = 0x4BA,
     IE_SETDRAWOPTS                  = 0x4BB,
     IE_GETFORMAT                    = 0x4BC,
     IE_SETFORMAT                    = 0x4BD,
     IE_GETINKINPUT                  = 0x4BE,
     IE_SETINKINPUT                  = 0x4BF,
     IE_GETNOTIFY                    = 0x4C0,
     IE_SETNOTIFY                    = 0x4C1,
     IE_GETRECOG                     = 0x4C2,
     IE_SETRECOG                     = 0x4C3,
     IE_GETSECURITY                  = 0x4C4,
     IE_SETSECURITY                  = 0x4C5,
     IE_GETSEL                       = 0x4C6,
     IE_SETSEL                       = 0x4C7,
     IE_DOCOMMAND                    = 0x4C8,
     IE_GETCOMMAND                   = 0x4C9,
     IE_GETCOUNT                     = 0x4CA,
     IE_GETGESTURE                   = 0x4CB,
     IE_GETMENU                      = 0x4CC,
     IE_GETPAINTDC                   = 0x4CD,
     IE_GETPDEVENT                   = 0x4CE,
     IE_GETSELCOUNT                  = 0x4CF,
     IE_GETSELITEMS                  = 0x4D0,
     IE_GETSTYLE                     = 0x4D1,
     FM_GETFOCUS                     = 0x600,
     FM_GETDRIVEINFOA                = 0x601,
     FM_GETSELCOUNT                  = 0x602,
     FM_GETSELCOUNTLFN               = 0x603,
     FM_GETFILESELA                  = 0x604,
     FM_GETFILESELLFNA               = 0x605,
     FM_REFRESH_WINDOWS              = 0x606,
     FM_RELOAD_EXTENSIONS            = 0x607,
     FM_GETDRIVEINFOW                = 0x611,
     FM_GETFILESELW                  = 0x614,
     FM_GETFILESELLFNW               = 0x615,
     WLX_WM_SAS                      = 0x659,
     SM_GETSELCOUNT                  = 0x7E8,
     SM_GETSERVERSELA                = 0x7E9,
     SM_GETSERVERSELW                = 0x7EA,
     SM_GETCURFOCUSA                 = 0x7EB,
     SM_GETCURFOCUSW                 = 0x7EC,
     SM_GETOPTIONS                   = 0x7ED,
     WM_CPL_LAUNCH                   = 0x7E8,
     WM_CPL_LAUNCHED                 = 0x7E9,
     UM_GETSELCOUNT                  = 0x7E8,
     UM_GETUSERSELA                  = 0x7E9,
     UM_GETUSERSELW                  = 0x7EA,
     UM_GETGROUPSELA                 = 0x7EB,
     UM_GETGROUPSELW                 = 0x7EC,
     UM_GETCURFOCUSA                 = 0x7ED,
     UM_GETCURFOCUSW                 = 0x7EE,
     UM_GETOPTIONS                   = 0x7EF,
     UM_GETOPTIONS2                  = 0x7F0,
     LVM_FIRST                       = 0x1000,
     LVM_GETBKCOLOR                  = 0x1000,
     LVM_SETBKCOLOR                  = 0x1001,
     LVM_GETIMAGELIST                = 0x1002,
     LVM_SETIMAGELIST                = 0x1003,
     LVM_GETITEMCOUNT                = 0x1004,
     LVM_GETITEMA                    = 0x1005,
     LVM_SETITEMA                    = 0x1006,
     LVM_INSERTITEMA                 = 0x1007,
     LVM_DELETEITEM                  = 0x1008,
     LVM_DELETEALLITEMS              = 0x1009,
     LVM_GETCALLBACKMASK             = 0x100A,
     LVM_SETCALLBACKMASK             = 0x100B,
     LVM_GETNEXTITEM                 = 0x100C,
     LVM_FINDITEMA                   = 0x100D,
     LVM_GETITEMRECT                 = 0x100E,
     LVM_SETITEMPOSITION             = 0x100F,
     LVM_GETITEMPOSITION             = 0x1010,
     LVM_GETSTRINGWIDTHA             = 0x1011,
     LVM_HITTEST                     = 0x1012,
     LVM_ENSUREVISIBLE               = 0x1013,
     LVM_SCROLL                      = 0x1014,
     LVM_REDRAWITEMS                 = 0x1015,
     LVM_ARRANGE                     = 0x1016,
     LVM_EDITLABELA                  = 0x1017,
     LVM_GETEDITCONTROL              = 0x1018,
     LVM_GETCOLUMNA                  = 0x1019,
     LVM_SETCOLUMNA                  = 0x101A,
     LVM_INSERTCOLUMNA               = 0x101B,
     LVM_DELETECOLUMN                = 0x101C,
     LVM_GETCOLUMNWIDTH              = 0x101D,
     LVM_SETCOLUMNWIDTH              = 0x101E,
     LVM_GETHEADER                   = 0x101F,
     LVM_CREATEDRAGIMAGE             = 0x1021,
     LVM_GETVIEWRECT                 = 0x1022,
     LVM_GETTEXTCOLOR                = 0x1023,
     LVM_SETTEXTCOLOR                = 0x1024,
     LVM_GETTEXTBKCOLOR              = 0x1025,
     LVM_SETTEXTBKCOLOR              = 0x1026,
     LVM_GETTOPINDEX                 = 0x1027,
     LVM_GETCOUNTPERPAGE             = 0x1028,
     LVM_GETORIGIN                   = 0x1029,
     LVM_UPDATE                      = 0x102A,
     LVM_SETITEMSTATE                = 0x102B,
     LVM_GETITEMSTATE                = 0x102C,
     LVM_GETITEMTEXTA                = 0x102D,
     LVM_SETITEMTEXTA                = 0x102E,
     LVM_SETITEMCOUNT                = 0x102F,
     LVM_SORTITEMS                   = 0x1030,
     LVM_SETITEMPOSITION32           = 0x1031,
     LVM_GETSELECTEDCOUNT            = 0x1032,
     LVM_GETITEMSPACING              = 0x1033,
     LVM_GETISEARCHSTRINGA           = 0x1034,
     LVM_SETICONSPACING              = 0x1035,
     LVM_SETEXTENDEDLISTVIEWSTYLE    = 0x1036,
     LVM_GETEXTENDEDLISTVIEWSTYLE    = 0x1037,
     LVM_GETSUBITEMRECT              = 0x1038,
     LVM_SUBITEMHITTEST              = 0x1039,
     LVM_SETCOLUMNORDERARRAY         = 0x103A,
     LVM_GETCOLUMNORDERARRAY         = 0x103B,
     LVM_SETHOTITEM                  = 0x103C,
     LVM_GETHOTITEM                  = 0x103D,
     LVM_SETHOTCURSOR                = 0x103E,
     LVM_GETHOTCURSOR                = 0x103F,
     LVM_APPROXIMATEVIEWRECT         = 0x1040,
     LVM_SETWORKAREAS                = 0x1041,
     LVM_GETSELECTIONMARK            = 0x1042,
     LVM_SETSELECTIONMARK            = 0x1043,
     LVM_SETBKIMAGEA                 = 0x1044,
     LVM_GETBKIMAGEA                 = 0x1045,
     LVM_GETWORKAREAS                = 0x1046,
     LVM_SETHOVERTIME                = 0x1047,
     LVM_GETHOVERTIME                = 0x1048,
     LVM_GETNUMBEROFWORKAREAS        = 0x1049,
     LVM_SETTOOLTIPS                 = 0x104A,
     LVM_GETITEMW                    = 0x104B,
     LVM_SETITEMW                    = 0x104C,
     LVM_INSERTITEMW                 = 0x104D,
     LVM_GETTOOLTIPS                 = 0x104E,
     LVM_SORTITEMSEX                 = 0x1051,
     LVM_FINDITEMW                   = 0x1053,
     LVM_GETSTRINGWIDTHW             = 0x1057,
     LVM_GETGROUPSTATE               = 0x105C,
     LVM_GETFOCUSEDGROUP             = 0x105D,
     LVM_GETCOLUMNW                  = 0x105F,
     LVM_SETCOLUMNW                  = 0x1060,
     LVM_INSERTCOLUMNW               = 0x1061,
     LVM_GETGROUPRECT                = 0x1062,
     LVM_GETITEMTEXTW                = 0x1073,
     LVM_SETITEMTEXTW                = 0x1074,
     LVM_GETISEARCHSTRINGW           = 0x1075,
     LVM_EDITLABELW                  = 0x1076,
     LVM_GETBKIMAGEW                 = 0x108B,
     LVM_SETSELECTEDCOLUMN           = 0x108C,
     LVM_SETTILEWIDTH                = 0x108D,
     LVM_SETVIEW                     = 0x108E,
     LVM_GETVIEW                     = 0x108F,
     LVM_INSERTGROUP                 = 0x1091,
     LVM_SETGROUPINFO                = 0x1093,
     LVM_GETGROUPINFO                = 0x1095,
     LVM_REMOVEGROUP                 = 0x1096,
     LVM_MOVEGROUP                   = 0x1097,
     LVM_GETGROUPCOUNT               = 0x1098,
     LVM_GETGROUPINFOBYINDEX         = 0x1099,
     LVM_MOVEITEMTOGROUP             = 0x109A,
     LVM_SETGROUPMETRICS             = 0x109B,
     LVM_GETGROUPMETRICS             = 0x109C,
     LVM_ENABLEGROUPVIEW             = 0x109D,
     LVM_SORTGROUPS                  = 0x109E,
     LVM_INSERTGROUPSORTED           = 0x109F,
     LVM_REMOVEALLGROUPS             = 0x10A0,
     LVM_HASGROUP                    = 0x10A1,
     LVM_SETTILEVIEWINFO             = 0x10A2,
     LVM_GETTILEVIEWINFO             = 0x10A3,
     LVM_SETTILEINFO                 = 0x10A4,
     LVM_GETTILEINFO                 = 0x10A5,
     LVM_SETINSERTMARK               = 0x10A6,
     LVM_GETINSERTMARK               = 0x10A7,
     LVM_INSERTMARKHITTEST           = 0x10A8,
     LVM_GETINSERTMARKRECT           = 0x10A9,
     LVM_SETINSERTMARKCOLOR          = 0x10AA,
     LVM_GETINSERTMARKCOLOR          = 0x10AB,
     LVM_SETINFOTIP                  = 0x10AD,
     LVM_GETSELECTEDCOLUMN           = 0x10AE,
     LVM_ISGROUPVIEWENABLED          = 0x10AF,
     LVM_GETOUTLINECOLOR             = 0x10B0,
     LVM_SETOUTLINECOLOR             = 0x10B1,
     LVM_CANCELEDITLABEL             = 0x10B3,
     LVM_MAPINDEXTOID                = 0x10B4,
     LVM_MAPIDTOINDEX                = 0x10B5,
     LVM_ISITEMVISIBLE               = 0x10B6,
     LVM_GETEMPTYTEXT                = 0x10CC,
     LVM_GETFOOTERRECT               = 0x10CD,
     LVM_GETFOOTERINFO               = 0x10CE,
     LVM_GETFOOTERITEMRECT           = 0x10CF,
     LVM_GETFOOTERITEM               = 0x10D0,
     LVM_GETITEMINDEXRECT            = 0x10D1,
     LVM_SETITEMINDEXSTATE           = 0x10D2,
     LVM_GETNEXTITEMINDEX            = 0x10D3,
     LVM_SETUNICODEFORMAT            = 0x2005,
     LVM_GETUNICODEFORMAT            = 0x2006,
     OCM__BASE                       = 0x2000,
     OCM_CTLCOLOR                    = 0x2019,
     OCM_DRAWITEM                    = 0x202B,
     OCM_MEASUREITEM                 = 0x202C,
     OCM_DELETEITEM                  = 0x202D,
     OCM_VKEYTOITEM                  = 0x202E,
     OCM_CHARTOITEM                  = 0x202F,
     OCM_COMPAREITEM                 = 0x2039,
     OCM_NOTIFY                      = 0x204E,
     OCM_COMMAND                     = 0x2111,
     OCM_HSCROLL                     = 0x2114,
     OCM_VSCROLL                     = 0x2115,
     OCM_CTLCOLORMSGBOX              = 0x2132,
     OCM_CTLCOLOREDIT                = 0x2133,
     OCM_CTLCOLORLISTBOX             = 0x2134,
     OCM_CTLCOLORBTN                 = 0x2135,
     OCM_CTLCOLORDLG                 = 0x2136,
     OCM_CTLCOLORSCROLLBAR           = 0x2137,
     OCM_CTLCOLORSTATIC              = 0x2138,
     OCM_PARENTNOTIFY                = 0x2210,
     WM_APP                          = 0x8000,
     WM_RASDIALEVENT                 = 0xCCCD,
     CBEM_DELETEITEM                 = 0x144,
     CBEM_SETUNICODEFORMAT           = 0x2005,
     CBEM_GETUNICODEFORMAT           = 0x2006,
     IE_GETMODIFY                    = 0xB8,
     IE_SETMODIFY                    = 0xB9,
     IE_CANUNDO                      = 0xC6,
     IE_UNDO                         = 0xC7,
     IE_EMPTYUNDOBUFFER              = 0xCD,
     LVM_SETBKIMAGEW                 = 0x108A,
     MCIWNDM_GETDEVICEID             = 0x464,
     MCIWNDM_GETSTART                = 0x467,
     MCIWNDM_GETLENGTH               = 0x468,
     MCIWNDM_GETEND                  = 0x469,
     MCIWNDM_EJECT                   = 0x46B,
     MCIWNDM_SETZOOM                 = 0x46C,
     MCIWNDM_SETVOLUME               = 0x46E,
     MCIWNDM_GETVOLUME               = 0x46F,
     MCIWNDM_SETSPEED                = 0x470,
     MCIWNDM_GETSPEED                = 0x471,
     MCIWNDM_SETREPEAT               = 0x472,
     MCIWNDM_GETREPEAT               = 0x473,
     MCIWNDM_PLAYFROM                = 0x47A,
     MCIWNDM_SETTIMERS               = 0x481,
     MCIWNDM_SETACTIVETIMER          = 0x482,
     MCIWNDM_GETACTIVETIMER          = 0x484,
     MCIWNDM_CHANGESTYLES            = 0x487,
     MCIWNDM_GETSTYLES               = 0x488,
     MCIWNDM_GETALIAS                = 0x489,
     MCIWNDM_PLAYREVERSE             = 0x48B,
     MCIWNDM_OPENINTERFACE           = 0x497,
     MCIWNDM_SETOWNER                = 0x498,
     MCIWNDM_SENDSTRINGA             = 0x465,
     MCIWNDM_GETPOSITIONA            = 0x466,
     MCIWNDM_GETMODEA                = 0x46A,
     MCIWNDM_NEWA                    = 0x486,
     MCIWNDM_RETURNSTRINGA           = 0x48A,
     MCIWNDM_OPENA                   = 0x499,
     MCIWNDM_SENDSTRINGW             = 0x4C9,
     MCIWNDM_GETPOSITIONW            = 0x4CA,
     MCIWNDM_GETMODEW                = 0x4CE,
     MCIWNDM_NEWW                    = 0x4EA,
     MCIWNDM_RETURNSTRINGW           = 0x4EE,
     MCIWNDM_OPENW                   = 0x4FC,
     MCIWNDM_NOTIFYPOS               = 0x4C9,
     MCIWNDM_NOTIFYSIZE              = 0x4CA,
     MSG_FTS_JUMP_HASH               = 0x420,
     MSG_FTS_GET_TITLE               = 0x422,
     PBM_SETBKCOLOR                  = 0x2001,
     RB_SETCOLORSCHEME               = 0x2002,
     RB_GETCOLORSCHEME               = 0x2003,
     RB_GETDROPTARGET                = 0x2004,
     RB_SETUNICODEFORMAT             = 0x2005,
     RB_GETUNICODEFORMAT             = 0x2006,
     SB_SETUNICODEFORMAT             = 0x2005,
     SB_GETUNICODEFORMAT             = 0x2006,
     SB_SETBKCOLOR                   = 0x2001,
     STM_MSGMAX                      = 0x174,
     TBM_SETUNICODEFORMAT            = 0x2005,
     TBM_GETUNICODEFORMAT            = 0x2006,
     TB_SETCOLORSCHEME               = 0x2002,
     TB_GETCOLORSCHEME               = 0x2003,
     TB_SETUNICODEFORMAT             = 0x2005,
     TB_GETUNICODEFORMAT             = 0x2006,
     UDM_SETUNICODEFORMAT            = 0x2005,
     UDM_GETUNICODEFORMAT            = 0x2006,
     WM_CAP_START                    = 0x400,
     WM_CAP_GET_CAPSTREAMPTR         = 0x401,
     WM_CAP_SET_CALLBACK_ERRORA      = 0x402,
     WM_CAP_SET_CALLBACK_STATUSA     = 0x403,
     WM_CAP_SET_CALLBACK_YIELD       = 0x404,
     WM_CAP_SET_CALLBACK_FRAME       = 0x405,
     WM_CAP_SET_CALLBACK_VIDEOSTREAM = 0x406,
     WM_CAP_SET_CALLBACK_WAVESTREAM  = 0x407,
     WM_CAP_GET_USER_DATA            = 0x408,
     WM_CAP_SET_USER_DATA            = 0x409,
     WM_CAP_DRIVER_CONNECT           = 0x40A,
     WM_CAP_DRIVER_DISCONNECT        = 0x40B,
     WM_CAP_DRIVER_GET_NAMEA         = 0x40C,
     WM_CAP_DRIVER_GET_VERSIONA      = 0x40D,
     WM_CAP_DRIVER_GET_CAPS          = 0x40E,
     WM_CAP_FILE_SET_CAPTURE_FILEA   = 0x414,
     WM_CAP_FILE_GET_CAPTURE_FILEA   = 0x415,
     WM_CAP_FILE_SAVEASA             = 0x417,
     WM_CAP_FILE_SAVEDIBA            = 0x419,
     WM_CAP_FILE_ALLOCATE            = 0x416,
     WM_CAP_FILE_SET_INFOCHUNK       = 0x418,
     WM_CAP_EDIT_COPY                = 0x41E,
     WM_CAP_SET_AUDIOFORMAT          = 0x423,
     WM_CAP_GET_AUDIOFORMAT          = 0x424,
     WM_CAP_DLG_VIDEOFORMAT          = 0x429,
     WM_CAP_DLG_VIDEOSOURCE          = 0x42A,
     WM_CAP_DLG_VIDEODISPLAY         = 0x42B,
     WM_CAP_GET_VIDEOFORMAT          = 0x42C,
     WM_CAP_SET_VIDEOFORMAT          = 0x42D,
     WM_CAP_DLG_VIDEOCOMPRESSION     = 0x42E,
     WM_CAP_SET_PREVIEW              = 0x432,
     WM_CAP_SET_OVERLAY              = 0x433,
     WM_CAP_SET_PREVIEWRATE          = 0x434,
     WM_CAP_SET_SCALE                = 0x435,
     WM_CAP_GET_STATUS               = 0x436,
     WM_CAP_SET_SCROLL               = 0x437,
     WM_CAP_GRAB_FRAME               = 0x43C,
     WM_CAP_GRAB_FRAME_NOSTOP        = 0x43D,
     WM_CAP_SEQUENCE                 = 0x43E,
     WM_CAP_SEQUENCE_NOFILE          = 0x43F,
     WM_CAP_SET_SEQUENCE_SETUP       = 0x440,
     WM_CAP_GET_SEQUENCE_SETUP       = 0x441,
     WM_CAP_SET_MCI_DEVICEA          = 0x442,
     WM_CAP_GET_MCI_DEVICEA          = 0x443,
     WM_CAP_STOP                     = 0x444,
     WM_CAP_ABORT                    = 0x445,
     WM_CAP_SINGLE_FRAME_OPEN        = 0x446,
     WM_CAP_SINGLE_FRAME_CLOSE       = 0x447,
     WM_CAP_SINGLE_FRAME             = 0x448,
     WM_CAP_PAL_OPENA                = 0x450,
     WM_CAP_PAL_SAVEA                = 0x451,
     WM_CAP_PAL_PASTE                = 0x452,
     WM_CAP_PAL_AUTOCREATE           = 0x453,
     WM_CAP_PAL_MANUALCREATE         = 0x454,
     WM_CAP_SET_CALLBACK_CAPCONTROL  = 0x455,
     WM_CAP_UNICODE_END              = 0x4B5,
     WM_CAP_END                      = 0x4B5,
     WM_DDE_FIRST                    = 0x3E0,
     WM_DDE_LAST                     = 0x3E8,
     WM_DLGBORDER                    = 0x11EF,
     WM_DLGSUBCLASS                  = 0x11F0,
     WM_ADSPROP_NOTIFY_PAGEINIT      = 0x84D,
     WM_ADSPROP_NOTIFY_PAGEHWND      = 0x84E,
     WM_ADSPROP_NOTIFY_CHANGE        = 0x84F,
     WM_ADSPROP_NOTIFY_APPLY         = 0x850,
     WM_ADSPROP_NOTIFY_SETFOCUS      = 0x851,
     WM_ADSPROP_NOTIFY_FOREGROUND    = 0x852,
     WM_ADSPROP_NOTIFY_EXIT          = 0x853,
     WM_ADSPROP_NOTIFY_ERROR         = 0x856,
     WM_TOUCH                        = 0x240,
     WM_TOUCHHITTESTING              = 0x24D,
     WM_DPICHANGED                   = 0x2E0,
     WM_DPICHANGED_BEFOREPARENT      = 0x2E2,
     WM_DPICHANGED_AFTERPARENT       = 0x2E3,
     WM_CLIPBOARDUPDATE              = 0x31D,
     WM_DWMCOMPOSITIONCHANGED        = 0x31E,
     WM_DWMNCRENDERINGCHANGED        = 0x31F,
     WM_DWMCOLORIZATIONCOLORCHANGED  = 0x320,
     WM_DWMWINDOWMAXIMIZEDCHANGE     = 0x321,
     WM_DWMSENDICONICTHUMBNAIL       = 0x323,
     WM_DWMSENDICONICLIVEPREVIEWBITMAP = 0x326,
     WM_INPUT_DEVICE_CHANGE          = 0xFE,
     WM_GESTURE                      = 0x119,
     WM_GESTURENOTIFY                = 0x11A,
     WM_MOUSEHWHEEL                  = 0x20E,
     WM_POINTERDEVICECHANGE          = 0x238,
     WM_POINTERDEVICEINRANGE         = 0x239,
     WM_POINTERDEVICEOUTOFRANGE      = 0x23A,
     WM_NCPOINTERUPDATE              = 0x241,
     WM_NCPOINTERDOWN                = 0x242,
     WM_NCPOINTERUP                  = 0x243,
     WM_POINTERUPDATE                = 0x245,
     WM_POINTERDOWN                  = 0x246,
     WM_POINTERUP                    = 0x247,
     WM_POINTERENTER                 = 0x249,
     WM_POINTERLEAVE                 = 0x24A,
     WM_POINTERACTIVATE              = 0x24B,
     WM_POINTERCAPTURECHANGED        = 0x24C,
     WM_POINTERWHEEL                 = 0x24E,
     WM_POINTERHWHEEL                = 0x24F,
     WM_POINTERROUTEDTO              = 0x251,
     WM_POINTERROUTEDAWAY            = 0x252,
     WM_POINTERROUTEDRELEASED        = 0x253,
     WM_TABLET_ADDED                 = 0x2C8,
     WM_TABLET_DELETED               = 0x2C9,
     WM_TABLET_FLICK                 = 0x2CB,
     WM_TABLET_QUERYSYSTEMGESTURESTATUS = 0x2CC,
     WM_GETDPISCALEDSIZE             = 0x2E4,
     WM_GETTITLEBARINFOEX            = 0x33F,
 };